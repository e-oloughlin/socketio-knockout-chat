!function e(t,n,r){function o(s,a){if(!n[s]){if(!t[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return o(n||e)},c,c.exports,e,t,n,r)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,t,n){function r(){}t.exports=function(e,t,n){function o(e,r){if(o.count<=0)throw new Error("after called too many times");--o.count,e?(i=!0,t(e),t=n):0!==o.count||i||t(null,r)}var i=!1;return n=n||r,o.count=e,0===e?t():o}},{}],2:[function(e,t,n){t.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),s=t,a=0;s<n;s++,a++)i[a]=o[s];return i.buffer}},{}],3:[function(e,t,n){function r(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}t.exports=r,r.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},r.prototype.reset=function(){this.attempts=0},r.prototype.setMin=function(e){this.ms=e},r.prototype.setMax=function(e){this.max=e},r.prototype.setJitter=function(e){this.jitter=e}},{}],4:[function(e,t,n){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",t=new Uint8Array(256),r=0;r<e.length;r++)t[e.charCodeAt(r)]=r;n.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},n.decode=function(e){var n,r,o,i,s,a=.75*e.length,u=e.length,l=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var c=new ArrayBuffer(a),p=new Uint8Array(c);for(n=0;n<u;n+=4)r=t[e.charCodeAt(n)],o=t[e.charCodeAt(n+1)],i=t[e.charCodeAt(n+2)],s=t[e.charCodeAt(n+3)],p[l++]=r<<2|o>>4,p[l++]=(15&o)<<4|i>>2,p[l++]=(3&i)<<6|63&s;return c}}()},{}],5:[function(e,t,n){(function(e){function n(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}e[t]=r}}}function r(e,t){t=t||{};var r=new i;n(e);for(var o=0;o<e.length;o++)r.append(e[o]);return t.type?r.getBlob(t.type):r.getBlob()}function o(e,t){return n(e),new Blob(e,t||{})}var i=e.BlobBuilder||e.WebKitBlobBuilder||e.MSBlobBuilder||e.MozBlobBuilder,s=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),a=s&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),u=i&&i.prototype.append&&i.prototype.getBlob;t.exports=s?a?e.Blob:o:u?r:void 0}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],6:[function(e,t,n){},{}],7:[function(e,t,n){var r=[].slice;t.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var n=r.call(arguments,2);return function(){return t.apply(e,n.concat(r.call(arguments)))}}},{}],8:[function(e,t,n){function r(e){if(e)return o(e)}function o(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}void 0!==t&&(t.exports=r),r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks["$"+e];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var r,o=0;o<n.length;o++)if((r=n[o])===t||r.fn===t){n.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},{}],9:[function(e,t,n){t.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},{}],10:[function(e,t,n){t.exports=e("./lib/index")},{"./lib/index":11}],11:[function(e,t,n){t.exports=e("./socket"),t.exports.parser=e("engine.io-parser")},{"./socket":12,"engine.io-parser":23}],12:[function(e,t,n){(function(n){function r(e,t){if(!(this instanceof r))return new r(e,t);t=t||{},e&&"object"==typeof e&&(t=e,e=null),e?(e=c(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=c(t.host).host),this.secure=null!=t.secure?t.secure:n.location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.agent=t.agent||!1,this.hostname=t.hostname||(n.location?location.hostname:"localhost"),this.port=t.port||(n.location&&location.port?location.port:this.secure?443:80),this.query=t.query||{},"string"==typeof this.query&&(this.query=f.decode(this.query)),this.upgrade=!1!==t.upgrade,this.path=(t.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!t.forceJSONP,this.jsonp=!1!==t.jsonp,this.forceBase64=!!t.forceBase64,this.enablesXDR=!!t.enablesXDR,this.timestampParam=t.timestampParam||"t",this.timestampRequests=t.timestampRequests,this.transports=t.transports||["polling","websocket"],this.transportOptions=t.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=t.policyPort||843,this.rememberUpgrade=t.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=t.onlyBinaryUpgrades,this.perMessageDeflate=!1!==t.perMessageDeflate&&(t.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=t.pfx||null,this.key=t.key||null,this.passphrase=t.passphrase||null,this.cert=t.cert||null,this.ca=t.ca||null,this.ciphers=t.ciphers||null,this.rejectUnauthorized=void 0===t.rejectUnauthorized||t.rejectUnauthorized,this.forceNode=!!t.forceNode;var o="object"==typeof n&&n;o.global===o&&(t.extraHeaders&&Object.keys(t.extraHeaders).length>0&&(this.extraHeaders=t.extraHeaders),t.localAddress&&(this.localAddress=t.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}function o(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var i=e("./transports/index"),s=e("component-emitter"),a=e("debug")("engine.io-client:socket"),u=e("indexof"),l=e("engine.io-parser"),c=e("parseuri"),p=e("parsejson"),f=e("parseqs");t.exports=r,r.priorWebsocketSuccess=!1,s(r.prototype),r.protocol=l.protocol,r.Socket=r,r.Transport=e("./transport"),r.transports=e("./transports/index"),r.parser=e("engine.io-parser"),r.prototype.createTransport=function(e){a('creating transport "%s"',e);var t=o(this.query);t.EIO=l.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new i[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},r.prototype.open=function(){var e;if(this.rememberUpgrade&&r.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},r.prototype.setTransport=function(e){a("setting transport %s",e.name);var t=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},r.prototype.probe=function(e){function t(){if(f.onlyBinaryUpgrades){var t=!this.supportsBinary&&f.transport.supportsBinary;p=p||t}p||(a('probe transport "%s" opened',e),c.send([{type:"ping",data:"probe"}]),c.once("packet",function(t){if(!p)if("pong"===t.type&&"probe"===t.data){if(a('probe transport "%s" pong',e),f.upgrading=!0,f.emit("upgrading",c),!c)return;r.priorWebsocketSuccess="websocket"===c.name,a('pausing current transport "%s"',f.transport.name),f.transport.pause(function(){p||"closed"!==f.readyState&&(a("changing transport and sending upgrade packet"),l(),f.setTransport(c),c.send([{type:"upgrade"}]),f.emit("upgrade",c),c=null,f.upgrading=!1,f.flush())})}else{a('probe transport "%s" failed',e);var n=new Error("probe error");n.transport=c.name,f.emit("upgradeError",n)}}))}function n(){p||(p=!0,l(),c.close(),c=null)}function o(t){var r=new Error("probe error: "+t);r.transport=c.name,n(),a('probe transport "%s" failed because of error: %s',e,t),f.emit("upgradeError",r)}function i(){o("transport closed")}function s(){o("socket closed")}function u(e){c&&e.name!==c.name&&(a('"%s" works - aborting "%s"',e.name,c.name),n())}function l(){c.removeListener("open",t),c.removeListener("error",o),c.removeListener("close",i),f.removeListener("close",s),f.removeListener("upgrading",u)}a('probing transport "%s"',e);var c=this.createTransport(e,{probe:1}),p=!1,f=this;r.priorWebsocketSuccess=!1,c.once("open",t),c.once("error",o),c.once("close",i),this.once("close",s),this.once("upgrading",u),c.open()},r.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",r.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},r.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(p(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else a('packet received with socket readyState "%s"',this.readyState)},r.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},r.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},r.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},r.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},r.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},r.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},r.prototype.write=r.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},r.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},r.prototype.close=function(){function e(){r.onClose("forced close"),a("socket closing - telling transport to close"),r.transport.close()}function t(){r.removeListener("upgrade",t),r.removeListener("upgradeError",t),e()}function n(){r.once("upgrade",t),r.once("upgradeError",t)}if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var r=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?n():e()}):this.upgrading?n():e()}return this},r.prototype.onError=function(e){a("socket error %j",e),r.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},r.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){a('socket close with reason: "%s"',e);var n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),n.writeBuffer=[],n.prevBufferLen=0}},r.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~u(this.transports,e[n])&&t.push(e[n]);return t}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./transport":13,"./transports/index":14,"component-emitter":8,debug:20,"engine.io-parser":23,indexof:29,parsejson:32,parseqs:33,parseuri:34}],13:[function(e,t,n){function r(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}var o=e("engine.io-parser"),i=e("component-emitter");t.exports=r,i(r.prototype),r.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},r.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},r.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},r.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},r.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},r.prototype.onData=function(e){var t=o.decodePacket(e,this.socket.binaryType);this.onPacket(t)},r.prototype.onPacket=function(e){this.emit("packet",e)},r.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},{"component-emitter":8,"engine.io-parser":23}],14:[function(e,t,n){(function(t){var r=e("xmlhttprequest-ssl"),o=e("./polling-xhr"),i=e("./polling-jsonp"),s=e("./websocket");n.polling=function(e){var n=!1,s=!1,a=!1!==e.jsonp;if(t.location){var u="https:"===location.protocol,l=location.port;l||(l=u?443:80),n=e.hostname!==location.hostname||l!==e.port,s=e.secure!==u}if(e.xdomain=n,e.xscheme=s,"open"in new r(e)&&!e.forceJSONP)return new o(e);if(!a)throw new Error("JSONP disabled");return new i(e)},n.websocket=s}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./polling-jsonp":15,"./polling-xhr":16,"./websocket":18,"xmlhttprequest-ssl":19}],15:[function(e,t,n){(function(n){function r(){}function o(e){i.call(this,e),this.query=this.query||{},a||(n.___eio||(n.___eio=[]),a=n.___eio),this.index=a.length;var t=this;a.push(function(e){t.onData(e)}),this.query.j=this.index,n.document&&n.addEventListener&&n.addEventListener("beforeunload",function(){t.script&&(t.script.onerror=r)},!1)}var i=e("./polling"),s=e("component-inherit");t.exports=o;var a,u=/\n/g,l=/\\n/g;s(o,i),o.prototype.supportsBinary=!1,o.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},o.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},o.prototype.doWrite=function(e,t){function n(){r(),t()}function r(){if(o.iframe)try{o.form.removeChild(o.iframe)}catch(e){o.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+o.iframeId+'">';i=document.createElement(e)}catch(e){(i=document.createElement("iframe")).name=o.iframeId,i.src="javascript:0"}i.id=o.iframeId,o.form.appendChild(i),o.iframe=i}var o=this;if(!this.form){var i,s=document.createElement("form"),a=document.createElement("textarea"),c=this.iframeId="eio_iframe_"+this.index;s.className="socketio",s.style.position="absolute",s.style.top="-1000px",s.style.left="-1000px",s.target=c,s.method="POST",s.setAttribute("accept-charset","utf-8"),a.name="d",s.appendChild(a),document.body.appendChild(s),this.form=s,this.area=a}this.form.action=this.uri(),r(),e=e.replace(l,"\\\n"),this.area.value=e.replace(u,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===o.iframe.readyState&&n()}:this.iframe.onload=n}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./polling":17,"component-inherit":9}],16:[function(e,t,n){(function(n){function r(){}function o(e){if(u.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,n.location){var t="https:"===location.protocol,r=location.port;r||(r=t?443:80),this.xd=e.hostname!==n.location.hostname||r!==e.port,this.xs=e.secure!==t}}function i(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function s(){for(var e in i.requests)i.requests.hasOwnProperty(e)&&i.requests[e].abort()}var a=e("xmlhttprequest-ssl"),u=e("./polling"),l=e("component-emitter"),c=e("component-inherit"),p=e("debug")("engine.io-client:polling-xhr");t.exports=o,t.exports.Request=i,c(o,u),o.prototype.supportsBinary=!0,o.prototype.request=function(e){return e=e||{},e.uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new i(e)},o.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},o.prototype.doPoll=function(){p("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},l(i.prototype),i.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var t=this.xhr=new a(e),r=this;try{p("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(var o in this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&t.setRequestHeader(o,this.extraHeaders[o])}}catch(e){}if("POST"===this.method)try{this.isBinary?t.setRequestHeader("Content-type","application/octet-stream"):t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=!0),this.requestTimeout&&(t.timeout=this.requestTimeout),this.hasXDR()?(t.onload=function(){r.onLoad()},t.onerror=function(){r.onError(t.responseText)}):t.onreadystatechange=function(){if(2===t.readyState){var e;try{e=t.getResponseHeader("Content-Type")}catch(e){}"application/octet-stream"===e&&(t.responseType="arraybuffer")}4===t.readyState&&(200===t.status||1223===t.status?r.onLoad():setTimeout(function(){r.onError(t.status)},0))},p("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout(function(){r.onError(e)},0)}n.document&&(this.index=i.requestsCount++,i.requests[this.index]=this)},i.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},i.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},i.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},i.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=r:this.xhr.onreadystatechange=r,e)try{this.xhr.abort()}catch(e){}n.document&&delete i.requests[this.index],this.xhr=null}},i.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t?this.xhr.response||this.xhr.responseText:this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},i.prototype.hasXDR=function(){return void 0!==n.XDomainRequest&&!this.xs&&this.enablesXDR},i.prototype.abort=function(){this.cleanup()},i.requestsCount=0,i.requests={},n.document&&(n.attachEvent?n.attachEvent("onunload",s):n.addEventListener&&n.addEventListener("beforeunload",s,!1))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./polling":17,"component-emitter":8,"component-inherit":9,debug:20,"xmlhttprequest-ssl":19}],17:[function(e,t,n){function r(e){var t=e&&e.forceBase64;c&&!t||(this.supportsBinary=!1),o.call(this,e)}var o=e("../transport"),i=e("parseqs"),s=e("engine.io-parser"),a=e("component-inherit"),u=e("yeast"),l=e("debug")("engine.io-client:polling");t.exports=r;var c=null!=new(e("xmlhttprequest-ssl"))({xdomain:!1}).responseType;a(r,o),r.prototype.name="polling",r.prototype.doOpen=function(){this.poll()},r.prototype.pause=function(e){function t(){l("paused"),n.readyState="paused",e()}var n=this;if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(l("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){l("pre-pause polling complete"),--r||t()})),this.writable||(l("we are currently writing - waiting to pause"),r++,this.once("drain",function(){l("pre-pause writing complete"),--r||t()}))}else t()},r.prototype.poll=function(){l("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},r.prototype.onData=function(e){var t=this;l("polling got data %s",e);s.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():l('ignoring poll - transport state "%s"',this.readyState))},r.prototype.doClose=function(){function e(){l("writing close packet"),t.write([{type:"close"}])}var t=this;"open"===this.readyState?(l("transport open - closing"),e()):(l("transport not open - deferring close"),this.once("open",e))},r.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};s.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},r.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||e.sid||(e.b64=1),e=i.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},{"../transport":13,"component-inherit":9,debug:20,"engine.io-parser":23,parseqs:33,"xmlhttprequest-ssl":19,yeast:55}],18:[function(e,t,n){(function(n){function r(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=p&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=o),i.call(this,e)}var o,i=e("../transport"),s=e("engine.io-parser"),a=e("parseqs"),u=e("component-inherit"),l=e("yeast"),c=e("debug")("engine.io-client:websocket"),p=n.WebSocket||n.MozWebSocket;if("undefined"==typeof window)try{o=e("ws")}catch(e){}var f=p;f||"undefined"!=typeof window||(f=o),t.exports=r,u(r,i),r.prototype.name="websocket",r.prototype.supportsBinary=!0,r.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new f(e,t):new f(e):new f(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},r.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},r.prototype.write=function(e){function t(){r.emit("flush"),setTimeout(function(){r.writable=!0,r.emit("drain")},0)}var r=this;this.writable=!1;for(var o=e.length,i=0,a=o;i<a;i++)!function(e){s.encodePacket(e,r.supportsBinary,function(i){if(!r.usingBrowserWebSocket){var s={};e.options&&(s.compress=e.options.compress),r.perMessageDeflate&&("string"==typeof i?n.Buffer.byteLength(i):i.length)<r.perMessageDeflate.threshold&&(s.compress=!1)}try{r.usingBrowserWebSocket?r.ws.send(i):r.ws.send(i,s)}catch(e){c("websocket closed before onclose event")}--o||t()})}(e[i])},r.prototype.onClose=function(){i.prototype.onClose.call(this)},r.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},r.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=l()),this.supportsBinary||(e.b64=1),(e=a.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},r.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===r.prototype.name)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../transport":13,"component-inherit":9,debug:20,"engine.io-parser":23,parseqs:33,ws:6,yeast:55}],19:[function(e,t,n){(function(n){var r=e("has-cors");t.exports=function(e){var t=e.xdomain,o=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(e){}if(!t)try{return new(n[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"has-cors":28}],20:[function(e,t,n){(function(r){function o(){var e;try{e=n.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(n=t.exports=e("./debug")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},n.formatArgs=function(e){var t=this.useColors;if(e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+n.humanize(this.diff),t){var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))}),e.splice(i,0,r)}},n.save=function(e){try{null==e?n.storage.removeItem("debug"):n.storage.debug=e}catch(e){}},n.load=o,n.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},n.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),n.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],n.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},n.enable(o())}).call(this,e("_process"))},{"./debug":21,_process:35}],21:[function(e,t,n){function r(e){var t,r=0;for(t in e)r=(r<<5)-r+e.charCodeAt(t),r|=0;return n.colors[Math.abs(r)%n.colors.length]}function o(e){function t(){if(t.enabled){var e=t,r=+new Date,o=r-(i||r);e.diff=o,e.prev=i,e.curr=r,i=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=n.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(t,r){if("%%"===t)return t;u++;var o=n.formatters[r];if("function"==typeof o){var i=s[u];t=o.call(e,i),s.splice(u,1),u--}return t}),n.formatArgs.call(e,s),(t.log||n.log||console.log.bind(console)).apply(e,s)}}return t.namespace=e,t.enabled=n.enabled(e),t.useColors=n.useColors(),t.color=r(e),"function"==typeof n.init&&n.init(t),t}(n=t.exports=o.debug=o.default=o).coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){n.enable("")},n.enable=function(e){n.save(e),n.names=[],n.skips=[];for(var t=("string"==typeof e?e:"").split(/[\s,]+/),r=t.length,o=0;o<r;o++)t[o]&&("-"===(e=t[o].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")))},n.enabled=function(e){var t,r;for(t=0,r=n.skips.length;t<r;t++)if(n.skips[t].test(e))return!1;for(t=0,r=n.names.length;t<r;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=e("ms"),n.names=[],n.skips=[],n.formatters={};var i},{ms:22}],22:[function(e,t,n){function r(e){if(!((e=String(e)).length>100)){var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(t){var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*p;case"days":case"day":case"d":return n*c;case"hours":case"hour":case"hrs":case"hr":case"h":return n*l;case"minutes":case"minute":case"mins":case"min":case"m":return n*u;case"seconds":case"second":case"secs":case"sec":case"s":return n*a;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}function o(e){return e>=c?Math.round(e/c)+"d":e>=l?Math.round(e/l)+"h":e>=u?Math.round(e/u)+"m":e>=a?Math.round(e/a)+"s":e+"ms"}function i(e){return s(e,c,"day")||s(e,l,"hour")||s(e,u,"minute")||s(e,a,"second")||e+" ms"}function s(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}var a=1e3,u=60*a,l=60*u,c=24*l,p=365.25*c;t.exports=function(e,t){t=t||{};var n=typeof e;if("string"===n&&e.length>0)return r(e);if("number"===n&&!1===isNaN(e))return t.long?i(e):o(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},{}],23:[function(e,t,n){(function(t){function r(e,t){return t("b"+n.packets[e.type]+e.data.data)}function o(e,t,r){if(!t)return n.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=v[e.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}function i(e,t,r){if(!t)return n.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){e.data=o.result,n.encodePacket(e,t,!0,r)},o.readAsArrayBuffer(e.data)}function s(e,t,r){if(!t)return n.encodeBase64Packet(e,r);if(y)return i(e,t,r);var o=new Uint8Array(1);return o[0]=v[e.type],r(new w([o.buffer,e.data]))}function a(e){try{e=h.decode(e,{strict:!1})}catch(e){return!1}return e}function u(e,t,n){for(var r=new Array(e.length),o=d(e.length,n),i=0;i<e.length;i++)!function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})}(i,e[i],o)}var l,c=e("./keys"),p=e("has-binary2"),f=e("arraybuffer.slice"),d=e("after"),h=e("./utf8");t&&t.ArrayBuffer&&(l=e("base64-arraybuffer"));var m="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),g="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),y=m||g;n.protocol=3;var v=n.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},b=c(v),x={type:"error",data:"parser error"},w=e("blob");n.encodePacket=function(e,n,i,a){"function"==typeof n&&(a=n,n=!1),"function"==typeof i&&(a=i,i=null);var u=void 0===e.data?void 0:e.data.buffer||e.data;if(t.ArrayBuffer&&u instanceof ArrayBuffer)return o(e,n,a);if(w&&u instanceof t.Blob)return s(e,n,a);if(u&&u.base64)return r(e,a);var l=v[e.type];return void 0!==e.data&&(l+=i?h.encode(String(e.data),{strict:!1}):String(e.data)),a(""+l)},n.encodeBase64Packet=function(e,r){var o="b"+n.packets[e.type];if(w&&e.data instanceof t.Blob){var i=new FileReader;return i.onload=function(){var e=i.result.split(",")[1];r(o+e)},i.readAsDataURL(e.data)}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(e.data))}catch(t){for(var a=new Uint8Array(e.data),u=new Array(a.length),l=0;l<a.length;l++)u[l]=a[l];s=String.fromCharCode.apply(null,u)}return o+=t.btoa(s),r(o)},n.decodePacket=function(e,t,r){if(void 0===e)return x;if("string"==typeof e){if("b"===e.charAt(0))return n.decodeBase64Packet(e.substr(1),t);if(r&&!1===(e=a(e)))return x;o=e.charAt(0);return Number(o)==o&&b[o]?e.length>1?{type:b[o],data:e.substring(1)}:{type:b[o]}:x}var o=new Uint8Array(e)[0],i=f(e,1);return w&&"blob"===t&&(i=new w([i])),{type:b[o],data:i}},n.decodeBase64Packet=function(e,t){var n=b[e.charAt(0)];if(!l)return{type:n,data:{base64:!0,data:e.substr(1)}};var r=l.decode(e.substr(1));return"blob"===t&&w&&(r=new w([r])),{type:n,data:r}},n.encodePayload=function(e,t,r){function o(e){return e.length+":"+e}"function"==typeof t&&(r=t,t=null);var i=p(e);return t&&i?w&&!y?n.encodePayloadAsBlob(e,r):n.encodePayloadAsArrayBuffer(e,r):e.length?void u(e,function(e,r){n.encodePacket(e,!!i&&t,!1,function(e){r(null,o(e))})},function(e,t){return r(t.join(""))}):r("0:")},n.decodePayload=function(e,t,r){if("string"!=typeof e)return n.decodePayloadAsBinary(e,t,r);"function"==typeof t&&(r=t,t=null);var o;if(""===e)return r(x,0,1);for(var i,s,a="",u=0,l=e.length;u<l;u++){var c=e.charAt(u);if(":"===c){if(""===a||a!=(i=Number(a)))return r(x,0,1);if(s=e.substr(u+1,i),a!=s.length)return r(x,0,1);if(s.length){if(o=n.decodePacket(s,t,!1),x.type===o.type&&x.data===o.data)return r(x,0,1);if(!1===r(o,u+i,l))return}u+=i,a=""}else a+=c}return""!==a?r(x,0,1):void 0},n.encodePayloadAsArrayBuffer=function(e,t){if(!e.length)return t(new ArrayBuffer(0));u(e,function(e,t){n.encodePacket(e,!0,!0,function(e){return t(null,e)})},function(e,n){var r=n.reduce(function(e,t){var n;return n="string"==typeof t?t.length:t.byteLength,e+n.toString().length+n+2},0),o=new Uint8Array(r),i=0;return n.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),s=0;s<e.length;s++)r[s]=e.charCodeAt(s);n=r.buffer}o[i++]=t?0:1;for(var a=n.byteLength.toString(),s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(var r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),t(o.buffer)})},n.encodePayloadAsBlob=function(e,t){u(e,function(e,t){n.encodePacket(e,!0,!0,function(e){var n=new Uint8Array(1);if(n[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,n[0]=0}for(var i=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),s=new Uint8Array(i.length+1),o=0;o<i.length;o++)s[o]=parseInt(i[o]);if(s[i.length]=255,w){var a=new w([n.buffer,s.buffer,e]);t(null,a)}})},function(e,n){return t(new w(n))})},n.decodePayloadAsBinary=function(e,t,r){"function"==typeof t&&(r=t,t=null);for(var o=e,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),a=0===s[0],u="",l=1;255!==s[l];l++){if(u.length>310)return r(x,0,1);u+=s[l]}o=f(o,2+u.length),u=parseInt(u);var c=f(o,0,u);if(a)try{c=String.fromCharCode.apply(null,new Uint8Array(c))}catch(e){var p=new Uint8Array(c);c="";for(l=0;l<p.length;l++)c+=String.fromCharCode(p[l])}i.push(c),o=f(o,u)}var d=i.length;i.forEach(function(e,o){r(n.decodePacket(e,t,!0),o,d)})}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./keys":24,"./utf8":25,after:1,"arraybuffer.slice":2,"base64-arraybuffer":4,blob:5,"has-binary2":26}],24:[function(e,t,n){t.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},{}],25:[function(e,t,n){(function(e){!function(r){function o(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function i(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=y((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=y(t);return o}function s(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function a(e,t){return y(e>>t&63|128)}function u(e,t){if(0==(4294967168&e))return y(e);var n="";return 0==(4294965248&e)?n=y(e>>6&31|192):0==(4294901760&e)?(s(e,t)||(e=65533),n=y(e>>12&15|224),n+=a(e,6)):0==(4292870144&e)&&(n=y(e>>18&7|240),n+=a(e,12),n+=a(e,6)),n+=y(63&e|128)}function l(){if(g>=m)throw Error("Invalid byte index");var e=255&h[g];if(g++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function c(e){var t,n,r,o,i;if(g>m)throw Error("Invalid byte index");if(g==m)return!1;if(t=255&h[g],g++,0==(128&t))return t;if(192==(224&t)){if(n=l(),(i=(31&t)<<6|n)>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&t)){if(n=l(),r=l(),(i=(15&t)<<12|n<<6|r)>=2048)return s(i,e)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=l(),r=l(),o=l(),(i=(7&t)<<18|n<<12|r<<6|o)>=65536&&i<=1114111))return i;throw Error("Invalid UTF-8 detected")}var p="object"==typeof n&&n,f="object"==typeof t&&t&&t.exports==p&&t,d="object"==typeof e&&e;d.global!==d&&d.window!==d||(r=d);var h,m,g,y=String.fromCharCode,v={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=o(e),i=r.length,s=-1,a="";++s<i;)a+=u(r[s],n);return a},decode:function(e,t){var n=!1!==(t=t||{}).strict;h=o(e),m=h.length,g=0;for(var r,s=[];!1!==(r=c(n));)s.push(r);return i(s)}};if("function"==typeof define&&"object"==typeof define.amd&&define.amd)define(function(){return v});else if(p&&!p.nodeType)if(f)f.exports=v;else{var b={}.hasOwnProperty;for(var x in v)b.call(v,x)&&(p[x]=v[x])}else r.utf8=v}(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],26:[function(e,t,n){(function(n){function r(e){if(!e||"object"!=typeof e)return!1;if(o(e)){for(var t=0,i=e.length;t<i;t++)if(r(e[t]))return!0;return!1}if("function"==typeof n.Buffer&&n.Buffer.isBuffer&&n.Buffer.isBuffer(e)||"function"==typeof n.ArrayBuffer&&e instanceof ArrayBuffer||s&&e instanceof Blob||a&&e instanceof File)return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return r(e.toJSON(),!0);for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)&&r(e[u]))return!0;return!1}var o=e("isarray"),i=Object.prototype.toString,s="function"==typeof n.Blob||"[object BlobConstructor]"===i.call(n.Blob),a="function"==typeof n.File||"[object FileConstructor]"===i.call(n.File);t.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{isarray:27}],27:[function(e,t,n){var r={}.toString;t.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},{}],28:[function(e,t,n){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},{}],29:[function(e,t,n){var r=[].indexOf;t.exports=function(e,t){if(r)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}},{}],30:[function(e,t,n){!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){var n=(t=t||te).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function r(e){var t=!!e&&"length"in e&&e.length,n=de.type(e);return"function"!==n&&!de.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function o(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function i(e,t,n){return de.isFunction(t)?de.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?de.grep(e,function(e){return e===t!==n}):"string"!=typeof t?de.grep(e,function(e){return se.call(t,e)>-1!==n}):ke.test(t)?de.filter(t,e,n):(t=de.filter(t,e),de.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return de.each(e.match(Ne)||[],function(e,n){t[n]=!0}),t}function u(e){return e}function l(e){throw e}function c(e,t,n,r){var o;try{e&&de.isFunction(o=e.promise)?o.call(e).done(t).fail(n):e&&de.isFunction(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function p(){te.removeEventListener("DOMContentLoaded",p),e.removeEventListener("load",p),de.ready()}function f(){this.expando=de.expando+f.uid++}function d(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Ie.test(e)?JSON.parse(e):e)}function h(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Pe,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=d(n)}catch(e){}je.set(e,t,n)}else n=void 0;return n}function m(e,t,n,r){var o,i=1,s=20,a=r?function(){return r.cur()}:function(){return de.css(e,t,"")},u=a(),l=n&&n[3]||(de.cssNumber[t]?"":"px"),c=(de.cssNumber[t]||"px"!==l&&+u)&&qe.exec(de.css(e,t));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do{c/=i=i||".5",de.style(e,t,c+l)}while(i!==(i=a()/u)&&1!==i&&--s)}return n&&(c=+c||+u||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=o)),o}function g(e){var t,n=e.ownerDocument,r=e.nodeName,o=Ve[r];return o||(t=n.body.appendChild(n.createElement(r)),o=de.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),Ve[r]=o,o)}function y(e,t){for(var n,r,o=[],i=0,s=e.length;i<s;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=Re.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&Le(r)&&(o[i]=g(r))):"none"!==n&&(o[i]="none",Re.set(r,"display",n)));for(i=0;i<s;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}function v(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&o(e,t)?de.merge([e],n):n}function b(e,t){for(var n=0,r=e.length;n<r;n++)Re.set(e[n],"globalEval",!t||Re.get(t[n],"globalEval"))}function x(e,t,n,r,o){for(var i,s,a,u,l,c,p=t.createDocumentFragment(),f=[],d=0,h=e.length;d<h;d++)if((i=e[d])||0===i)if("object"===de.type(i))de.merge(f,i.nodeType?[i]:i);else if(Je.test(i)){for(s=s||p.appendChild(t.createElement("div")),a=(Ue.exec(i)||["",""])[1].toLowerCase(),u=ze[a]||ze._default,s.innerHTML=u[1]+de.htmlPrefilter(i)+u[2],c=u[0];c--;)s=s.lastChild;de.merge(f,s.childNodes),(s=p.firstChild).textContent=""}else f.push(t.createTextNode(i));for(p.textContent="",d=0;i=f[d++];)if(r&&de.inArray(i,r)>-1)o&&o.push(i);else if(l=de.contains(i.ownerDocument,i),s=v(p.appendChild(i),"script"),l&&b(s),n)for(c=0;i=s[c++];)$e.test(i.type||"")&&n.push(i);return p}function w(){return!0}function E(){return!1}function k(){try{return te.activeElement}catch(e){}}function T(e,t,n,r,o,i){var s,a;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(a in t)T(e,a,n,r,t[a],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=E;else if(!o)return e;return 1===i&&(s=o,(o=function(e){return de().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=de.guid++)),e.each(function(){de.event.add(this,t,o,r,n)})}function C(e,t){return o(e,"table")&&o(11!==t.nodeType?t:t.firstChild,"tr")?de(">tbody",e)[0]||e:e}function S(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function D(e){var t=tt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function N(e,t){var n,r,o,i,s,a,u,l;if(1===t.nodeType){if(Re.hasData(e)&&(i=Re.access(e),s=Re.set(t,i),l=i.events)){delete s.handle,s.events={};for(o in l)for(n=0,r=l[o].length;n<r;n++)de.event.add(t,o,l[o][n])}je.hasData(e)&&(a=je.access(e),u=de.extend({},a),je.set(t,u))}}function A(e,t){var n=t.nodeName.toLowerCase();"input"===n&&We.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function O(e,t,r,o){t=oe.apply([],t);var i,s,a,u,l,c,p=0,f=e.length,d=f-1,h=t[0],m=de.isFunction(h);if(m||f>1&&"string"==typeof h&&!fe.checkClone&&et.test(h))return e.each(function(n){var i=e.eq(n);m&&(t[0]=h.call(this,n,i.html())),O(i,t,r,o)});if(f&&(i=x(t,e[0].ownerDocument,!1,e,o),s=i.firstChild,1===i.childNodes.length&&(i=s),s||o)){for(u=(a=de.map(v(i,"script"),S)).length;p<f;p++)l=i,p!==d&&(l=de.clone(l,!0,!0),u&&de.merge(a,v(l,"script"))),r.call(e[p],l,p);if(u)for(c=a[a.length-1].ownerDocument,de.map(a,D),p=0;p<u;p++)l=a[p],$e.test(l.type||"")&&!Re.access(l,"globalEval")&&de.contains(c,l)&&(l.src?de._evalUrl&&de._evalUrl(l.src):n(l.textContent.replace(nt,""),c))}return e}function B(e,t,n){for(var r,o=t?de.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||de.cleanData(v(r)),r.parentNode&&(n&&de.contains(r.ownerDocument,r)&&b(v(r,"script")),r.parentNode.removeChild(r));return e}function _(e,t,n){var r,o,i,s,a=e.style;return(n=n||it(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||de.contains(e.ownerDocument,e)||(s=de.style(e,t)),!fe.pixelMarginRight()&&ot.test(s)&&rt.test(t)&&(r=a.width,o=a.minWidth,i=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=o,a.maxWidth=i)),void 0!==s?s+"":s}function R(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function j(e){if(e in pt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=ct.length;n--;)if((e=ct[n]+t)in pt)return e}function I(e){var t=de.cssProps[e];return t||(t=de.cssProps[e]=j(e)||e),t}function P(e,t,n){var r=qe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function F(e,t,n,r,o){var i,s=0;for(i=n===(r?"border":"content")?4:"width"===t?1:0;i<4;i+=2)"margin"===n&&(s+=de.css(e,n+He[i],!0,o)),r?("content"===n&&(s-=de.css(e,"padding"+He[i],!0,o)),"margin"!==n&&(s-=de.css(e,"border"+He[i]+"Width",!0,o))):(s+=de.css(e,"padding"+He[i],!0,o),"padding"!==n&&(s+=de.css(e,"border"+He[i]+"Width",!0,o)));return s}function q(e,t,n){var r,o=it(e),i=_(e,t,o),s="border-box"===de.css(e,"boxSizing",!1,o);return ot.test(i)?i:(r=s&&(fe.boxSizingReliable()||i===e.style[t]),"auto"===i&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)]),(i=parseFloat(i)||0)+F(e,t,n||(s?"border":"content"),r,o)+"px")}function H(e,t,n,r,o){return new H.prototype.init(e,t,n,r,o)}function L(){dt&&(!1===te.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(L):e.setTimeout(L,de.fx.interval),de.fx.tick())}function M(){return e.setTimeout(function(){ft=void 0}),ft=de.now()}function V(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=He[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function W(e,t,n){for(var r,o=($.tweeners[t]||[]).concat($.tweeners["*"]),i=0,s=o.length;i<s;i++)if(r=o[i].call(n,t,e))return r}function U(e,t){var n,r,o,i,s;for(n in e)if(r=de.camelCase(n),o=t[r],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(s=de.cssHooks[r])&&"expand"in s){i=s.expand(i),delete e[r];for(n in i)n in e||(e[n]=i[n],t[n]=o)}else t[r]=o}function $(e,t,n){var r,o,i=0,s=$.prefilters.length,a=de.Deferred().always(function(){delete u.elem}),u=function(){if(o)return!1;for(var t=ft||M(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),i=0,s=l.tweens.length;i<s;i++)l.tweens[i].run(r);return a.notifyWith(e,[l,r,n]),r<1&&s?n:(s||a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:de.extend({},t),opts:de.extend(!0,{specialEasing:{},easing:de.easing._default},n),originalProperties:t,originalOptions:n,startTime:ft||M(),duration:n.duration,tweens:[],createTween:function(t,n){var r=de.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for(U(c,l.opts.specialEasing);i<s;i++)if(r=$.prefilters[i].call(l,e,c,l.opts))return de.isFunction(r.stop)&&(de._queueHooks(l.elem,l.opts.queue).stop=de.proxy(r.stop,r)),r;return de.map(c,W,l),de.isFunction(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),de.fx.timer(de.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}function z(e){return(e.match(Ne)||[]).join(" ")}function J(e){return e.getAttribute&&e.getAttribute("class")||""}function X(e,t,n,r){var o;if(Array.isArray(t))de.each(t,function(t,o){n||Ct.test(e)?r(e,o):X(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==de.type(t))r(e,t);else for(o in t)X(e+"["+o+"]",t[o],n,r)}function K(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(Ne)||[];if(de.isFunction(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Y(e,t,n,r){function o(a){var u;return i[a]=!0,de.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||s||i[l]?s?!(u=l):void 0:(t.dataTypes.unshift(l),o(l),!1)}),u}var i={},s=e===Ft;return o(t.dataTypes[0])||!i["*"]&&o("*")}function G(e,t){var n,r,o=de.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&de.extend(!0,e,r),e}function Q(e,t,n){for(var r,o,i,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in a)if(a[o]&&a[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+" "+u[0]]){i=o;break}s||(s=o)}i=i||s}if(i)return i!==u[0]&&u.unshift(i),n[i]}function Z(e,t,n,r){var o,i,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=c.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(s=l[u+" "+i]||l["* "+i]))for(o in l)if((a=o.split(" "))[1]===i&&(s=l[u+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[o]:!0!==l[o]&&(i=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}var ee=[],te=e.document,ne=Object.getPrototypeOf,re=ee.slice,oe=ee.concat,ie=ee.push,se=ee.indexOf,ae={},ue=ae.toString,le=ae.hasOwnProperty,ce=le.toString,pe=ce.call(Object),fe={},de=function(e,t){return new de.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ge=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};de.fn=de.prototype={jquery:"3.2.1",constructor:de,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=de.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return de.each(this,e)},map:function(e){return this.pushStack(de.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ie,sort:ee.sort,splice:ee.splice},de.extend=de.fn.extend=function(){var e,t,n,r,o,i,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||de.isFunction(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(r=e[t])&&(l&&r&&(de.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,i=n&&Array.isArray(n)?n:[]):i=n&&de.isPlainObject(n)?n:{},s[t]=de.extend(l,i,r)):void 0!==r&&(s[t]=r));return s},de.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===de.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=de.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ue.call(e))&&(!(t=ne(e))||"function"==typeof(n=le.call(t,"constructor")&&t.constructor)&&ce.call(n)===pe)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ae[ue.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ge,ye)},each:function(e,t){var n,o=0;if(r(e))for(n=e.length;o<n&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(r(Object(e))?de.merge(n,"string"==typeof e?[e]:e):ie.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,s=!n;o<i;o++)!t(e[o],o)!==s&&r.push(e[o]);return r},map:function(e,t,n){var o,i,s=0,a=[];if(r(e))for(o=e.length;s<o;s++)null!=(i=t(e[s],s,n))&&a.push(i);else for(s in e)null!=(i=t(e[s],s,n))&&a.push(i);return oe.apply([],a)},guid:1,proxy:function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),de.isFunction(e))return r=re.call(arguments,2),o=function(){return e.apply(t||this,r.concat(re.call(arguments)))},o.guid=e.guid=e.guid||de.guid++,o},now:Date.now,support:fe}),"function"==typeof Symbol&&(de.fn[Symbol.iterator]=ee[Symbol.iterator]),de.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ae["[object "+t+"]"]=t.toLowerCase()});var ve=function(e){function t(e,t,n,r){var o,i,s,a,u,c,f,d=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:H)!==B&&O(t),t=t||B,R)){if(11!==h&&(u=me.exec(e)))if(o=u[1]){if(9===h){if(!(s=t.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(d&&(s=d.getElementById(o))&&F(t,s)&&s.id===o)return n.push(s),n}else{if(u[2])return Y.apply(n,t.getElementsByTagName(e)),n;if((o=u[3])&&x.getElementsByClassName&&t.getElementsByClassName)return Y.apply(n,t.getElementsByClassName(o)),n}if(x.qsa&&!U[e+" "]&&(!j||!j.test(e))){if(1!==h)d=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(be,xe):t.setAttribute("id",a=q),i=(c=T(e)).length;i--;)c[i]="#"+a+" "+p(c[i]);f=c.join(","),d=ge.test(e)&&l(t.parentNode)||t}if(f)try{return Y.apply(n,d.querySelectorAll(f)),n}catch(e){}finally{a===q&&t.removeAttribute("id")}}}return S(e.replace(ie,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[q]=!0,e}function o(e){var t=B.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function i(e,t){for(var n=e.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ee(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var o,i=e([],n.length,t),s=i.length;s--;)n[o=i[s]]&&(n[o]=!(r[o]=n[o]))})})}function l(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function p(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function f(e,t,n){var r=t.dir,o=t.next,i=o||r,s=n&&"parentNode"===i,a=M++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,u){var l,c,p,f=[L,a];if(u){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(p=t[q]||(t[q]={}),c=p[t.uniqueID]||(p[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[i])&&l[0]===L&&l[1]===a)return f[2]=l[2];if(c[i]=f,f[2]=e(t,n,u))return!0}return!1}}function d(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function h(e,n,r){for(var o=0,i=n.length;o<i;o++)t(e,n[o],r);return r}function m(e,t,n,r,o){for(var i,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(i=e[a])&&(n&&!n(i,r,o)||(s.push(i),l&&t.push(a)));return s}function g(e,t,n,o,i,s){return o&&!o[q]&&(o=g(o)),i&&!i[q]&&(i=g(i,s)),r(function(r,s,a,u){var l,c,p,f=[],d=[],g=s.length,y=r||h(t||"*",a.nodeType?[a]:a,[]),v=!e||!r&&t?y:m(y,f,e,a,u),b=n?i||(r?e:g||o)?[]:s:v;if(n&&n(v,b,a,u),o)for(l=m(b,d),o(l,[],a,u),c=l.length;c--;)(p=l[c])&&(b[d[c]]=!(v[d[c]]=p));if(r){if(i||e){if(i){for(l=[],c=b.length;c--;)(p=b[c])&&l.push(v[c]=p);i(null,b=[],l,u)}for(c=b.length;c--;)(p=b[c])&&(l=i?Q(r,p):f[c])>-1&&(r[l]=!(s[l]=p))}}else b=m(b===s?b.splice(g,b.length):b),i?i(null,s,b,u):Y.apply(s,b)})}function y(e){for(var t,n,r,o=e.length,i=w.relative[e[0].type],s=i||w.relative[" "],a=i?1:0,u=f(function(e){return e===t},s,!0),l=f(function(e){return Q(t,e)>-1},s,!0),c=[function(e,n,r){var o=!i&&(r||n!==D)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,o}];a<o;a++)if(n=w.relative[e[a].type])c=[f(d(c),n)];else{if((n=w.filter[e[a].type].apply(null,e[a].matches))[q]){for(r=++a;r<o&&!w.relative[e[r].type];r++);return g(a>1&&d(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ie,"$1"),n,a<r&&y(e.slice(a,r)),r<o&&y(e=e.slice(r)),r<o&&p(e))}c.push(n)}return d(c)}function v(e,n){var o=n.length>0,i=e.length>0,s=function(r,s,a,u,l){var c,p,f,d=0,h="0",g=r&&[],y=[],v=D,b=r||i&&w.find.TAG("*",l),x=L+=null==v?1:Math.random()||.1,E=b.length;for(l&&(D=s===B||s||l);h!==E&&null!=(c=b[h]);h++){if(i&&c){for(p=0,s||c.ownerDocument===B||(O(c),a=!R);f=e[p++];)if(f(c,s||B,a)){u.push(c);break}l&&(L=x)}o&&((c=!f&&c)&&d--,r&&g.push(c))}if(d+=h,o&&h!==d){for(p=0;f=n[p++];)f(g,y,s,a);if(r){if(d>0)for(;h--;)g[h]||y[h]||(y[h]=X.call(u));y=m(y)}Y.apply(u,y),l&&!r&&y.length>0&&d+n.length>1&&t.uniqueSort(u)}return l&&(L=x,D=v),g};return o?r(s):s}var b,x,w,E,k,T,C,S,D,N,A,O,B,_,R,j,I,P,F,q="sizzle"+1*new Date,H=e.document,L=0,M=0,V=n(),W=n(),U=n(),$=function(e,t){return e===t&&(A=!0),0},z={}.hasOwnProperty,J=[],X=J.pop,K=J.push,Y=J.push,G=J.slice,Q=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",re=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",oe=new RegExp(ee+"+","g"),ie=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),ae=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),ue=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),le=new RegExp(re),ce=new RegExp("^"+te+"$"),pe={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,de=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ye=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ve=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){O()},Ee=f(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Y.apply(J=G.call(H.childNodes),H.childNodes),J[H.childNodes.length].nodeType}catch(e){Y={apply:J.length?function(e,t){K.apply(e,G.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},O=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:H;return r!==B&&9===r.nodeType&&r.documentElement?(B=r,_=B.documentElement,R=!k(B),H!==B&&(n=B.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=o(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=o(function(e){return e.appendChild(B.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(B.getElementsByClassName),x.getById=o(function(e){return _.appendChild(e).id=q,!B.getElementsByName||!B.getElementsByName(q).length}),x.getById?(w.filter.ID=function(e){var t=e.replace(ye,ve);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&R){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ye,ve);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&R){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},w.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&R)return t.getElementsByClassName(e)},I=[],j=[],(x.qsa=he.test(B.querySelectorAll))&&(o(function(e){_.appendChild(e).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&j.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||j.push("\\["+ee+"*(?:value|"+Z+")"),e.querySelectorAll("[id~="+q+"-]").length||j.push("~="),e.querySelectorAll(":checked").length||j.push(":checked"),e.querySelectorAll("a#"+q+"+*").length||j.push(".#.+[+~]")}),o(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=B.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&j.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&j.push(":enabled",":disabled"),_.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&j.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),j.push(",.*:")})),(x.matchesSelector=he.test(P=_.matches||_.webkitMatchesSelector||_.mozMatchesSelector||_.oMatchesSelector||_.msMatchesSelector))&&o(function(e){x.disconnectedMatch=P.call(e,"*"),P.call(e,"[s!='']:x"),I.push("!=",re)}),j=j.length&&new RegExp(j.join("|")),I=I.length&&new RegExp(I.join("|")),t=he.test(_.compareDocumentPosition),F=t||he.test(_.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},$=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===B||e.ownerDocument===H&&F(H,e)?-1:t===B||t.ownerDocument===H&&F(H,t)?1:N?Q(N,e)-Q(N,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],u=[t];if(!o||!i)return e===B?-1:t===B?1:o?-1:i?1:N?Q(N,e)-Q(N,t):0;if(o===i)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;a[r]===u[r];)r++;return r?s(a[r],u[r]):a[r]===H?-1:u[r]===H?1:0},B):B},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==B&&O(e),n=n.replace(ue,"='$1']"),x.matchesSelector&&R&&!U[n+" "]&&(!I||!I.test(n))&&(!j||!j.test(n)))try{var r=P.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,B,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==B&&O(e),F(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==B&&O(e);var n=w.attrHandle[t.toLowerCase()],r=n&&z.call(w.attrHandle,t.toLowerCase())?n(e,t,!R):void 0;return void 0!==r?r:x.attributes||!R?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,o=0;if(A=!x.detectDuplicates,N=!x.sortStable&&e.slice(0),e.sort($),A){for(;t=e[o++];)t===e[o]&&(r=n.push(o));for(;r--;)e.splice(n[r],1)}return N=null,e},E=t.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=E(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=E(t);return n},(w=t.selectors={cacheLength:50,createPseudo:r,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ye,ve),e[3]=(e[3]||e[4]||e[5]||"").replace(ye,ve),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&le.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ye,ve).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=V[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&V(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(o){var i=t.attr(o,e);return null==i?"!="===n:!n||(i+="","="===n?i===r:"!="===n?i!==r:"^="===n?r&&0===i.indexOf(r):"*="===n?r&&i.indexOf(r)>-1:"$="===n?r&&i.slice(-r.length)===r:"~="===n?(" "+i.replace(oe," ")+" ").indexOf(r)>-1:"|="===n&&(i===r||i.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,d,h,m=i!==s?"nextSibling":"previousSibling",g=t.parentNode,y=a&&t.nodeName.toLowerCase(),v=!u&&!a,b=!1;if(g){if(i){for(;m;){for(f=t;f=f[m];)if(a?f.nodeName.toLowerCase()===y:1===f.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&v){for(b=(d=(l=(c=(p=(f=g)[q]||(f[q]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]||[])[0]===L&&l[1])&&l[2],f=d&&g.childNodes[d];f=++d&&f&&f[m]||(b=d=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){c[e]=[L,d,b];break}}else if(v&&(b=d=(l=(c=(p=(f=t)[q]||(f[q]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]||[])[0]===L&&l[1]),!1===b)for(;(f=++d&&f&&f[m]||(b=d=0)||h.pop())&&((a?f.nodeName.toLowerCase()!==y:1!==f.nodeType)||!++b||(v&&((c=(p=f[q]||(f[q]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]=[L,b]),f!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,n){var o,i=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return i[q]?i(n):i.length>1?(o=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,o=i(e,n),s=o.length;s--;)e[r=Q(e,o[s])]=!(t[r]=o[s])}):function(e){return i(e,0,o)}):i}},pseudos:{not:r(function(e){var t=[],n=[],o=C(e.replace(ie,"$1"));return o[q]?r(function(e,t,n,r){for(var i,s=o(e,null,r,[]),a=e.length;a--;)(i=s[a])&&(e[a]=!(t[a]=i))}):function(e,r,i){return t[0]=e,o(t,null,i,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ye,ve),function(t){return(t.textContent||t.innerText||E(t)).indexOf(e)>-1}}),lang:r(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ye,ve).toLowerCase(),function(t){var n;do{if(n=R?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===_},focus:function(e){return e===B.activeElement&&(!B.hasFocus||B.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return de.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[n<0?n+t:n]}),even:u(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return c.prototype=w.filters=w.pseudos,w.setFilters=new c,T=t.tokenize=function(e,n){var r,o,i,s,a,u,l,c=W[e+" "];if(c)return n?0:c.slice(0);for(a=e,u=[],l=w.preFilter;a;){r&&!(o=se.exec(a))||(o&&(a=a.slice(o[0].length)||a),u.push(i=[])),r=!1,(o=ae.exec(a))&&(r=o.shift(),i.push({value:r,type:o[0].replace(ie," ")}),a=a.slice(r.length));for(s in w.filter)!(o=pe[s].exec(a))||l[s]&&!(o=l[s](o))||(r=o.shift(),i.push({value:r,type:s,matches:o}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):W(e,u).slice(0)},C=t.compile=function(e,t){var n,r=[],o=[],i=U[e+" "];if(!i){for(t||(t=T(e)),n=t.length;n--;)(i=y(t[n]))[q]?r.push(i):o.push(i);(i=U(e,v(o,r))).selector=e}return i},S=t.select=function(e,t,n,r){var o,i,s,a,u,c="function"==typeof e&&e,f=!r&&T(e=c.selector||e);if(n=n||[],1===f.length){if((i=f[0]=f[0].slice(0)).length>2&&"ID"===(s=i[0]).type&&9===t.nodeType&&R&&w.relative[i[1].type]){if(!(t=(w.find.ID(s.matches[0].replace(ye,ve),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(o=pe.needsContext.test(e)?0:i.length;o--&&(s=i[o],!w.relative[a=s.type]);)if((u=w.find[a])&&(r=u(s.matches[0].replace(ye,ve),ge.test(i[0].type)&&l(t.parentNode)||t))){if(i.splice(o,1),!(e=r.length&&p(i)))return Y.apply(n,r),n;break}}return(c||C(e,f))(r,t,!R,n,!t||ge.test(e)&&l(t.parentNode)||t),n},x.sortStable=q.split("").sort($).join("")===q,x.detectDuplicates=!!A,O(),x.sortDetached=o(function(e){return 1&e.compareDocumentPosition(B.createElement("fieldset"))}),o(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||i("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&o(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||i("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),o(function(e){return null==e.getAttribute("disabled")})||i(Z,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);de.find=ve,de.expr=ve.selectors,de.expr[":"]=de.expr.pseudos,de.uniqueSort=de.unique=ve.uniqueSort,de.text=ve.getText,de.isXMLDoc=ve.isXML,de.contains=ve.contains,de.escapeSelector=ve.escape;var be=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&de(e).is(n))break;r.push(e)}return r},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},we=de.expr.match.needsContext,Ee=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,ke=/^.[^:#\[\.,]*$/;de.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?de.find.matchesSelector(r,e)?[r]:[]:de.find.matches(e,de.grep(t,function(e){return 1===e.nodeType}))},de.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(de(e).filter(function(){for(t=0;t<r;t++)if(de.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)de.find(e,o[t],n);return r>1?de.uniqueSort(n):n},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&we.test(e)?de(e):e||[],!1).length}});var Te,Ce=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(de.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||Te,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ce.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof de?t[0]:t,de.merge(this,de.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),Ee.test(r[1])&&de.isPlainObject(t))for(r in t)de.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=te.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):de.isFunction(e)?void 0!==n.ready?n.ready(e):e(de):de.makeArray(e,this)}).prototype=de.fn,Te=de(te);var Se=/^(?:parents|prev(?:Until|All))/,De={children:!0,contents:!0,next:!0,prev:!0};de.fn.extend({has:function(e){var t=de(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(de.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],s="string"!=typeof e&&de(e);if(!we.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&de.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?de.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?se.call(de(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(de.uniqueSort(de.merge(this.get(),de(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),de.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,n){return be(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,n){return be(e,"nextSibling",n)},prevUntil:function(e,t,n){return be(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return o(e,"iframe")?e.contentDocument:(o(e,"template")&&(e=e.content||e),de.merge([],e.childNodes))}},function(e,t){de.fn[e]=function(n,r){var o=de.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=de.filter(r,o)),this.length>1&&(De[e]||de.uniqueSort(o),Se.test(e)&&o.reverse()),this.pushStack(o)}});var Ne=/[^\x20\t\r\n\f]+/g;de.Callbacks=function(e){e="string"==typeof e?a(e):de.extend({},e);var t,n,r,o,i=[],s=[],u=-1,l=function(){for(o=o||e.once,r=t=!0;s.length;u=-1)for(n=s.shift();++u<i.length;)!1===i[u].apply(n[0],n[1])&&e.stopOnFalse&&(u=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},c={add:function(){return i&&(n&&!t&&(u=i.length-1,s.push(n)),function t(n){de.each(n,function(n,r){de.isFunction(r)?e.unique&&c.has(r)||i.push(r):r&&r.length&&"string"!==de.type(r)&&t(r)})}(arguments),n&&!t&&l()),this},remove:function(){return de.each(arguments,function(e,t){for(var n;(n=de.inArray(t,i,n))>-1;)i.splice(n,1),n<=u&&u--}),this},has:function(e){return e?de.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=s=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},de.extend({Deferred:function(t){var n=[["notify","progress",de.Callbacks("memory"),de.Callbacks("memory"),2],["resolve","done",de.Callbacks("once memory"),de.Callbacks("once memory"),0,"resolved"],["reject","fail",de.Callbacks("once memory"),de.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return de.Deferred(function(t){de.each(n,function(n,r){var o=de.isFunction(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&de.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(t,r,o){function i(t,n,r,o){return function(){var a=this,c=arguments,p=function(){var e,p;if(!(t<s)){if((e=r.apply(a,c))===n.promise())throw new TypeError("Thenable self-resolution");p=e&&("object"==typeof e||"function"==typeof e)&&e.then,de.isFunction(p)?o?p.call(e,i(s,n,u,o),i(s,n,l,o)):(s++,p.call(e,i(s,n,u,o),i(s,n,l,o),i(s,n,u,n.notifyWith))):(r!==u&&(a=void 0,c=[e]),(o||n.resolveWith)(a,c))}},f=o?p:function(){try{p()}catch(e){de.Deferred.exceptionHook&&de.Deferred.exceptionHook(e,f.stackTrace),t+1>=s&&(r!==l&&(a=void 0,c=[e]),n.rejectWith(a,c))}};t?f():(de.Deferred.getStackHook&&(f.stackTrace=de.Deferred.getStackHook()),e.setTimeout(f))}}var s=0;return de.Deferred(function(e){n[0][3].add(i(0,e,de.isFunction(o)?o:u,e.notifyWith)),n[1][3].add(i(0,e,de.isFunction(t)?t:u)),n[2][3].add(i(0,e,de.isFunction(r)?r:l))}).promise()},promise:function(e){return null!=e?de.extend(e,o):o}},i={};return de.each(n,function(e,t){var s=t[2],a=t[5];o[t[1]]=s.add,a&&s.add(function(){r=a},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),i[t[0]]=function(){return i[t[0]+"With"](this===i?void 0:this,arguments),this},i[t[0]+"With"]=s.fireWith}),o.promise(i),t&&t.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=re.call(arguments),i=de.Deferred(),s=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?re.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(c(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||de.isFunction(o[n]&&o[n].then)))return i.then();for(;n--;)c(o[n],s(n),i.reject);return i.promise()}});var Ae=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;de.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Ae.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},de.readyException=function(t){e.setTimeout(function(){throw t})};var Oe=de.Deferred();de.fn.ready=function(e){return Oe.then(e).catch(function(e){de.readyException(e)}),this},de.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--de.readyWait:de.isReady)||(de.isReady=!0,!0!==e&&--de.readyWait>0||Oe.resolveWith(te,[de]))}}),de.ready.then=Oe.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(de.ready):(te.addEventListener("DOMContentLoaded",p),e.addEventListener("load",p));var Be=function(e,t,n,r,o,i,s){var a=0,u=e.length,l=null==n;if("object"===de.type(n)){o=!0;for(a in n)Be(e,t,a,n[a],!0,i,s)}else if(void 0!==r&&(o=!0,de.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(de(e),n)})),t))for(;a<u;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return o?e:l?t.call(e):u?t(e[0],n):i},_e=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};f.uid=1,f.prototype={cache:function(e){var t=e[this.expando];return t||(t={},_e(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[de.camelCase(t)]=n;else for(r in t)o[de.camelCase(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][de.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(de.camelCase):(t=de.camelCase(t))in r?[t]:t.match(Ne)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||de.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!de.isEmptyObject(t)}};var Re=new f,je=new f,Ie=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Pe=/[A-Z]/g;de.extend({hasData:function(e){return je.hasData(e)||Re.hasData(e)},data:function(e,t,n){return je.access(e,t,n)},removeData:function(e,t){je.remove(e,t)},_data:function(e,t,n){return Re.access(e,t,n)},_removeData:function(e,t){Re.remove(e,t)}}),de.fn.extend({data:function(e,t){var n,r,o,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(o=je.get(i),1===i.nodeType&&!Re.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=de.camelCase(r.slice(5)),h(i,r,o[r]));Re.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){je.set(this,e)}):Be(this,function(t){var n;if(i&&void 0===t){if(void 0!==(n=je.get(i,e)))return n;if(void 0!==(n=h(i,e)))return n}else this.each(function(){je.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){je.remove(this,e)})}}),de.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Re.get(e,t),n&&(!r||Array.isArray(n)?r=Re.access(e,t,de.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=de.queue(e,t),r=n.length,o=n.shift(),i=de._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){de.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Re.get(e,n)||Re.access(e,n,{empty:de.Callbacks("once memory").add(function(){Re.remove(e,[t+"queue",n])})})}}),de.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?de.queue(this[0],e):void 0===t?this:this.each(function(){var n=de.queue(this,e,t);de._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&de.dequeue(this,e)})},dequeue:function(e){return this.each(function(){de.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=de.Deferred(),i=this,s=this.length,a=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Re.get(i[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),o.promise(t)}});var Fe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,qe=new RegExp("^(?:([+-])=|)("+Fe+")([a-z%]*)$","i"),He=["Top","Right","Bottom","Left"],Le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&de.contains(e.ownerDocument,e)&&"none"===de.css(e,"display")},Me=function(e,t,n,r){var o,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];o=n.apply(e,r||[]);for(i in t)e.style[i]=s[i];return o},Ve={};de.fn.extend({show:function(){return y(this,!0)},hide:function(){return y(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Le(this)?de(this).show():de(this).hide()})}});var We=/^(?:checkbox|radio)$/i,Ue=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,$e=/^$|\/(?:java|ecma)script/i,ze={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ze.optgroup=ze.option,ze.tbody=ze.tfoot=ze.colgroup=ze.caption=ze.thead,ze.th=ze.td;var Je=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment().appendChild(te.createElement("div")),t=te.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),fe.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",fe.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Xe=te.documentElement,Ke=/^key/,Ye=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ge=/^([^.]*)(?:\.(.+)|)/;de.event={global:{},add:function(e,t,n,r,o){var i,s,a,u,l,c,p,f,d,h,m,g=Re.get(e);if(g)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&de.find.matchesSelector(Xe,o),n.guid||(n.guid=de.guid++),(u=g.events)||(u=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==de&&de.event.triggered!==t.type?de.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(Ne)||[""]).length;l--;)d=m=(a=Ge.exec(t[l])||[])[1],h=(a[2]||"").split(".").sort(),d&&(p=de.event.special[d]||{},d=(o?p.delegateType:p.bindType)||d,p=de.event.special[d]||{},c=de.extend({type:d,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&de.expr.match.needsContext.test(o),namespace:h.join(".")},i),(f=u[d])||((f=u[d]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,r,h,s)||e.addEventListener&&e.addEventListener(d,s)),p.add&&(p.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,c):f.push(c),de.event.global[d]=!0)},remove:function(e,t,n,r,o){var i,s,a,u,l,c,p,f,d,h,m,g=Re.hasData(e)&&Re.get(e);if(g&&(u=g.events)){for(l=(t=(t||"").match(Ne)||[""]).length;l--;)if(a=Ge.exec(t[l])||[],d=m=a[1],h=(a[2]||"").split(".").sort(),d){for(p=de.event.special[d]||{},f=u[d=(r?p.delegateType:p.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=f.length;i--;)c=f[i],!o&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(i,1),c.selector&&f.delegateCount--,p.remove&&p.remove.call(e,c));s&&!f.length&&(p.teardown&&!1!==p.teardown.call(e,h,g.handle)||de.removeEvent(e,d,g.handle),delete u[d])}else for(d in u)de.event.remove(e,d+t[l],n,r,!0);de.isEmptyObject(u)&&Re.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,s,a=de.event.fix(e),u=new Array(arguments.length),l=(Re.get(this,"events")||{})[a.type]||[],c=de.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=de.event.handlers.call(this,a,l),t=0;(o=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(r=((de.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,o,i,s,a=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(i=[],s={},n=0;n<u;n++)void 0===s[o=(r=t[n]).selector+" "]&&(s[o]=r.needsContext?de(o,this).index(l)>-1:de.find(o,this,null,[l]).length),s[o]&&i.push(r);i.length&&a.push({elem:l,handlers:i})}return l=this,u<t.length&&a.push({elem:l,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(de.Event.prototype,e,{enumerable:!0,configurable:!0,get:de.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[de.expando]?e:new de.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==k()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===k()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&o(this,"input"))return this.click(),!1},_default:function(e){return o(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},de.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},de.Event=function(e,t){if(!(this instanceof de.Event))return new de.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?w:E,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&de.extend(this,t),this.timeStamp=e&&e.timeStamp||de.now(),this[de.expando]=!0},de.Event.prototype={constructor:de.Event,isDefaultPrevented:E,isPropagationStopped:E,isImmediatePropagationStopped:E,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},de.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ke.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ye.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},de.event.addProp),de.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){de.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||de.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),de.fn.extend({on:function(e,t,n,r){return T(this,e,t,n,r)},one:function(e,t,n,r){return T(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,de(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=E),this.each(function(){de.event.remove(this,e,n,t)})}});var Qe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ze=/<script|<style|<link/i,et=/checked\s*(?:[^=]|=\s*.checked.)/i,tt=/^true\/(.*)/,nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;de.extend({htmlPrefilter:function(e){return e.replace(Qe,"<$1></$2>")},clone:function(e,t,n){var r,o,i,s,a=e.cloneNode(!0),u=de.contains(e.ownerDocument,e);if(!(fe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||de.isXMLDoc(e)))for(s=v(a),r=0,o=(i=v(e)).length;r<o;r++)A(i[r],s[r]);if(t)if(n)for(i=i||v(e),s=s||v(a),r=0,o=i.length;r<o;r++)N(i[r],s[r]);else N(e,a);return(s=v(a,"script")).length>0&&b(s,!u&&v(e,"script")),a},cleanData:function(e){for(var t,n,r,o=de.event.special,i=0;void 0!==(n=e[i]);i++)if(_e(n)){if(t=n[Re.expando]){if(t.events)for(r in t.events)o[r]?de.event.remove(n,r):de.removeEvent(n,r,t.handle);n[Re.expando]=void 0}n[je.expando]&&(n[je.expando]=void 0)}}}),de.fn.extend({detach:function(e){return B(this,e,!0)},remove:function(e){return B(this,e)},text:function(e){return Be(this,function(e){return void 0===e?de.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return O(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||C(this,e).appendChild(e)})},prepend:function(){return O(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=C(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return O(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return O(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(de.cleanData(v(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return de.clone(this,e,t)})},html:function(e){return Be(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ze.test(e)&&!ze[(Ue.exec(e)||["",""])[1].toLowerCase()]){e=de.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(de.cleanData(v(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return O(this,arguments,function(t){var n=this.parentNode;de.inArray(this,e)<0&&(de.cleanData(v(this)),n&&n.replaceChild(t,this))},e)}}),de.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){de.fn[e]=function(e){for(var n,r=[],o=de(e),i=o.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),de(o[s])[t](n),ie.apply(r,n.get());return this.pushStack(r)}});var rt=/^margin/,ot=new RegExp("^("+Fe+")(?!px)[a-z%]+$","i"),it=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Xe.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,i="2px"===t.marginLeft,r="4px"===t.width,a.style.marginRight="50%",o="4px"===t.marginRight,Xe.removeChild(s),a=null}}var n,r,o,i,s=te.createElement("div"),a=te.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",fe.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),de.extend(fe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),o},reliableMarginLeft:function(){return t(),i}}))}();var st=/^(none|table(?!-c[ea]).+)/,at=/^--/,ut={position:"absolute",visibility:"hidden",display:"block"},lt={letterSpacing:"0",fontWeight:"400"},ct=["Webkit","Moz","ms"],pt=te.createElement("div").style;de.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,s,a=de.camelCase(t),u=at.test(t),l=e.style;if(u||(t=I(a)),s=de.cssHooks[t]||de.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,r))?o:l[t];"string"==(i=typeof n)&&(o=qe.exec(n))&&o[1]&&(n=m(e,t,o),i="number"),null!=n&&n===n&&("number"===i&&(n+=o&&o[3]||(de.cssNumber[a]?"":"px")),fe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var o,i,s,a=de.camelCase(t);return at.test(t)||(t=I(a)),(s=de.cssHooks[t]||de.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=_(e,t,r)),"normal"===o&&t in lt&&(o=lt[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),de.each(["height","width"],function(e,t){de.cssHooks[t]={get:function(e,n,r){if(n)return!st.test(de.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?q(e,t,r):Me(e,ut,function(){return q(e,t,r)})},set:function(e,n,r){var o,i=r&&it(e),s=r&&F(e,t,r,"border-box"===de.css(e,"boxSizing",!1,i),i);return s&&(o=qe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=de.css(e,t)),P(0,n,s)}}}),de.cssHooks.marginLeft=R(fe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(_(e,"marginLeft"))||e.getBoundingClientRect().left-Me(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),de.each({margin:"",padding:"",border:"Width"},function(e,t){de.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+He[r]+t]=i[r]||i[r-2]||i[0];return o}},rt.test(e)||(de.cssHooks[e+t].set=P)}),de.fn.extend({css:function(e,t){return Be(this,function(e,t,n){var r,o,i={},s=0;if(Array.isArray(t)){for(r=it(e),o=t.length;s<o;s++)i[t[s]]=de.css(e,t[s],!1,r);return i}return void 0!==n?de.style(e,t,n):de.css(e,t)},e,t,arguments.length>1)}}),de.Tween=H,H.prototype={constructor:H,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||de.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(de.cssNumber[n]?"":"px")},cur:function(){var e=H.propHooks[this.prop];return e&&e.get?e.get(this):H.propHooks._default.get(this)},run:function(e){var t,n=H.propHooks[this.prop];return this.options.duration?this.pos=t=de.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=de.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){de.fx.step[e.prop]?de.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[de.cssProps[e.prop]]&&!de.cssHooks[e.prop]?e.elem[e.prop]=e.now:de.style(e.elem,e.prop,e.now+e.unit)}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},de.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},de.fx=H.prototype.init,de.fx.step={};var ft,dt,ht=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;de.Animation=de.extend($,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return m(n.elem,e,qe.exec(t),n),n}]},tweener:function(e,t){de.isFunction(e)?(t=e,e=["*"]):e=e.match(Ne);for(var n,r=0,o=e.length;r<o;r++)n=e[r],$.tweeners[n]=$.tweeners[n]||[],$.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,s,a,u,l,c,p="width"in t||"height"in t,f=this,d={},h=e.style,m=e.nodeType&&Le(e),g=Re.get(e,"fxshow");n.queue||(null==(s=de._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,de.queue(e,"fx").length||s.empty.fire()})}));for(r in t)if(o=t[r],ht.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;m=!0}d[r]=g&&g[r]||de.style(e,r)}if((u=!de.isEmptyObject(t))||!de.isEmptyObject(d)){p&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=g&&g.display)&&(l=Re.get(e,"display")),"none"===(c=de.css(e,"display"))&&(l?c=l:(y([e],!0),l=e.style.display||l,c=de.css(e,"display"),y([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===de.css(e,"float")&&(u||(f.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in d)u||(g?"hidden"in g&&(m=g.hidden):g=Re.access(e,"fxshow",{display:l}),i&&(g.hidden=!m),m&&y([e],!0),f.done(function(){m||y([e]),Re.remove(e,"fxshow");for(r in d)de.style(e,r,d[r])})),u=W(m?g[r]:0,r,f),r in g||(g[r]=u.start,m&&(u.end=u.start,u.start=0))}}],prefilter:function(e,t){t?$.prefilters.unshift(e):$.prefilters.push(e)}}),de.speed=function(e,t,n){var r=e&&"object"==typeof e?de.extend({},e):{complete:n||!n&&t||de.isFunction(e)&&e,duration:e,easing:n&&t||t&&!de.isFunction(t)&&t};return de.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in de.fx.speeds?r.duration=de.fx.speeds[r.duration]:r.duration=de.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){de.isFunction(r.old)&&r.old.call(this),r.queue&&de.dequeue(this,r.queue)},r},de.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Le).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=de.isEmptyObject(e),i=de.speed(t,n,r),s=function(){var t=$(this,de.extend({},e),i);(o||Re.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=de.timers,s=Re.get(this);if(o)s[o]&&s[o].stop&&r(s[o]);else for(o in s)s[o]&&s[o].stop&&mt.test(o)&&r(s[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||de.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Re.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=de.timers,s=r?r.length:0;for(n.finish=!0,de.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),de.each(["toggle","show","hide"],function(e,t){var n=de.fn[t];de.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(V(t,!0),e,r,o)}}),de.each({slideDown:V("show"),slideUp:V("hide"),slideToggle:V("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){de.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),de.timers=[],de.fx.tick=function(){var e,t=0,n=de.timers;for(ft=de.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||de.fx.stop(),ft=void 0},de.fx.timer=function(e){de.timers.push(e),de.fx.start()},de.fx.interval=13,de.fx.start=function(){dt||(dt=!0,L())},de.fx.stop=function(){dt=null},de.fx.speeds={slow:600,fast:200,_default:400},de.fn.delay=function(t,n){return t=de.fx?de.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var o=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(o)}})},function(){var e=te.createElement("input"),t=te.createElement("select").appendChild(te.createElement("option"));e.type="checkbox",fe.checkOn=""!==e.value,fe.optSelected=t.selected,(e=te.createElement("input")).value="t",e.type="radio",fe.radioValue="t"===e.value}();var gt,yt=de.expr.attrHandle;de.fn.extend({attr:function(e,t){return Be(this,de.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){de.removeAttr(this,e)})}}),de.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?de.prop(e,t,n):(1===i&&de.isXMLDoc(e)||(o=de.attrHooks[t.toLowerCase()]||(de.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void de.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=de.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!fe.radioValue&&"radio"===t&&o(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(Ne);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?de.removeAttr(e,n):e.setAttribute(n,n),n}},de.each(de.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||de.find.attr;yt[t]=function(e,t,r){var o,i,s=t.toLowerCase();return r||(i=yt[s],yt[s]=o,o=null!=n(e,t,r)?s:null,yt[s]=i),o}});var vt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;de.fn.extend({prop:function(e,t){return Be(this,de.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[de.propFix[e]||e]})}}),de.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&de.isXMLDoc(e)||(t=de.propFix[t]||t,o=de.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=de.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),fe.optSelected||(de.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),de.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){de.propFix[this.toLowerCase()]=this}),de.fn.extend({addClass:function(e){var t,n,r,o,i,s,a,u=0;if(de.isFunction(e))return this.each(function(t){de(this).addClass(e.call(this,t,J(this)))});if("string"==typeof e&&e)for(t=e.match(Ne)||[];n=this[u++];)if(o=J(n),r=1===n.nodeType&&" "+z(o)+" "){for(s=0;i=t[s++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(a=z(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,o,i,s,a,u=0;if(de.isFunction(e))return this.each(function(t){de(this).removeClass(e.call(this,t,J(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ne)||[];n=this[u++];)if(o=J(n),r=1===n.nodeType&&" "+z(o)+" "){for(s=0;i=t[s++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(a=z(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):de.isFunction(e)?this.each(function(n){de(this).toggleClass(e.call(this,n,J(this),t),t)}):this.each(function(){var t,r,o,i;if("string"===n)for(r=0,o=de(this),i=e.match(Ne)||[];t=i[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=J(this))&&Re.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Re.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+z(J(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;de.fn.extend({val:function(e){var t,n,r,o=this[0];{if(arguments.length)return r=de.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,de(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=de.map(o,function(e){return null==e?"":e+""})),(t=de.valHooks[this.type]||de.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))});if(o)return(t=de.valHooks[o.type]||de.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(xt,""):null==n?"":n}}}),de.extend({valHooks:{option:{get:function(e){var t=de.find.attr(e,"value");return null!=t?t:z(de.text(e))}},select:{get:function(e){var t,n,r,i=e.options,s=e.selectedIndex,a="select-one"===e.type,u=a?null:[],l=a?s+1:i.length;for(r=s<0?l:a?s:0;r<l;r++)if(((n=i[r]).selected||r===s)&&!n.disabled&&(!n.parentNode.disabled||!o(n.parentNode,"optgroup"))){if(t=de(n).val(),a)return t;u.push(t)}return u},set:function(e,t){for(var n,r,o=e.options,i=de.makeArray(t),s=o.length;s--;)((r=o[s]).selected=de.inArray(de.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),de.each(["radio","checkbox"],function(){de.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=de.inArray(de(e).val(),t)>-1}},fe.checkOn||(de.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var wt=/^(?:focusinfocus|focusoutblur)$/;de.extend(de.event,{trigger:function(t,n,r,o){var i,s,a,u,l,c,p,f=[r||te],d=le.call(t,"type")?t.type:t,h=le.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||te,3!==r.nodeType&&8!==r.nodeType&&!wt.test(d+de.event.triggered)&&(d.indexOf(".")>-1&&(d=(h=d.split(".")).shift(),h.sort()),l=d.indexOf(":")<0&&"on"+d,t=t[de.expando]?t:new de.Event(d,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:de.makeArray(n,[t]),p=de.event.special[d]||{},o||!p.trigger||!1!==p.trigger.apply(r,n))){if(!o&&!p.noBubble&&!de.isWindow(r)){for(u=p.delegateType||d,wt.test(u+d)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(r.ownerDocument||te)&&f.push(a.defaultView||a.parentWindow||e)}for(i=0;(s=f[i++])&&!t.isPropagationStopped();)t.type=i>1?u:p.bindType||d,(c=(Re.get(s,"events")||{})[t.type]&&Re.get(s,"handle"))&&c.apply(s,n),(c=l&&s[l])&&c.apply&&_e(s)&&(t.result=c.apply(s,n),!1===t.result&&t.preventDefault());return t.type=d,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(f.pop(),n)||!_e(r)||l&&de.isFunction(r[d])&&!de.isWindow(r)&&((a=r[l])&&(r[l]=null),de.event.triggered=d,r[d](),de.event.triggered=void 0,a&&(r[l]=a)),t.result}},simulate:function(e,t,n){var r=de.extend(new de.Event,n,{type:e,isSimulated:!0});de.event.trigger(r,null,t)}}),de.fn.extend({trigger:function(e,t){return this.each(function(){de.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return de.event.trigger(e,t,n,!0)}}),de.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){de.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),de.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),fe.focusin="onfocusin"in e,fe.focusin||de.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){de.event.simulate(t,e.target,de.event.fix(e))};de.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=Re.access(r,t);o||r.addEventListener(e,n,!0),Re.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=Re.access(r,t)-1;o?Re.access(r,t,o):(r.removeEventListener(e,n,!0),Re.remove(r,t))}}});var Et=e.location,kt=de.now(),Tt=/\?/;de.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||de.error("Invalid XML: "+t),n};var Ct=/\[\]$/,St=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;de.param=function(e,t){var n,r=[],o=function(e,t){var n=de.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!de.isPlainObject(e))de.each(e,function(){o(this.name,this.value)});else for(n in e)X(n,e[n],t,o);return r.join("&")},de.fn.extend({serialize:function(){return de.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=de.prop(this,"elements");return e?de.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!de(this).is(":disabled")&&Nt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!We.test(e))}).map(function(e,t){var n=de(this).val();return null==n?null:Array.isArray(n)?de.map(n,function(e){return{name:t.name,value:e.replace(St,"\r\n")}}):{name:t.name,value:n.replace(St,"\r\n")}}).get()}});var At=/%20/g,Ot=/#.*$/,Bt=/([?&])_=[^&]*/,_t=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,jt=/^(?:GET|HEAD)$/,It=/^\/\//,Pt={},Ft={},qt="*/".concat("*"),Ht=te.createElement("a");Ht.href=Et.href,de.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:Rt.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":de.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?G(G(e,de.ajaxSettings),t):G(de.ajaxSettings,e)},ajaxPrefilter:K(Pt),ajaxTransport:K(Ft),ajax:function(t,n){function r(t,n,r,a){var l,f,d,x,w,E=n;c||(c=!0,u&&e.clearTimeout(u),o=void 0,s=a||"",k.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(x=Q(h,k,r)),x=Z(h,x,k,l),l?(h.ifModified&&((w=k.getResponseHeader("Last-Modified"))&&(de.lastModified[i]=w),(w=k.getResponseHeader("etag"))&&(de.etag[i]=w)),204===t||"HEAD"===h.type?E="nocontent":304===t?E="notmodified":(E=x.state,f=x.data,l=!(d=x.error))):(d=E,!t&&E||(E="error",t<0&&(t=0))),k.status=t,k.statusText=(n||E)+"",l?y.resolveWith(m,[f,E,k]):y.rejectWith(m,[k,E,d]),k.statusCode(b),b=void 0,p&&g.trigger(l?"ajaxSuccess":"ajaxError",[k,h,l?f:d]),v.fireWith(m,[k,E]),p&&(g.trigger("ajaxComplete",[k,h]),--de.active||de.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var o,i,s,a,u,l,c,p,f,d,h=de.ajaxSetup({},n),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?de(m):de.event,y=de.Deferred(),v=de.Callbacks("once memory"),b=h.statusCode||{},x={},w={},E="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=_t.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)k.always(e[k.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||E;return o&&o.abort(t),r(0,t),this}};if(y.promise(k),h.url=((t||h.url||Et.href)+"").replace(It,Et.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Ne)||[""],null==h.crossDomain){l=te.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Ht.protocol+"//"+Ht.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=de.param(h.data,h.traditional)),Y(Pt,h,n,k),c)return k;(p=de.event&&h.global)&&0==de.active++&&de.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!jt.test(h.type),i=h.url.replace(Ot,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(At,"+")):(d=h.url.slice(i.length),h.data&&(i+=(Tt.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(Bt,"$1"),d=(Tt.test(i)?"&":"?")+"_="+kt+++d),h.url=i+d),h.ifModified&&(de.lastModified[i]&&k.setRequestHeader("If-Modified-Since",de.lastModified[i]),de.etag[i]&&k.setRequestHeader("If-None-Match",de.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&k.setRequestHeader("Content-Type",h.contentType),k.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+qt+"; q=0.01":""):h.accepts["*"]);for(f in h.headers)k.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(m,k,h)||c))return k.abort();if(E="abort",v.add(h.complete),k.done(h.success),k.fail(h.error),o=Y(Ft,h,n,k)){if(k.readyState=1,p&&g.trigger("ajaxSend",[k,h]),c)return k;h.async&&h.timeout>0&&(u=e.setTimeout(function(){k.abort("timeout")},h.timeout));try{c=!1,o.send(x,r)}catch(e){if(c)throw e;r(-1,e)}}else r(-1,"No Transport");return k},getJSON:function(e,t,n){return de.get(e,t,n,"json")},getScript:function(e,t){return de.get(e,void 0,t,"script")}}),de.each(["get","post"],function(e,t){de[t]=function(e,n,r,o){return de.isFunction(n)&&(o=o||r,r=n,n=void 0),de.ajax(de.extend({url:e,type:t,dataType:o,data:n,success:r},de.isPlainObject(e)&&e))}}),de._evalUrl=function(e){return de.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},de.fn.extend({wrapAll:function(e){var t;return this[0]&&(de.isFunction(e)&&(e=e.call(this[0])),t=de(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return de.isFunction(e)?this.each(function(t){de(this).wrapInner(e.call(this,t))}):this.each(function(){var t=de(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=de.isFunction(e);return this.each(function(n){de(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){de(this).replaceWith(this.childNodes)}),this}}),de.expr.pseudos.hidden=function(e){return!de.expr.pseudos.visible(e)},de.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},de.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Lt={0:200,1223:204},Mt=de.ajaxSettings.xhr();fe.cors=!!Mt&&"withCredentials"in Mt,fe.ajax=Mt=!!Mt,de.ajaxTransport(function(t){var n,r;if(fe.cors||Mt&&!t.crossDomain)return{send:function(o,i){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(s in o)a.setRequestHeader(s,o[s]);n=function(e){return function(){n&&(n=r=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Lt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),r=a.onerror=n("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),de.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),de.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return de.globalEval(e),e}}}),de.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),de.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,o){t=de("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Vt=[],Wt=/(=)\?(?=&|$)|\?\?/;de.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||de.expando+"_"+kt++;return this[e]=!0,e}}),de.ajaxPrefilter("json jsonp",function(t,n,r){var o,i,s,a=!1!==t.jsonp&&(Wt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=de.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Wt,"$1"+o):!1!==t.jsonp&&(t.url+=(Tt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||de.error(o+" was not called"),s[0]},t.dataTypes[0]="json",i=e[o],e[o]=function(){s=arguments},r.always(function(){void 0===i?de(e).removeProp(o):e[o]=i,t[o]&&(t.jsonpCallback=n.jsonpCallback,Vt.push(o)),s&&de.isFunction(i)&&i(s[0]),s=i=void 0}),"script"}),fe.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),de.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,o,i;return t||(fe.createHTMLDocument?((r=(t=te.implementation.createHTMLDocument("")).createElement("base")).href=te.location.href,t.head.appendChild(r)):t=te),o=Ee.exec(e),i=!n&&[],o?[t.createElement(o[1])]:(o=x([e],t,i),i&&i.length&&de(i).remove(),de.merge([],o.childNodes))},de.fn.load=function(e,t,n){var r,o,i,s=this,a=e.indexOf(" ");return a>-1&&(r=z(e.slice(a)),e=e.slice(0,a)),de.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&de.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,s.html(r?de("<div>").append(de.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},de.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){de.fn[t]=function(e){return this.on(t,e)}}),de.expr.pseudos.animated=function(e){return de.grep(de.timers,function(t){return e===t.elem}).length},de.offset={setOffset:function(e,t,n){var r,o,i,s,a,u,l=de.css(e,"position"),c=de(e),p={};"static"===l&&(e.style.position="relative"),a=c.offset(),i=de.css(e,"top"),u=de.css(e,"left"),("absolute"===l||"fixed"===l)&&(i+u).indexOf("auto")>-1?(s=(r=c.position()).top,o=r.left):(s=parseFloat(i)||0,o=parseFloat(u)||0),de.isFunction(t)&&(t=t.call(e,n,de.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+o),"using"in t?t.using.call(e,p):c.css(p)}},de.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){de.offset.setOffset(this,e,t)});var t,n,r,o,i=this[0];if(i)return i.getClientRects().length?(r=i.getBoundingClientRect(),t=i.ownerDocument,n=t.documentElement,o=t.defaultView,{top:r.top+o.pageYOffset-n.clientTop,left:r.left+o.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===de.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),o(e[0],"html")||(r=e.offset()),r={top:r.top+de.css(e[0],"borderTopWidth",!0),left:r.left+de.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-de.css(n,"marginTop",!0),left:t.left-r.left-de.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===de.css(e,"position");)e=e.offsetParent;return e||Xe})}}),de.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;de.fn[e]=function(r){return Be(this,function(e,r,o){var i;if(de.isWindow(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),de.each(["top","left"],function(e,t){de.cssHooks[t]=R(fe.pixelPosition,function(e,n){if(n)return n=_(e,t),ot.test(n)?de(e).position()[t]+"px":n})}),de.each({Height:"height",Width:"width"},function(e,t){de.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){de.fn[r]=function(o,i){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===i?"margin":"border");return Be(this,function(t,n,o){var i;return de.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?de.css(t,n,a):de.style(t,n,o,a)},t,s?o:void 0,s)}})}),de.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),de.holdReady=function(e){e?de.readyWait++:de.ready(!0)},de.isArray=Array.isArray,de.parseJSON=JSON.parse,de.nodeName=o,"function"==typeof define&&define.amd&&define("jquery",[],function(){return de});var Ut=e.jQuery,$t=e.$;return de.noConflict=function(t){return e.$===de&&(e.$=$t),t&&e.jQuery===de&&(e.jQuery=Ut),de},t||(e.jQuery=e.$=de),de})},{}],31:[function(e,t,n){!function(e){var r=this||(0,eval)("this"),o=r.document,i=r.navigator,s=r.jQuery,a=r.JSON;!function(e){"function"==typeof define&&define.amd?define(["exports","require"],e):e("object"==typeof n&&"object"==typeof t?t.exports||n:r.ko={})}(function(t,n){function u(e,t){return!!(null===e||typeof e in g)&&e===t}function l(t,n){var r;return function(){r||(r=m.utils.setTimeout(function(){r=e,t()},n))}}function c(e,t){var n;return function(){clearTimeout(n),n=m.utils.setTimeout(e,t)}}function p(e,t){t&&t!==y?"beforeChange"===t?this._limitBeforeChange(e):this._origNotifySubscribers(e,t):this._limitChange(e)}function f(e,t){null!==t&&t.dispose&&t.dispose()}function d(e,t){var n=this.computedObservable,r=n[k];r.isDisposed||(this.disposalCount&&this.disposalCandidates[t]?(n.addDependencyTracking(t,e,this.disposalCandidates[t]),this.disposalCandidates[t]=null,--this.disposalCount):r.dependencyTracking[t]||n.addDependencyTracking(t,e,r.isSleeping?{_target:e}:n.subscribeToDependency(e)),e._notificationIsPending&&e._notifyNextChangeIfValueIsDifferent())}function h(e,t,n,r){m.bindingHandlers[e]={init:function(e,o,i,s,a){var u,l;return m.computed(function(){var i=o(),s=m.utils.unwrapObservable(i),c=!n!=!s,p=!l;(p||t||c!==u)&&(p&&m.computedContext.getDependenciesCount()&&(l=m.utils.cloneNodes(m.virtualElements.childNodes(e),!0)),c?(p||m.virtualElements.setDomNodeChildren(e,m.utils.cloneNodes(l)),m.applyBindingsToDescendants(r?r(a,i):a,e)):m.virtualElements.emptyNode(e),u=c)},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}},m.expressionRewriting.bindingRewriteValidators[e]=!1,m.virtualElements.allowedBindings[e]=!0}var m=void 0!==t?t:{};m.exportSymbol=function(e,t){for(var n=e.split("."),r=m,o=0;o<n.length-1;o++)r=r[n[o]];r[n[n.length-1]]=t},m.exportProperty=function(e,t,n){e[t]=n},m.version="3.4.2",m.exportSymbol("version",m.version),m.options={deferUpdates:!1,useOnlyNativeEvents:!1},m.utils=function(){function t(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])}function n(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function u(e,t){return e.__proto__=t,e}function l(e,t){if("input"!==m.utils.tagNameLower(e)||!e.type)return!1;if("click"!=t.toLowerCase())return!1;var n=e.type;return"checkbox"==n||"radio"==n}function c(e,t,n,r){var o=e[t].match(b)||[];m.utils.arrayForEach(n.match(b),function(e){m.utils.addOrRemoveItem(o,e,r)}),e[t]=o.join(" ")}var p={__proto__:[]}instanceof Array,f={},d={};f[i&&/Firefox\/2/i.test(i.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],f.MouseEvents=["click","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave"],t(f,function(e,t){if(t.length)for(var n=0,r=t.length;n<r;n++)d[t[n]]=e});var h={propertychange:!0},g=o&&function(){for(var t=3,n=o.createElement("div"),r=n.getElementsByTagName("i");n.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e",r[0];);return t>4?t:e}(),y=6===g,v=7===g,b=/\S+/g;return{fieldsIncludedWithJsonPost:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],arrayForEach:function(e,t){for(var n=0,r=e.length;n<r;n++)t(e[n],n)},arrayIndexOf:function(e,t){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(e,t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},arrayFirst:function(e,t,n){for(var r=0,o=e.length;r<o;r++)if(t.call(n,e[r],r))return e[r];return null},arrayRemoveItem:function(e,t){var n=m.utils.arrayIndexOf(e,t);n>0?e.splice(n,1):0===n&&e.shift()},arrayGetDistinctValues:function(e){for(var t=[],n=0,r=(e=e||[]).length;n<r;n++)m.utils.arrayIndexOf(t,e[n])<0&&t.push(e[n]);return t},arrayMap:function(e,t){for(var n=[],r=0,o=(e=e||[]).length;r<o;r++)n.push(t(e[r],r));return n},arrayFilter:function(e,t){for(var n=[],r=0,o=(e=e||[]).length;r<o;r++)t(e[r],r)&&n.push(e[r]);return n},arrayPushAll:function(e,t){if(t instanceof Array)e.push.apply(e,t);else for(var n=0,r=t.length;n<r;n++)e.push(t[n]);return e},addOrRemoveItem:function(e,t,n){var r=m.utils.arrayIndexOf(m.utils.peekObservable(e),t);r<0?n&&e.push(t):n||e.splice(r,1)},canSetPrototype:p,extend:n,setPrototypeOf:u,setPrototypeOfOrExtend:p?u:n,objectForEach:t,objectMap:function(e,t){if(!e)return e;var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=t(e[r],r,e));return n},emptyDomNode:function(e){for(;e.firstChild;)m.removeNode(e.firstChild)},moveCleanedNodesToContainerElement:function(e){for(var t=m.utils.makeArray(e),n=(t[0]&&t[0].ownerDocument||o).createElement("div"),r=0,i=t.length;r<i;r++)n.appendChild(m.cleanNode(t[r]));return n},cloneNodes:function(e,t){for(var n=0,r=e.length,o=[];n<r;n++){var i=e[n].cloneNode(!0);o.push(t?m.cleanNode(i):i)}return o},setDomNodeChildren:function(e,t){if(m.utils.emptyDomNode(e),t)for(var n=0,r=t.length;n<r;n++)e.appendChild(t[n])},replaceDomNodes:function(e,t){var n=e.nodeType?[e]:e;if(n.length>0){for(var r=n[0],o=r.parentNode,i=0,s=t.length;i<s;i++)o.insertBefore(t[i],r);for(var i=0,s=n.length;i<s;i++)m.removeNode(n[i])}},fixUpContinuousNodeArray:function(e,t){if(e.length){for(t=8===t.nodeType&&t.parentNode||t;e.length&&e[0].parentNode!==t;)e.splice(0,1);for(;e.length>1&&e[e.length-1].parentNode!==t;)e.length--;if(e.length>1){var n=e[0],r=e[e.length-1];for(e.length=0;n!==r;)e.push(n),n=n.nextSibling;e.push(r)}}return e},setOptionNodeSelectionState:function(e,t){g<7?e.setAttribute("selected",t):e.selected=t},stringTrim:function(t){return null===t||t===e?"":t.trim?t.trim():t.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},stringStartsWith:function(e,t){return e=e||"",!(t.length>e.length)&&e.substring(0,t.length)===t},domNodeIsContainedBy:function(e,t){if(e===t)return!0;if(11===e.nodeType)return!1;if(t.contains)return t.contains(3===e.nodeType?e.parentNode:e);if(t.compareDocumentPosition)return 16==(16&t.compareDocumentPosition(e));for(;e&&e!=t;)e=e.parentNode;return!!e},domNodeIsAttachedToDocument:function(e){return m.utils.domNodeIsContainedBy(e,e.ownerDocument.documentElement)},anyDomNodeIsAttachedToDocument:function(e){return!!m.utils.arrayFirst(e,m.utils.domNodeIsAttachedToDocument)},tagNameLower:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},catchFunctionErrors:function(e){return m.onError?function(){try{return e.apply(this,arguments)}catch(e){throw m.onError&&m.onError(e),e}}:e},setTimeout:function(e,t){return setTimeout(m.utils.catchFunctionErrors(e),t)},deferError:function(e){setTimeout(function(){throw m.onError&&m.onError(e),e},0)},registerEventHandler:function(e,t,n){var r=m.utils.catchFunctionErrors(n),o=g&&h[t];if(m.options.useOnlyNativeEvents||o||!s)if(o||"function"!=typeof e.addEventListener){if(void 0===e.attachEvent)throw new Error("Browser doesn't support addEventListener or attachEvent");var i=function(t){r.call(e,t)},a="on"+t;e.attachEvent(a,i),m.utils.domNodeDisposal.addDisposeCallback(e,function(){e.detachEvent(a,i)})}else e.addEventListener(t,r,!1);else s(e).bind(t,r)},triggerEvent:function(e,t){if(!e||!e.nodeType)throw new Error("element must be a DOM node when calling triggerEvent");var n=l(e,t);if(m.options.useOnlyNativeEvents||!s||n)if("function"==typeof o.createEvent){if("function"!=typeof e.dispatchEvent)throw new Error("The supplied element doesn't support dispatchEvent");var i=d[t]||"HTMLEvents",a=o.createEvent(i);a.initEvent(t,!0,!0,r,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(a)}else if(n&&e.click)e.click();else{if(void 0===e.fireEvent)throw new Error("Browser doesn't support triggering events");e.fireEvent("on"+t)}else s(e).trigger(t)},unwrapObservable:function(e){return m.isObservable(e)?e():e},peekObservable:function(e){return m.isObservable(e)?e.peek():e},toggleDomNodeCssClass:function(e,t,n){var r;t&&("object"==typeof e.classList?(r=e.classList[n?"add":"remove"],m.utils.arrayForEach(t.match(b),function(t){r.call(e.classList,t)})):"string"==typeof e.className.baseVal?c(e.className,"baseVal",t,n):c(e,"className",t,n))},setTextContent:function(t,n){var r=m.utils.unwrapObservable(n);null!==r&&r!==e||(r="");var o=m.virtualElements.firstChild(t);!o||3!=o.nodeType||m.virtualElements.nextSibling(o)?m.virtualElements.setDomNodeChildren(t,[t.ownerDocument.createTextNode(r)]):o.data=r,m.utils.forceRefresh(t)},setElementName:function(e,t){if(e.name=t,g<=7)try{e.mergeAttributes(o.createElement("<input name='"+e.name+"'/>"),!1)}catch(e){}},forceRefresh:function(e){if(g>=9){var t=1==e.nodeType?e:e.parentNode;t.style&&(t.style.zoom=t.style.zoom)}},ensureSelectElementIsRenderedCorrectly:function(e){if(g){var t=e.style.width;e.style.width=0,e.style.width=t}},range:function(e,t){e=m.utils.unwrapObservable(e),t=m.utils.unwrapObservable(t);for(var n=[],r=e;r<=t;r++)n.push(r);return n},makeArray:function(e){for(var t=[],n=0,r=e.length;n<r;n++)t.push(e[n]);return t},createSymbolOrString:function(e){return e},isIe6:y,isIe7:v,ieVersion:g,getFormFields:function(e,t){for(var n=m.utils.makeArray(e.getElementsByTagName("input")).concat(m.utils.makeArray(e.getElementsByTagName("textarea"))),r="string"==typeof t?function(e){return e.name===t}:function(e){return t.test(e.name)},o=[],i=n.length-1;i>=0;i--)r(n[i])&&o.push(n[i]);return o},parseJson:function(e){return"string"==typeof e&&(e=m.utils.stringTrim(e))?a&&a.parse?a.parse(e):new Function("return "+e)():null},stringifyJson:function(e,t,n){if(!a||!a.stringify)throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return a.stringify(m.utils.unwrapObservable(e),t,n)},postJson:function(e,n,r){var i=(r=r||{}).params||{},s=r.includeFields||this.fieldsIncludedWithJsonPost,a=e;if("object"==typeof e&&"form"===m.utils.tagNameLower(e)){var u=e;a=u.action;for(var l=s.length-1;l>=0;l--)for(var c=m.utils.getFormFields(u,s[l]),p=c.length-1;p>=0;p--)i[c[p].name]=c[p].value}n=m.utils.unwrapObservable(n);var f=o.createElement("form");f.style.display="none",f.action=a,f.method="post";for(var d in n){var h=o.createElement("input");h.type="hidden",h.name=d,h.value=m.utils.stringifyJson(m.utils.unwrapObservable(n[d])),f.appendChild(h)}t(i,function(e,t){var n=o.createElement("input");n.type="hidden",n.name=e,n.value=t,f.appendChild(n)}),o.body.appendChild(f),r.submitter?r.submitter(f):f.submit(),setTimeout(function(){f.parentNode.removeChild(f)},0)}}}(),m.exportSymbol("utils",m.utils),m.exportSymbol("utils.arrayForEach",m.utils.arrayForEach),m.exportSymbol("utils.arrayFirst",m.utils.arrayFirst),m.exportSymbol("utils.arrayFilter",m.utils.arrayFilter),m.exportSymbol("utils.arrayGetDistinctValues",m.utils.arrayGetDistinctValues),m.exportSymbol("utils.arrayIndexOf",m.utils.arrayIndexOf),m.exportSymbol("utils.arrayMap",m.utils.arrayMap),m.exportSymbol("utils.arrayPushAll",m.utils.arrayPushAll),m.exportSymbol("utils.arrayRemoveItem",m.utils.arrayRemoveItem),m.exportSymbol("utils.extend",m.utils.extend),m.exportSymbol("utils.fieldsIncludedWithJsonPost",m.utils.fieldsIncludedWithJsonPost),m.exportSymbol("utils.getFormFields",m.utils.getFormFields),m.exportSymbol("utils.peekObservable",m.utils.peekObservable),m.exportSymbol("utils.postJson",m.utils.postJson),m.exportSymbol("utils.parseJson",m.utils.parseJson),m.exportSymbol("utils.registerEventHandler",m.utils.registerEventHandler),m.exportSymbol("utils.stringifyJson",m.utils.stringifyJson),m.exportSymbol("utils.range",m.utils.range),m.exportSymbol("utils.toggleDomNodeCssClass",m.utils.toggleDomNodeCssClass),m.exportSymbol("utils.triggerEvent",m.utils.triggerEvent),m.exportSymbol("utils.unwrapObservable",m.utils.unwrapObservable),m.exportSymbol("utils.objectForEach",m.utils.objectForEach),m.exportSymbol("utils.addOrRemoveItem",m.utils.addOrRemoveItem),m.exportSymbol("utils.setTextContent",m.utils.setTextContent),m.exportSymbol("unwrap",m.utils.unwrapObservable),Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if(1===arguments.length)return function(){return t.apply(e,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var r=n.slice(0);return r.push.apply(r,arguments),t.apply(e,r)}}),m.utils.domData=new function(){function t(t,i){var s=t[r];if(!(s&&"null"!==s&&o[s])){if(!i)return e;s=t[r]="ko"+n++,o[s]={}}return o[s]}var n=0,r="__ko__"+(new Date).getTime(),o={};return{get:function(n,r){var o=t(n,!1);return o===e?e:o[r]},set:function(n,r,o){o===e&&t(n,!1)===e||(t(n,!0)[r]=o)},clear:function(e){var t=e[r];return!!t&&(delete o[t],e[r]=null,!0)},nextKey:function(){return n+++r}}},m.exportSymbol("utils.domData",m.utils.domData),m.exportSymbol("utils.domData.clear",m.utils.domData.clear),m.utils.domNodeDisposal=new function(){function t(t,n){var r=m.utils.domData.get(t,i);return r===e&&n&&(r=[],m.utils.domData.set(t,i,r)),r}function n(t){m.utils.domData.set(t,i,e)}function r(e){var n=t(e,!1);if(n){n=n.slice(0);for(var r=0;r<n.length;r++)n[r](e)}m.utils.domData.clear(e),m.utils.domNodeDisposal.cleanExternalData(e),u[e.nodeType]&&o(e)}function o(e){for(var t,n=e.firstChild;t=n;)n=t.nextSibling,8===t.nodeType&&r(t)}var i=m.utils.domData.nextKey(),a={1:!0,8:!0,9:!0},u={1:!0,9:!0};return{addDisposeCallback:function(e,n){if("function"!=typeof n)throw new Error("Callback must be a function");t(e,!0).push(n)},removeDisposeCallback:function(e,r){var o=t(e,!1);o&&(m.utils.arrayRemoveItem(o,r),0==o.length&&n(e))},cleanNode:function(e){if(a[e.nodeType]&&(r(e),u[e.nodeType])){var t=[];m.utils.arrayPushAll(t,e.getElementsByTagName("*"));for(var n=0,o=t.length;n<o;n++)r(t[n])}return e},removeNode:function(e){m.cleanNode(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){s&&"function"==typeof s.cleanData&&s.cleanData([e])}}},m.cleanNode=m.utils.domNodeDisposal.cleanNode,m.removeNode=m.utils.domNodeDisposal.removeNode,m.exportSymbol("cleanNode",m.cleanNode),m.exportSymbol("removeNode",m.removeNode),m.exportSymbol("utils.domNodeDisposal",m.utils.domNodeDisposal),m.exportSymbol("utils.domNodeDisposal.addDisposeCallback",m.utils.domNodeDisposal.addDisposeCallback),m.exportSymbol("utils.domNodeDisposal.removeDisposeCallback",m.utils.domNodeDisposal.removeDisposeCallback),function(){function t(e){var t=e.match(/^<([a-z]+)[ >]/);return t&&p[t[1]]||a}function n(e,n){n||(n=o);var i=n.parentWindow||n.defaultView||r,s=m.utils.stringTrim(e).toLowerCase(),a=n.createElement("div"),u=t(s),l=u[0],c="ignored<div>"+u[1]+e+u[2]+"</div>";for("function"==typeof i.innerShiv?a.appendChild(i.innerShiv(c)):(f&&n.appendChild(a),a.innerHTML=c,f&&a.parentNode.removeChild(a));l--;)a=a.lastChild;return m.utils.makeArray(a.lastChild.childNodes)}function i(e,t){if(s.parseHTML)return s.parseHTML(e,t)||[];var n=s.clean([e],t);if(n&&n[0]){for(var r=n[0];r.parentNode&&11!==r.parentNode.nodeType;)r=r.parentNode;r.parentNode&&r.parentNode.removeChild(r)}return n}var a=[0,"",""],u=[1,"<table>","</table>"],l=[3,"<table><tbody><tr>","</tr></tbody></table>"],c=[1,"<select multiple='multiple'>","</select>"],p={thead:u,tbody:u,tfoot:u,tr:[2,"<table><tbody>","</tbody></table>"],td:l,th:l,option:c,optgroup:c},f=m.utils.ieVersion<=8;m.utils.parseHtmlFragment=function(e,t){return s?i(e,t):n(e,t)},m.utils.setHtml=function(t,n){if(m.utils.emptyDomNode(t),null!==(n=m.utils.unwrapObservable(n))&&n!==e)if("string"!=typeof n&&(n=n.toString()),s)s(t).html(n);else for(var r=m.utils.parseHtmlFragment(n,t.ownerDocument),o=0;o<r.length;o++)t.appendChild(r[o])}}(),m.exportSymbol("utils.parseHtmlFragment",m.utils.parseHtmlFragment),m.exportSymbol("utils.setHtml",m.utils.setHtml),m.memoization=function(){function t(){return(4294967296*(1+Math.random())|0).toString(16).substring(1)}function n(){return t()+t()}function r(e,t){if(e)if(8==e.nodeType){var n=m.memoization.parseMemoText(e.nodeValue);null!=n&&t.push({domNode:e,memoId:n})}else if(1==e.nodeType)for(var o=0,i=e.childNodes,s=i.length;o<s;o++)r(i[o],t)}var o={};return{memoize:function(e){if("function"!=typeof e)throw new Error("You can only pass a function to ko.memoization.memoize()");var t=n();return o[t]=e,"\x3c!--[ko_memo:"+t+"]--\x3e"},unmemoize:function(t,n){var r=o[t];if(r===e)throw new Error("Couldn't find any memo with ID "+t+". Perhaps it's already been unmemoized.");try{return r.apply(null,n||[]),!0}finally{delete o[t]}},unmemoizeDomNodeAndDescendants:function(e,t){var n=[];r(e,n);for(var o=0,i=n.length;o<i;o++){var s=n[o].domNode,a=[s];t&&m.utils.arrayPushAll(a,t),m.memoization.unmemoize(n[o].memoId,a),s.nodeValue="",s.parentNode&&s.parentNode.removeChild(s)}},parseMemoText:function(e){var t=e.match(/^\[ko_memo\:(.*?)\]$/);return t?t[1]:null}}}(),m.exportSymbol("memoization",m.memoization),m.exportSymbol("memoization.memoize",m.memoization.memoize),m.exportSymbol("memoization.unmemoize",m.memoization.unmemoize),m.exportSymbol("memoization.parseMemoText",m.memoization.parseMemoText),m.exportSymbol("memoization.unmemoizeDomNodeAndDescendants",m.memoization.unmemoizeDomNodeAndDescendants),m.tasks=function(){function e(){if(s)for(var e,t=s,n=0;u<s;)if(e=i[u++]){if(u>t){if(++n>=5e3){u=s,m.utils.deferError(Error("'Too much recursion' after processing "+n+" task groups."));break}t=s}try{e()}catch(e){m.utils.deferError(e)}}}function t(){e(),u=s=i.length=0}function n(){m.tasks.scheduler(t)}var i=[],s=0,a=1,u=0;return{scheduler:r.MutationObserver?function(e){var t=o.createElement("div");return new MutationObserver(e).observe(t,{attributes:!0}),function(){t.classList.toggle("foo")}}(t):o&&"onreadystatechange"in o.createElement("script")?function(e){var t=o.createElement("script");t.onreadystatechange=function(){t.onreadystatechange=null,o.documentElement.removeChild(t),t=null,e()},o.documentElement.appendChild(t)}:function(e){setTimeout(e,0)},schedule:function(e){return s||n(),i[s++]=e,a++},cancel:function(e){var t=e-(a-s);t>=u&&t<s&&(i[t]=null)},resetForTesting:function(){var e=s-u;return u=s=i.length=0,e},runEarly:e}}(),m.exportSymbol("tasks",m.tasks),m.exportSymbol("tasks.schedule",m.tasks.schedule),m.exportSymbol("tasks.runEarly",m.tasks.runEarly),m.extenders={throttle:function(e,t){e.throttleEvaluation=t;var n=null;return m.dependentObservable({read:e,write:function(r){clearTimeout(n),n=m.utils.setTimeout(function(){e(r)},t)}})},rateLimit:function(e,t){var n,r,o;"number"==typeof t?n=t:(n=t.timeout,r=t.method),e._deferUpdates=!1,o="notifyWhenChangesStop"==r?c:l,e.limit(function(e){return o(e,n)})},deferred:function(t,n){if(!0!==n)throw new Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");t._deferUpdates||(t._deferUpdates=!0,t.limit(function(n){var r,o=!1;return function(){if(!o){m.tasks.cancel(r),r=m.tasks.schedule(n);try{o=!0,t.notifySubscribers(e,"dirty")}finally{o=!1}}}}))},notify:function(e,t){e.equalityComparer="always"==t?null:u}};var g={undefined:1,boolean:1,number:1,string:1};m.exportSymbol("extenders",m.extenders),m.subscription=function(e,t,n){this._target=e,this.callback=t,this.disposeCallback=n,this.isDisposed=!1,m.exportProperty(this,"dispose",this.dispose)},m.subscription.prototype.dispose=function(){this.isDisposed=!0,this.disposeCallback()},m.subscribable=function(){m.utils.setPrototypeOfOrExtend(this,v),v.init(this)};var y="change",v={init:function(e){e._subscriptions={change:[]},e._versionNumber=1},subscribe:function(e,t,n){var r=this;n=n||y;var o=t?e.bind(t):e,i=new m.subscription(r,o,function(){m.utils.arrayRemoveItem(r._subscriptions[n],i),r.afterSubscriptionRemove&&r.afterSubscriptionRemove(n)});return r.beforeSubscriptionAdd&&r.beforeSubscriptionAdd(n),r._subscriptions[n]||(r._subscriptions[n]=[]),r._subscriptions[n].push(i),i},notifySubscribers:function(e,t){if((t=t||y)===y&&this.updateVersion(),this.hasSubscriptionsForEvent(t)){var n=t===y&&this._changeSubscriptions||this._subscriptions[t].slice(0);try{m.dependencyDetection.begin();for(var r,o=0;r=n[o];++o)r.isDisposed||r.callback(e)}finally{m.dependencyDetection.end()}}},getVersion:function(){return this._versionNumber},hasChanged:function(e){return this.getVersion()!==e},updateVersion:function(){++this._versionNumber},limit:function(e){var t,n,r,o,i=this,s=m.isObservable(i);i._origNotifySubscribers||(i._origNotifySubscribers=i.notifySubscribers,i.notifySubscribers=p);var a=e(function(){i._notificationIsPending=!1,s&&o===i&&(o=i._evalIfChanged?i._evalIfChanged():i());var e=n||i.isDifferent(r,o);n=t=!1,e&&i._origNotifySubscribers(r=o)});i._limitChange=function(e){i._changeSubscriptions=i._subscriptions[y].slice(0),i._notificationIsPending=t=!0,o=e,a()},i._limitBeforeChange=function(e){t||(r=e,i._origNotifySubscribers(e,"beforeChange"))},i._notifyNextChangeIfValueIsDifferent=function(){i.isDifferent(r,i.peek(!0))&&(n=!0)}},hasSubscriptionsForEvent:function(e){return this._subscriptions[e]&&this._subscriptions[e].length},getSubscriptionsCount:function(e){if(e)return this._subscriptions[e]&&this._subscriptions[e].length||0;var t=0;return m.utils.objectForEach(this._subscriptions,function(e,n){"dirty"!==e&&(t+=n.length)}),t},isDifferent:function(e,t){return!this.equalityComparer||!this.equalityComparer(e,t)},extend:function(e){var t=this;return e&&m.utils.objectForEach(e,function(e,n){var r=m.extenders[e];"function"==typeof r&&(t=r(t,n)||t)}),t}};m.exportProperty(v,"subscribe",v.subscribe),m.exportProperty(v,"extend",v.extend),m.exportProperty(v,"getSubscriptionsCount",v.getSubscriptionsCount),m.utils.canSetPrototype&&m.utils.setPrototypeOf(v,Function.prototype),m.subscribable.fn=v,m.isSubscribable=function(e){return null!=e&&"function"==typeof e.subscribe&&"function"==typeof e.notifySubscribers},m.exportSymbol("subscribable",m.subscribable),m.exportSymbol("isSubscribable",m.isSubscribable),m.computedContext=m.dependencyDetection=function(){function e(){return++i}function t(e){o.push(r),r=e}function n(){r=o.pop()}var r,o=[],i=0;return{begin:t,end:n,registerDependency:function(t){if(r){if(!m.isSubscribable(t))throw new Error("Only subscribable things can act as dependencies");r.callback.call(r.callbackTarget,t,t._id||(t._id=e()))}},ignore:function(e,r,o){try{return t(),e.apply(r,o||[])}finally{n()}},getDependenciesCount:function(){if(r)return r.computed.getDependenciesCount()},isInitial:function(){if(r)return r.isInitial}}}(),m.exportSymbol("computedContext",m.computedContext),m.exportSymbol("computedContext.getDependenciesCount",m.computedContext.getDependenciesCount),m.exportSymbol("computedContext.isInitial",m.computedContext.isInitial),m.exportSymbol("ignoreDependencies",m.ignoreDependencies=m.dependencyDetection.ignore);var b=m.utils.createSymbolOrString("_latestValue");m.observable=function(e){function t(){return arguments.length>0?(t.isDifferent(t[b],arguments[0])&&(t.valueWillMutate(),t[b]=arguments[0],t.valueHasMutated()),this):(m.dependencyDetection.registerDependency(t),t[b])}return t[b]=e,m.utils.canSetPrototype||m.utils.extend(t,m.subscribable.fn),m.subscribable.fn.init(t),m.utils.setPrototypeOfOrExtend(t,x),m.options.deferUpdates&&m.extenders.deferred(t,!0),t};var x={equalityComparer:u,peek:function(){return this[b]},valueHasMutated:function(){this.notifySubscribers(this[b])},valueWillMutate:function(){this.notifySubscribers(this[b],"beforeChange")}};m.utils.canSetPrototype&&m.utils.setPrototypeOf(x,m.subscribable.fn);var w=m.observable.protoProperty="__ko_proto__";x[w]=m.observable,m.hasPrototype=function(t,n){return null!==t&&t!==e&&t[w]!==e&&(t[w]===n||m.hasPrototype(t[w],n))},m.isObservable=function(e){return m.hasPrototype(e,m.observable)},m.isWriteableObservable=function(e){return"function"==typeof e&&e[w]===m.observable||!("function"!=typeof e||e[w]!==m.dependentObservable||!e.hasWriteFunction)},m.exportSymbol("observable",m.observable),m.exportSymbol("isObservable",m.isObservable),m.exportSymbol("isWriteableObservable",m.isWriteableObservable),m.exportSymbol("isWritableObservable",m.isWriteableObservable),m.exportSymbol("observable.fn",x),m.exportProperty(x,"peek",x.peek),m.exportProperty(x,"valueHasMutated",x.valueHasMutated),m.exportProperty(x,"valueWillMutate",x.valueWillMutate),m.observableArray=function(e){if("object"!=typeof(e=e||[])||!("length"in e))throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");var t=m.observable(e);return m.utils.setPrototypeOfOrExtend(t,m.observableArray.fn),t.extend({trackArrayChanges:!0})},m.observableArray.fn={remove:function(e){for(var t=this.peek(),n=[],r="function"!=typeof e||m.isObservable(e)?function(t){return t===e}:e,o=0;o<t.length;o++){var i=t[o];r(i)&&(0===n.length&&this.valueWillMutate(),n.push(i),t.splice(o,1),o--)}return n.length&&this.valueHasMutated(),n},removeAll:function(t){if(t===e){var n=this.peek(),r=n.slice(0);return this.valueWillMutate(),n.splice(0,n.length),this.valueHasMutated(),r}return t?this.remove(function(e){return m.utils.arrayIndexOf(t,e)>=0}):[]},destroy:function(e){var t=this.peek(),n="function"!=typeof e||m.isObservable(e)?function(t){return t===e}:e;this.valueWillMutate();for(var r=t.length-1;r>=0;r--)n(t[r])&&(t[r]._destroy=!0);this.valueHasMutated()},destroyAll:function(t){return t===e?this.destroy(function(){return!0}):t?this.destroy(function(e){return m.utils.arrayIndexOf(t,e)>=0}):[]},indexOf:function(e){var t=this();return m.utils.arrayIndexOf(t,e)},replace:function(e,t){var n=this.indexOf(e);n>=0&&(this.valueWillMutate(),this.peek()[n]=t,this.valueHasMutated())}},m.utils.canSetPrototype&&m.utils.setPrototypeOf(m.observableArray.fn,m.observable.fn),m.utils.arrayForEach(["pop","push","reverse","shift","sort","splice","unshift"],function(e){m.observableArray.fn[e]=function(){var t=this.peek();this.valueWillMutate(),this.cacheDiffForKnownOperation(t,e,arguments);var n=t[e].apply(t,arguments);return this.valueHasMutated(),n===t?this:n}}),m.utils.arrayForEach(["slice"],function(e){m.observableArray.fn[e]=function(){var t=this();return t[e].apply(t,arguments)}}),m.exportSymbol("observableArray",m.observableArray);var E="arrayChange";m.extenders.trackArrayChanges=function(t,n){function r(){if(!a){a=!0,s=t.notifySubscribers,t.notifySubscribers=function(e,t){return t&&t!==y||++l,s.apply(this,arguments)};var e=[].concat(t.peek()||[]);u=null,i=t.subscribe(function(n){if(n=[].concat(n||[]),t.hasSubscriptionsForEvent(E))var r=o(e,n);e=n,u=null,l=0,r&&r.length&&t.notifySubscribers(r,E)})}}function o(e,n){return(!u||l>1)&&(u=m.utils.compareArrays(e,n,t.compareArrayOptions)),u}if(t.compareArrayOptions={},n&&"object"==typeof n&&m.utils.extend(t.compareArrayOptions,n),t.compareArrayOptions.sparse=!0,!t.cacheDiffForKnownOperation){var i,s,a=!1,u=null,l=0,c=t.beforeSubscriptionAdd,p=t.afterSubscriptionRemove;t.beforeSubscriptionAdd=function(e){c&&c.call(t,e),e===E&&r()},t.afterSubscriptionRemove=function(n){p&&p.call(t,n),n!==E||t.hasSubscriptionsForEvent(E)||(s&&(t.notifySubscribers=s,s=e),i.dispose(),a=!1)},t.cacheDiffForKnownOperation=function(e,t,n){function r(e,t,n){return o[o.length]={status:e,value:t,index:n}}if(a&&!l){var o=[],i=e.length,s=n.length,c=0;switch(t){case"push":c=i;case"unshift":for(v=0;v<s;v++)r("added",n[v],c+v);break;case"pop":c=i-1;case"shift":i&&r("deleted",e[c],c);break;case"splice":for(var p=Math.min(Math.max(0,n[0]<0?i+n[0]:n[0]),i),f=1===s?i:Math.min(p+(n[1]||0),i),d=p+s-2,h=Math.max(f,d),g=[],y=[],v=p,b=2;v<h;++v,++b)v<f&&y.push(r("deleted",e[v],v)),v<d&&g.push(r("added",n[b],v));m.utils.findMovesInArrayComparison(y,g);break;default:return}u=o}}}};var k=m.utils.createSymbolOrString("_state");m.computed=m.dependentObservable=function(t,n,r){function o(){if(arguments.length>0){if("function"!=typeof i)throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return i.apply(s.evaluatorFunctionTarget,arguments),this}return m.dependencyDetection.registerDependency(o),(s.isDirty||s.isSleeping&&o.haveDependenciesChanged())&&o.evaluateImmediate(),s.latestValue}if("object"==typeof t?r=t:(r=r||{},t&&(r.read=t)),"function"!=typeof r.read)throw Error("Pass a function that returns the value of the ko.computed");var i=r.write,s={latestValue:e,isStale:!0,isDirty:!0,isBeingEvaluated:!1,suppressDisposalUntilDisposeWhenReturnsFalse:!1,isDisposed:!1,pure:!1,isSleeping:!1,readFunction:r.read,evaluatorFunctionTarget:n||r.owner,disposeWhenNodeIsRemoved:r.disposeWhenNodeIsRemoved||r.disposeWhenNodeIsRemoved||null,disposeWhen:r.disposeWhen||r.disposeWhen,domNodeDisposalCallback:null,dependencyTracking:{},dependenciesCount:0,evaluationTimeoutInstance:null};return o[k]=s,o.hasWriteFunction="function"==typeof i,m.utils.canSetPrototype||m.utils.extend(o,m.subscribable.fn),m.subscribable.fn.init(o),m.utils.setPrototypeOfOrExtend(o,T),r.pure?(s.pure=!0,s.isSleeping=!0,m.utils.extend(o,C)):r.deferEvaluation&&m.utils.extend(o,S),m.options.deferUpdates&&m.extenders.deferred(o,!0),o._options=r,s.disposeWhenNodeIsRemoved&&(s.suppressDisposalUntilDisposeWhenReturnsFalse=!0,s.disposeWhenNodeIsRemoved.nodeType||(s.disposeWhenNodeIsRemoved=null)),s.isSleeping||r.deferEvaluation||o.evaluateImmediate(),s.disposeWhenNodeIsRemoved&&o.isActive()&&m.utils.domNodeDisposal.addDisposeCallback(s.disposeWhenNodeIsRemoved,s.domNodeDisposalCallback=function(){o.dispose()}),o};var T={equalityComparer:u,getDependenciesCount:function(){return this[k].dependenciesCount},addDependencyTracking:function(e,t,n){if(this[k].pure&&t===this)throw Error("A 'pure' computed must not be called recursively");this[k].dependencyTracking[e]=n,n._order=this[k].dependenciesCount++,n._version=t.getVersion()},haveDependenciesChanged:function(){var e,t,n=this[k].dependencyTracking;for(e in n)if(n.hasOwnProperty(e)&&(t=n[e],this._evalDelayed&&t._target._notificationIsPending||t._target.hasChanged(t._version)))return!0},markDirty:function(){this._evalDelayed&&!this[k].isBeingEvaluated&&this._evalDelayed(!1)},isActive:function(){var e=this[k];return e.isDirty||e.dependenciesCount>0},respondToChange:function(){this._notificationIsPending?this[k].isDirty&&(this[k].isStale=!0):this.evaluatePossiblyAsync()},subscribeToDependency:function(e){if(e._deferUpdates&&!this[k].disposeWhenNodeIsRemoved){var t=e.subscribe(this.markDirty,this,"dirty"),n=e.subscribe(this.respondToChange,this);return{_target:e,dispose:function(){t.dispose(),n.dispose()}}}return e.subscribe(this.evaluatePossiblyAsync,this)},evaluatePossiblyAsync:function(){var e=this,t=e.throttleEvaluation;t&&t>=0?(clearTimeout(this[k].evaluationTimeoutInstance),this[k].evaluationTimeoutInstance=m.utils.setTimeout(function(){e.evaluateImmediate(!0)},t)):e._evalDelayed?e._evalDelayed(!0):e.evaluateImmediate(!0)},evaluateImmediate:function(e){var t=this,n=t[k],r=n.disposeWhen,o=!1;if(!n.isBeingEvaluated&&!n.isDisposed){if(n.disposeWhenNodeIsRemoved&&!m.utils.domNodeIsAttachedToDocument(n.disposeWhenNodeIsRemoved)||r&&r()){if(!n.suppressDisposalUntilDisposeWhenReturnsFalse)return void t.dispose()}else n.suppressDisposalUntilDisposeWhenReturnsFalse=!1;n.isBeingEvaluated=!0;try{o=this.evaluateImmediate_CallReadWithDependencyDetection(e)}finally{n.isBeingEvaluated=!1}return n.dependenciesCount||t.dispose(),o}},evaluateImmediate_CallReadWithDependencyDetection:function(t){var n=this,r=n[k],o=!1,i=r.pure?e:!r.dependenciesCount,s={computedObservable:n,disposalCandidates:r.dependencyTracking,disposalCount:r.dependenciesCount};m.dependencyDetection.begin({callbackTarget:s,callback:d,computed:n,isInitial:i}),r.dependencyTracking={},r.dependenciesCount=0;var a=this.evaluateImmediate_CallReadThenEndDependencyDetection(r,s);return n.isDifferent(r.latestValue,a)&&(r.isSleeping||n.notifySubscribers(r.latestValue,"beforeChange"),r.latestValue=a,n._latestValue=a,r.isSleeping?n.updateVersion():t&&n.notifySubscribers(r.latestValue),o=!0),i&&n.notifySubscribers(r.latestValue,"awake"),o},evaluateImmediate_CallReadThenEndDependencyDetection:function(e,t){try{var n=e.readFunction;return e.evaluatorFunctionTarget?n.call(e.evaluatorFunctionTarget):n()}finally{m.dependencyDetection.end(),t.disposalCount&&!e.isSleeping&&m.utils.objectForEach(t.disposalCandidates,f),e.isStale=e.isDirty=!1}},peek:function(e){var t=this[k];return(t.isDirty&&(e||!t.dependenciesCount)||t.isSleeping&&this.haveDependenciesChanged())&&this.evaluateImmediate(),t.latestValue},limit:function(e){m.subscribable.fn.limit.call(this,e),this._evalIfChanged=function(){return this[k].isStale?this.evaluateImmediate():this[k].isDirty=!1,this[k].latestValue},this._evalDelayed=function(e){this._limitBeforeChange(this[k].latestValue),this[k].isDirty=!0,e&&(this[k].isStale=!0),this._limitChange(this)}},dispose:function(){var e=this[k];!e.isSleeping&&e.dependencyTracking&&m.utils.objectForEach(e.dependencyTracking,function(e,t){t.dispose&&t.dispose()}),e.disposeWhenNodeIsRemoved&&e.domNodeDisposalCallback&&m.utils.domNodeDisposal.removeDisposeCallback(e.disposeWhenNodeIsRemoved,e.domNodeDisposalCallback),e.dependencyTracking=null,e.dependenciesCount=0,e.isDisposed=!0,e.isStale=!1,e.isDirty=!1,e.isSleeping=!1,e.disposeWhenNodeIsRemoved=null}},C={beforeSubscriptionAdd:function(e){var t=this,n=t[k];if(!n.isDisposed&&n.isSleeping&&"change"==e){if(n.isSleeping=!1,n.isStale||t.haveDependenciesChanged())n.dependencyTracking=null,n.dependenciesCount=0,t.evaluateImmediate()&&t.updateVersion();else{var r=[];m.utils.objectForEach(n.dependencyTracking,function(e,t){r[t._order]=e}),m.utils.arrayForEach(r,function(e,r){var o=n.dependencyTracking[e],i=t.subscribeToDependency(o._target);i._order=r,i._version=o._version,n.dependencyTracking[e]=i})}n.isDisposed||t.notifySubscribers(n.latestValue,"awake")}},afterSubscriptionRemove:function(t){var n=this[k];n.isDisposed||"change"!=t||this.hasSubscriptionsForEvent("change")||(m.utils.objectForEach(n.dependencyTracking,function(e,t){t.dispose&&(n.dependencyTracking[e]={_target:t._target,_order:t._order,_version:t._version},t.dispose())}),n.isSleeping=!0,this.notifySubscribers(e,"asleep"))},getVersion:function(){var e=this[k];return e.isSleeping&&(e.isStale||this.haveDependenciesChanged())&&this.evaluateImmediate(),m.subscribable.fn.getVersion.call(this)}},S={beforeSubscriptionAdd:function(e){"change"!=e&&"beforeChange"!=e||this.peek()}};m.utils.canSetPrototype&&m.utils.setPrototypeOf(T,m.subscribable.fn);var D=m.observable.protoProperty;m.computed[D]=m.observable,T[D]=m.computed,m.isComputed=function(e){return m.hasPrototype(e,m.computed)},m.isPureComputed=function(e){return m.hasPrototype(e,m.computed)&&e[k]&&e[k].pure},m.exportSymbol("computed",m.computed),m.exportSymbol("dependentObservable",m.computed),m.exportSymbol("isComputed",m.isComputed),m.exportSymbol("isPureComputed",m.isPureComputed),m.exportSymbol("computed.fn",T),m.exportProperty(T,"peek",T.peek),m.exportProperty(T,"dispose",T.dispose),m.exportProperty(T,"isActive",T.isActive),m.exportProperty(T,"getDependenciesCount",T.getDependenciesCount),m.pureComputed=function(e,t){return"function"==typeof e?m.computed(e,t,{pure:!0}):(e=m.utils.extend({},e),e.pure=!0,m.computed(e,t))},m.exportSymbol("pureComputed",m.pureComputed),function(){function t(o,i,s){if(s=s||new r,!!("object"!=typeof(o=i(o))||null===o||o===e||o instanceof RegExp||o instanceof Date||o instanceof String||o instanceof Number||o instanceof Boolean))return o;var a=o instanceof Array?[]:{};return s.save(o,a),n(o,function(n){var r=i(o[n]);switch(typeof r){case"boolean":case"number":case"string":case"function":a[n]=r;break;case"object":case"undefined":var u=s.get(r);a[n]=u!==e?u:t(r,i,s)}}),a}function n(e,t){if(e instanceof Array){for(var n=0;n<e.length;n++)t(n);"function"==typeof e.toJSON&&t("toJSON")}else for(var r in e)t(r)}function r(){this.keys=[],this.values=[]}m.toJS=function(e){if(0==arguments.length)throw new Error("When calling ko.toJS, pass the object you want to convert.");return t(e,function(e){for(var t=0;m.isObservable(e)&&t<10;t++)e=e();return e})},m.toJSON=function(e,t,n){var r=m.toJS(e);return m.utils.stringifyJson(r,t,n)},r.prototype={constructor:r,save:function(e,t){var n=m.utils.arrayIndexOf(this.keys,e);n>=0?this.values[n]=t:(this.keys.push(e),this.values.push(t))},get:function(t){var n=m.utils.arrayIndexOf(this.keys,t);return n>=0?this.values[n]:e}}}(),m.exportSymbol("toJS",m.toJS),m.exportSymbol("toJSON",m.toJSON),m.selectExtensions={readValue:function(t){switch(m.utils.tagNameLower(t)){case"option":return!0===t.__ko__hasDomDataOptionValue__?m.utils.domData.get(t,m.bindingHandlers.options.optionValueDomDataKey):m.utils.ieVersion<=7?t.getAttributeNode("value")&&t.getAttributeNode("value").specified?t.value:t.text:t.value;case"select":return t.selectedIndex>=0?m.selectExtensions.readValue(t.options[t.selectedIndex]):e;default:return t.value}},writeValue:function(t,n,r){switch(m.utils.tagNameLower(t)){case"option":switch(typeof n){case"string":m.utils.domData.set(t,m.bindingHandlers.options.optionValueDomDataKey,e),"__ko__hasDomDataOptionValue__"in t&&delete t.__ko__hasDomDataOptionValue__,t.value=n;break;default:m.utils.domData.set(t,m.bindingHandlers.options.optionValueDomDataKey,n),t.__ko__hasDomDataOptionValue__=!0,t.value="number"==typeof n?n:""}break;case"select":""!==n&&null!==n||(n=e);for(var o,i=-1,s=0,a=t.options.length;s<a;++s)if((o=m.selectExtensions.readValue(t.options[s]))==n||""==o&&n===e){i=s;break}(r||i>=0||n===e&&t.size>1)&&(t.selectedIndex=i);break;default:null!==n&&n!==e||(n=""),t.value=n}}},m.exportSymbol("selectExtensions",m.selectExtensions),m.exportSymbol("selectExtensions.readValue",m.selectExtensions.readValue),m.exportSymbol("selectExtensions.writeValue",m.selectExtensions.writeValue),m.expressionRewriting=function(){function e(e){if(m.utils.arrayIndexOf(n,e)>=0)return!1;var t=e.match(r);return null!==t&&(t[1]?"Object("+t[1]+")"+t[2]:e)}function t(e){var t=m.utils.stringTrim(e);123===t.charCodeAt(0)&&(t=t.slice(1,-1));var n,r=[],a=t.match(o),u=[],l=0;if(a){a.push(",");for(var c,p=0;c=a[p];++p){var f=c.charCodeAt(0);if(44===f){if(l<=0){r.push(n&&u.length?{key:n,value:u.join("")}:{unknown:n||u.join("")}),n=l=0,u=[];continue}}else if(58===f){if(!l&&!n&&1===u.length){n=u.pop();continue}}else if(47===f&&p&&c.length>1){var d=a[p-1].match(i);d&&!s[d[0]]&&((a=(t=t.substr(t.indexOf(c)+1)).match(o)).push(","),p=-1,c="/")}else 40===f||123===f||91===f?++l:41===f||125===f||93===f?--l:n||u.length||34!==f&&39!==f||(c=c.slice(1,-1));u.push(c)}}return r}var n=["true","false","null","undefined"],r=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,o=RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]","g"),i=/[\])"'A-Za-z0-9_$]+$/,s={in:1,return:1,typeof:1},a={};return{bindingRewriteValidators:[],twoWayBindings:a,parseObjectLiteral:t,preProcessBindings:function(n,r){function o(t,n){var r;if(!l){if(!function(e){return!e||!e.preprocess||(n=e.preprocess(n,t,o))}(m.getBindingHandler(t)))return;a[t]&&(r=e(n))&&s.push("'"+t+"':function(_z){"+r+"=_z}")}u&&(n="function(){return "+n+" }"),i.push("'"+t+"':"+n)}var i=[],s=[],u=(r=r||{}).valueAccessors,l=r.bindingParams,c="string"==typeof n?t(n):n;return m.utils.arrayForEach(c,function(e){o(e.key||e.unknown,e.value)}),s.length&&o("_ko_property_writers","{"+s.join(",")+" }"),i.join(",")},keyValueArrayContainsKey:function(e,t){for(var n=0;n<e.length;n++)if(e[n].key==t)return!0;return!1},writeValueToProperty:function(e,t,n,r,o){if(e&&m.isObservable(e))!m.isWriteableObservable(e)||o&&e.peek()===r||e(r);else{var i=t.get("_ko_property_writers");i&&i[n]&&i[n](r)}}}}(),m.exportSymbol("expressionRewriting",m.expressionRewriting),m.exportSymbol("expressionRewriting.bindingRewriteValidators",m.expressionRewriting.bindingRewriteValidators),m.exportSymbol("expressionRewriting.parseObjectLiteral",m.expressionRewriting.parseObjectLiteral),m.exportSymbol("expressionRewriting.preProcessBindings",m.expressionRewriting.preProcessBindings),m.exportSymbol("expressionRewriting._twoWayBindings",m.expressionRewriting.twoWayBindings),m.exportSymbol("jsonExpressionRewriting",m.expressionRewriting),m.exportSymbol("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",m.expressionRewriting.preProcessBindings),function(){function e(e){return 8==e.nodeType&&a.test(s?e.text:e.nodeValue)}function t(e){return 8==e.nodeType&&u.test(s?e.text:e.nodeValue)}function n(n,r){for(var o=n,i=1,s=[];o=o.nextSibling;){if(t(o)&&0==--i)return s;s.push(o),e(o)&&i++}if(!r)throw new Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function r(e,t){var r=n(e,t);return r?r.length>0?r[r.length-1].nextSibling:e.nextSibling:null}function i(n){var o=n.firstChild,i=null;if(o)do{if(i)i.push(o);else if(e(o)){var s=r(o,!0);s?o=s:i=[o]}else t(o)&&(i=[o])}while(o=o.nextSibling);return i}var s=o&&"\x3c!--test--\x3e"===o.createComment("test").text,a=s?/^<!--\s*ko(?:\s+([\s\S]+))?\s*-->$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,u=s?/^<!--\s*\/ko\s*-->$/:/^\s*\/ko\s*$/,l={ul:!0,ol:!0};m.virtualElements={allowedBindings:{},childNodes:function(t){return e(t)?n(t):t.childNodes},emptyNode:function(t){if(e(t))for(var n=m.virtualElements.childNodes(t),r=0,o=n.length;r<o;r++)m.removeNode(n[r]);else m.utils.emptyDomNode(t)},setDomNodeChildren:function(t,n){if(e(t)){m.virtualElements.emptyNode(t);for(var r=t.nextSibling,o=0,i=n.length;o<i;o++)r.parentNode.insertBefore(n[o],r)}else m.utils.setDomNodeChildren(t,n)},prepend:function(t,n){e(t)?t.parentNode.insertBefore(n,t.nextSibling):t.firstChild?t.insertBefore(n,t.firstChild):t.appendChild(n)},insertAfter:function(t,n,r){r?e(t)?t.parentNode.insertBefore(n,r.nextSibling):r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):m.virtualElements.prepend(t,n)},firstChild:function(n){return e(n)?!n.nextSibling||t(n.nextSibling)?null:n.nextSibling:n.firstChild},nextSibling:function(n){return e(n)&&(n=r(n)),n.nextSibling&&t(n.nextSibling)?null:n.nextSibling},hasBindingValue:e,virtualNodeBindingValue:function(e){var t=(s?e.text:e.nodeValue).match(a);return t?t[1]:null},normaliseVirtualElementDomStructure:function(e){if(l[m.utils.tagNameLower(e)]){var t=e.firstChild;if(t)do{if(1===t.nodeType){var n=i(t);if(n)for(var r=t.nextSibling,o=0;o<n.length;o++)r?e.insertBefore(n[o],r):e.appendChild(n[o])}}while(t=t.nextSibling)}}}}(),m.exportSymbol("virtualElements",m.virtualElements),m.exportSymbol("virtualElements.allowedBindings",m.virtualElements.allowedBindings),m.exportSymbol("virtualElements.emptyNode",m.virtualElements.emptyNode),m.exportSymbol("virtualElements.insertAfter",m.virtualElements.insertAfter),m.exportSymbol("virtualElements.prepend",m.virtualElements.prepend),m.exportSymbol("virtualElements.setDomNodeChildren",m.virtualElements.setDomNodeChildren),function(){function e(e,n,r){var o=e+(r&&r.valueAccessors||"");return n[o]||(n[o]=t(e,r))}function t(e,t){var n="with($context){with($data||{}){return{"+m.expressionRewriting.preProcessBindings(e,t)+"}}}";return new Function("$context","$element",n)}m.bindingProvider=function(){this.bindingCache={}},m.utils.extend(m.bindingProvider.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute("data-bind")||m.components.getComponentNameForNode(e);case 8:return m.virtualElements.hasBindingValue(e);default:return!1}},getBindings:function(e,t){var n=this.getBindingsString(e,t),r=n?this.parseBindingsString(n,t,e):null;return m.components.addBindingsForCustomElement(r,e,t,!1)},getBindingAccessors:function(e,t){var n=this.getBindingsString(e,t),r=n?this.parseBindingsString(n,t,e,{valueAccessors:!0}):null;return m.components.addBindingsForCustomElement(r,e,t,!0)},getBindingsString:function(e,t){switch(e.nodeType){case 1:return e.getAttribute("data-bind");case 8:return m.virtualElements.virtualNodeBindingValue(e);default:return null}},parseBindingsString:function(t,n,r,o){try{return e(t,this.bindingCache,o)(n,r)}catch(e){throw e.message="Unable to parse bindings.\nBindings value: "+t+"\nMessage: "+e.message,e}}}),m.bindingProvider.instance=new m.bindingProvider}(),m.exportSymbol("bindingProvider",m.bindingProvider),function(){function t(e){return function(){return e}}function n(e){return e()}function o(e){return m.utils.objectMap(m.dependencyDetection.ignore(e),function(t,n){return function(){return e()[n]}})}function i(e,n,r){return"function"==typeof e?o(e.bind(null,n,r)):m.utils.objectMap(e,t)}function a(e,t){return o(this.getBindings.bind(this,e,t))}function u(e){if(!m.virtualElements.allowedBindings[e])throw new Error("The binding '"+e+"' cannot be used with virtual elements")}function l(e,t,n){var r,o=m.virtualElements.firstChild(t),i=m.bindingProvider.instance,s=i.preprocessNode;if(s){for(;r=o;)o=m.virtualElements.nextSibling(r),s.call(i,r);o=m.virtualElements.firstChild(t)}for(;r=o;)o=m.virtualElements.nextSibling(r),c(e,r,n)}function c(e,t,n){var r=!0,o=1===t.nodeType;o&&m.virtualElements.normaliseVirtualElementDomStructure(t),(o&&n||m.bindingProvider.instance.nodeHasBindings(t))&&(r=f(t,null,e,n).shouldBindDescendants),r&&!h[m.utils.tagNameLower(t)]&&l(e,t,!o)}function p(e){var t=[],n={},r=[];return m.utils.objectForEach(e,function o(i){if(!n[i]){var s=m.getBindingHandler(i);s&&(s.after&&(r.push(i),m.utils.arrayForEach(s.after,function(t){if(e[t]){if(-1!==m.utils.arrayIndexOf(r,t))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+r.join(", "));o(t)}}),r.length--),t.push({key:i,handler:s})),n[i]=!0}}),t}function f(t,r,o,i){function s(){return m.utils.objectMap(h?h():c,n)}var l=m.utils.domData.get(t,g);if(!r){if(l)throw Error("You cannot apply bindings multiple times to the same element.");m.utils.domData.set(t,g,!0)}!l&&i&&m.storedBindingContextForNode(t,o);var c;if(r&&"function"!=typeof r)c=r;else{var f=m.bindingProvider.instance,d=f.getBindingAccessors||a,h=m.dependentObservable(function(){return(c=r?r(o,t):d.call(f,t,o))&&o._subscribable&&o._subscribable(),c},null,{disposeWhenNodeIsRemoved:t});c&&h.isActive()||(h=null)}var y;if(c){var v=h?function(e){return function(){return n(h()[e])}}:function(e){return c[e]};s.get=function(e){return c[e]&&n(v(e))},s.has=function(e){return e in c};var b=p(c);m.utils.arrayForEach(b,function(n){var r=n.handler.init,i=n.handler.update,a=n.key;8===t.nodeType&&u(a);try{"function"==typeof r&&m.dependencyDetection.ignore(function(){var n=r(t,v(a),s,o.$data,o);if(n&&n.controlsDescendantBindings){if(y!==e)throw new Error("Multiple bindings ("+y+" and "+a+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");y=a}}),"function"==typeof i&&m.dependentObservable(function(){i(t,v(a),s,o.$data,o)},null,{disposeWhenNodeIsRemoved:t})}catch(e){throw e.message='Unable to process binding "'+a+": "+c[a]+'"\nMessage: '+e.message,e}})}return{shouldBindDescendants:y===e}}function d(e){return e&&e instanceof m.bindingContext?e:new m.bindingContext(e)}m.bindingHandlers={};var h={script:!0,textarea:!0,template:!0};m.getBindingHandler=function(e){return m.bindingHandlers[e]},m.bindingContext=function(t,n,r,o,i){function s(){var e=c?t():t,i=m.utils.unwrapObservable(e);return n?(n._subscribable&&n._subscribable(),m.utils.extend(l,n),l._subscribable=u):(l.$parents=[],l.$root=i,l.ko=m),l.$rawData=e,l.$data=i,r&&(l[r]=i),o&&o(l,n,i),l.$data}var a,u,l=this,c="function"==typeof t&&!m.isObservable(t);i&&i.exportDependencies?s():(u=m.dependentObservable(s,null,{disposeWhen:function(){return a&&!m.utils.anyDomNodeIsAttachedToDocument(a)},disposeWhenNodeIsRemoved:!0})).isActive()&&(l._subscribable=u,u.equalityComparer=null,a=[],u._addNode=function(t){a.push(t),m.utils.domNodeDisposal.addDisposeCallback(t,function(t){m.utils.arrayRemoveItem(a,t),a.length||(u.dispose(),l._subscribable=u=e)})})},m.bindingContext.prototype.createChildContext=function(e,t,n,r){return new m.bindingContext(e,this,t,function(e,t){e.$parentContext=t,e.$parent=t.$data,e.$parents=(t.$parents||[]).slice(0),e.$parents.unshift(e.$parent),n&&n(e)},r)},m.bindingContext.prototype.extend=function(e){return new m.bindingContext(this._subscribable||this.$data,this,null,function(t,n){t.$rawData=n.$rawData,m.utils.extend(t,"function"==typeof e?e():e)})},m.bindingContext.prototype.createStaticChildContext=function(e,t){return this.createChildContext(e,t,null,{exportDependencies:!0})};var g=m.utils.domData.nextKey(),y=m.utils.domData.nextKey();m.storedBindingContextForNode=function(e,t){if(2!=arguments.length)return m.utils.domData.get(e,y);m.utils.domData.set(e,y,t),t._subscribable&&t._subscribable._addNode(e)},m.applyBindingAccessorsToNode=function(e,t,n){return 1===e.nodeType&&m.virtualElements.normaliseVirtualElementDomStructure(e),f(e,t,d(n),!0)},m.applyBindingsToNode=function(e,t,n){var r=d(n);return m.applyBindingAccessorsToNode(e,i(t,r,e),r)},m.applyBindingsToDescendants=function(e,t){1!==t.nodeType&&8!==t.nodeType||l(d(e),t,!0)},m.applyBindings=function(e,t){if(!s&&r.jQuery&&(s=r.jQuery),t&&1!==t.nodeType&&8!==t.nodeType)throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");t=t||r.document.body,c(d(e),t,!0)},m.contextFor=function(t){switch(t.nodeType){case 1:case 8:var n=m.storedBindingContextForNode(t);if(n)return n;if(t.parentNode)return m.contextFor(t.parentNode)}return e},m.dataFor=function(t){var n=m.contextFor(t);return n?n.$data:e},m.exportSymbol("bindingHandlers",m.bindingHandlers),m.exportSymbol("applyBindings",m.applyBindings),m.exportSymbol("applyBindingsToDescendants",m.applyBindingsToDescendants),m.exportSymbol("applyBindingAccessorsToNode",m.applyBindingAccessorsToNode),m.exportSymbol("applyBindingsToNode",m.applyBindingsToNode),m.exportSymbol("contextFor",m.contextFor),m.exportSymbol("dataFor",m.dataFor)}(),function(e){function t(t,n){return t.hasOwnProperty(n)?t[n]:e}function n(e,n){var o,a=t(i,e);a?a.subscribe(n):((a=i[e]=new m.subscribable).subscribe(n),r(e,function(t,n){var r=!(!n||!n.synchronous);s[e]={definition:t,isSynchronousComponent:r},delete i[e],o||r?a.notifySubscribers(t):m.tasks.schedule(function(){a.notifySubscribers(t)})}),o=!0)}function r(e,t){o("getConfig",[e],function(n){n?o("loadComponent",[e,n],function(e){t(e,n)}):t(null,null)})}function o(t,n,r,i){i||(i=m.components.loaders.slice(0));var s=i.shift();if(s){var a=s[t];if(a){var u=!1;if(a.apply(s,n.concat(function(e){u?r(null):null!==e?r(e):o(t,n,r,i)}))!==e&&(u=!0,!s.suppressLoaderExceptions))throw new Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else o(t,n,r,i)}else r(null)}var i={},s={};m.components={get:function(e,r){var o=t(s,e);o?o.isSynchronousComponent?m.dependencyDetection.ignore(function(){r(o.definition)}):m.tasks.schedule(function(){r(o.definition)}):n(e,r)},clearCachedDefinition:function(e){delete s[e]},_getFirstResultFromLoaders:o},m.components.loaders=[],m.exportSymbol("components",m.components),m.exportSymbol("components.get",m.components.get),m.exportSymbol("components.clearCachedDefinition",m.components.clearCachedDefinition)}(),function(e){function t(e,t,n,r){var o={},i=2,s=function(){0==--i&&r(o)},a=n.template,u=n.viewModel;a?c(t,a,function(t){m.components._getFirstResultFromLoaders("loadTemplate",[e,t],function(e){o.template=e,s()})}):s(),u?c(t,u,function(t){m.components._getFirstResultFromLoaders("loadViewModel",[e,t],function(e){o[d]=e,s()})}):s()}function i(e,t,n){if("string"==typeof t)n(m.utils.parseHtmlFragment(t));else if(t instanceof Array)n(t);else if(l(t))n(m.utils.makeArray(t.childNodes));else if(t.element){var r=t.element;if(u(r))n(a(r));else if("string"==typeof r){var i=o.getElementById(r);i?n(a(i)):e("Cannot find element with ID "+r)}else e("Unknown element type: "+r)}else e("Unknown template value: "+t)}function s(e,t,n){if("function"==typeof t)n(function(e){return new t(e)});else if("function"==typeof t[d])n(t[d]);else if("instance"in t){var r=t.instance;n(function(e,t){return r})}else"viewModel"in t?s(e,t.viewModel,n):e("Unknown viewModel value: "+t)}function a(e){switch(m.utils.tagNameLower(e)){case"script":return m.utils.parseHtmlFragment(e.text);case"textarea":return m.utils.parseHtmlFragment(e.value);case"template":if(l(e.content))return m.utils.cloneNodes(e.content.childNodes)}return m.utils.cloneNodes(e.childNodes)}function u(e){return r.HTMLElement?e instanceof HTMLElement:e&&e.tagName&&1===e.nodeType}function l(e){return r.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function c(e,t,o){"string"==typeof t.require?n||r.require?(n||r.require)([t.require],o):e("Uses require, but no AMD loader is present"):o(t)}function p(e){return function(t){throw new Error("Component '"+e+"': "+t)}}var f={};m.components.register=function(e,t){if(!t)throw new Error("Invalid configuration for "+e);if(m.components.isRegistered(e))throw new Error("Component "+e+" is already registered");f[e]=t},m.components.isRegistered=function(e){return f.hasOwnProperty(e)},m.components.unregister=function(e){delete f[e],m.components.clearCachedDefinition(e)},m.components.defaultLoader={getConfig:function(e,t){t(f.hasOwnProperty(e)?f[e]:null)},loadComponent:function(e,n,r){var o=p(e);c(o,n,function(n){t(e,o,n,r)})},loadTemplate:function(e,t,n){i(p(e),t,n)},loadViewModel:function(e,t,n){s(p(e),t,n)}};var d="createViewModel";m.exportSymbol("components.register",m.components.register),m.exportSymbol("components.isRegistered",m.components.isRegistered),m.exportSymbol("components.unregister",m.components.unregister),m.exportSymbol("components.defaultLoader",m.components.defaultLoader),m.components.loaders.push(m.components.defaultLoader),m.components._allRegisteredComponents=f}(),function(e){function t(e,t){var r=e.getAttribute("params");if(r){var o=n.parseBindingsString(r,t,e,{valueAccessors:!0,bindingParams:!0}),i=m.utils.objectMap(o,function(t,n){return m.computed(t,null,{disposeWhenNodeIsRemoved:e})}),s=m.utils.objectMap(i,function(t,n){var r=t.peek();return t.isActive()?m.computed({read:function(){return m.utils.unwrapObservable(t())},write:m.isWriteableObservable(r)&&function(e){t()(e)},disposeWhenNodeIsRemoved:e}):r});return s.hasOwnProperty("$raw")||(s.$raw=i),s}return{$raw:{}}}m.components.getComponentNameForNode=function(e){var t=m.utils.tagNameLower(e);if(m.components.isRegistered(t)&&(-1!=t.indexOf("-")||""+e=="[object HTMLUnknownElement]"||m.utils.ieVersion<=8&&e.tagName===t))return t},m.components.addBindingsForCustomElement=function(e,n,r,o){if(1===n.nodeType){var i=m.components.getComponentNameForNode(n);if(i){if((e=e||{}).component)throw new Error('Cannot use the "component" binding on a custom element matching a component');var s={name:i,params:t(n,r)};e.component=o?function(){return s}:s}}return e};var n=new m.bindingProvider;m.utils.ieVersion<9&&(m.components.register=function(e){return function(t){return o.createElement(t),e.apply(this,arguments)}}(m.components.register),o.createDocumentFragment=function(e){return function(){var t=e(),n=m.components._allRegisteredComponents;for(var r in n)n.hasOwnProperty(r)&&t.createElement(r);return t}}(o.createDocumentFragment))}(),function(e){function t(e,t,n){var r=t.template;if(!r)throw new Error("Component '"+e+"' has no template");var o=m.utils.cloneNodes(r);m.virtualElements.setDomNodeChildren(n,o)}function n(e,t,n,r){var o=e.createViewModel;return o?o.call(e,r,{element:t,templateNodes:n}):r}var r=0;m.bindingHandlers.component={init:function(e,o,i,s,a){var u,l,c=function(){var e=u&&u.dispose;"function"==typeof e&&e.call(u),u=null,l=null},p=m.utils.makeArray(m.virtualElements.childNodes(e));return m.utils.domNodeDisposal.addDisposeCallback(e,c),m.computed(function(){var i,s,f=m.utils.unwrapObservable(o());if("string"==typeof f?i=f:(i=m.utils.unwrapObservable(f.name),s=m.utils.unwrapObservable(f.params)),!i)throw new Error("No component name specified");var d=l=++r;m.components.get(i,function(r){if(l===d){if(c(),!r)throw new Error("Unknown component '"+i+"'");t(i,r,e);var o=n(r,e,p,s),f=a.createChildContext(o,void 0,function(e){e.$component=o,e.$componentTemplateNodes=p});u=o,m.applyBindingsToDescendants(f,e)}})},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}},m.virtualElements.allowedBindings.component=!0}();var N={class:"className",for:"htmlFor"};m.bindingHandlers.attr={update:function(t,n,r){var o=m.utils.unwrapObservable(n())||{};m.utils.objectForEach(o,function(n,r){var o=!1===(r=m.utils.unwrapObservable(r))||null===r||r===e;o&&t.removeAttribute(n),m.utils.ieVersion<=8&&n in N?(n=N[n],o?t.removeAttribute(n):t[n]=r):o||t.setAttribute(n,r.toString()),"name"===n&&m.utils.setElementName(t,o?"":r.toString())})}},m.bindingHandlers.checked={after:["value","attr"],init:function(t,n,r){function o(){var e=t.checked,o=f?i():e;if(!m.computedContext.isInitial()&&(!a||e)){var s=m.dependencyDetection.ignore(n);if(l){var u=c?s.peek():s;p!==o?(e&&(m.utils.addOrRemoveItem(u,o,!0),m.utils.addOrRemoveItem(u,p,!1)),p=o):m.utils.addOrRemoveItem(u,o,e),c&&m.isWriteableObservable(s)&&s(u)}else m.expressionRewriting.writeValueToProperty(s,r,"checked",o,!0)}}var i=m.pureComputed(function(){return r.has("checkedValue")?m.utils.unwrapObservable(r.get("checkedValue")):r.has("value")?m.utils.unwrapObservable(r.get("value")):t.value}),s="checkbox"==t.type,a="radio"==t.type;if(s||a){var u=n(),l=s&&m.utils.unwrapObservable(u)instanceof Array,c=!(l&&u.push&&u.splice),p=l?i():e,f=a||l;a&&!t.name&&m.bindingHandlers.uniqueName.init(t,function(){return!0}),m.computed(o,null,{disposeWhenNodeIsRemoved:t}),m.utils.registerEventHandler(t,"click",o),m.computed(function(){var e=m.utils.unwrapObservable(n());t.checked=l?m.utils.arrayIndexOf(e,i())>=0:s?e:i()===e},null,{disposeWhenNodeIsRemoved:t}),u=e}}},m.expressionRewriting.twoWayBindings.checked=!0,m.bindingHandlers.checkedValue={update:function(e,t){e.value=m.utils.unwrapObservable(t())}};m.bindingHandlers.css={update:function(e,t){var n=m.utils.unwrapObservable(t());null!==n&&"object"==typeof n?m.utils.objectForEach(n,function(t,n){n=m.utils.unwrapObservable(n),m.utils.toggleDomNodeCssClass(e,t,n)}):(n=m.utils.stringTrim(String(n||"")),m.utils.toggleDomNodeCssClass(e,e.__ko__cssValue,!1),e.__ko__cssValue=n,m.utils.toggleDomNodeCssClass(e,n,!0))}},m.bindingHandlers.enable={update:function(e,t){var n=m.utils.unwrapObservable(t());n&&e.disabled?e.removeAttribute("disabled"):n||e.disabled||(e.disabled=!0)}},m.bindingHandlers.disable={update:function(e,t){m.bindingHandlers.enable.update(e,function(){return!m.utils.unwrapObservable(t())})}},m.bindingHandlers.event={init:function(e,t,n,r,o){var i=t()||{};m.utils.objectForEach(i,function(i){"string"==typeof i&&m.utils.registerEventHandler(e,i,function(e){var s,a=t()[i];if(a){try{var u=m.utils.makeArray(arguments);r=o.$data,u.unshift(r),s=a.apply(r,u)}finally{!0!==s&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}!1!==n.get(i+"Bubble")||(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}})})}},m.bindingHandlers.foreach={makeTemplateValueAccessor:function(e){return function(){var t=e(),n=m.utils.peekObservable(t);return n&&"number"!=typeof n.length?(m.utils.unwrapObservable(t),{foreach:n.data,as:n.as,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:m.nativeTemplateEngine.instance}):{foreach:t,templateEngine:m.nativeTemplateEngine.instance}}},init:function(e,t,n,r,o){return m.bindingHandlers.template.init(e,m.bindingHandlers.foreach.makeTemplateValueAccessor(t))},update:function(e,t,n,r,o){return m.bindingHandlers.template.update(e,m.bindingHandlers.foreach.makeTemplateValueAccessor(t),n,r,o)}},m.expressionRewriting.bindingRewriteValidators.foreach=!1,m.virtualElements.allowedBindings.foreach=!0;m.bindingHandlers.hasfocus={init:function(e,t,n){var r=function(r){e.__ko_hasfocusUpdating=!0;var o=e.ownerDocument;if("activeElement"in o){var i;try{i=o.activeElement}catch(e){i=o.body}r=i===e}var s=t();m.expressionRewriting.writeValueToProperty(s,n,"hasfocus",r,!0),e.__ko_hasfocusLastValue=r,e.__ko_hasfocusUpdating=!1},o=r.bind(null,!0),i=r.bind(null,!1);m.utils.registerEventHandler(e,"focus",o),m.utils.registerEventHandler(e,"focusin",o),m.utils.registerEventHandler(e,"blur",i),m.utils.registerEventHandler(e,"focusout",i)},update:function(e,t){var n=!!m.utils.unwrapObservable(t());e.__ko_hasfocusUpdating||e.__ko_hasfocusLastValue===n||(n?e.focus():e.blur(),!n&&e.__ko_hasfocusLastValue&&e.ownerDocument.body.focus(),m.dependencyDetection.ignore(m.utils.triggerEvent,null,[e,n?"focusin":"focusout"]))}},m.expressionRewriting.twoWayBindings.hasfocus=!0,m.bindingHandlers.hasFocus=m.bindingHandlers.hasfocus,m.expressionRewriting.twoWayBindings.hasFocus=!0,m.bindingHandlers.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){m.utils.setHtml(e,t())}},h("if"),h("ifnot",!1,!0),h("with",!0,!1,function(e,t){return e.createStaticChildContext(t)});var A={};m.bindingHandlers.options={init:function(e){if("select"!==m.utils.tagNameLower(e))throw new Error("options binding applies only to SELECT elements");for(;e.length>0;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(t,n,r){function o(){return m.utils.arrayFilter(t.options,function(e){return e.selected})}function i(e,t,n){var r=typeof t;return"function"==r?t(e):"string"==r?e[t]:n}function s(e,n){if(v&&d)m.selectExtensions.writeValue(t,m.utils.unwrapObservable(r.get("value")),!0);else if(y.length){var o=m.utils.arrayIndexOf(y,m.selectExtensions.readValue(n[0]))>=0;m.utils.setOptionNodeSelectionState(n[0],o),v&&!o&&m.dependencyDetection.ignore(m.utils.triggerEvent,null,[t,"change"])}}var a,u,l=0==t.length,c=t.multiple,p=!l&&c?t.scrollTop:null,f=m.utils.unwrapObservable(n()),d=r.get("valueAllowUnset")&&r.has("value"),h=r.get("optionsIncludeDestroyed"),g={},y=[];d||(c?y=m.utils.arrayMap(o(),m.selectExtensions.readValue):t.selectedIndex>=0&&y.push(m.selectExtensions.readValue(t.options[t.selectedIndex]))),f&&(void 0===f.length&&(f=[f]),u=m.utils.arrayFilter(f,function(t){return h||t===e||null===t||!m.utils.unwrapObservable(t._destroy)}),r.has("optionsCaption")&&null!==(a=m.utils.unwrapObservable(r.get("optionsCaption")))&&a!==e&&u.unshift(A));var v=!1;g.beforeRemove=function(e){t.removeChild(e)};var b=s;r.has("optionsAfterRender")&&"function"==typeof r.get("optionsAfterRender")&&(b=function(t,n){s(0,n),m.dependencyDetection.ignore(r.get("optionsAfterRender"),null,[n[0],t!==A?t:e])}),m.utils.setDomNodeChildrenFromArrayMapping(t,u,function(n,o,s){s.length&&(y=!d&&s[0].selected?[m.selectExtensions.readValue(s[0])]:[],v=!0);var a=t.ownerDocument.createElement("option");if(n===A)m.utils.setTextContent(a,r.get("optionsCaption")),m.selectExtensions.writeValue(a,e);else{var u=i(n,r.get("optionsValue"),n);m.selectExtensions.writeValue(a,m.utils.unwrapObservable(u));var l=i(n,r.get("optionsText"),u);m.utils.setTextContent(a,l)}return[a]},g,b),m.dependencyDetection.ignore(function(){if(d)m.selectExtensions.writeValue(t,m.utils.unwrapObservable(r.get("value")),!0);else{(c?y.length&&o().length<y.length:y.length&&t.selectedIndex>=0?m.selectExtensions.readValue(t.options[t.selectedIndex])!==y[0]:y.length||t.selectedIndex>=0)&&m.utils.triggerEvent(t,"change")}}),m.utils.ensureSelectElementIsRenderedCorrectly(t),p&&Math.abs(p-t.scrollTop)>20&&(t.scrollTop=p)}},m.bindingHandlers.options.optionValueDomDataKey=m.utils.domData.nextKey(),m.bindingHandlers.selectedOptions={after:["options","foreach"],init:function(e,t,n){m.utils.registerEventHandler(e,"change",function(){var r=t(),o=[];m.utils.arrayForEach(e.getElementsByTagName("option"),function(e){e.selected&&o.push(m.selectExtensions.readValue(e))}),m.expressionRewriting.writeValueToProperty(r,n,"selectedOptions",o)})},update:function(e,t){if("select"!=m.utils.tagNameLower(e))throw new Error("values binding applies only to SELECT elements");var n=m.utils.unwrapObservable(t()),r=e.scrollTop;n&&"number"==typeof n.length&&m.utils.arrayForEach(e.getElementsByTagName("option"),function(e){var t=m.utils.arrayIndexOf(n,m.selectExtensions.readValue(e))>=0;e.selected!=t&&m.utils.setOptionNodeSelectionState(e,t)}),e.scrollTop=r}},m.expressionRewriting.twoWayBindings.selectedOptions=!0,m.bindingHandlers.style={update:function(t,n){var r=m.utils.unwrapObservable(n()||{});m.utils.objectForEach(r,function(n,r){null!==(r=m.utils.unwrapObservable(r))&&r!==e&&!1!==r||(r=""),t.style[n]=r})}},m.bindingHandlers.submit={init:function(e,t,n,r,o){if("function"!=typeof t())throw new Error("The value for a submit binding must be a function");m.utils.registerEventHandler(e,"submit",function(n){var r,i=t();try{r=i.call(o.$data,e)}finally{!0!==r&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}})}},m.bindingHandlers.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){m.utils.setTextContent(e,t())}},m.virtualElements.allowedBindings.text=!0,function(){if(r&&r.navigator)var t=function(e){if(e)return parseFloat(e[1])},n=r.opera&&r.opera.version&&parseInt(r.opera.version()),o=r.navigator.userAgent,i=t(o.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),s=t(o.match(/Firefox\/([^ ]*)/));if(m.utils.ieVersion<10)var a=m.utils.domData.nextKey(),u=m.utils.domData.nextKey(),l=function(e){var t=this.activeElement,n=t&&m.utils.domData.get(t,u);n&&n(e)},c=function(e,t){var n=e.ownerDocument;m.utils.domData.get(n,a)||(m.utils.domData.set(n,a,!0),m.utils.registerEventHandler(n,"selectionchange",l)),m.utils.domData.set(e,u,t)};m.bindingHandlers.textInput={init:function(t,r,o){var a,u,l=t.value,p=function(n){clearTimeout(a),u=a=e;var i=t.value;l!==i&&(n&&(t._ko_textInputProcessedEvent=n.type),l=i,m.expressionRewriting.writeValueToProperty(r(),o,"textInput",i))},f=function(e){if(!a){u=t.value;var n=p.bind(t,{type:e.type});a=m.utils.setTimeout(n,4)}},d=9==m.utils.ieVersion?f:p,h=function(){var n=m.utils.unwrapObservable(r());null!==n&&n!==e||(n=""),u===e||n!==u?t.value!==n&&(l=n,t.value=n):m.utils.setTimeout(h,4)},g=function(e,n){m.utils.registerEventHandler(t,e,n)};m.bindingHandlers.textInput._forceUpdateOn?m.utils.arrayForEach(m.bindingHandlers.textInput._forceUpdateOn,function(e){"after"==e.slice(0,5)?g(e.slice(5),f):g(e,p)}):m.utils.ieVersion<10?(g("propertychange",function(e){"value"===e.propertyName&&d(e)}),8==m.utils.ieVersion&&(g("keyup",p),g("keydown",p)),m.utils.ieVersion>=8&&(c(t,d),g("dragend",f))):(g("input",p),i<5&&"textarea"===m.utils.tagNameLower(t)?(g("keydown",f),g("paste",f),g("cut",f)):n<11?g("keydown",f):s<4&&(g("DOMAutoComplete",p),g("dragdrop",p),g("drop",p))),g("change",p),m.computed(h,null,{disposeWhenNodeIsRemoved:t})}},m.expressionRewriting.twoWayBindings.textInput=!0,m.bindingHandlers.textinput={preprocess:function(e,t,n){n("textInput",e)}}}(),m.bindingHandlers.uniqueName={init:function(e,t){if(t()){var n="ko_unique_"+ ++m.bindingHandlers.uniqueName.currentIndex;m.utils.setElementName(e,n)}}},m.bindingHandlers.uniqueName.currentIndex=0,m.bindingHandlers.value={after:["options","foreach"],init:function(e,t,n){if("input"!=e.tagName.toLowerCase()||"checkbox"!=e.type&&"radio"!=e.type){var r=["change"],o=n.get("valueUpdate"),i=!1,s=null;o&&("string"==typeof o&&(o=[o]),m.utils.arrayPushAll(r,o),r=m.utils.arrayGetDistinctValues(r));var a=function(){s=null,i=!1;var r=t(),o=m.selectExtensions.readValue(e);m.expressionRewriting.writeValueToProperty(r,n,"value",o)};m.utils.ieVersion&&"input"==e.tagName.toLowerCase()&&"text"==e.type&&"off"!=e.autocomplete&&(!e.form||"off"!=e.form.autocomplete)&&-1==m.utils.arrayIndexOf(r,"propertychange")&&(m.utils.registerEventHandler(e,"propertychange",function(){i=!0}),m.utils.registerEventHandler(e,"focus",function(){i=!1}),m.utils.registerEventHandler(e,"blur",function(){i&&a()})),m.utils.arrayForEach(r,function(t){var n=a;m.utils.stringStartsWith(t,"after")&&(n=function(){s=m.selectExtensions.readValue(e),m.utils.setTimeout(a,0)},t=t.substring("after".length)),m.utils.registerEventHandler(e,t,n)});var u=function(){var r=m.utils.unwrapObservable(t()),o=m.selectExtensions.readValue(e);if(null===s||r!==s){if(r!==o)if("select"===m.utils.tagNameLower(e)){var i=n.get("valueAllowUnset"),a=function(){m.selectExtensions.writeValue(e,r,i)};a(),i||r===m.selectExtensions.readValue(e)?m.utils.setTimeout(a,0):m.dependencyDetection.ignore(m.utils.triggerEvent,null,[e,"change"])}else m.selectExtensions.writeValue(e,r)}else m.utils.setTimeout(u,0)};m.computed(u,null,{disposeWhenNodeIsRemoved:e})}else m.applyBindingAccessorsToNode(e,{checkedValue:t})},update:function(){}},m.expressionRewriting.twoWayBindings.value=!0,m.bindingHandlers.visible={update:function(e,t){var n=m.utils.unwrapObservable(t()),r=!("none"==e.style.display);n&&!r?e.style.display="":!n&&r&&(e.style.display="none")}},function(e){m.bindingHandlers[e]={init:function(t,n,r,o,i){return m.bindingHandlers.event.init.call(this,t,function(){var t={};return t[e]=n(),t},r,o,i)}}}("click"),m.templateEngine=function(){},m.templateEngine.prototype.renderTemplateSource=function(e,t,n,r){throw new Error("Override renderTemplateSource")},m.templateEngine.prototype.createJavaScriptEvaluatorBlock=function(e){throw new Error("Override createJavaScriptEvaluatorBlock")},m.templateEngine.prototype.makeTemplateSource=function(e,t){if("string"==typeof e){var n=(t=t||o).getElementById(e);if(!n)throw new Error("Cannot find template with ID "+e);return new m.templateSources.domElement(n)}if(1==e.nodeType||8==e.nodeType)return new m.templateSources.anonymousTemplate(e);throw new Error("Unknown template type: "+e)},m.templateEngine.prototype.renderTemplate=function(e,t,n,r){var o=this.makeTemplateSource(e,r);return this.renderTemplateSource(o,t,n,r)},m.templateEngine.prototype.isTemplateRewritten=function(e,t){return!1===this.allowTemplateRewriting||this.makeTemplateSource(e,t).data("isRewritten")},m.templateEngine.prototype.rewriteTemplate=function(e,t,n){var r=this.makeTemplateSource(e,n),o=t(r.text());r.text(o),r.data("isRewritten",!0)},m.exportSymbol("templateEngine",m.templateEngine),m.templateRewriting=function(){function e(e){for(var t=m.expressionRewriting.bindingRewriteValidators,n=0;n<e.length;n++){var r=e[n].key;if(t.hasOwnProperty(r)){var o=t[r];if("function"==typeof o){var i=o(e[n].value);if(i)throw new Error(i)}else if(!o)throw new Error("This template engine does not support the '"+r+"' binding within its templates")}}}function t(t,n,r,o){var i=m.expressionRewriting.parseObjectLiteral(t);e(i);var s="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+m.expressionRewriting.preProcessBindings(i,{valueAccessors:!0})+" } })()},'"+r.toLowerCase()+"')";return o.createJavaScriptEvaluatorBlock(s)+n}var n=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,r=/<!--\s*ko\b\s*([\s\S]*?)\s*-->/g;return{ensureTemplateIsRewritten:function(e,t,n){t.isTemplateRewritten(e,n)||t.rewriteTemplate(e,function(e){return m.templateRewriting.memoizeBindingAttributeSyntax(e,t)},n)},memoizeBindingAttributeSyntax:function(e,o){return e.replace(n,function(){return t(arguments[4],arguments[1],arguments[2],o)}).replace(r,function(){return t(arguments[1],"\x3c!-- ko --\x3e","#comment",o)})},applyMemoizedBindingsToNextSibling:function(e,t){return m.memoization.memoize(function(n,r){var o=n.nextSibling;o&&o.nodeName.toLowerCase()===t&&m.applyBindingAccessorsToNode(o,e,r)})}}}(),m.exportSymbol("__tr_ambtns",m.templateRewriting.applyMemoizedBindingsToNextSibling),function(){function t(e){return m.utils.domData.get(e,o)||{}}function n(e,t){m.utils.domData.set(e,o,t)}m.templateSources={};m.templateSources.domElement=function(e){if(this.domElement=e,e){var t=m.utils.tagNameLower(e);this.templateType="script"===t?1:"textarea"===t?2:"template"==t&&e.content&&11===e.content.nodeType?3:4}},m.templateSources.domElement.prototype.text=function(){var e=1===this.templateType?"text":2===this.templateType?"value":"innerHTML";if(0==arguments.length)return this.domElement[e];var t=arguments[0];"innerHTML"===e?m.utils.setHtml(this.domElement,t):this.domElement[e]=t};var r=m.utils.domData.nextKey()+"_";m.templateSources.domElement.prototype.data=function(e){if(1===arguments.length)return m.utils.domData.get(this.domElement,r+e);m.utils.domData.set(this.domElement,r+e,arguments[1])};var o=m.utils.domData.nextKey();m.templateSources.domElement.prototype.nodes=function(){var r=this.domElement;if(0==arguments.length)return t(r).containerData||(3===this.templateType?r.content:4===this.templateType?r:e);n(r,{containerData:arguments[0]})},m.templateSources.anonymousTemplate=function(e){this.domElement=e},m.templateSources.anonymousTemplate.prototype=new m.templateSources.domElement,m.templateSources.anonymousTemplate.prototype.constructor=m.templateSources.anonymousTemplate,m.templateSources.anonymousTemplate.prototype.text=function(){if(0==arguments.length){var r=t(this.domElement);return r.textData===e&&r.containerData&&(r.textData=r.containerData.innerHTML),r.textData}var o=arguments[0];n(this.domElement,{textData:o})},m.exportSymbol("templateSources",m.templateSources),m.exportSymbol("templateSources.domElement",m.templateSources.domElement),m.exportSymbol("templateSources.anonymousTemplate",m.templateSources.anonymousTemplate)}(),function(){function t(e,t,n){for(var r,o=e,i=m.virtualElements.nextSibling(t);o&&(r=o)!==i;)n(r,o=m.virtualElements.nextSibling(r))}function n(e,n){if(e.length){var r=e[0],o=e[e.length-1],i=r.parentNode,s=m.bindingProvider.instance,a=s.preprocessNode;if(a){if(t(r,o,function(e,t){var n=e.previousSibling,i=a.call(s,e);i&&(e===r&&(r=i[0]||t),e===o&&(o=i[i.length-1]||n))}),e.length=0,!r)return;r===o?e.push(r):(e.push(r,o),m.utils.fixUpContinuousNodeArray(e,i))}t(r,o,function(e){1!==e.nodeType&&8!==e.nodeType||m.applyBindings(n,e)}),t(r,o,function(e){1!==e.nodeType&&8!==e.nodeType||m.memoization.unmemoizeDomNodeAndDescendants(e,[n])}),m.utils.fixUpContinuousNodeArray(e,i)}}function r(e){return e.nodeType?e:e.length>0?e[0]:null}function o(e,t,o,i,s){s=s||{};var u=(e&&r(e)||o||{}).ownerDocument,l=s.templateEngine||a;m.templateRewriting.ensureTemplateIsRewritten(o,l,u);var c=l.renderTemplate(o,i,s,u);if("number"!=typeof c.length||c.length>0&&"number"!=typeof c[0].nodeType)throw new Error("Template engine must return an array of DOM nodes");var p=!1;switch(t){case"replaceChildren":m.virtualElements.setDomNodeChildren(e,c),p=!0;break;case"replaceNode":m.utils.replaceDomNodes(e,c),p=!0;break;case"ignoreTargetNode":break;default:throw new Error("Unknown renderMode: "+t)}return p&&(n(c,i),s.afterRender&&m.dependencyDetection.ignore(s.afterRender,null,[c,i.$data])),c}function i(e,t,n){return m.isObservable(e)?e():"function"==typeof e?e(t,n):e}function s(t,n){var r=m.utils.domData.get(t,u);r&&"function"==typeof r.dispose&&r.dispose(),m.utils.domData.set(t,u,n&&n.isActive()?n:e)}var a;m.setTemplateEngine=function(t){if(t!=e&&!(t instanceof m.templateEngine))throw new Error("templateEngine must inherit from ko.templateEngine");a=t},m.renderTemplate=function(t,n,s,u,l){if(((s=s||{}).templateEngine||a)==e)throw new Error("Set a template engine before calling renderTemplate");if(l=l||"replaceChildren",u){var c=r(u),p=c&&"replaceNode"==l?c.parentNode:c;return m.dependentObservable(function(){var e=n&&n instanceof m.bindingContext?n:new m.bindingContext(n,null,null,null,{exportDependencies:!0}),a=i(t,e.$data,e),p=o(u,l,a,e,s);"replaceNode"==l&&(c=r(u=p))},null,{disposeWhen:function(){return!c||!m.utils.domNodeIsAttachedToDocument(c)},disposeWhenNodeIsRemoved:p})}return m.memoization.memoize(function(e){m.renderTemplate(t,n,s,e,"replaceNode")})},m.renderTemplateForEach=function(t,r,s,a,u){var l,c=function(e,n){return l=u.createChildContext(e,s.as,function(e){e.$index=n}),o(null,"ignoreTargetNode",i(t,e,l),l,s)},p=function(e,t,r){n(t,l),s.afterRender&&s.afterRender(t,e),l=null};return m.dependentObservable(function(){var t=m.utils.unwrapObservable(r)||[];void 0===t.length&&(t=[t]);var n=m.utils.arrayFilter(t,function(t){return s.includeDestroyed||t===e||null===t||!m.utils.unwrapObservable(t._destroy)});m.dependencyDetection.ignore(m.utils.setDomNodeChildrenFromArrayMapping,null,[a,n,c,s,p])},null,{disposeWhenNodeIsRemoved:a})};var u=m.utils.domData.nextKey();m.bindingHandlers.template={init:function(e,t){var n=m.utils.unwrapObservable(t());if("string"==typeof n||n.name)m.virtualElements.emptyNode(e);else if("nodes"in n){var r=n.nodes||[];if(m.isObservable(r))throw new Error('The "nodes" option must be a plain, non-observable array.');i=m.utils.moveCleanedNodesToContainerElement(r);new m.templateSources.anonymousTemplate(e).nodes(i)}else{var o=m.virtualElements.childNodes(e),i=m.utils.moveCleanedNodesToContainerElement(o);new m.templateSources.anonymousTemplate(e).nodes(i)}return{controlsDescendantBindings:!0}},update:function(e,t,n,r,o){var i,a=t(),u=m.utils.unwrapObservable(a),l=!0,c=null;if("string"==typeof u?(i=a,u={}):(i=u.name,"if"in u&&(l=m.utils.unwrapObservable(u.if)),l&&"ifnot"in u&&(l=!m.utils.unwrapObservable(u.ifnot))),"foreach"in u){var p=l&&u.foreach||[];c=m.renderTemplateForEach(i||e,p,u,e,o)}else if(l){var f="data"in u?o.createStaticChildContext(u.data,u.as):o;c=m.renderTemplate(i||e,f,u,e)}else m.virtualElements.emptyNode(e);s(e,c)}},m.expressionRewriting.bindingRewriteValidators.template=function(e){var t=m.expressionRewriting.parseObjectLiteral(e);return 1==t.length&&t[0].unknown?null:m.expressionRewriting.keyValueArrayContainsKey(t,"name")?null:"This template engine does not support anonymous templates nested within its templates"},m.virtualElements.allowedBindings.template=!0}(),m.exportSymbol("setTemplateEngine",m.setTemplateEngine),m.exportSymbol("renderTemplate",m.renderTemplate),m.utils.findMovesInArrayComparison=function(e,t,n){if(e.length&&t.length){var r,o,i,s,a;for(r=o=0;(!n||r<n)&&(s=e[o]);++o){for(i=0;a=t[i];++i)if(s.value===a.value){s.moved=a.index,a.moved=s.index,t.splice(i,1),r=i=0;break}r+=i}}},m.utils.compareArrays=function(){function e(e,t,n,r,o){var i,s,a,u,l,c=Math.min,p=Math.max,f=[],d=e.length,h=t.length,g=h-d||1,y=d+h+1;for(i=0;i<=d;i++)for(u=a,f.push(a=[]),l=c(h,i+g),s=p(0,i-1);s<=l;s++)if(s)if(i)if(e[i-1]===t[s-1])a[s]=u[s-1];else{var v=u[s]||y,b=a[s-1]||y;a[s]=c(v,b)+1}else a[s]=s+1;else a[s]=i+1;var x,w=[],E=[],k=[];for(i=d,s=h;i||s;)x=f[i][s]-1,s&&x===f[i][s-1]?E.push(w[w.length]={status:n,value:t[--s],index:s}):i&&x===f[i-1][s]?k.push(w[w.length]={status:r,value:e[--i],index:i}):(--s,--i,o.sparse||w.push({status:"retained",value:t[s]}));return m.utils.findMovesInArrayComparison(k,E,!o.dontLimitMoves&&10*d),w.reverse()}var t="added",n="deleted";return function(r,o,i){return i="boolean"==typeof i?{dontLimitMoves:i}:i||{},r=r||[],o=o||[],r.length<o.length?e(r,o,t,n,i):e(o,r,n,t,i)}}(),m.exportSymbol("utils.compareArrays",m.utils.compareArrays),function(){function t(t,n,r,o,i){var s=[],a=m.dependentObservable(function(){var e=n(r,i,m.utils.fixUpContinuousNodeArray(s,t))||[];s.length>0&&(m.utils.replaceDomNodes(s,e),o&&m.dependencyDetection.ignore(o,null,[r,e,i])),s.length=0,m.utils.arrayPushAll(s,e)},null,{disposeWhenNodeIsRemoved:t,disposeWhen:function(){return!m.utils.anyDomNodeIsAttachedToDocument(s)}});return{mappedNodes:s,dependentObservable:a.isActive()?a:e}}var n=m.utils.domData.nextKey(),r=m.utils.domData.nextKey();m.utils.setDomNodeChildrenFromArrayMapping=function(o,i,s,a,u){function l(e,t){p=g[t],w!==t&&(C[e]=p),p.indexObservable(w++),m.utils.fixUpContinuousNodeArray(p.mappedNodes,o),b.push(p),k.push(p)}function c(e,t){if(e)for(var n=0,r=t.length;n<r;n++)t[n]&&m.utils.arrayForEach(t[n].mappedNodes,function(r){e(r,n,t[n].arrayEntry)})}i=i||[],a=a||{};for(var p,f,d,h=m.utils.domData.get(o,n)===e,g=m.utils.domData.get(o,n)||[],y=m.utils.arrayMap(g,function(e){return e.arrayEntry}),v=m.utils.compareArrays(y,i,a.dontLimitMoves),b=[],x=0,w=0,E=[],k=[],T=[],C=[],S=[],D=0;f=v[D];D++)switch(d=f.moved,f.status){case"deleted":d===e&&((p=g[x]).dependentObservable&&(p.dependentObservable.dispose(),p.dependentObservable=e),m.utils.fixUpContinuousNodeArray(p.mappedNodes,o).length&&(a.beforeRemove&&(b.push(p),k.push(p),p.arrayEntry===r?p=null:T[D]=p),p&&E.push.apply(E,p.mappedNodes))),x++;break;case"retained":l(D,x++);break;case"added":d!==e?l(D,d):(p={arrayEntry:f.value,indexObservable:m.observable(w++)},b.push(p),k.push(p),h||(S[D]=p))}m.utils.domData.set(o,n,b),c(a.beforeMove,C),m.utils.arrayForEach(E,a.beforeRemove?m.cleanNode:m.removeNode);for(var N,A,D=0,O=m.virtualElements.firstChild(o);p=k[D];D++){p.mappedNodes||m.utils.extend(p,t(o,s,p.arrayEntry,u,p.indexObservable));for(var B=0;A=p.mappedNodes[B];O=A.nextSibling,N=A,B++)A!==O&&m.virtualElements.insertAfter(o,A,N);!p.initialized&&u&&(u(p.arrayEntry,p.mappedNodes,p.indexObservable),p.initialized=!0)}for(c(a.beforeRemove,T),D=0;D<T.length;++D)T[D]&&(T[D].arrayEntry=r);c(a.afterMove,C),c(a.afterAdd,S)}}(),m.exportSymbol("utils.setDomNodeChildrenFromArrayMapping",m.utils.setDomNodeChildrenFromArrayMapping),m.nativeTemplateEngine=function(){this.allowTemplateRewriting=!1},m.nativeTemplateEngine.prototype=new m.templateEngine,m.nativeTemplateEngine.prototype.constructor=m.nativeTemplateEngine,m.nativeTemplateEngine.prototype.renderTemplateSource=function(e,t,n,r){var o=(!(m.utils.ieVersion<9)?e.nodes:null)?e.nodes():null;if(o)return m.utils.makeArray(o.cloneNode(!0).childNodes);var i=e.text();return m.utils.parseHtmlFragment(i,r)},m.nativeTemplateEngine.instance=new m.nativeTemplateEngine,m.setTemplateEngine(m.nativeTemplateEngine.instance),m.exportSymbol("nativeTemplateEngine",m.nativeTemplateEngine),function(){m.jqueryTmplTemplateEngine=function(){function e(){if(n<2)throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.")}function t(e,t,n){return s.tmpl(e,t,n)}var n=this.jQueryTmplVersion=function(){if(!s||!s.tmpl)return 0;try{if(s.tmpl.tag.tmpl.open.toString().indexOf("__")>=0)return 2}catch(e){}return 1}();this.renderTemplateSource=function(n,r,i,a){a=a||o,i=i||{},e();var u=n.data("precompiled");if(!u){var l=n.text()||"";l="{{ko_with $item.koBindingContext}}"+l+"{{/ko_with}}",u=s.template(null,l),n.data("precompiled",u)}var c=t(u,[r.$data],s.extend({koBindingContext:r},i.templateOptions));return c.appendTo(a.createElement("div")),s.fragments={},c},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,t){o.write("<script type='text/html' id='"+e+"'>"+t+"<\/script>")},n>0&&(s.tmpl.tag.ko_code={open:"__.push($1 || '');"},s.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},m.jqueryTmplTemplateEngine.prototype=new m.templateEngine,m.jqueryTmplTemplateEngine.prototype.constructor=m.jqueryTmplTemplateEngine;var e=new m.jqueryTmplTemplateEngine;e.jQueryTmplVersion>0&&m.setTemplateEngine(e),m.exportSymbol("jqueryTmplTemplateEngine",m.jqueryTmplTemplateEngine)}()})}()},{}],32:[function(e,t,n){(function(e){var n=/^[\],:{}\s]*$/,r=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,o=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,i=/(?:^|:|,)(?:\s*\[)+/g,s=/^\s+/,a=/\s+$/;t.exports=function(t){return"string"==typeof t&&t?(t=t.replace(s,"").replace(a,""),e.JSON&&JSON.parse?JSON.parse(t):n.test(t.replace(r,"@").replace(o,"]").replace(i,""))?new Function("return "+t)():void 0):null}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],33:[function(e,t,n){n.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},n.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},{}],34:[function(e,t,n){var r=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,o=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(e){var t=e,n=e.indexOf("["),i=e.indexOf("]");-1!=n&&-1!=i&&(e=e.substring(0,n)+e.substring(n,i).replace(/:/g,";")+e.substring(i,e.length));for(var s=r.exec(e||""),a={},u=14;u--;)a[o[u]]=s[u]||"";return-1!=n&&-1!=i&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},{}],35:[function(e,t,n){function r(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(e){if(p===setTimeout)return setTimeout(e,0);if((p===r||!p)&&setTimeout)return p=setTimeout,setTimeout(e,0);try{return p(e,0)}catch(t){try{return p.call(null,e,0)}catch(t){return p.call(this,e,0)}}}function s(e){if(f===clearTimeout)return clearTimeout(e);if((f===o||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}function a(){g&&h&&(g=!1,h.length?m=h.concat(m):y=-1,m.length&&u())}function u(){if(!g){var e=i(a);g=!0;for(var t=m.length;t;){for(h=m,m=[];++y<t;)h&&h[y].run();y=-1,t=m.length}h=null,g=!1,s(e)}}function l(e,t){this.fun=e,this.array=t}function c(){}var p,f,d=t.exports={};!function(){try{p="function"==typeof setTimeout?setTimeout:r}catch(e){p=r}try{f="function"==typeof clearTimeout?clearTimeout:o}catch(e){f=o}}();var h,m=[],g=!1,y=-1;d.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];m.push(new l(e,t)),1!==m.length||g||i(u)},l.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=c,d.addListener=c,d.once=c,d.off=c,d.removeListener=c,d.removeAllListeners=c,d.emit=c,d.prependListener=c,d.prependOnceListener=c,d.listeners=function(e){return[]},d.binding=function(e){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(e){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},{}],36:[function(e,t,n){function r(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,r=o(e),i=r.source,l=r.id,c=r.path,p=u[l]&&c in u[l].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||p?(a("ignoring socket cache for %s",i),n=s(i,t)):(u[l]||(a("new io instance for %s",i),u[l]=s(i,t)),n=u[l]),r.query&&!t.query&&(t.query=r.query),n.socket(r.path,t)}var o=e("./url"),i=e("socket.io-parser"),s=e("./manager"),a=e("debug")("socket.io-client");t.exports=n=r;var u=n.managers={};n.protocol=i.protocol,n.connect=r,n.Manager=e("./manager"),n.Socket=e("./socket")},{"./manager":37,"./socket":39,"./url":40,debug:41,"socket.io-parser":45}],37:[function(e,t,n){function r(e,t){if(!(this instanceof r))return new r(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}var o=e("engine.io-client"),i=e("./socket"),s=e("component-emitter"),a=e("socket.io-parser"),u=e("./on"),l=e("component-bind"),c=e("debug")("socket.io-client:manager"),p=e("indexof"),f=e("backo2"),d=Object.prototype.hasOwnProperty;t.exports=r,r.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var e in this.nsps)d.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},r.prototype.updateSocketIds=function(){for(var e in this.nsps)d.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},r.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},s(r.prototype),r.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},r.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},r.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},r.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},r.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},r.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},r.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},r.prototype.open=r.prototype.connect=function(e,t){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=o(this.uri,this.opts);var n=this.engine,r=this;this.readyState="opening",this.skipReconnect=!1;var i=u(n,"open",function(){r.onopen(),e&&e()}),s=u(n,"error",function(t){if(c("connect_error"),r.cleanup(),r.readyState="closed",r.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else r.maybeReconnectOnOpen()});if(!1!==this._timeout){var a=this._timeout;c("connect attempt will timeout after %d",a);var l=setTimeout(function(){c("connect attempt timed out after %d",a),i.destroy(),n.close(),n.emit("error","timeout"),r.emitAll("connect_timeout",a)},a);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(i),this.subs.push(s),this},r.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(u(e,"data",l(this,"ondata"))),this.subs.push(u(e,"ping",l(this,"onping"))),this.subs.push(u(e,"pong",l(this,"onpong"))),this.subs.push(u(e,"error",l(this,"onerror"))),this.subs.push(u(e,"close",l(this,"onclose"))),this.subs.push(u(this.decoder,"decoded",l(this,"ondecoded")))},r.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},r.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},r.prototype.ondata=function(e){this.decoder.add(e)},r.prototype.ondecoded=function(e){this.emit("packet",e)},r.prototype.onerror=function(e){c("error",e),this.emitAll("error",e)},r.prototype.socket=function(e,t){function n(){~p(o.connecting,r)||o.connecting.push(r)}var r=this.nsps[e];if(!r){r=new i(this,e,t),this.nsps[e]=r;var o=this;r.on("connecting",n),r.on("connect",function(){r.id=o.generateId(e)}),this.autoConnect&&n()}return r},r.prototype.destroy=function(e){var t=p(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},r.prototype.packet=function(e){c("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},r.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},r.prototype.cleanup=function(){c("cleanup");for(var e=this.subs.length,t=0;t<e;t++)this.subs.shift().destroy();this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},r.prototype.close=r.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},r.prototype.onclose=function(e){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},r.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(c("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(c("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(c("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},r.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},{"./on":38,"./socket":39,backo2:3,"component-bind":7,"component-emitter":8,debug:41,"engine.io-client":10,indexof:29,"socket.io-parser":45}],38:[function(e,t,n){t.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},{}],39:[function(e,t,n){function r(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}var o=e("socket.io-parser"),i=e("component-emitter"),s=e("to-array"),a=e("./on"),u=e("component-bind"),l=e("debug")("socket.io-client:socket"),c=e("parseqs");t.exports=r;var p={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=i.prototype.emit;i(r.prototype),r.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[a(e,"open",u(this,"onopen")),a(e,"packet",u(this,"onpacket")),a(e,"close",u(this,"onclose"))]}},r.prototype.open=r.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},r.prototype.send=function(){var e=s(arguments);return e.unshift("message"),this.emit.apply(this,e),this},r.prototype.emit=function(e){if(p.hasOwnProperty(e))return f.apply(this,arguments),this;var t=s(arguments),n={type:o.EVENT,data:t};return n.options={},n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(l("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),delete this.flags,this},r.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},r.prototype.onopen=function(){if(l("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?c.encode(this.query):this.query;l("sending connect packet with query %s",e),this.packet({type:o.CONNECT,query:e})}else this.packet({type:o.CONNECT})},r.prototype.onclose=function(e){l("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},r.prototype.onpacket=function(e){if(e.nsp===this.nsp)switch(e.type){case o.CONNECT:this.onconnect();break;case o.EVENT:case o.BINARY_EVENT:this.onevent(e);break;case o.ACK:case o.BINARY_ACK:this.onack(e);break;case o.DISCONNECT:this.ondisconnect();break;case o.ERROR:this.emit("error",e.data)}},r.prototype.onevent=function(e){var t=e.data||[];l("emitting event %j",t),null!=e.id&&(l("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?f.apply(this,t):this.receiveBuffer.push(t)},r.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var r=s(arguments);l("sending ack %j",r),t.packet({type:o.ACK,id:e,data:r})}}},r.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(l("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):l("bad ack %s",e.id)},r.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},r.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)f.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},r.prototype.ondisconnect=function(){l("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},r.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},r.prototype.close=r.prototype.disconnect=function(){return this.connected&&(l("performing disconnect (%s)",this.nsp),this.packet({type:o.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},r.prototype.compress=function(e){return this.flags=this.flags||{},this.flags.compress=e,this}},{"./on":38,"component-bind":7,"component-emitter":8,debug:41,parseqs:33,"socket.io-parser":45,"to-array":51}],40:[function(e,t,n){(function(n){var r=e("parseuri"),o=e("debug")("socket.io-client:url");t.exports=function(e,t){var i=e;t=t||n.location,null==e&&(e=t.protocol+"//"+t.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?t.protocol+e:t.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==t?t.protocol+"//"+e:"https://"+e),o("parse %s",e),i=r(e)),i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443")),i.path=i.path||"/";var s=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+s+":"+i.port,i.href=i.protocol+"://"+s+(t&&t.port===i.port?"":":"+i.port),i}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{debug:41,parseuri:34}],41:[function(e,t,n){(function(r){function o(){var e;try{e=n.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(n=t.exports=e("./debug")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},n.formatArgs=function(e){var t=this.useColors;if(e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+n.humanize(this.diff),t){var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))}),e.splice(i,0,r)}},n.save=function(e){try{null==e?n.storage.removeItem("debug"):n.storage.debug=e}catch(e){}},n.load=o,n.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},n.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),n.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],n.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},n.enable(o())}).call(this,e("_process"))},{"./debug":42,_process:35}],42:[function(e,t,n){arguments[4][21][0].apply(n,arguments)},{dup:21,ms:43}],43:[function(e,t,n){arguments[4][22][0].apply(n,arguments)},{dup:22}],44:[function(e,t,n){(function(t){function r(e,t){if(!e)return e;if(s(e)){var n={_placeholder:!0,num:t.length};return t.push(e),n}if(i(e)){for(var o=new Array(e.length),a=0;a<e.length;a++)o[a]=r(e[a],t);return o}if("object"==typeof e&&!(e instanceof Date)){o={};for(var u in e)o[u]=r(e[u],t);return o}return e}function o(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(i(e))for(var n=0;n<e.length;n++)e[n]=o(e[n],t);else if("object"==typeof e)for(var r in e)e[r]=o(e[r],t);return e}var i=e("isarray"),s=e("./is-buffer"),a=Object.prototype.toString,u="function"==typeof t.Blob||"[object BlobConstructor]"===a.call(t.Blob),l="function"==typeof t.File||"[object FileConstructor]"===a.call(t.File);n.deconstructPacket=function(e){var t=[],n=e.data,o=e;return o.data=r(n,t),o.attachments=t.length,{packet:o,buffers:t}},n.reconstructPacket=function(e,t){return e.data=o(e.data,t),e.attachments=void 0,e},n.removeBlobs=function(e,t){function n(e,a,c){if(!e)return e;if(u&&e instanceof Blob||l&&e instanceof File){r++;var p=new FileReader;p.onload=function(){c?c[a]=this.result:o=this.result,--r||t(o)},p.readAsArrayBuffer(e)}else if(i(e))for(var f=0;f<e.length;f++)n(e[f],f,e);else if("object"==typeof e&&!s(e))for(var d in e)n(e[d],d,e)}var r=0,o=e;n(o),r||t(o)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./is-buffer":46,isarray:49}],45:[function(e,t,n){function r(){}function o(e){var t=""+e.type;return n.BINARY_EVENT!==e.type&&n.BINARY_ACK!==e.type||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),p("encoded %j as %s",e,t),t}function i(e,t){h.removeBlobs(e,function(e){var n=h.deconstructPacket(e),r=o(n.packet),i=n.buffers;i.unshift(r),t(i)})}function s(){this.reconstructor=null}function a(e){var t=0,r={type:Number(e.charAt(0))};if(null==n.types[r.type])return c();if(n.BINARY_EVENT===r.type||n.BINARY_ACK===r.type){for(var o="";"-"!==e.charAt(++t)&&(o+=e.charAt(t),t!=e.length););if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"===e.charAt(t+1))for(r.nsp="";++t&&","!==(s=e.charAt(t))&&(r.nsp+=s,t!==e.length););else r.nsp="/";var i=e.charAt(t+1);if(""!==i&&Number(i)==i){for(r.id="";++t;){var s=e.charAt(t);if(null==s||Number(s)!=s){--t;break}if(r.id+=e.charAt(t),t===e.length)break}r.id=Number(r.id)}return e.charAt(++t)&&(r=u(r,e.substr(t))),p("decoded %s as %j",e,r),r}function u(e,t){try{e.data=JSON.parse(t)}catch(e){return c()}return e}function l(e){this.reconPack=e,this.buffers=[]}function c(){return{type:n.ERROR,data:"parser error"}}var p=e("debug")("socket.io-parser"),f=e("component-emitter"),d=e("has-binary2"),h=e("./binary"),m=e("./is-buffer");n.protocol=4,n.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],n.CONNECT=0,n.DISCONNECT=1,n.EVENT=2,n.ACK=3,n.ERROR=4,n.BINARY_EVENT=5,n.BINARY_ACK=6,n.Encoder=r,n.Decoder=s,r.prototype.encode=function(e,t){e.type!==n.EVENT&&e.type!==n.ACK||!d(e.data)||(e.type=e.type===n.EVENT?n.BINARY_EVENT:n.BINARY_ACK),p("encoding packet %j",e),n.BINARY_EVENT===e.type||n.BINARY_ACK===e.type?i(e,t):t([o(e)])},f(s.prototype),s.prototype.add=function(e){var t;if("string"==typeof e)t=a(e),n.BINARY_EVENT===t.type||n.BINARY_ACK===t.type?(this.reconstructor=new l(t),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",t)):this.emit("decoded",t);else{if(!m(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(t=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",t))}},s.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},l.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=h.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},l.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},{"./binary":44,"./is-buffer":46,"component-emitter":8,debug:47,"has-binary2":26}],46:[function(e,t,n){(function(e){t.exports=function(t){return e.Buffer&&e.Buffer.isBuffer(t)||e.ArrayBuffer&&t instanceof ArrayBuffer}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],47:[function(e,t,n){(function(r){function o(){var e;try{e=n.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(n=t.exports=e("./debug")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},n.formatArgs=function(e){var t=this.useColors;if(e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+n.humanize(this.diff),t){var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))}),e.splice(i,0,r)}},n.save=function(e){try{null==e?n.storage.removeItem("debug"):n.storage.debug=e}catch(e){}},n.load=o,n.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},n.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),n.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],n.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},n.enable(o())}).call(this,e("_process"))},{"./debug":48,_process:35}],48:[function(e,t,n){arguments[4][21][0].apply(n,arguments)},{dup:21,ms:50}],49:[function(e,t,n){arguments[4][27][0].apply(n,arguments)},{dup:27}],50:[function(e,t,n){arguments[4][22][0].apply(n,arguments)},{dup:22}],51:[function(e,t,n){t.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},{}],52:[function(e,t,n){for(var r=[],o=0;o<256;++o)r[o]=(o+256).toString(16).substr(1);t.exports=function(e,t){var n=t||0,o=r;return o[e[n++]]+o[e[n++]]+o[e[n++]]+o[e[n++]]+"-"+o[e[n++]]+o[e[n++]]+"-"+o[e[n++]]+o[e[n++]]+"-"+o[e[n++]]+o[e[n++]]+"-"+o[e[n++]]+o[e[n++]]+o[e[n++]]+o[e[n++]]+o[e[n++]]+o[e[n++]]}},{}],53:[function(e,t,n){(function(e){var n,r=e.crypto||e.msCrypto;if(r&&r.getRandomValues){var o=new Uint8Array(16);n=function(){return r.getRandomValues(o),o}}if(!n){var i=new Array(16);n=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),i[t]=e>>>((3&t)<<3)&255;return i}}t.exports=n}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],54:[function(e,t,n){var r=e("./lib/rng"),o=e("./lib/bytesToUuid");t.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"==e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[i+a]=s[a];return t||o(s)}},{"./lib/bytesToUuid":52,"./lib/rng":53}],55:[function(e,t,n){"use strict";function r(e){var t="";do{t=s[e%a]+t,e=Math.floor(e/a)}while(e>0);return t}function o(){var e=r(+new Date);return e!==i?(l=0,i=e):e+"."+r(l++)}for(var i,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),a=64,u={},l=0,c=0;c<a;c++)u[s[c]]=c;o.encode=r,o.decode=function(e){var t=0;for(c=0;c<e.length;c++)t=t*a+u[e.charAt(c)];return t},t.exports=o},{}],56:[function(e,t,n){var r=e("knockout"),o=e("socket.io-client"),i=e("../../config/app"),s=o.connect(location.origin);t.exports=function(e){var t=this;return t.messages=r.observableArray(e),t.myUUID=i.uuid,s.on("chat-message",function(e){t.messages.push(e)}),t}},{"../../config/app":58,knockout:31,"socket.io-client":36}],57:[function(e,t,n){var r=e("knockout"),o=e("socket.io-client"),i=e("../../config/app"),s=o.connect(location.origin);t.exports=function(){return this.newMessage=r.observable(""),this.sendMessage=function(){""!==this.newMessage()&&(s.emit("chat-message",{uuid:i.uuid,text:this.newMessage()}),this.newMessage(""))}.bind(this),this}},{"../../config/app":58,knockout:31,"socket.io-client":36}],58:[function(e,t,n){var r=e("uuid/v4")();t.exports={uuid:r}},{"uuid/v4":54}],59:[function(e,t,n){var r=e("jquery"),o=e("knockout"),i=e("./app/view/Conversation"),s=e("./app/view/MessageInput"),a=(e("./mock/data").messages,new i([])),u=new s;r(function(){o.applyBindings(a,r(".chat-messages")[0]),o.applyBindings(u,r(".chat-message-input")[0])})},{"./app/view/Conversation":56,"./app/view/MessageInput":57,"./mock/data":60,jquery:30,knockout:31}],60:[function(e,t,n){n.messages=[]},{}]},{},[59]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYWZ0ZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYXJyYXlidWZmZXIuc2xpY2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jhc2U2NC1hcnJheWJ1ZmZlci9saWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29tcG9uZW50LWluaGVyaXQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLWpzb25wLmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy14aHIuanMiLCJub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3htbGh0dHByZXF1ZXN0LmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2tleXMuanMiLCJub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcyIsIm5vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIm5vZGVfbW9kdWxlcy9rbm9ja291dC9idWlsZC9vdXRwdXQva25vY2tvdXQtbGF0ZXN0LmRlYnVnLmpzIiwibm9kZV9tb2R1bGVzL3BhcnNlanNvbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9tYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL29uLmpzIiwibm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi91cmwuanMiLCJub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9iaW5hcnkuanMiLCJub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2lzLWJ1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy90by1hcnJheS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy91dWlkL2xpYi9ieXRlc1RvVXVpZC5qcyIsIm5vZGVfbW9kdWxlcy91dWlkL2xpYi9ybmctYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy91dWlkL3Y0LmpzIiwibm9kZV9tb2R1bGVzL3llYXN0L2luZGV4LmpzIiwic3JjL2pzL2FwcC92aWV3L0NvbnZlcnNhdGlvbi5qcyIsInNyYy9qcy9hcHAvdmlldy9NZXNzYWdlSW5wdXQuanMiLCJzcmMvanMvY29uZmlnL2FwcC5qcyIsInNyYy9qcy9tYWluLmpzIiwic3JjL2pzL21vY2svZGF0YS5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJub29wIiwiY291bnQiLCJjYWxsYmFjayIsImVycl9jYiIsInByb3h5IiwiZXJyIiwicmVzdWx0IiwiYmFpbCIsImFycmF5YnVmZmVyIiwic3RhcnQiLCJlbmQiLCJieXRlcyIsImJ5dGVMZW5ndGgiLCJzbGljZSIsIkFycmF5QnVmZmVyIiwiYWJ2IiwiVWludDhBcnJheSIsImlpIiwiYnVmZmVyIiwiQmFja29mZiIsIm9wdHMiLCJ0aGlzIiwibXMiLCJtaW4iLCJtYXgiLCJmYWN0b3IiLCJqaXR0ZXIiLCJhdHRlbXB0cyIsInByb3RvdHlwZSIsImR1cmF0aW9uIiwiTWF0aCIsInBvdyIsInJhbmQiLCJyYW5kb20iLCJkZXZpYXRpb24iLCJmbG9vciIsInJlc2V0Iiwic2V0TWluIiwic2V0TWF4Iiwic2V0Sml0dGVyIiwiY2hhcnMiLCJsb29rdXAiLCJjaGFyQ29kZUF0IiwiZW5jb2RlIiwibGVuIiwiYmFzZTY0Iiwic3Vic3RyaW5nIiwiZGVjb2RlIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJidWZmZXJMZW5ndGgiLCJwIiwibWFwQXJyYXlCdWZmZXJWaWV3cyIsImFyeSIsImNodW5rIiwiYnVmIiwiY29weSIsInNldCIsImJ5dGVPZmZzZXQiLCJCbG9iQnVpbGRlckNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImJiIiwiQmxvYkJ1aWxkZXIiLCJhcHBlbmQiLCJnZXRCbG9iIiwidHlwZSIsIkJsb2JDb25zdHJ1Y3RvciIsIkJsb2IiLCJnbG9iYWwiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsImJsb2JTdXBwb3J0ZWQiLCJzaXplIiwiYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3IiwiYmxvYkJ1aWxkZXJTdXBwb3J0ZWQiLCJvYmoiLCJmbiIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImNvbmNhdCIsIkVtaXR0ZXIiLCJtaXhpbiIsImtleSIsIm9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiX2NhbGxiYWNrcyIsInB1c2giLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FsbGJhY2tzIiwiY2IiLCJzcGxpY2UiLCJlbWl0IiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIiwiYiIsImNvbnN0cnVjdG9yIiwicGFyc2VyIiwiU29ja2V0IiwidXJpIiwicGFyc2V1cmkiLCJob3N0bmFtZSIsImhvc3QiLCJzZWN1cmUiLCJwcm90b2NvbCIsInBvcnQiLCJxdWVyeSIsImxvY2F0aW9uIiwiYWdlbnQiLCJwYXJzZXFzIiwidXBncmFkZSIsInBhdGgiLCJyZXBsYWNlIiwiZm9yY2VKU09OUCIsImpzb25wIiwiZm9yY2VCYXNlNjQiLCJlbmFibGVzWERSIiwidGltZXN0YW1wUGFyYW0iLCJ0aW1lc3RhbXBSZXF1ZXN0cyIsInRyYW5zcG9ydHMiLCJ0cmFuc3BvcnRPcHRpb25zIiwicmVhZHlTdGF0ZSIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsInBvbGljeVBvcnQiLCJyZW1lbWJlclVwZ3JhZGUiLCJiaW5hcnlUeXBlIiwib25seUJpbmFyeVVwZ3JhZGVzIiwicGVyTWVzc2FnZURlZmxhdGUiLCJ0aHJlc2hvbGQiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsInVuZGVmaW5lZCIsImZvcmNlTm9kZSIsImZyZWVHbG9iYWwiLCJleHRyYUhlYWRlcnMiLCJPYmplY3QiLCJrZXlzIiwibG9jYWxBZGRyZXNzIiwiaWQiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ0ludGVydmFsVGltZXIiLCJwaW5nVGltZW91dFRpbWVyIiwib3BlbiIsImNsb25lIiwiaGFzT3duUHJvcGVydHkiLCJkZWJ1ZyIsImluZGV4IiwicGFyc2Vqc29uIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwiVHJhbnNwb3J0IiwiY3JlYXRlVHJhbnNwb3J0IiwibmFtZSIsIkVJTyIsInRyYW5zcG9ydCIsInNpZCIsInNvY2tldCIsInJlcXVlc3RUaW1lb3V0IiwicHJvdG9jb2xzIiwiaW5kZXhPZiIsInNlbGYiLCJzZXRUaW1lb3V0Iiwic2hpZnQiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwicGFja2V0Iiwib25QYWNrZXQiLCJvbkVycm9yIiwib25DbG9zZSIsInByb2JlIiwib25UcmFuc3BvcnRPcGVuIiwidXBncmFkZUxvc2VzQmluYXJ5Iiwic3VwcG9ydHNCaW5hcnkiLCJmYWlsZWQiLCJzZW5kIiwiZGF0YSIsIm1zZyIsInVwZ3JhZGluZyIsInBhdXNlIiwiY2xlYW51cCIsImZsdXNoIiwiZnJlZXplVHJhbnNwb3J0IiwiY2xvc2UiLCJvbmVycm9yIiwiZXJyb3IiLCJvblRyYW5zcG9ydENsb3NlIiwib25jbG9zZSIsIm9udXBncmFkZSIsInRvIiwib25PcGVuIiwib25IYW5kc2hha2UiLCJzZXRQaW5nIiwiZmlsdGVyVXBncmFkZXMiLCJvbkhlYXJ0YmVhdCIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJwaW5nIiwic2VuZFBhY2tldCIsIndyaXRhYmxlIiwid3JpdGUiLCJjb21wcmVzcyIsImNsZWFudXBBbmRDbG9zZSIsIndhaXRGb3JVcGdyYWRlIiwicmVhc29uIiwiZGVzYyIsImZpbHRlcmVkVXBncmFkZXMiLCJqIiwiZGVzY3JpcHRpb24iLCJkb09wZW4iLCJkb0Nsb3NlIiwicGFja2V0cyIsIm9uRGF0YSIsImRlY29kZVBhY2tldCIsIlhNTEh0dHBSZXF1ZXN0IiwiWEhSIiwiSlNPTlAiLCJ3ZWJzb2NrZXQiLCJwb2xsaW5nIiwieGQiLCJ4cyIsImlzU1NMIiwieGRvbWFpbiIsInhzY2hlbWUiLCJlbXB0eSIsIkpTT05QUG9sbGluZyIsIlBvbGxpbmciLCJfX19laW8iLCJkb2N1bWVudCIsInNjcmlwdCIsImluaGVyaXQiLCJyTmV3bGluZSIsInJFc2NhcGVkTmV3bGluZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImZvcm0iLCJpZnJhbWUiLCJkb1BvbGwiLCJjcmVhdGVFbGVtZW50IiwiYXN5bmMiLCJzcmMiLCJpbnNlcnRBdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5zZXJ0QmVmb3JlIiwiaGVhZCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsIm5hdmlnYXRvciIsInRlc3QiLCJ1c2VyQWdlbnQiLCJkb1dyaXRlIiwiY29tcGxldGUiLCJpbml0SWZyYW1lIiwiaHRtbCIsImlmcmFtZUlkIiwiYXJlYSIsImNsYXNzTmFtZSIsInN0eWxlIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwidGFyZ2V0IiwibWV0aG9kIiwic2V0QXR0cmlidXRlIiwiYWN0aW9uIiwidmFsdWUiLCJzdWJtaXQiLCJhdHRhY2hFdmVudCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9ubG9hZCIsIlJlcXVlc3QiLCJpc0JpbmFyeSIsImNyZWF0ZSIsInVubG9hZEhhbmRsZXIiLCJyZXF1ZXN0cyIsImFib3J0IiwicmVxdWVzdCIsInJlcSIsInNlbmRYaHIiLCJwb2xsWGhyIiwieGhyIiwic2V0RGlzYWJsZUhlYWRlckNoZWNrIiwic2V0UmVxdWVzdEhlYWRlciIsIndpdGhDcmVkZW50aWFscyIsImhhc1hEUiIsIm9uTG9hZCIsInJlc3BvbnNlVGV4dCIsImNvbnRlbnRUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXNwb25zZVR5cGUiLCJzdGF0dXMiLCJyZXF1ZXN0c0NvdW50Iiwib25TdWNjZXNzIiwiZnJvbUVycm9yIiwicmVzcG9uc2UiLCJYRG9tYWluUmVxdWVzdCIsImhhc1hIUjIiLCJ5ZWFzdCIsInBvbGwiLCJvblBhdXNlIiwidG90YWwiLCJkZWNvZGVQYXlsb2FkIiwiY2FsbGJhY2tmbiIsImVuY29kZVBheWxvYWQiLCJzY2hlbWEiLCJiNjQiLCJOdW1iZXIiLCJXUyIsInVzaW5nQnJvd3NlcldlYlNvY2tldCIsIkJyb3dzZXJXZWJTb2NrZXQiLCJXZWJTb2NrZXQiLCJOb2RlV2ViU29ja2V0IiwiTW96V2ViU29ja2V0Iiwid2luZG93IiwiY2hlY2siLCJoZWFkZXJzIiwid3MiLCJzdXBwb3J0cyIsImJpbmFyeSIsImFkZEV2ZW50TGlzdGVuZXJzIiwib25vcGVuIiwib25tZXNzYWdlIiwiZXYiLCJkb25lIiwiZW5jb2RlUGFja2V0IiwiQnVmZmVyIiwiaGFzQ09SUyIsImpvaW4iLCJsb2FkIiwic3RvcmFnZSIsInByb2Nlc3MiLCJlbnYiLCJERUJVRyIsImxvZyIsImNvbnNvbGUiLCJGdW5jdGlvbiIsImZvcm1hdEFyZ3MiLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImRpZmYiLCJjIiwiY29sb3IiLCJsYXN0QyIsIm1hdGNoIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJyZW1vdmVJdGVtIiwiZG9jdW1lbnRFbGVtZW50IiwiV2Via2l0QXBwZWFyYW5jZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsInRvTG93ZXJDYXNlIiwicGFyc2VJbnQiLCJSZWdFeHAiLCIkMSIsImNocm9tZSIsImxvY2FsIiwibG9jYWxTdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiY29sb3JzIiwiZm9ybWF0dGVycyIsInYiLCJKU09OIiwic3RyaW5naWZ5IiwibWVzc2FnZSIsImVuYWJsZSIsInNlbGVjdENvbG9yIiwiaGFzaCIsImFicyIsImNyZWF0ZURlYnVnIiwiZW5hYmxlZCIsImN1cnIiLCJEYXRlIiwicHJldlRpbWUiLCJwcmV2IiwiQXJyYXkiLCJjb2VyY2UiLCJ1bnNoaWZ0IiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwidmFsIiwiYmluZCIsImluaXQiLCJzdGFjayIsImRpc2FibGUiLCJuYW1lcyIsInNraXBzIiwic3BsaXQiLCJzdWJzdHIiLCJwYXJzZSIsInN0ciIsIlN0cmluZyIsImV4ZWMiLCJwYXJzZUZsb2F0IiwieSIsImQiLCJoIiwibSIsImZtdFNob3J0Iiwicm91bmQiLCJmbXRMb25nIiwicGx1cmFsIiwiY2VpbCIsImlzTmFOIiwibG9uZyIsImVuY29kZUJhc2U2NE9iamVjdCIsImVuY29kZUFycmF5QnVmZmVyIiwiZW5jb2RlQmFzZTY0UGFja2V0IiwiY29udGVudEFycmF5IiwicmVzdWx0QnVmZmVyIiwiZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIiLCJmciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImVuY29kZUJsb2IiLCJkb250U2VuZEJsb2JzIiwidHJ5RGVjb2RlIiwidXRmOCIsInN0cmljdCIsIm1hcCIsImVhY2giLCJuZXh0IiwiYWZ0ZXIiLCJlbCIsImVhY2hXaXRoSW5kZXgiLCJiYXNlNjRlbmNvZGVyIiwiaGFzQmluYXJ5Iiwic2xpY2VCdWZmZXIiLCJpc0FuZHJvaWQiLCJpc1BoYW50b21KUyIsInBvbmciLCJwYWNrZXRzbGlzdCIsInV0ZjhlbmNvZGUiLCJlbmNvZGVkIiwicmVhZEFzRGF0YVVSTCIsImI2NGRhdGEiLCJmcm9tQ2hhckNvZGUiLCJ0eXBlZCIsImJhc2ljIiwiYnRvYSIsInV0ZjhkZWNvZGUiLCJjaGFyQXQiLCJkZWNvZGVCYXNlNjRQYWNrZXQiLCJyZXN0Iiwic2V0TGVuZ3RoSGVhZGVyIiwiZW5jb2RlUGF5bG9hZEFzQmxvYiIsImVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyIiwiZG9uZUNhbGxiYWNrIiwicmVzdWx0cyIsImRlY29kZVBheWxvYWRBc0JpbmFyeSIsImNociIsImVuY29kZWRQYWNrZXRzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJ0b1N0cmluZyIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJmb3JFYWNoIiwiaXNTdHJpbmciLCJhYiIsInZpZXciLCJsZW5TdHIiLCJiaW5hcnlJZGVudGlmaWVyIiwibGVuZ3RoQXJ5IiwiYmxvYiIsImJ1ZmZlclRhaWwiLCJidWZmZXJzIiwidGFpbEFycmF5IiwibXNnTGVuZ3RoIiwiYXJyIiwiaGFzIiwicm9vdCIsInVjczJkZWNvZGUiLCJzdHJpbmciLCJleHRyYSIsIm91dHB1dCIsImNvdW50ZXIiLCJ1Y3MyZW5jb2RlIiwiYXJyYXkiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJjaGVja1NjYWxhclZhbHVlIiwiY29kZVBvaW50IiwidG9VcHBlckNhc2UiLCJjcmVhdGVCeXRlIiwiZW5jb2RlQ29kZVBvaW50Iiwic3ltYm9sIiwicmVhZENvbnRpbnVhdGlvbkJ5dGUiLCJieXRlSW5kZXgiLCJieXRlQ291bnQiLCJjb250aW51YXRpb25CeXRlIiwiYnl0ZUFycmF5IiwiZGVjb2RlU3ltYm9sIiwiYnl0ZTEiLCJieXRlMiIsImJ5dGUzIiwiYnl0ZTQiLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJ2ZXJzaW9uIiwiY29kZVBvaW50cyIsImJ5dGVTdHJpbmciLCJ0bXAiLCJkZWZpbmUiLCJhbWQiLCJub2RlVHlwZSIsImlzQXJyYXkiLCJpc0J1ZmZlciIsIndpdGhOYXRpdmVCbG9iIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwidG9KU09OIiwiZmFjdG9yeSIsInciLCJub0dsb2JhbCIsIkRPTUV2YWwiLCJkb2MiLCJ0ZXh0IiwiaXNBcnJheUxpa2UiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIm5vZGVOYW1lIiwiZWxlbSIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJyaXNTaW1wbGUiLCJmaWx0ZXIiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsIm9iamVjdCIsInJub3RodG1sd2hpdGUiLCJfIiwiZmxhZyIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiY29tcGxldGVkIiwicmVhZHkiLCJEYXRhIiwiZXhwYW5kbyIsInVpZCIsImdldERhdGEiLCJyYnJhY2UiLCJkYXRhQXR0ciIsInJtdWx0aURhc2giLCJnZXRBdHRyaWJ1dGUiLCJkYXRhVXNlciIsImFkanVzdENTUyIsInByb3AiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImNzcyIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInJjc3NOdW0iLCJnZXREZWZhdWx0RGlzcGxheSIsInRlbXAiLCJvd25lckRvY3VtZW50IiwiZGlzcGxheSIsImRlZmF1bHREaXNwbGF5TWFwIiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiZGF0YVByaXYiLCJnZXQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJnZXRBbGwiLCJjb250ZXh0IiwidGFnIiwicmV0IiwicXVlcnlTZWxlY3RvckFsbCIsIm1lcmdlIiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiY29udGFpbnMiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsInJodG1sIiwicnRhZ05hbWUiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZVRleHROb2RlIiwiaW5BcnJheSIsInJzY3JpcHRUeXBlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwidHlwZXMiLCJzZWxlY3RvciIsIm9uZSIsIm9yaWdGbiIsImd1aWQiLCJhZGQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJjb250ZW50IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJlbW92ZUF0dHJpYnV0ZSIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZXZlbnRzIiwiaGFzRGF0YSIsImFjY2VzcyIsImhhbmRsZSIsImV4dGVuZCIsImZpeElucHV0IiwicmNoZWNrYWJsZVR5cGUiLCJjaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiZmlyc3QiLCJoYXNTY3JpcHRzIiwibm9kZSIsImlOb0Nsb25lIiwic3VwcG9ydCIsImNoZWNrQ2xvbmUiLCJyY2hlY2tlZCIsImVxIiwiX2V2YWxVcmwiLCJyY2xlYW5TY3JpcHQiLCJyZW1vdmUiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0U3R5bGVzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJybnVtbm9ucHgiLCJybWFyZ2luIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJ2ZW5kb3JQcm9wTmFtZSIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwiY3NzUHJlZml4ZXMiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF0Y2hlcyIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImJveFNpemluZ1JlbGlhYmxlIiwiVHdlZW4iLCJlYXNpbmciLCJzY2hlZHVsZSIsImluUHJvZ3Jlc3MiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmeCIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZnhOb3ciLCJub3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsIndoaWNoIiwiYXR0cnMiLCJoZWlnaHQiLCJvcGFjaXR5IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BGaWx0ZXIiLCJwcm9wcyIsInNwZWNpYWxFYXNpbmciLCJob29rcyIsImNhbWVsQ2FzZSIsImNzc0hvb2tzIiwiZXhwYW5kIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsImFsd2F5cyIsImN1cnJlbnRUaW1lIiwicmVtYWluaW5nIiwic3RhcnRUaW1lIiwicGVyY2VudCIsInR3ZWVucyIsInJ1biIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsIl9xdWV1ZUhvb2tzIiwicXVldWUiLCJwcm9ncmVzcyIsInRpbWVyIiwiYW5pbSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImJ1aWxkUGFyYW1zIiwicHJlZml4IiwidHJhZGl0aW9uYWwiLCJyYnJhY2tldCIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImZ1bmMiLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0Iiwic2VsZWN0ZWQiLCJpbnNwZWN0ZWQiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0Iiwic2Vla2luZ1RyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicmVzcG9uc2VzIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImNvbnRlbnRzIiwibWltZVR5cGUiLCJjb252ZXJ0ZXJzIiwiYWpheENvbnZlcnQiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwic3RhdGUiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInJ0cmltIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJqcXVlcnkiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImxhc3QiLCJzb3J0IiwiY29weUlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWFkeSIsImlzTnVtZXJpYyIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwidHJpbSIsIm1ha2VBcnJheSIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJTaXp6bGUiLCJzZWVkIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwicHJlZmVycmVkRG9jIiwic2V0RG9jdW1lbnQiLCJkb2N1bWVudElzSFRNTCIsInJxdWlja0V4cHIiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJjb21waWxlckNhY2hlIiwicmJ1Z2d5UVNBIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJ0b2tlbml6ZSIsInRvU2VsZWN0b3IiLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImNhY2hlIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiYWRkSGFuZGxlIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJkaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJkaXNhYmxlZEFuY2VzdG9yIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsInRva2VucyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwieG1sIiwib2xkQ2FjaGUiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJ1bmlxdWVJRCIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJmaW5kIiwiZGlycnVuc1VuaXF1ZSIsInBvcCIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsInNvcnRPcmRlciIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsImNoIiwiYXNDb2RlUG9pbnQiLCJlbHMiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiYXR0ciIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInBhcmVudCIsInVzZUNhY2hlIiwicHNldWRvIiwiaWR4IiwibWF0Y2hlZCIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImZvY3VzIiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwic3RvcE9uRmFsc2UiLCJsb2NrIiwiZmlyZVdpdGgiLCJ0dXBsZXMiLCJjYXRjaCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJtYXhEZXB0aCIsIlR5cGVFcnJvciIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwid2FybiIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwicmVhZHlXYWl0Iiwid2FpdCIsImRvU2Nyb2xsIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJzd2FwIiwib2xkIiwiaGlkZSIsInRvZ2dsZSIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2IiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50IiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwicHJlcGVuZCIsImJlZm9yZSIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJtYXJnaW5MZWZ0IiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJtYXJnaW5SaWdodCIsInBpeGVsTWFyZ2luUmlnaHRWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZsb2F0Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsImVhc2VkIiwicG9zIiwic3RlcCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwicmZ4dHlwZXMiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJzdWNjZXNzIiwibW9kaWZpZWQiLCJzdGF0dXNUZXh0IiwidGltZW91dFRpbWVyIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwiaWZNb2RpZmllZCIsImNhY2hlVVJMIiwiY2FsbGJhY2tDb250ZXh0Iiwic3RhdHVzQ29kZSIsImZpcmVHbG9iYWxzIiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInJlc3BvbnNlSGVhZGVycyIsInVybEFuY2hvciIsInVuY2FjaGVkIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJvdmVycmlkZU1pbWVUeXBlIiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25hYm9ydCIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJldmFsIiwialF1ZXJ5SW5zdGFuY2UiLCJrb0V4cG9ydHMiLCJhbWRSZXF1aXJlIiwidmFsdWVzQXJlUHJpbWl0aXZlQW5kRXF1YWwiLCJwcmltaXRpdmVUeXBlcyIsInRocm90dGxlIiwidGltZW91dEluc3RhbmNlIiwia28iLCJ1dGlscyIsImRlYm91bmNlIiwibGltaXROb3RpZnlTdWJzY3JpYmVycyIsImRlZmF1bHRFdmVudCIsIl9saW1pdEJlZm9yZUNoYW5nZSIsIl9vcmlnTm90aWZ5U3Vic2NyaWJlcnMiLCJfbGltaXRDaGFuZ2UiLCJjb21wdXRlZERpc3Bvc2VEZXBlbmRlbmN5Q2FsbGJhY2siLCJlbnRyeVRvRGlzcG9zZSIsImRpc3Bvc2UiLCJjb21wdXRlZEJlZ2luRGVwZW5kZW5jeURldGVjdGlvbkNhbGxiYWNrIiwic3Vic2NyaWJhYmxlIiwiY29tcHV0ZWRPYnNlcnZhYmxlIiwiY29tcHV0ZWRTdGF0ZSIsImlzRGlzcG9zZWQiLCJkaXNwb3NhbENvdW50IiwiZGlzcG9zYWxDYW5kaWRhdGVzIiwiYWRkRGVwZW5kZW5jeVRyYWNraW5nIiwiZGVwZW5kZW5jeVRyYWNraW5nIiwiaXNTbGVlcGluZyIsIl90YXJnZXQiLCJzdWJzY3JpYmVUb0RlcGVuZGVuY3kiLCJfbm90aWZpY2F0aW9uSXNQZW5kaW5nIiwiX25vdGlmeU5leHRDaGFuZ2VJZlZhbHVlSXNEaWZmZXJlbnQiLCJtYWtlV2l0aElmQmluZGluZyIsImJpbmRpbmdLZXkiLCJpc1dpdGgiLCJpc05vdCIsIm1ha2VDb250ZXh0Q2FsbGJhY2siLCJiaW5kaW5nSGFuZGxlcnMiLCJlbGVtZW50IiwidmFsdWVBY2Nlc3NvciIsImFsbEJpbmRpbmdzIiwidmlld01vZGVsIiwiYmluZGluZ0NvbnRleHQiLCJkaWREaXNwbGF5T25MYXN0VXBkYXRlIiwic2F2ZWROb2RlcyIsInJhd1ZhbHVlIiwiZGF0YVZhbHVlIiwidW53cmFwT2JzZXJ2YWJsZSIsInNob3VsZERpc3BsYXkiLCJpc0ZpcnN0UmVuZGVyIiwiY29tcHV0ZWRDb250ZXh0IiwiZ2V0RGVwZW5kZW5jaWVzQ291bnQiLCJjbG9uZU5vZGVzIiwidmlydHVhbEVsZW1lbnRzIiwic2V0RG9tTm9kZUNoaWxkcmVuIiwiYXBwbHlCaW5kaW5nc1RvRGVzY2VuZGFudHMiLCJlbXB0eU5vZGUiLCJkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQiLCJjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyIsImV4cHJlc3Npb25SZXdyaXRpbmciLCJiaW5kaW5nUmV3cml0ZVZhbGlkYXRvcnMiLCJhbGxvd2VkQmluZGluZ3MiLCJleHBvcnRTeW1ib2wiLCJrb1BhdGgiLCJleHBvcnRQcm9wZXJ0eSIsInB1YmxpY05hbWUiLCJkZWZlclVwZGF0ZXMiLCJ1c2VPbmx5TmF0aXZlRXZlbnRzIiwib2JqZWN0Rm9yRWFjaCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiaXNDbGlja09uQ2hlY2thYmxlRWxlbWVudCIsImV2ZW50VHlwZSIsInRhZ05hbWVMb3dlciIsImlucHV0VHlwZSIsInRvZ2dsZU9iamVjdENsYXNzUHJvcGVydHlTdHJpbmciLCJzaG91bGRIYXZlQ2xhc3MiLCJjdXJyZW50Q2xhc3NOYW1lcyIsImNzc0NsYXNzTmFtZVJlZ2V4IiwiYXJyYXlGb3JFYWNoIiwiYWRkT3JSZW1vdmVJdGVtIiwiY2FuU2V0UHJvdG90eXBlIiwia25vd25FdmVudHMiLCJrbm93bkV2ZW50VHlwZXNCeUV2ZW50TmFtZSIsImtub3duRXZlbnRzRm9yVHlwZSIsImV2ZW50c1RoYXRNdXN0QmVSZWdpc3RlcmVkVXNpbmdBdHRhY2hFdmVudCIsInByb3BlcnR5Y2hhbmdlIiwiaWVWZXJzaW9uIiwiaUVsZW1zIiwiaXNJZTYiLCJpc0llNyIsImZpZWxkc0luY2x1ZGVkV2l0aEpzb25Qb3N0IiwiYXJyYXlJbmRleE9mIiwiaXRlbSIsImFycmF5Rmlyc3QiLCJwcmVkaWNhdGUiLCJwcmVkaWNhdGVPd25lciIsImFycmF5UmVtb3ZlSXRlbSIsIml0ZW1Ub1JlbW92ZSIsImFycmF5R2V0RGlzdGluY3RWYWx1ZXMiLCJhcnJheU1hcCIsIm1hcHBpbmciLCJhcnJheUZpbHRlciIsImFycmF5UHVzaEFsbCIsInZhbHVlc1RvUHVzaCIsImluY2x1ZGVkIiwiZXhpc3RpbmdFbnRyeUluZGV4IiwicGVla09ic2VydmFibGUiLCJzZXRQcm90b3R5cGVPZk9yRXh0ZW5kIiwib2JqZWN0TWFwIiwiZW1wdHlEb21Ob2RlIiwiZG9tTm9kZSIsInJlbW92ZU5vZGUiLCJtb3ZlQ2xlYW5lZE5vZGVzVG9Db250YWluZXJFbGVtZW50Iiwibm9kZXNBcnJheSIsImNsZWFuTm9kZSIsInNob3VsZENsZWFuTm9kZXMiLCJuZXdOb2Rlc0FycmF5IiwiY2xvbmVkTm9kZSIsInJlcGxhY2VEb21Ob2RlcyIsIm5vZGVUb1JlcGxhY2VPck5vZGVBcnJheSIsIm5vZGVzVG9SZXBsYWNlQXJyYXkiLCJpbnNlcnRpb25Qb2ludCIsImZpeFVwQ29udGludW91c05vZGVBcnJheSIsImNvbnRpbnVvdXNOb2RlQXJyYXkiLCJzZXRPcHRpb25Ob2RlU2VsZWN0aW9uU3RhdGUiLCJvcHRpb25Ob2RlIiwiaXNTZWxlY3RlZCIsInN0cmluZ1RyaW0iLCJzdHJpbmdTdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsImRvbU5vZGVJc0NvbnRhaW5lZEJ5IiwiY29udGFpbmVkQnlOb2RlIiwiZG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50IiwiYW55RG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50IiwidGFnTmFtZSIsImNhdGNoRnVuY3Rpb25FcnJvcnMiLCJkZWZlckVycm9yIiwicmVnaXN0ZXJFdmVudEhhbmRsZXIiLCJ3cmFwcGVkSGFuZGxlciIsIm11c3RVc2VBdHRhY2hFdmVudCIsImF0dGFjaEV2ZW50SGFuZGxlciIsImF0dGFjaEV2ZW50TmFtZSIsImRvbU5vZGVEaXNwb3NhbCIsImFkZERpc3Bvc2VDYWxsYmFjayIsImRldGFjaEV2ZW50IiwidHJpZ2dlckV2ZW50IiwidXNlQ2xpY2tXb3JrYXJvdW5kIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnRDYXRlZ29yeSIsImluaXRFdmVudCIsImZpcmVFdmVudCIsImlzT2JzZXJ2YWJsZSIsInBlZWsiLCJ0b2dnbGVEb21Ob2RlQ3NzQ2xhc3MiLCJhZGRPclJlbW92ZUZuIiwiY2xhc3NMaXN0Iiwic2V0VGV4dENvbnRlbnQiLCJpbm5lclRleHROb2RlIiwiZm9yY2VSZWZyZXNoIiwic2V0RWxlbWVudE5hbWUiLCJtZXJnZUF0dHJpYnV0ZXMiLCJlbnN1cmVTZWxlY3RFbGVtZW50SXNSZW5kZXJlZENvcnJlY3RseSIsInNlbGVjdEVsZW1lbnQiLCJvcmlnaW5hbFdpZHRoIiwicmFuZ2UiLCJhcnJheUxpa2VPYmplY3QiLCJjcmVhdGVTeW1ib2xPclN0cmluZyIsImdldEZvcm1GaWVsZHMiLCJmaWVsZE5hbWUiLCJmaWVsZHMiLCJpc01hdGNoaW5nRmllbGQiLCJmaWVsZCIsInBhcnNlSnNvbiIsImpzb25TdHJpbmciLCJzdHJpbmdpZnlKc29uIiwicmVwbGFjZXIiLCJzcGFjZSIsInBvc3RKc29uIiwidXJsT3JGb3JtIiwiaW5jbHVkZUZpZWxkcyIsIm9yaWdpbmFsRm9ybSIsIm9yaWdpbmFsRnVuY3Rpb24iLCJwYXJ0aWFsQXJncyIsImRvbURhdGEiLCJjcmVhdGVJZk5vdEZvdW5kIiwiZGF0YVN0b3JlS2V5IiwiZGF0YVN0b3JlS2V5RXhwYW5kb1Byb3BlcnR5TmFtZSIsImRhdGFTdG9yZSIsInVuaXF1ZUlkIiwiZ2V0VGltZSIsImFsbERhdGFGb3JOb2RlIiwiY2xlYXIiLCJuZXh0S2V5IiwiZ2V0RGlzcG9zZUNhbGxiYWNrc0NvbGxlY3Rpb24iLCJhbGxEaXNwb3NlQ2FsbGJhY2tzIiwiZG9tRGF0YUtleSIsImRlc3Ryb3lDYWxsYmFja3NDb2xsZWN0aW9uIiwiY2xlYW5TaW5nbGVOb2RlIiwiY2xlYW5hYmxlTm9kZVR5cGVzV2l0aERlc2NlbmRhbnRzIiwiY2xlYW5JbW1lZGlhdGVDb21tZW50VHlwZUNoaWxkcmVuIiwibm9kZVdpdGhDaGlsZHJlbiIsImNoaWxkIiwibmV4dENoaWxkIiwiY2xlYW5hYmxlTm9kZVR5cGVzIiwiOCIsIjkiLCJyZW1vdmVEaXNwb3NlQ2FsbGJhY2siLCJjYWxsYmFja3NDb2xsZWN0aW9uIiwiZGVzY2VuZGFudHMiLCJjbGVhbkV4dGVybmFsRGF0YSIsImdldFdyYXAiLCJ0YWdzIiwibm9uZSIsInNpbXBsZUh0bWxQYXJzZSIsImRvY3VtZW50Q29udGV4dCIsIndpbmRvd0NvbnRleHQiLCJtYXJrdXAiLCJtYXlSZXF1aXJlQ3JlYXRlRWxlbWVudEhhY2siLCJqUXVlcnlIdG1sUGFyc2UiLCJwYXJzZUh0bWxGcmFnbWVudCIsInNldEh0bWwiLCJwYXJzZWROb2RlcyIsIm1lbW9pemF0aW9uIiwicmFuZG9tTWF4OEhleENoYXJzIiwiZ2VuZXJhdGVSYW5kb21JZCIsImZpbmRNZW1vTm9kZXMiLCJyb290Tm9kZSIsImFwcGVuZFRvQXJyYXkiLCJtZW1vSWQiLCJwYXJzZU1lbW9UZXh0IiwibWVtb3MiLCJtZW1vaXplIiwidW5tZW1vaXplIiwiY2FsbGJhY2tQYXJhbXMiLCJ1bm1lbW9pemVEb21Ob2RlQW5kRGVzY2VuZGFudHMiLCJleHRyYUNhbGxiYWNrUGFyYW1zQXJyYXkiLCJjb21iaW5lZFBhcmFtcyIsIm1lbW9UZXh0IiwidGFza3MiLCJwcm9jZXNzVGFza3MiLCJ0YXNrUXVldWVMZW5ndGgiLCJ0YXNrIiwibWFyayIsImNvdW50TWFya3MiLCJuZXh0SW5kZXhUb1Byb2Nlc3MiLCJ0YXNrUXVldWUiLCJzY2hlZHVsZWRQcm9jZXNzIiwic2NoZWR1bGVUYXNrUHJvY2Vzc2luZyIsIm5leHRIYW5kbGUiLCJzY2hlZHVsZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNhbmNlbCIsInJlc2V0Rm9yVGVzdGluZyIsInJ1bkVhcmx5IiwiZXh0ZW5kZXJzIiwid3JpdGVUaW1lb3V0SW5zdGFuY2UiLCJkZXBlbmRlbnRPYnNlcnZhYmxlIiwicmVhZCIsInJhdGVMaW1pdCIsImxpbWl0RnVuY3Rpb24iLCJfZGVmZXJVcGRhdGVzIiwibGltaXQiLCJpZ25vcmVVcGRhdGVzIiwibm90aWZ5V2hlbiIsImJvb2xlYW4iLCJudW1iZXIiLCJzdWJzY3JpcHRpb24iLCJkaXNwb3NlQ2FsbGJhY2siLCJrb19zdWJzY3JpYmFibGVfZm4iLCJpbnN0YW5jZSIsIl9zdWJzY3JpcHRpb25zIiwiY2hhbmdlIiwiX3ZlcnNpb25OdW1iZXIiLCJzdWJzY3JpYmUiLCJjYWxsYmFja1RhcmdldCIsImJvdW5kQ2FsbGJhY2siLCJhZnRlclN1YnNjcmlwdGlvblJlbW92ZSIsImJlZm9yZVN1YnNjcmlwdGlvbkFkZCIsIm5vdGlmeVN1YnNjcmliZXJzIiwidmFsdWVUb05vdGlmeSIsInVwZGF0ZVZlcnNpb24iLCJoYXNTdWJzY3JpcHRpb25zRm9yRXZlbnQiLCJzdWJzIiwiX2NoYW5nZVN1YnNjcmlwdGlvbnMiLCJkZXBlbmRlbmN5RGV0ZWN0aW9uIiwiYmVnaW4iLCJnZXRWZXJzaW9uIiwiaGFzQ2hhbmdlZCIsInZlcnNpb25Ub0NoZWNrIiwiaWdub3JlQmVmb3JlQ2hhbmdlIiwibm90aWZ5TmV4dENoYW5nZSIsInByZXZpb3VzVmFsdWUiLCJwZW5kaW5nVmFsdWUiLCJzZWxmSXNPYnNlcnZhYmxlIiwiX2V2YWxJZkNoYW5nZWQiLCJzaG91bGROb3RpZnkiLCJpc0RpZmZlcmVudCIsImdldFN1YnNjcmlwdGlvbnNDb3VudCIsImV2ZW50TmFtZSIsInN1YnNjcmlwdGlvbnMiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwicmVxdWVzdGVkRXh0ZW5kZXJzIiwiZXh0ZW5kZXJIYW5kbGVyIiwiaXNTdWJzY3JpYmFibGUiLCJnZXRJZCIsImxhc3RJZCIsIm91dGVyRnJhbWVzIiwiY3VycmVudEZyYW1lIiwicmVnaXN0ZXJEZXBlbmRlbmN5IiwiX2lkIiwiaWdub3JlIiwiY2FsbGJhY2tBcmdzIiwiaXNJbml0aWFsIiwiaWdub3JlRGVwZW5kZW5jaWVzIiwib2JzZXJ2YWJsZUxhdGVzdFZhbHVlIiwib2JzZXJ2YWJsZSIsImluaXRpYWxWYWx1ZSIsInZhbHVlV2lsbE11dGF0ZSIsInZhbHVlSGFzTXV0YXRlZCIsIm9ic2VydmFibGVGbiIsImVxdWFsaXR5Q29tcGFyZXIiLCJwcm90b1Byb3BlcnR5IiwiaGFzUHJvdG90eXBlIiwiaXNXcml0ZWFibGVPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZUFycmF5IiwiaW5pdGlhbFZhbHVlcyIsInRyYWNrQXJyYXlDaGFuZ2VzIiwidmFsdWVPclByZWRpY2F0ZSIsInVuZGVybHlpbmdBcnJheSIsInJlbW92ZWRWYWx1ZXMiLCJyZW1vdmVBbGwiLCJhcnJheU9mVmFsdWVzIiwiYWxsVmFsdWVzIiwiZGVzdHJveSIsImRlc3Ryb3lBbGwiLCJvbGRJdGVtIiwibmV3SXRlbSIsIm1ldGhvZE5hbWUiLCJjYWNoZURpZmZGb3JLbm93bk9wZXJhdGlvbiIsIm1ldGhvZENhbGxSZXN1bHQiLCJhcnJheUNoYW5nZUV2ZW50TmFtZSIsInRyYWNrQ2hhbmdlcyIsInRyYWNraW5nQ2hhbmdlcyIsInVuZGVybHlpbmdOb3RpZnlTdWJzY3JpYmVyc0Z1bmN0aW9uIiwicGVuZGluZ05vdGlmaWNhdGlvbnMiLCJwcmV2aW91c0NvbnRlbnRzIiwiY2FjaGVkRGlmZiIsImFycmF5Q2hhbmdlU3Vic2NyaXB0aW9uIiwiY3VycmVudENvbnRlbnRzIiwiY2hhbmdlcyIsImdldENoYW5nZXMiLCJjb21wYXJlQXJyYXlzIiwiY29tcGFyZUFycmF5T3B0aW9ucyIsInVuZGVybHlpbmdCZWZvcmVTdWJzY3JpcHRpb25BZGRGdW5jdGlvbiIsInVuZGVybHlpbmdBZnRlclN1YnNjcmlwdGlvblJlbW92ZUZ1bmN0aW9uIiwicmF3QXJyYXkiLCJvcGVyYXRpb25OYW1lIiwicHVzaERpZmYiLCJhcnJheUxlbmd0aCIsImFyZ3NMZW5ndGgiLCJzdGFydEluZGV4IiwiZW5kRGVsZXRlSW5kZXgiLCJlbmRBZGRJbmRleCIsImVuZEluZGV4IiwiYWRkaXRpb25zIiwiZGVsZXRpb25zIiwiYXJnc0luZGV4IiwiZmluZE1vdmVzSW5BcnJheUNvbXBhcmlzb24iLCJldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9ucyIsImV2YWx1YXRvckZ1bmN0aW9uVGFyZ2V0Iiwid3JpdGVGdW5jdGlvbiIsImlzRGlydHkiLCJoYXZlRGVwZW5kZW5jaWVzQ2hhbmdlZCIsImV2YWx1YXRlSW1tZWRpYXRlIiwibGF0ZXN0VmFsdWUiLCJpc1N0YWxlIiwiaXNCZWluZ0V2YWx1YXRlZCIsInN1cHByZXNzRGlzcG9zYWxVbnRpbERpc3Bvc2VXaGVuUmV0dXJuc0ZhbHNlIiwicHVyZSIsInJlYWRGdW5jdGlvbiIsImRpc3Bvc2VXaGVuIiwiZG9tTm9kZURpc3Bvc2FsQ2FsbGJhY2siLCJkZXBlbmRlbmNpZXNDb3VudCIsImV2YWx1YXRpb25UaW1lb3V0SW5zdGFuY2UiLCJoYXNXcml0ZUZ1bmN0aW9uIiwiY29tcHV0ZWRGbiIsInB1cmVDb21wdXRlZE92ZXJyaWRlcyIsImRlZmVyRXZhbHVhdGlvbk92ZXJyaWRlcyIsImlzQWN0aXZlIiwidHJhY2tpbmdPYmoiLCJfb3JkZXIiLCJfdmVyc2lvbiIsImRlcGVuZGVuY3kiLCJfZXZhbERlbGF5ZWQiLCJtYXJrRGlydHkiLCJyZXNwb25kVG9DaGFuZ2UiLCJldmFsdWF0ZVBvc3NpYmx5QXN5bmMiLCJkaXJ0eVN1YiIsImNoYW5nZVN1YiIsInRocm90dGxlRXZhbHVhdGlvblRpbWVvdXQiLCJub3RpZnlDaGFuZ2UiLCJjaGFuZ2VkIiwiZXZhbHVhdGVJbW1lZGlhdGVfQ2FsbFJlYWRXaXRoRGVwZW5kZW5jeURldGVjdGlvbiIsImRlcGVuZGVuY3lEZXRlY3Rpb25Db250ZXh0IiwiZXZhbHVhdGVJbW1lZGlhdGVfQ2FsbFJlYWRUaGVuRW5kRGVwZW5kZW5jeURldGVjdGlvbiIsIl9sYXRlc3RWYWx1ZSIsImV2YWx1YXRlIiwiaXNDaGFuZ2UiLCJkZXBlbmRlY2llc09yZGVyIiwicHJvdG9Qcm9wIiwiaXNDb21wdXRlZCIsImlzUHVyZUNvbXB1dGVkIiwicHVyZUNvbXB1dGVkIiwibWFwSnNPYmplY3RHcmFwaCIsInJvb3RPYmplY3QiLCJtYXBJbnB1dENhbGxiYWNrIiwidmlzaXRlZE9iamVjdHMiLCJvYmplY3RMb29rdXAiLCJCb29sZWFuIiwib3V0cHV0UHJvcGVydGllcyIsInZpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzIiwiaW5kZXhlciIsInByb3BlcnR5VmFsdWUiLCJwcmV2aW91c2x5TWFwcGVkVmFsdWUiLCJ2aXNpdG9yQ2FsbGJhY2siLCJwcm9wZXJ0eU5hbWUiLCJ0b0pTIiwidmFsdWVUb01hcCIsInBsYWluSmF2YVNjcmlwdE9iamVjdCIsImV4aXN0aW5nSW5kZXgiLCJzZWxlY3RFeHRlbnNpb25zIiwicmVhZFZhbHVlIiwib3B0aW9uVmFsdWVEb21EYXRhS2V5Iiwid3JpdGVWYWx1ZSIsImFsbG93VW5zZXQiLCJvcHRpb25WYWx1ZSIsImdldFdyaXRlYWJsZVZhbHVlIiwiZXhwcmVzc2lvbiIsImphdmFTY3JpcHRSZXNlcnZlZFdvcmRzIiwiamF2YVNjcmlwdEFzc2lnbm1lbnRUYXJnZXQiLCJwYXJzZU9iamVjdExpdGVyYWwiLCJvYmplY3RMaXRlcmFsU3RyaW5nIiwidG9rcyIsImJpbmRpbmdUb2tlbiIsInRvayIsInVua25vd24iLCJkaXZpc2lvbkxvb2tCZWhpbmQiLCJrZXl3b3JkUmVnZXhMb29rQmVoaW5kIiwic3RyaW5nRG91YmxlIiwiaW4iLCJyZXR1cm4iLCJ0eXBlb2YiLCJ0d29XYXlCaW5kaW5ncyIsInByZVByb2Nlc3NCaW5kaW5ncyIsImJpbmRpbmdzU3RyaW5nT3JLZXlWYWx1ZUFycmF5IiwiYmluZGluZ09wdGlvbnMiLCJwcm9jZXNzS2V5VmFsdWUiLCJ3cml0YWJsZVZhbCIsImJpbmRpbmdQYXJhbXMiLCJjYWxsUHJlcHJvY2Vzc0hvb2siLCJwcm9wZXJ0eUFjY2Vzc29yUmVzdWx0U3RyaW5ncyIsIm1ha2VWYWx1ZUFjY2Vzc29ycyIsInJlc3VsdFN0cmluZ3MiLCJrZXlWYWx1ZUFycmF5Iiwia2V5VmFsdWUiLCJrZXlWYWx1ZUFycmF5Q29udGFpbnNLZXkiLCJ3cml0ZVZhbHVlVG9Qcm9wZXJ0eSIsInByb3BlcnR5IiwiY2hlY2tJZkRpZmZlcmVudCIsInByb3BXcml0ZXJzIiwiaXNTdGFydENvbW1lbnQiLCJzdGFydENvbW1lbnRSZWdleCIsImNvbW1lbnROb2Rlc0hhdmVUZXh0UHJvcGVydHkiLCJpc0VuZENvbW1lbnQiLCJlbmRDb21tZW50UmVnZXgiLCJnZXRWaXJ0dWFsQ2hpbGRyZW4iLCJzdGFydENvbW1lbnQiLCJhbGxvd1VuYmFsYW5jZWQiLCJjdXJyZW50Tm9kZSIsImdldE1hdGNoaW5nRW5kQ29tbWVudCIsImFsbFZpcnR1YWxDaGlsZHJlbiIsImdldFVuYmFsYW5jZWRDaGlsZFRhZ3MiLCJjaGlsZE5vZGUiLCJjYXB0dXJlUmVtYWluaW5nIiwibWF0Y2hpbmdFbmRDb21tZW50IiwiaHRtbFRhZ3NXaXRoT3B0aW9uYWxseUNsb3NpbmdDaGlsZHJlbiIsInVsIiwib2wiLCJ2aXJ0dWFsQ2hpbGRyZW4iLCJlbmRDb21tZW50Tm9kZSIsImNvbnRhaW5lck5vZGUiLCJub2RlVG9QcmVwZW5kIiwibm9kZVRvSW5zZXJ0IiwiaW5zZXJ0QWZ0ZXJOb2RlIiwiaGFzQmluZGluZ1ZhbHVlIiwidmlydHVhbE5vZGVCaW5kaW5nVmFsdWUiLCJyZWdleE1hdGNoIiwibm9ybWFsaXNlVmlydHVhbEVsZW1lbnREb21TdHJ1Y3R1cmUiLCJlbGVtZW50VmVyaWZpZWQiLCJ1bmJhbGFuY2VkVGFncyIsIm5vZGVUb0luc2VydEJlZm9yZSIsImNyZWF0ZUJpbmRpbmdzU3RyaW5nRXZhbHVhdG9yVmlhQ2FjaGUiLCJiaW5kaW5nc1N0cmluZyIsImNhY2hlS2V5IiwiY3JlYXRlQmluZGluZ3NTdHJpbmdFdmFsdWF0b3IiLCJmdW5jdGlvbkJvZHkiLCJiaW5kaW5nUHJvdmlkZXIiLCJiaW5kaW5nQ2FjaGUiLCJub2RlSGFzQmluZGluZ3MiLCJjb21wb25lbnRzIiwiZ2V0QmluZGluZ3MiLCJwYXJzZWRCaW5kaW5ncyIsImFkZEJpbmRpbmdzRm9yQ3VzdG9tRWxlbWVudCIsImdldEJpbmRpbmdBY2Nlc3NvcnMiLCJ2YWx1ZUFjY2Vzc29ycyIsImdldEJpbmRpbmdzU3RyaW5nIiwicGFyc2VCaW5kaW5nc1N0cmluZyIsIm1ha2VWYWx1ZUFjY2Vzc29yIiwiZXZhbHVhdGVWYWx1ZUFjY2Vzc29yIiwibWFrZUFjY2Vzc29yc0Zyb21GdW5jdGlvbiIsIm1ha2VCaW5kaW5nQWNjZXNzb3JzIiwiYmluZGluZ3MiLCJnZXRCaW5kaW5nc0FuZE1ha2VBY2Nlc3NvcnMiLCJ2YWxpZGF0ZVRoYXRCaW5kaW5nSXNBbGxvd2VkRm9yVmlydHVhbEVsZW1lbnRzIiwiYmluZGluZ05hbWUiLCJhcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50c0ludGVybmFsIiwiZWxlbWVudE9yVmlydHVhbEVsZW1lbnQiLCJiaW5kaW5nQ29udGV4dHNNYXlEaWZmZXJGcm9tRG9tUGFyZW50RWxlbWVudCIsImN1cnJlbnRDaGlsZCIsIm5leHRJblF1ZXVlIiwicHJvdmlkZXIiLCJwcmVwcm9jZXNzTm9kZSIsImFwcGx5QmluZGluZ3NUb05vZGVBbmREZXNjZW5kYW50c0ludGVybmFsIiwibm9kZVZlcmlmaWVkIiwiYmluZGluZ0NvbnRleHRNYXlEaWZmZXJGcm9tRG9tUGFyZW50RWxlbWVudCIsInNob3VsZEJpbmREZXNjZW5kYW50cyIsImlzRWxlbWVudCIsImFwcGx5QmluZGluZ3NUb05vZGVJbnRlcm5hbCIsImJpbmRpbmdEb2VzTm90UmVjdXJzZUludG9FbGVtZW50VHlwZXMiLCJ0b3BvbG9naWNhbFNvcnRCaW5kaW5ncyIsImJpbmRpbmdzQ29uc2lkZXJlZCIsImN5Y2xpY0RlcGVuZGVuY3lTdGFjayIsInB1c2hCaW5kaW5nIiwiYmluZGluZyIsImJpbmRpbmdEZXBlbmRlbmN5S2V5Iiwic291cmNlQmluZGluZ3MiLCJiaW5kaW5nc1VwZGF0ZXIiLCJhbHJlYWR5Qm91bmQiLCJib3VuZEVsZW1lbnREb21EYXRhS2V5Iiwic3RvcmVkQmluZGluZ0NvbnRleHRGb3JOb2RlIiwiX3N1YnNjcmliYWJsZSIsImJpbmRpbmdIYW5kbGVyVGhhdENvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzIiwiZ2V0VmFsdWVBY2Nlc3NvciIsIm9yZGVyZWRCaW5kaW5ncyIsImJpbmRpbmdLZXlBbmRIYW5kbGVyIiwiaGFuZGxlckluaXRGbiIsImhhbmRsZXJVcGRhdGVGbiIsImluaXRSZXN1bHQiLCJnZXRCaW5kaW5nQ29udGV4dCIsInZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQiLCJ0ZXh0YXJlYSIsInRlbXBsYXRlIiwiZGF0YUl0ZW1PckFjY2Vzc29yIiwicGFyZW50Q29udGV4dCIsImRhdGFJdGVtQWxpYXMiLCJleHRlbmRDYWxsYmFjayIsInVwZGF0ZUNvbnRleHQiLCJkYXRhSXRlbU9yT2JzZXJ2YWJsZSIsImlzRnVuYyIsImRhdGFJdGVtIiwiX2FkZE5vZGUiLCJjcmVhdGVTdGF0aWNDaGlsZENvbnRleHQiLCJleHBvcnREZXBlbmRlbmNpZXMiLCJzdG9yZWRCaW5kaW5nQ29udGV4dERvbURhdGFLZXkiLCJhcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUiLCJhcHBseUJpbmRpbmdzVG9Ob2RlIiwiYXBwbHlCaW5kaW5ncyIsImNvbnRleHRGb3IiLCJkYXRhRm9yIiwiZ2V0T2JqZWN0T3duUHJvcGVydHkiLCJwcm9wTmFtZSIsImxvYWRDb21wb25lbnRBbmROb3RpZnkiLCJjb21wb25lbnROYW1lIiwiY29tcGxldGVkQXN5bmMiLCJsb2FkaW5nU3Vic2NyaWJhYmxlc0NhY2hlIiwiYmVnaW5Mb2FkaW5nQ29tcG9uZW50IiwiZGVmaW5pdGlvbiIsImNvbmZpZyIsImlzU3luY2hyb25vdXNDb21wb25lbnQiLCJsb2FkZWREZWZpbml0aW9uc0NhY2hlIiwiZ2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycyIsImFyZ3NFeGNlcHRDYWxsYmFjayIsImNhbmRpZGF0ZUxvYWRlcnMiLCJjdXJyZW50Q2FuZGlkYXRlTG9hZGVyIiwibWV0aG9kSW5zdGFuY2UiLCJ3YXNBYm9ydGVkIiwiY2FjaGVkRGVmaW5pdGlvbiIsImNsZWFyQ2FjaGVkRGVmaW5pdGlvbiIsIl9nZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzIiwicmVzb2x2ZUNvbmZpZyIsIm1ha2VDYWxsQmFja1doZW5aZXJvIiwidHJ5SXNzdWVDYWxsYmFjayIsInRlbXBsYXRlQ29uZmlnIiwidmlld01vZGVsQ29uZmlnIiwicG9zc2libHlHZXRDb25maWdGcm9tQW1kIiwibG9hZGVkQ29uZmlnIiwicmVzb2x2ZWRUZW1wbGF0ZSIsInJlc29sdmVkVmlld01vZGVsIiwiY3JlYXRlVmlld01vZGVsS2V5IiwicmVzb2x2ZVRlbXBsYXRlIiwiaXNEb2N1bWVudEZyYWdtZW50IiwiaXNEb21FbGVtZW50IiwiY2xvbmVOb2Rlc0Zyb21UZW1wbGF0ZVNvdXJjZUVsZW1lbnQiLCJlbGVtSW5zdGFuY2UiLCJyZXNvbHZlVmlld01vZGVsIiwiZml4ZWRJbnN0YW5jZSIsImNvbXBvbmVudEluZm8iLCJIVE1MRWxlbWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJtYWtlRXJyb3JDYWxsYmFjayIsImRlZmF1bHRDb25maWdSZWdpc3RyeSIsInJlZ2lzdGVyIiwiaXNSZWdpc3RlcmVkIiwidW5yZWdpc3RlciIsImRlZmF1bHRMb2FkZXIiLCJnZXRDb25maWciLCJsb2FkQ29tcG9uZW50IiwibG9hZFRlbXBsYXRlIiwibG9hZFZpZXdNb2RlbCIsIl9hbGxSZWdpc3RlcmVkQ29tcG9uZW50cyIsImdldENvbXBvbmVudFBhcmFtc0Zyb21DdXN0b21FbGVtZW50IiwicGFyYW1zQXR0cmlidXRlIiwibmF0aXZlQmluZGluZ1Byb3ZpZGVySW5zdGFuY2UiLCJyYXdQYXJhbUNvbXB1dGVkVmFsdWVzIiwicGFyYW1WYWx1ZSIsInBhcmFtTmFtZSIsInBhcmFtVmFsdWVDb21wdXRlZCIsIiRyYXciLCJjb21wb25lbnRCaW5kaW5nVmFsdWUiLCJuZXdEb2NGcmFnIiwiYWxsQ29tcG9uZW50cyIsImNsb25lVGVtcGxhdGVJbnRvRWxlbWVudCIsImNvbXBvbmVudERlZmluaXRpb24iLCJjbG9uZWROb2Rlc0FycmF5IiwiY3JlYXRlVmlld01vZGVsIiwib3JpZ2luYWxDaGlsZE5vZGVzIiwiY29tcG9uZW50UGFyYW1zIiwiY29tcG9uZW50Vmlld01vZGVsRmFjdG9yeSIsInRlbXBsYXRlTm9kZXMiLCJjb21wb25lbnRMb2FkaW5nT3BlcmF0aW9uVW5pcXVlSWQiLCJpZ25vcmVkMSIsImlnbm9yZWQyIiwiY3VycmVudFZpZXdNb2RlbCIsImN1cnJlbnRMb2FkaW5nT3BlcmF0aW9uSWQiLCJkaXNwb3NlQXNzb2NpYXRlZENvbXBvbmVudFZpZXdNb2RlbCIsImN1cnJlbnRWaWV3TW9kZWxEaXNwb3NlIiwibG9hZGluZ09wZXJhdGlvbklkIiwiY29tcG9uZW50Vmlld01vZGVsIiwiY2hpbGRCaW5kaW5nQ29udGV4dCIsImN0eCIsImF0dHJIdG1sVG9KYXZhc2NyaXB0TWFwIiwidXBkYXRlIiwiYXR0ck5hbWUiLCJhdHRyVmFsdWUiLCJ0b1JlbW92ZSIsInVwZGF0ZU1vZGVsIiwiaXNDaGVja2VkIiwiZWxlbVZhbHVlIiwidXNlQ2hlY2tlZFZhbHVlIiwiY2hlY2tlZFZhbHVlIiwiaXNSYWRpbyIsIm1vZGVsVmFsdWUiLCJ2YWx1ZUlzQXJyYXkiLCJ3cml0YWJsZVZhbHVlIiwicmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZSIsIm9sZEVsZW1WYWx1ZSIsImlzQ2hlY2tib3giLCJldmVudHNUb0hhbmRsZSIsImhhbmRsZXJSZXR1cm5WYWx1ZSIsImhhbmRsZXJGdW5jdGlvbiIsImFyZ3NGb3JIYW5kbGVyIiwiY2FuY2VsQnViYmxlIiwibWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3NvciIsInVud3JhcHBlZFZhbHVlIiwiZm9yZWFjaCIsImFzIiwiaW5jbHVkZURlc3Ryb3llZCIsImFmdGVyQWRkIiwiYmVmb3JlUmVtb3ZlIiwiYWZ0ZXJSZW5kZXIiLCJiZWZvcmVNb3ZlIiwiYWZ0ZXJNb3ZlIiwidGVtcGxhdGVFbmdpbmUiLCJuYXRpdmVUZW1wbGF0ZUVuZ2luZSIsImhhbmRsZUVsZW1lbnRGb2N1c0NoYW5nZSIsImlzRm9jdXNlZCIsIm93bmVyRG9jIiwiaGFuZGxlRWxlbWVudEZvY3VzSW4iLCJoYW5kbGVFbGVtZW50Rm9jdXNPdXQiLCJjYXB0aW9uUGxhY2Vob2xkZXIiLCJzZWxlY3RlZE9wdGlvbnMiLCJhcHBseVRvT2JqZWN0IiwicHJlZGljYXRlVHlwZSIsInNldFNlbGVjdGlvbkNhbGxiYWNrIiwiYXJyYXlFbnRyeSIsIm5ld09wdGlvbnMiLCJpdGVtVXBkYXRlIiwidmFsdWVBbGxvd1Vuc2V0IiwicHJldmlvdXNTZWxlY3RlZFZhbHVlcyIsImNhcHRpb25WYWx1ZSIsImZpbHRlcmVkQXJyYXkiLCJzZWxlY3RXYXNQcmV2aW91c2x5RW1wdHkiLCJtdWx0aXBsZSIsInByZXZpb3VzU2Nyb2xsVG9wIiwidW53cmFwcGVkQXJyYXkiLCJhcnJheVRvRG9tTm9kZUNoaWxkcmVuT3B0aW9ucyIsInNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmciLCJvbGRPcHRpb25zIiwib3B0aW9uVGV4dCIsInZhbHVlVG9Xcml0ZSIsInN0eWxlTmFtZSIsInN0eWxlVmFsdWUiLCJwYXJzZVZlcnNpb24iLCJvcGVyYVZlcnNpb24iLCJvcGVyYSIsInNhZmFyaVZlcnNpb24iLCJmaXJlZm94VmVyc2lvbiIsInNlbGVjdGlvbkNoYW5nZVJlZ2lzdGVyZWROYW1lIiwic2VsZWN0aW9uQ2hhbmdlSGFuZGxlck5hbWUiLCJzZWxlY3Rpb25DaGFuZ2VIYW5kbGVyIiwicmVnaXN0ZXJGb3JTZWxlY3Rpb25DaGFuZ2VFdmVudCIsInRpbWVvdXRIYW5kbGUiLCJlbGVtZW50VmFsdWVCZWZvcmVFdmVudCIsInByZXZpb3VzRWxlbWVudFZhbHVlIiwiZWxlbWVudFZhbHVlIiwiZGVmZXJVcGRhdGVNb2RlbCIsImllVXBkYXRlTW9kZWwiLCJ1cGRhdGVWaWV3Iiwib25FdmVudCIsInByZXByb2Nlc3MiLCJhZGRCaW5kaW5nIiwiY3VycmVudEluZGV4IiwiZXZlbnRzVG9DYXRjaCIsInJlcXVlc3RlZEV2ZW50c1RvQ2F0Y2giLCJwcm9wZXJ0eUNoYW5nZWRGaXJlZCIsInZhbHVlVXBkYXRlSGFuZGxlciIsImF1dG9jb21wbGV0ZSIsInVwZGF0ZUZyb21Nb2RlbCIsImFwcGx5VmFsdWVBY3Rpb24iLCJpc0N1cnJlbnRseVZpc2libGUiLCJtYWtlRXZlbnRIYW5kbGVyU2hvcnRjdXQiLCJ0ZW1wbGF0ZVNvdXJjZSIsInRlbXBsYXRlRG9jdW1lbnQiLCJ0ZW1wbGF0ZVNvdXJjZXMiLCJkb21FbGVtZW50IiwiYW5vbnltb3VzVGVtcGxhdGUiLCJyZXdyaXRlckNhbGxiYWNrIiwicmV3cml0dGVuIiwidGVtcGxhdGVSZXdyaXRpbmciLCJ2YWxpZGF0ZURhdGFCaW5kVmFsdWVzRm9yUmV3cml0aW5nIiwiYWxsVmFsaWRhdG9ycyIsInZhbGlkYXRvciIsInBvc3NpYmxlRXJyb3JNZXNzYWdlIiwiY29uc3RydWN0TWVtb2l6ZWRUYWdSZXBsYWNlbWVudCIsImRhdGFCaW5kQXR0cmlidXRlVmFsdWUiLCJ0YWdUb1JldGFpbiIsImRhdGFCaW5kS2V5VmFsdWVBcnJheSIsImFwcGx5QmluZGluZ3NUb05leHRTaWJsaW5nU2NyaXB0IiwibWVtb2l6ZURhdGFCaW5kaW5nQXR0cmlidXRlU3ludGF4UmVnZXgiLCJtZW1vaXplVmlydHVhbENvbnRhaW5lckJpbmRpbmdTeW50YXhSZWdleCIsImVuc3VyZVRlbXBsYXRlSXNSZXdyaXR0ZW4iLCJodG1sU3RyaW5nIiwibWVtb2l6ZUJpbmRpbmdBdHRyaWJ1dGVTeW50YXgiLCJhcHBseU1lbW9pemVkQmluZGluZ3NUb05leHRTaWJsaW5nIiwibm9kZVRvQmluZCIsImdldFRlbXBsYXRlRG9tRGF0YSIsInRlbXBsYXRlc0RvbURhdGFLZXkiLCJzZXRUZW1wbGF0ZURvbURhdGEiLCJ0ZW1wbGF0ZVR5cGUiLCJlbGVtQ29udGVudHNQcm9wZXJ0eSIsImRhdGFEb21EYXRhUHJlZml4IiwiY29udGFpbmVyRGF0YSIsInRlbXBsYXRlRGF0YSIsInRleHREYXRhIiwiaW52b2tlRm9yRWFjaE5vZGVJbkNvbnRpbnVvdXNSYW5nZSIsImZpcnN0Tm9kZSIsImxhc3ROb2RlIiwiZmlyc3RPdXRPZlJhbmdlTm9kZSIsImFjdGl2YXRlQmluZGluZ3NPbkNvbnRpbnVvdXNOb2RlQXJyYXkiLCJuZXh0Tm9kZUluUmFuZ2UiLCJub2RlUHJldmlvdXNTaWJsaW5nIiwicHJldmlvdXNTaWJsaW5nIiwibmV3Tm9kZXMiLCJnZXRGaXJzdE5vZGVGcm9tUG9zc2libGVBcnJheSIsIm5vZGVPck5vZGVBcnJheSIsImV4ZWN1dGVUZW1wbGF0ZSIsInRhcmdldE5vZGVPck5vZGVBcnJheSIsInJlbmRlck1vZGUiLCJ0ZW1wbGF0ZUVuZ2luZVRvVXNlIiwiX3RlbXBsYXRlRW5naW5lIiwicmVuZGVyZWROb2Rlc0FycmF5IiwiaGF2ZUFkZGVkTm9kZXNUb1BhcmVudCIsInJlc29sdmVUZW1wbGF0ZU5hbWUiLCJkaXNwb3NlT2xkQ29tcHV0ZWRBbmRTdG9yZU5ld09uZSIsIm5ld0NvbXB1dGVkIiwib2xkQ29tcHV0ZWQiLCJ0ZW1wbGF0ZUNvbXB1dGVkRG9tRGF0YUtleSIsInNldFRlbXBsYXRlRW5naW5lIiwicmVuZGVyVGVtcGxhdGUiLCJkYXRhT3JCaW5kaW5nQ29udGV4dCIsImZpcnN0VGFyZ2V0Tm9kZSIsImFjdGl2ZWx5RGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkIiwidGVtcGxhdGVOYW1lIiwicmVuZGVyVGVtcGxhdGVGb3JFYWNoIiwiYXJyYXlPck9ic2VydmFibGVBcnJheSIsInRhcmdldE5vZGUiLCJwYXJlbnRCaW5kaW5nQ29udGV4dCIsImFycmF5SXRlbUNvbnRleHQiLCJleGVjdXRlVGVtcGxhdGVGb3JBcnJheUl0ZW0iLCJhcnJheVZhbHVlIiwiYWN0aXZhdGVCaW5kaW5nc0NhbGxiYWNrIiwiYWRkZWROb2Rlc0FycmF5IiwiYmluZGluZ1ZhbHVlIiwidGVtcGxhdGVDb21wdXRlZCIsImRhdGFBcnJheSIsImlubmVyQmluZGluZ0NvbnRleHQiLCJwYXJzZWRCaW5kaW5nVmFsdWUiLCJyaWdodCIsImxpbWl0RmFpbGVkQ29tcGFyZXMiLCJmYWlsZWRDb21wYXJlcyIsImxlZnRJdGVtIiwicmlnaHRJdGVtIiwiY29tcGFyZVNtYWxsQXJyYXlUb0JpZ0FycmF5Iiwic21sQXJyYXkiLCJiaWdBcnJheSIsInN0YXR1c05vdEluU21sIiwic3RhdHVzTm90SW5CaWciLCJzbWxJbmRleCIsImJpZ0luZGV4IiwidGhpc1JvdyIsImxhc3RSb3ciLCJiaWdJbmRleE1heEZvclJvdyIsIm15TWluIiwibXlNYXgiLCJlZGl0RGlzdGFuY2VNYXRyaXgiLCJzbWxJbmRleE1heCIsImJpZ0luZGV4TWF4IiwiY29tcGFyZVJhbmdlIiwibWF4RGlzdGFuY2UiLCJub3J0aERpc3RhbmNlIiwid2VzdERpc3RhbmNlIiwibWVNaW51c09uZSIsImVkaXRTY3JpcHQiLCJub3RJblNtbCIsIm5vdEluQmlnIiwic3RhdHVzTm90SW5PbGQiLCJzdGF0dXNOb3RJbk5ldyIsIm9sZEFycmF5IiwibmV3QXJyYXkiLCJkb250TGltaXRNb3ZlcyIsIm1hcE5vZGVBbmRSZWZyZXNoV2hlbkNoYW5nZWQiLCJjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMiLCJtYXBwZWROb2RlcyIsIm5ld01hcHBlZE5vZGVzIiwibGFzdE1hcHBpbmdSZXN1bHREb21EYXRhS2V5IiwiZGVsZXRlZEl0ZW1EdW1teVZhbHVlIiwiaXRlbU1vdmVkT3JSZXRhaW5lZCIsImVkaXRTY3JpcHRJbmRleCIsIm9sZFBvc2l0aW9uIiwibWFwRGF0YSIsImxhc3RNYXBwaW5nUmVzdWx0IiwibmV3TWFwcGluZ1Jlc3VsdEluZGV4IiwiaXRlbXNGb3JNb3ZlQ2FsbGJhY2tzIiwiaW5kZXhPYnNlcnZhYmxlIiwibmV3TWFwcGluZ1Jlc3VsdCIsIml0ZW1zVG9Qcm9jZXNzIiwiY2FsbENhbGxiYWNrIiwiaXRlbXMiLCJlZGl0U2NyaXB0SXRlbSIsIm1vdmVkSW5kZXgiLCJpc0ZpcnN0RXhlY3V0aW9uIiwibGFzdEFycmF5IiwieCIsImxhc3RNYXBwaW5nUmVzdWx0SW5kZXgiLCJub2Rlc1RvRGVsZXRlIiwiaXRlbXNGb3JCZWZvcmVSZW1vdmVDYWxsYmFja3MiLCJpdGVtc0ZvckFmdGVyQWRkQ2FsbGJhY2tzIiwibmV4dE5vZGUiLCJpbml0aWFsaXplZCIsInRlbXBsYXRlVGV4dCIsImpxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZSIsImVuc3VyZUhhc1JlZmVyZW5jZWRKUXVlcnlUZW1wbGF0ZXMiLCJqUXVlcnlUbXBsVmVyc2lvbiIsImNvbXBpbGVkVGVtcGxhdGUiLCJqUXVlcnlUZW1wbGF0ZU9wdGlvbnMiLCJwcmVjb21waWxlZCIsInJlc3VsdE5vZGVzIiwia29CaW5kaW5nQ29udGV4dCIsInRlbXBsYXRlTWFya3VwIiwianF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lSW5zdGFuY2UiLCJydmFsaWRjaGFycyIsInJ2YWxpZGVzY2FwZSIsInJ2YWxpZHRva2VucyIsInJ2YWxpZGJyYWNlcyIsInJ0cmltTGVmdCIsInJ0cmltUmlnaHQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlIiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhY2hlZFNldFRpbWVvdXQiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJkcmFpblF1ZXVlIiwiSXRlbSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImlvIiwic2FtZU5hbWVzcGFjZSIsIm5zcHMiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsIk1hbmFnZXIiLCJtYW5hZ2VycyIsImNvbm5lY3QiLCJyZWNvbm5lY3Rpb24iLCJyZWNvbm5lY3Rpb25BdHRlbXB0cyIsIkluZmluaXR5IiwicmVjb25uZWN0aW9uRGVsYXkiLCJyZWNvbm5lY3Rpb25EZWxheU1heCIsInJhbmRvbWl6YXRpb25GYWN0b3IiLCJiYWNrb2ZmIiwiY29ubmVjdGluZyIsImxhc3RQaW5nIiwiZW5jb2RpbmciLCJwYWNrZXRCdWZmZXIiLCJfcGFyc2VyIiwiZW5jb2RlciIsIkVuY29kZXIiLCJkZWNvZGVyIiwiRGVjb2RlciIsImF1dG9Db25uZWN0IiwiZWlvIiwiZW1pdEFsbCIsIm5zcCIsInVwZGF0ZVNvY2tldElkcyIsImdlbmVyYXRlSWQiLCJlbmdpbmUiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX3JlY29ubmVjdGlvbkRlbGF5IiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJfdGltZW91dCIsIm1heWJlUmVjb25uZWN0T25PcGVuIiwicmVjb25uZWN0aW5nIiwicmVjb25uZWN0Iiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWIiLCJlcnJvclN1YiIsIm9ucGluZyIsIm9ucG9uZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsIm9uQ29ubmVjdGluZyIsInByb2Nlc3NQYWNrZXRRdWV1ZSIsInBhY2siLCJzdWJzTGVuZ3RoIiwiZGlzY29ubmVjdCIsIm9ucmVjb25uZWN0IiwiYXR0ZW1wdCIsImlkcyIsImFja3MiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsImNvbm5lY3RfZXJyb3IiLCJjb25uZWN0X3RpbWVvdXQiLCJyZWNvbm5lY3RfYXR0ZW1wdCIsInJlY29ubmVjdF9mYWlsZWQiLCJyZWNvbm5lY3RfZXJyb3IiLCJzdWJFdmVudHMiLCJFVkVOVCIsImZsYWdzIiwiQ09OTkVDVCIsIm9ucGFja2V0Iiwib25jb25uZWN0IiwiQklOQVJZX0VWRU5UIiwib25ldmVudCIsIkFDSyIsIkJJTkFSWV9BQ0siLCJvbmFjayIsIkRJU0NPTk5FQ1QiLCJvbmRpc2Nvbm5lY3QiLCJFUlJPUiIsImFjayIsInNlbnQiLCJlbWl0QnVmZmVyZWQiLCJsb2MiLCJfZGVjb25zdHJ1Y3RQYWNrZXQiLCJpc0J1ZiIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsIl9yZWNvbnN0cnVjdFBhY2tldCIsImRlY29uc3RydWN0UGFja2V0IiwicGFja2V0RGF0YSIsImF0dGFjaG1lbnRzIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJyZW1vdmVCbG9icyIsIl9yZW1vdmVCbG9icyIsImN1cktleSIsImNvbnRhaW5pbmdPYmplY3QiLCJwZW5kaW5nQmxvYnMiLCJmaWxlUmVhZGVyIiwiYmxvYmxlc3NEYXRhIiwiZW5jb2RlQXNTdHJpbmciLCJlbmNvZGVBc0JpbmFyeSIsImRlY29uc3RydWN0aW9uIiwicmVjb25zdHJ1Y3RvciIsImRlY29kZVN0cmluZyIsInRyeVBhcnNlIiwiQmluYXJ5UmVjb25zdHJ1Y3RvciIsInJlY29uUGFjayIsImhhc0JpbiIsInRha2VCaW5hcnlEYXRhIiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsImJpbkRhdGEiLCJieXRlVG9IZXgiLCJidGgiLCJybmciLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsInJuZHM4Iiwicm5kcyIsImJ5dGVzVG9VdWlkIiwiYWxwaGFiZXQiLCJkZWNvZGVkIiwib3JpZ2luIiwibWVzc2FnZXMiLCJteVVVSUQiLCJ1dWlkIiwibmV3TWVzc2FnZSIsInNlbmRNZXNzYWdlIiwiQ29udmVyc2F0aW9uIiwiTWVzc2FnZUlucHV0IiwiY29udmVyc2F0aW9uIiwibWVzc2FnZUlucHV0Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxJQUFBRSxFQUFBLG1CQUFBQyxTQUFBQSxRQUFBLElBQUFGLEdBQUFDLEVBQUEsT0FBQUEsRUFBQUYsR0FBQSxHQUFBLEdBQUFJLEVBQUEsT0FBQUEsRUFBQUosR0FBQSxHQUFBLElBQUFLLEVBQUEsSUFBQUMsTUFBQSx1QkFBQU4sRUFBQSxLQUFBLE1BQUFLLEVBQUFFLEtBQUEsbUJBQUFGLEVBQUEsSUFBQUcsRUFBQVgsRUFBQUcsSUFBQVMsWUFBQWIsRUFBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsSUFBQUUsRUFBQUQsRUFBQUksR0FBQSxHQUFBTCxHQUFBLE9BQUFJLEVBQUFGLEdBQUFGLElBQUFhLEVBQUFBLEVBQUFDLFFBQUFkLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsT0FBQUQsRUFBQUcsR0FBQVMsUUFBQSxJQUFBLElBQUFMLEVBQUEsbUJBQUFELFNBQUFBLFFBQUFILEVBQUEsRUFBQUEsRUFBQUYsRUFBQWEsT0FBQVgsSUFBQUQsRUFBQUQsRUFBQUUsSUFBQSxPQUFBRCxFQUFBLEVBQUFhLEdBQUEsU0FBQVQsRUFBQVUsRUFBQUosR0MyQkEsU0FBQUssS0EzQkFELEVBQUFKLFFBRUEsU0FBQU0sRUFBQUMsRUFBQUMsR0FPQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBLEdBQUFGLEVBQUFILE9BQUEsRUFDQSxNQUFBLElBQUFULE1BQUEsaUNBRUFZLEVBQUFILE1BR0FJLEdBQ0FFLEdBQUEsRUFDQUwsRUFBQUcsR0FFQUgsRUFBQUMsR0FDQSxJQUFBQyxFQUFBSCxPQUFBTSxHQUNBTCxFQUFBLEtBQUFJLEdBbkJBLElBQUFDLEdBQUEsRUFJQSxPQUhBSixFQUFBQSxHQUFBSCxFQUNBSSxFQUFBSCxNQUFBQSxFQUVBLElBQUFBLEVBQUFDLElBQUFFLDJCQ0FBTCxFQUFBSixRQUFBLFNBQUFhLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUgsRUFBQUksV0FJQSxHQUhBSCxFQUFBQSxHQUFBLEVBQ0FDLEVBQUFBLEdBQUFDLEVBRUFILEVBQUFLLE1BQUEsT0FBQUwsRUFBQUssTUFBQUosRUFBQUMsR0FNQSxHQUpBRCxFQUFBLElBQUFBLEdBQUFFLEdBQ0FELEVBQUEsSUFBQUEsR0FBQUMsR0FDQUQsRUFBQUMsSUFBQUQsRUFBQUMsR0FFQUYsR0FBQUUsR0FBQUYsR0FBQUMsR0FBQSxJQUFBQyxFQUNBLE9BQUEsSUFBQUcsWUFBQSxHQUtBLElBQUEsSUFGQUMsRUFBQSxJQUFBQyxXQUFBUixHQUNBRixFQUFBLElBQUFVLFdBQUFOLEVBQUFELEdBQ0FuQixFQUFBbUIsRUFBQVEsRUFBQSxFQUFBM0IsRUFBQW9CLEVBQUFwQixJQUFBMkIsSUFDQVgsRUFBQVcsR0FBQUYsRUFBQXpCLEdBRUEsT0FBQWdCLEVBQUFZLGdDQ1JBLFNBQUFDLEVBQUFDLEdBQ0FBLEVBQUFBLE1BQ0FDLEtBQUFDLEdBQUFGLEVBQUFHLEtBQUEsSUFDQUYsS0FBQUcsSUFBQUosRUFBQUksS0FBQSxJQUNBSCxLQUFBSSxPQUFBTCxFQUFBSyxRQUFBLEVBQ0FKLEtBQUFLLE9BQUFOLEVBQUFNLE9BQUEsR0FBQU4sRUFBQU0sUUFBQSxFQUFBTixFQUFBTSxPQUFBLEVBQ0FMLEtBQUFNLFNBQUEsRUFwQkE1QixFQUFBSixRQUFBd0IsRUE4QkFBLEVBQUFTLFVBQUFDLFNBQUEsV0FDQSxJQUFBUCxFQUFBRCxLQUFBQyxHQUFBUSxLQUFBQyxJQUFBVixLQUFBSSxPQUFBSixLQUFBTSxZQUNBLEdBQUFOLEtBQUFLLE9BQUEsQ0FDQSxJQUFBTSxFQUFBRixLQUFBRyxTQUNBQyxFQUFBSixLQUFBSyxNQUFBSCxFQUFBWCxLQUFBSyxPQUFBSixHQUNBQSxFQUFBLElBQUEsRUFBQVEsS0FBQUssTUFBQSxHQUFBSCxJQUFBVixFQUFBWSxFQUFBWixFQUFBWSxFQUVBLE9BQUEsRUFBQUosS0FBQVAsSUFBQUQsRUFBQUQsS0FBQUcsTUFTQUwsRUFBQVMsVUFBQVEsTUFBQSxXQUNBZixLQUFBTSxTQUFBLEdBU0FSLEVBQUFTLFVBQUFTLE9BQUEsU0FBQWQsR0FDQUYsS0FBQUMsR0FBQUMsR0FTQUosRUFBQVMsVUFBQVUsT0FBQSxTQUFBZCxHQUNBSCxLQUFBRyxJQUFBQSxHQVNBTCxFQUFBUyxVQUFBVyxVQUFBLFNBQUFiLEdBQ0FMLEtBQUFLLE9BQUFBLDRCQzNFQSxXQUNBLGFBTUEsSUFBQSxJQUpBYyxFQUFBLG1FQUdBQyxFQUFBLElBQUF6QixXQUFBLEtBQ0ExQixFQUFBLEVBQUFBLEVBQUFrRCxFQUFBM0MsT0FBQVAsSUFDQW1ELEVBQUFELEVBQUFFLFdBQUFwRCxJQUFBQSxFQUdBSyxFQUFBZ0QsT0FBQSxTQUFBbkMsR0FDQSxJQUNBbEIsRUFEQXFCLEVBQUEsSUFBQUssV0FBQVIsR0FDQW9DLEVBQUFqQyxFQUFBZCxPQUFBZ0QsRUFBQSxHQUVBLElBQUF2RCxFQUFBLEVBQUFBLEVBQUFzRCxFQUFBdEQsR0FBQSxFQUNBdUQsR0FBQUwsRUFBQTdCLEVBQUFyQixJQUFBLEdBQ0F1RCxHQUFBTCxHQUFBLEVBQUE3QixFQUFBckIsS0FBQSxFQUFBcUIsRUFBQXJCLEVBQUEsSUFBQSxHQUNBdUQsR0FBQUwsR0FBQSxHQUFBN0IsRUFBQXJCLEVBQUEsS0FBQSxFQUFBcUIsRUFBQXJCLEVBQUEsSUFBQSxHQUNBdUQsR0FBQUwsRUFBQSxHQUFBN0IsRUFBQXJCLEVBQUEsSUFTQSxPQU5Bc0QsRUFBQSxHQUFBLEVBQ0FDLEVBQUFBLEVBQUFDLFVBQUEsRUFBQUQsRUFBQWhELE9BQUEsR0FBQSxJQUNBK0MsRUFBQSxHQUFBLElBQ0FDLEVBQUFBLEVBQUFDLFVBQUEsRUFBQUQsRUFBQWhELE9BQUEsR0FBQSxNQUdBZ0QsR0FHQWxELEVBQUFvRCxPQUFBLFNBQUFGLEdBQ0EsSUFDQXZELEVBQ0EwRCxFQUFBQyxFQUFBQyxFQUFBQyxFQUZBQyxFQUFBLElBQUFQLEVBQUFoRCxPQUNBK0MsRUFBQUMsRUFBQWhELE9BQUF3RCxFQUFBLEVBR0EsTUFBQVIsRUFBQUEsRUFBQWhELE9BQUEsS0FDQXVELElBQ0EsTUFBQVAsRUFBQUEsRUFBQWhELE9BQUEsSUFDQXVELEtBSUEsSUFBQTVDLEVBQUEsSUFBQU0sWUFBQXNDLEdBQ0F6QyxFQUFBLElBQUFLLFdBQUFSLEdBRUEsSUFBQWxCLEVBQUEsRUFBQUEsRUFBQXNELEVBQUF0RCxHQUFBLEVBQ0EwRCxFQUFBUCxFQUFBSSxFQUFBSCxXQUFBcEQsSUFDQTJELEVBQUFSLEVBQUFJLEVBQUFILFdBQUFwRCxFQUFBLElBQ0E0RCxFQUFBVCxFQUFBSSxFQUFBSCxXQUFBcEQsRUFBQSxJQUNBNkQsRUFBQVYsRUFBQUksRUFBQUgsV0FBQXBELEVBQUEsSUFFQXFCLEVBQUEwQyxLQUFBTCxHQUFBLEVBQUFDLEdBQUEsRUFDQXRDLEVBQUEwQyxNQUFBLEdBQUFKLElBQUEsRUFBQUMsR0FBQSxFQUNBdkMsRUFBQTBDLE1BQUEsRUFBQUgsSUFBQSxFQUFBLEdBQUFDLEVBR0EsT0FBQTNDLEdBekRBLHdDQzJDQSxTQUFBOEMsRUFBQUMsR0FDQSxJQUFBLElBQUFqRSxFQUFBLEVBQUFBLEVBQUFpRSxFQUFBMUQsT0FBQVAsSUFBQSxDQUNBLElBQUFrRSxFQUFBRCxFQUFBakUsR0FDQSxHQUFBa0UsRUFBQXRDLGtCQUFBSixZQUFBLENBQ0EsSUFBQTJDLEVBQUFELEVBQUF0QyxPQUlBLEdBQUFzQyxFQUFBNUMsYUFBQTZDLEVBQUE3QyxXQUFBLENBQ0EsSUFBQThDLEVBQUEsSUFBQTFDLFdBQUF3QyxFQUFBNUMsWUFDQThDLEVBQUFDLElBQUEsSUFBQTNDLFdBQUF5QyxFQUFBRCxFQUFBSSxXQUFBSixFQUFBNUMsYUFDQTZDLEVBQUFDLEVBQUF4QyxPQUdBcUMsRUFBQWpFLEdBQUFtRSxJQUtBLFNBQUFJLEVBQUFOLEVBQUFPLEdBQ0FBLEVBQUFBLE1BRUEsSUFBQUMsRUFBQSxJQUFBQyxFQUNBVixFQUFBQyxHQUVBLElBQUEsSUFBQWpFLEVBQUEsRUFBQUEsRUFBQWlFLEVBQUExRCxPQUFBUCxJQUNBeUUsRUFBQUUsT0FBQVYsRUFBQWpFLElBR0EsT0FBQXdFLEVBQUEsS0FBQUMsRUFBQUcsUUFBQUosRUFBQUssTUFBQUosRUFBQUcsVUFHQSxTQUFBRSxFQUFBYixFQUFBTyxHQUVBLE9BREFSLEVBQUFDLEdBQ0EsSUFBQWMsS0FBQWQsRUFBQU8sT0FoRkEsSUFBQUUsRUFBQU0sRUFBQU4sYUFDQU0sRUFBQUMsbUJBQ0FELEVBQUFFLGVBQ0FGLEVBQUFHLGVBTUFDLEVBQUEsV0FDQSxJQUVBLE9BQUEsSUFEQSxJQUFBTCxNQUFBLE9BQ0FNLEtBQ0EsTUFBQTlGLEdBQ0EsT0FBQSxHQUxBLEdBY0ErRixFQUFBRixHQUFBLFdBQ0EsSUFFQSxPQUFBLElBREEsSUFBQUwsTUFBQSxJQUFBckQsWUFBQSxFQUFBLE1BQ0EyRCxLQUNBLE1BQUE5RixHQUNBLE9BQUEsR0FMQSxHQWFBZ0csRUFBQWIsR0FDQUEsRUFBQXBDLFVBQUFxQyxRQUNBRCxFQUFBcEMsVUFBQXNDLFFBNkNBbkUsRUFBQUosUUFDQStFLEVBQ0FFLEVBQUFOLEVBQUFELEtBQUFELEVBQ0FTLEVBQ0FoQixPQUVBLHFLQ3pGQSxJQUFBaEQsS0FBQUEsTUFXQWQsRUFBQUosUUFBQSxTQUFBbUYsRUFBQUMsR0FFQSxHQURBLGlCQUFBQSxJQUFBQSxFQUFBRCxFQUFBQyxJQUNBLG1CQUFBQSxFQUFBLE1BQUEsSUFBQXZGLE1BQUEsOEJBQ0EsSUFBQXdGLEVBQUFuRSxFQUFBakIsS0FBQXFGLFVBQUEsR0FDQSxPQUFBLFdBQ0EsT0FBQUYsRUFBQUcsTUFBQUosRUFBQUUsRUFBQUcsT0FBQXRFLEVBQUFqQixLQUFBcUYsdUNDTEEsU0FBQUcsRUFBQU4sR0FDQSxHQUFBQSxFQUFBLE9BQUFPLEVBQUFQLEdBV0EsU0FBQU8sRUFBQVAsR0FDQSxJQUFBLElBQUFRLEtBQUFGLEVBQUF4RCxVQUNBa0QsRUFBQVEsR0FBQUYsRUFBQXhELFVBQUEwRCxHQUVBLE9BQUFSLE9BMUJBLElBQUEvRSxJQUNBQSxFQUFBSixRQUFBeUYsR0FxQ0FBLEVBQUF4RCxVQUFBMkQsR0FDQUgsRUFBQXhELFVBQUE0RCxpQkFBQSxTQUFBQyxFQUFBVixHQUlBLE9BSEExRCxLQUFBcUUsV0FBQXJFLEtBQUFxRSxnQkFDQXJFLEtBQUFxRSxXQUFBLElBQUFELEdBQUFwRSxLQUFBcUUsV0FBQSxJQUFBRCxRQUNBRSxLQUFBWixHQUNBMUQsTUFhQStELEVBQUF4RCxVQUFBZ0UsS0FBQSxTQUFBSCxFQUFBVixHQUNBLFNBQUFRLElBQ0FsRSxLQUFBd0UsSUFBQUosRUFBQUYsR0FDQVIsRUFBQUcsTUFBQTdELEtBQUE0RCxXQUtBLE9BRkFNLEVBQUFSLEdBQUFBLEVBQ0ExRCxLQUFBa0UsR0FBQUUsRUFBQUYsR0FDQWxFLE1BYUErRCxFQUFBeEQsVUFBQWlFLElBQ0FULEVBQUF4RCxVQUFBa0UsZUFDQVYsRUFBQXhELFVBQUFtRSxtQkFDQVgsRUFBQXhELFVBQUFvRSxvQkFBQSxTQUFBUCxFQUFBVixHQUlBLEdBSEExRCxLQUFBcUUsV0FBQXJFLEtBQUFxRSxlQUdBLEdBQUFULFVBQUFwRixPQUVBLE9BREF3QixLQUFBcUUsY0FDQXJFLEtBSUEsSUFBQTRFLEVBQUE1RSxLQUFBcUUsV0FBQSxJQUFBRCxHQUNBLElBQUFRLEVBQUEsT0FBQTVFLEtBR0EsR0FBQSxHQUFBNEQsVUFBQXBGLE9BRUEsY0FEQXdCLEtBQUFxRSxXQUFBLElBQUFELEdBQ0FwRSxLQUtBLElBQUEsSUFEQTZFLEVBQ0E1RyxFQUFBLEVBQUFBLEVBQUEyRyxFQUFBcEcsT0FBQVAsSUFFQSxJQURBNEcsRUFBQUQsRUFBQTNHLE1BQ0F5RixHQUFBbUIsRUFBQW5CLEtBQUFBLEVBQUEsQ0FDQWtCLEVBQUFFLE9BQUE3RyxFQUFBLEdBQ0EsTUFHQSxPQUFBK0IsTUFXQStELEVBQUF4RCxVQUFBd0UsS0FBQSxTQUFBWCxHQUNBcEUsS0FBQXFFLFdBQUFyRSxLQUFBcUUsZUFDQSxJQUFBVixLQUFBbkUsTUFBQWpCLEtBQUFxRixVQUFBLEdBQ0FnQixFQUFBNUUsS0FBQXFFLFdBQUEsSUFBQUQsR0FFQSxHQUFBUSxFQUVBLElBQUEsSUFBQTNHLEVBQUEsRUFBQXNELEdBREFxRCxFQUFBQSxFQUFBcEYsTUFBQSxJQUNBaEIsT0FBQVAsRUFBQXNELElBQUF0RCxFQUNBMkcsRUFBQTNHLEdBQUE0RixNQUFBN0QsS0FBQTJELEdBSUEsT0FBQTNELE1BV0ErRCxFQUFBeEQsVUFBQXlFLFVBQUEsU0FBQVosR0FFQSxPQURBcEUsS0FBQXFFLFdBQUFyRSxLQUFBcUUsZUFDQXJFLEtBQUFxRSxXQUFBLElBQUFELFFBV0FMLEVBQUF4RCxVQUFBMEUsYUFBQSxTQUFBYixHQUNBLFFBQUFwRSxLQUFBZ0YsVUFBQVosR0FBQTVGLGdDQ2hLQUUsRUFBQUosUUFBQSxTQUFBUCxFQUFBbUgsR0FDQSxJQUFBeEIsRUFBQSxhQUNBQSxFQUFBbkQsVUFBQTJFLEVBQUEzRSxVQUNBeEMsRUFBQXdDLFVBQUEsSUFBQW1ELEVBQ0EzRixFQUFBd0MsVUFBQTRFLFlBQUFwSCw0QkNKQVcsRUFBQUosUUFBQU4sRUFBQSx3RENBQVUsRUFBQUosUUFBQU4sRUFBQSxZQVFBVSxFQUFBSixRQUFBOEcsT0FBQXBILEVBQUEsNkZDa0JBLFNBQUFxSCxFQUFBQyxFQUFBdkYsR0FDQSxLQUFBQyxnQkFBQXFGLEdBQUEsT0FBQSxJQUFBQSxFQUFBQyxFQUFBdkYsR0FFQUEsRUFBQUEsTUFFQXVGLEdBQUEsaUJBQUFBLElBQ0F2RixFQUFBdUYsRUFDQUEsRUFBQSxNQUdBQSxHQUNBQSxFQUFBQyxFQUFBRCxHQUNBdkYsRUFBQXlGLFNBQUFGLEVBQUFHLEtBQ0ExRixFQUFBMkYsT0FBQSxVQUFBSixFQUFBSyxVQUFBLFFBQUFMLEVBQUFLLFNBQ0E1RixFQUFBNkYsS0FBQU4sRUFBQU0sS0FDQU4sRUFBQU8sUUFBQTlGLEVBQUE4RixNQUFBUCxFQUFBTyxRQUNBOUYsRUFBQTBGLE9BQ0ExRixFQUFBeUYsU0FBQUQsRUFBQXhGLEVBQUEwRixNQUFBQSxNQUdBekYsS0FBQTBGLE9BQUEsTUFBQTNGLEVBQUEyRixPQUFBM0YsRUFBQTJGLE9BQ0F6QyxFQUFBNkMsVUFBQSxXQUFBQSxTQUFBSCxTQUVBNUYsRUFBQXlGLFdBQUF6RixFQUFBNkYsT0FFQTdGLEVBQUE2RixLQUFBNUYsS0FBQTBGLE9BQUEsTUFBQSxNQUdBMUYsS0FBQStGLE1BQUFoRyxFQUFBZ0csUUFBQSxFQUNBL0YsS0FBQXdGLFNBQUF6RixFQUFBeUYsV0FDQXZDLEVBQUE2QyxTQUFBQSxTQUFBTixTQUFBLGFBQ0F4RixLQUFBNEYsS0FBQTdGLEVBQUE2RixPQUFBM0MsRUFBQTZDLFVBQUFBLFNBQUFGLEtBQ0FFLFNBQUFGLEtBQ0E1RixLQUFBMEYsT0FBQSxJQUFBLElBQ0ExRixLQUFBNkYsTUFBQTlGLEVBQUE4RixVQUNBLGlCQUFBN0YsS0FBQTZGLFFBQUE3RixLQUFBNkYsTUFBQUcsRUFBQXRFLE9BQUExQixLQUFBNkYsUUFDQTdGLEtBQUFpRyxTQUFBLElBQUFsRyxFQUFBa0csUUFDQWpHLEtBQUFrRyxNQUFBbkcsRUFBQW1HLE1BQUEsY0FBQUMsUUFBQSxNQUFBLElBQUEsSUFDQW5HLEtBQUFvRyxhQUFBckcsRUFBQXFHLFdBQ0FwRyxLQUFBcUcsT0FBQSxJQUFBdEcsRUFBQXNHLE1BQ0FyRyxLQUFBc0csY0FBQXZHLEVBQUF1RyxZQUNBdEcsS0FBQXVHLGFBQUF4RyxFQUFBd0csV0FDQXZHLEtBQUF3RyxlQUFBekcsRUFBQXlHLGdCQUFBLElBQ0F4RyxLQUFBeUcsa0JBQUExRyxFQUFBMEcsa0JBQ0F6RyxLQUFBMEcsV0FBQTNHLEVBQUEyRyxhQUFBLFVBQUEsYUFDQTFHLEtBQUEyRyxpQkFBQTVHLEVBQUE0RyxxQkFDQTNHLEtBQUE0RyxXQUFBLEdBQ0E1RyxLQUFBNkcsZUFDQTdHLEtBQUE4RyxjQUFBLEVBQ0E5RyxLQUFBK0csV0FBQWhILEVBQUFnSCxZQUFBLElBQ0EvRyxLQUFBZ0gsZ0JBQUFqSCxFQUFBaUgsa0JBQUEsRUFDQWhILEtBQUFpSCxXQUFBLEtBQ0FqSCxLQUFBa0gsbUJBQUFuSCxFQUFBbUgsbUJBQ0FsSCxLQUFBbUgsbUJBQUEsSUFBQXBILEVBQUFvSCxvQkFBQXBILEVBQUFvSCx3QkFFQSxJQUFBbkgsS0FBQW1ILG9CQUFBbkgsS0FBQW1ILHNCQUNBbkgsS0FBQW1ILG1CQUFBLE1BQUFuSCxLQUFBbUgsa0JBQUFDLFlBQ0FwSCxLQUFBbUgsa0JBQUFDLFVBQUEsTUFJQXBILEtBQUFxSCxJQUFBdEgsRUFBQXNILEtBQUEsS0FDQXJILEtBQUFpRSxJQUFBbEUsRUFBQWtFLEtBQUEsS0FDQWpFLEtBQUFzSCxXQUFBdkgsRUFBQXVILFlBQUEsS0FDQXRILEtBQUF1SCxLQUFBeEgsRUFBQXdILE1BQUEsS0FDQXZILEtBQUF3SCxHQUFBekgsRUFBQXlILElBQUEsS0FDQXhILEtBQUF5SCxRQUFBMUgsRUFBQTBILFNBQUEsS0FDQXpILEtBQUEwSCx3QkFBQUMsSUFBQTVILEVBQUEySCxvQkFBQTNILEVBQUEySCxtQkFDQTFILEtBQUE0SCxZQUFBN0gsRUFBQTZILFVBR0EsSUFBQUMsRUFBQSxpQkFBQTVFLEdBQUFBLEVBQ0E0RSxFQUFBNUUsU0FBQTRFLElBQ0E5SCxFQUFBK0gsY0FBQUMsT0FBQUMsS0FBQWpJLEVBQUErSCxjQUFBdEosT0FBQSxJQUNBd0IsS0FBQThILGFBQUEvSCxFQUFBK0gsY0FHQS9ILEVBQUFrSSxlQUNBakksS0FBQWlJLGFBQUFsSSxFQUFBa0ksZUFLQWpJLEtBQUFrSSxHQUFBLEtBQ0FsSSxLQUFBbUksU0FBQSxLQUNBbkksS0FBQW9JLGFBQUEsS0FDQXBJLEtBQUFxSSxZQUFBLEtBR0FySSxLQUFBc0ksa0JBQUEsS0FDQXRJLEtBQUF1SSxpQkFBQSxLQUVBdkksS0FBQXdJLE9Bc0ZBLFNBQUFDLEVBQUFoRixHQUNBLElBQUE1RixLQUNBLElBQUEsSUFBQUksS0FBQXdGLEVBQ0FBLEVBQUFpRixlQUFBekssS0FDQUosRUFBQUksR0FBQXdGLEVBQUF4RixJQUdBLE9BQUFKLEVBaE5BLElBQUE2SSxFQUFBMUksRUFBQSxzQkFDQStGLEVBQUEvRixFQUFBLHFCQUNBMkssRUFBQTNLLEVBQUEsU0FBQSwyQkFDQTRLLEVBQUE1SyxFQUFBLFdBQ0FvSCxFQUFBcEgsRUFBQSxvQkFDQXVILEVBQUF2SCxFQUFBLFlBQ0E2SyxFQUFBN0ssRUFBQSxhQUNBZ0ksRUFBQWhJLEVBQUEsV0FNQVUsRUFBQUosUUFBQStHLEVBeUdBQSxFQUFBeUQsdUJBQUEsRUFNQS9FLEVBQUFzQixFQUFBOUUsV0FRQThFLEVBQUFNLFNBQUFQLEVBQUFPLFNBT0FOLEVBQUFBLE9BQUFBLEVBQ0FBLEVBQUEwRCxVQUFBL0ssRUFBQSxlQUNBcUgsRUFBQXFCLFdBQUExSSxFQUFBLHNCQUNBcUgsRUFBQUQsT0FBQXBILEVBQUEsb0JBVUFxSCxFQUFBOUUsVUFBQXlJLGdCQUFBLFNBQUFDLEdBQ0FOLEVBQUEsMEJBQUFNLEdBQ0EsSUFBQXBELEVBQUE0QyxFQUFBekksS0FBQTZGLE9BR0FBLEVBQUFxRCxJQUFBOUQsRUFBQU8sU0FHQUUsRUFBQXNELFVBQUFGLEVBR0EsSUFBQXhHLEVBQUF6QyxLQUFBMkcsaUJBQUFzQyxPQW1DQSxPQWhDQWpKLEtBQUFrSSxLQUFBckMsRUFBQXVELElBQUFwSixLQUFBa0ksSUFFQSxJQUFBeEIsRUFBQXVDLElBQ0FwRCxNQUFBQSxFQUNBd0QsT0FBQXJKLEtBQ0ErRixNQUFBdEQsRUFBQXNELE9BQUEvRixLQUFBK0YsTUFDQVAsU0FBQS9DLEVBQUErQyxVQUFBeEYsS0FBQXdGLFNBQ0FJLEtBQUFuRCxFQUFBbUQsTUFBQTVGLEtBQUE0RixLQUNBRixPQUFBakQsRUFBQWlELFFBQUExRixLQUFBMEYsT0FDQVEsS0FBQXpELEVBQUF5RCxNQUFBbEcsS0FBQWtHLEtBQ0FFLFdBQUEzRCxFQUFBMkQsWUFBQXBHLEtBQUFvRyxXQUNBQyxNQUFBNUQsRUFBQTRELE9BQUFyRyxLQUFBcUcsTUFDQUMsWUFBQTdELEVBQUE2RCxhQUFBdEcsS0FBQXNHLFlBQ0FDLFdBQUE5RCxFQUFBOEQsWUFBQXZHLEtBQUF1RyxXQUNBRSxrQkFBQWhFLEVBQUFnRSxtQkFBQXpHLEtBQUF5RyxrQkFDQUQsZUFBQS9ELEVBQUErRCxnQkFBQXhHLEtBQUF3RyxlQUNBTyxXQUFBdEUsRUFBQXNFLFlBQUEvRyxLQUFBK0csV0FDQU0sSUFBQTVFLEVBQUE0RSxLQUFBckgsS0FBQXFILElBQ0FwRCxJQUFBeEIsRUFBQXdCLEtBQUFqRSxLQUFBaUUsSUFDQXFELFdBQUE3RSxFQUFBNkUsWUFBQXRILEtBQUFzSCxXQUNBQyxLQUFBOUUsRUFBQThFLE1BQUF2SCxLQUFBdUgsS0FDQUMsR0FBQS9FLEVBQUErRSxJQUFBeEgsS0FBQXdILEdBQ0FDLFFBQUFoRixFQUFBZ0YsU0FBQXpILEtBQUF5SCxRQUNBQyxtQkFBQWpGLEVBQUFpRixvQkFBQTFILEtBQUEwSCxtQkFDQVAsa0JBQUExRSxFQUFBMEUsbUJBQUFuSCxLQUFBbUgsa0JBQ0FXLGFBQUFyRixFQUFBcUYsY0FBQTlILEtBQUE4SCxhQUNBRixVQUFBbkYsRUFBQW1GLFdBQUE1SCxLQUFBNEgsVUFDQUssYUFBQXhGLEVBQUF3RixjQUFBakksS0FBQWlJLGFBQ0FxQixlQUFBN0csRUFBQTZHLGdCQUFBdEosS0FBQXNKLGVBQ0FDLFVBQUE5RyxFQUFBOEcsZ0JBQUEsS0FxQkFsRSxFQUFBOUUsVUFBQWlJLEtBQUEsV0FDQSxJQUFBVyxFQUNBLEdBQUFuSixLQUFBZ0gsaUJBQUEzQixFQUFBeUQsd0JBQUEsSUFBQTlJLEtBQUEwRyxXQUFBOEMsUUFBQSxhQUNBTCxFQUFBLGdCQUNBLENBQUEsR0FBQSxJQUFBbkosS0FBQTBHLFdBQUFsSSxPQUFBLENBRUEsSUFBQWlMLEVBQUF6SixLQUlBLFlBSEEwSixXQUFBLFdBQ0FELEVBQUExRSxLQUFBLFFBQUEsNEJBQ0EsR0FHQW9FLEVBQUFuSixLQUFBMEcsV0FBQSxHQUVBMUcsS0FBQTRHLFdBQUEsVUFHQSxJQUNBdUMsRUFBQW5KLEtBQUFnSixnQkFBQUcsR0FDQSxNQUFBM0wsR0FHQSxPQUZBd0MsS0FBQTBHLFdBQUFpRCxhQUNBM0osS0FBQXdJLE9BSUFXLEVBQUFYLE9BQ0F4SSxLQUFBNEosYUFBQVQsSUFTQTlELEVBQUE5RSxVQUFBcUosYUFBQSxTQUFBVCxHQUNBUixFQUFBLHVCQUFBUSxFQUFBRixNQUNBLElBQUFRLEVBQUF6SixLQUVBQSxLQUFBbUosWUFDQVIsRUFBQSxpQ0FBQTNJLEtBQUFtSixVQUFBRixNQUNBakosS0FBQW1KLFVBQUF6RSxzQkFJQTFFLEtBQUFtSixVQUFBQSxFQUdBQSxFQUNBakYsR0FBQSxRQUFBLFdBQ0F1RixFQUFBSSxZQUVBM0YsR0FBQSxTQUFBLFNBQUE0RixHQUNBTCxFQUFBTSxTQUFBRCxLQUVBNUYsR0FBQSxRQUFBLFNBQUExRyxHQUNBaU0sRUFBQU8sUUFBQXhNLEtBRUEwRyxHQUFBLFFBQUEsV0FDQXVGLEVBQUFRLFFBQUEsc0JBV0E1RSxFQUFBOUUsVUFBQTJKLE1BQUEsU0FBQWpCLEdBUUEsU0FBQWtCLElBQ0EsR0FBQVYsRUFBQXZDLG1CQUFBLENBQ0EsSUFBQWtELEdBQUFwSyxLQUFBcUssZ0JBQUFaLEVBQUFOLFVBQUFrQixlQUNBQyxFQUFBQSxHQUFBRixFQUVBRSxJQUVBM0IsRUFBQSw4QkFBQU0sR0FDQUUsRUFBQW9CLE9BQUF6SCxLQUFBLE9BQUEwSCxLQUFBLFdBQ0FyQixFQUFBNUUsS0FBQSxTQUFBLFNBQUFrRyxHQUNBLElBQUFILEVBQ0EsR0FBQSxTQUFBRyxFQUFBM0gsTUFBQSxVQUFBMkgsRUFBQUQsS0FBQSxDQUlBLEdBSEE3QixFQUFBLDRCQUFBTSxHQUNBUSxFQUFBaUIsV0FBQSxFQUNBakIsRUFBQTFFLEtBQUEsWUFBQW9FLElBQ0FBLEVBQUEsT0FDQTlELEVBQUF5RCxzQkFBQSxjQUFBSyxFQUFBRixLQUVBTixFQUFBLGlDQUFBYyxFQUFBTixVQUFBRixNQUNBUSxFQUFBTixVQUFBd0IsTUFBQSxXQUNBTCxHQUNBLFdBQUFiLEVBQUE3QyxhQUNBK0IsRUFBQSxpREFFQWlDLElBRUFuQixFQUFBRyxhQUFBVCxHQUNBQSxFQUFBb0IsT0FBQXpILEtBQUEsYUFDQTJHLEVBQUExRSxLQUFBLFVBQUFvRSxHQUNBQSxFQUFBLEtBQ0FNLEVBQUFpQixXQUFBLEVBQ0FqQixFQUFBb0IsZUFFQSxDQUNBbEMsRUFBQSw4QkFBQU0sR0FDQSxJQUFBakssRUFBQSxJQUFBYixNQUFBLGVBQ0FhLEVBQUFtSyxVQUFBQSxFQUFBRixLQUNBUSxFQUFBMUUsS0FBQSxlQUFBL0YsT0FLQSxTQUFBOEwsSUFDQVIsSUFHQUEsR0FBQSxFQUVBTSxJQUVBekIsRUFBQTRCLFFBQ0E1QixFQUFBLE1BSUEsU0FBQTZCLEVBQUFoTSxHQUNBLElBQUFpTSxFQUFBLElBQUE5TSxNQUFBLGdCQUFBYSxHQUNBaU0sRUFBQTlCLFVBQUFBLEVBQUFGLEtBRUE2QixJQUVBbkMsRUFBQSxtREFBQU0sRUFBQWpLLEdBRUF5SyxFQUFBMUUsS0FBQSxlQUFBa0csR0FHQSxTQUFBQyxJQUNBRixFQUFBLG9CQUlBLFNBQUFHLElBQ0FILEVBQUEsaUJBSUEsU0FBQUksRUFBQUMsR0FDQWxDLEdBQUFrQyxFQUFBcEMsT0FBQUUsRUFBQUYsT0FDQU4sRUFBQSw2QkFBQTBDLEVBQUFwQyxLQUFBRSxFQUFBRixNQUNBNkIsS0FLQSxTQUFBRixJQUNBekIsRUFBQTFFLGVBQUEsT0FBQTBGLEdBQ0FoQixFQUFBMUUsZUFBQSxRQUFBdUcsR0FDQTdCLEVBQUExRSxlQUFBLFFBQUF5RyxHQUNBekIsRUFBQWhGLGVBQUEsUUFBQTBHLEdBQ0ExQixFQUFBaEYsZUFBQSxZQUFBMkcsR0FoR0F6QyxFQUFBLHlCQUFBTSxHQUNBLElBQUFFLEVBQUFuSixLQUFBZ0osZ0JBQUFDLEdBQUFpQixNQUFBLElBQ0FJLEdBQUEsRUFDQWIsRUFBQXpKLEtBRUFxRixFQUFBeUQsdUJBQUEsRUE4RkFLLEVBQUE1RSxLQUFBLE9BQUE0RixHQUNBaEIsRUFBQTVFLEtBQUEsUUFBQXlHLEdBQ0E3QixFQUFBNUUsS0FBQSxRQUFBMkcsR0FFQWxMLEtBQUF1RSxLQUFBLFFBQUE0RyxHQUNBbkwsS0FBQXVFLEtBQUEsWUFBQTZHLEdBRUFqQyxFQUFBWCxRQVNBbkQsRUFBQTlFLFVBQUErSyxPQUFBLFdBU0EsR0FSQTNDLEVBQUEsZUFDQTNJLEtBQUE0RyxXQUFBLE9BQ0F2QixFQUFBeUQsc0JBQUEsY0FBQTlJLEtBQUFtSixVQUFBRixLQUNBakosS0FBQStFLEtBQUEsUUFDQS9FLEtBQUE2SyxRQUlBLFNBQUE3SyxLQUFBNEcsWUFBQTVHLEtBQUFpRyxTQUFBakcsS0FBQW1KLFVBQUF3QixNQUFBLENBQ0FoQyxFQUFBLDJCQUNBLElBQUEsSUFBQTFLLEVBQUEsRUFBQUksRUFBQTJCLEtBQUFtSSxTQUFBM0osT0FBQVAsRUFBQUksRUFBQUosSUFDQStCLEtBQUFrSyxNQUFBbEssS0FBQW1JLFNBQUFsSyxNQVdBb0gsRUFBQTlFLFVBQUF3SixTQUFBLFNBQUFELEdBQ0EsR0FBQSxZQUFBOUosS0FBQTRHLFlBQUEsU0FBQTVHLEtBQUE0RyxZQUNBLFlBQUE1RyxLQUFBNEcsV0FRQSxPQVBBK0IsRUFBQSx1Q0FBQW1CLEVBQUFoSCxLQUFBZ0gsRUFBQVUsTUFFQXhLLEtBQUErRSxLQUFBLFNBQUErRSxHQUdBOUosS0FBQStFLEtBQUEsYUFFQStFLEVBQUFoSCxNQUNBLElBQUEsT0FDQTlDLEtBQUF1TCxZQUFBMUMsRUFBQWlCLEVBQUFVLE9BQ0EsTUFFQSxJQUFBLE9BQ0F4SyxLQUFBd0wsVUFDQXhMLEtBQUErRSxLQUFBLFFBQ0EsTUFFQSxJQUFBLFFBQ0EsSUFBQS9GLEVBQUEsSUFBQWIsTUFBQSxnQkFDQWEsRUFBQVosS0FBQTBMLEVBQUFVLEtBQ0F4SyxLQUFBZ0ssUUFBQWhMLEdBQ0EsTUFFQSxJQUFBLFVBQ0FnQixLQUFBK0UsS0FBQSxPQUFBK0UsRUFBQVUsTUFDQXhLLEtBQUErRSxLQUFBLFVBQUErRSxFQUFBVSxXQUlBN0IsRUFBQSw4Q0FBQTNJLEtBQUE0RyxhQVdBdkIsRUFBQTlFLFVBQUFnTCxZQUFBLFNBQUFmLEdBQ0F4SyxLQUFBK0UsS0FBQSxZQUFBeUYsR0FDQXhLLEtBQUFrSSxHQUFBc0MsRUFBQXBCLElBQ0FwSixLQUFBbUosVUFBQXRELE1BQUF1RCxJQUFBb0IsRUFBQXBCLElBQ0FwSixLQUFBbUksU0FBQW5JLEtBQUF5TCxlQUFBakIsRUFBQXJDLFVBQ0FuSSxLQUFBb0ksYUFBQW9DLEVBQUFwQyxhQUNBcEksS0FBQXFJLFlBQUFtQyxFQUFBbkMsWUFDQXJJLEtBQUFzTCxTQUVBLFdBQUF0TCxLQUFBNEcsYUFDQTVHLEtBQUF3TCxVQUdBeEwsS0FBQXlFLGVBQUEsWUFBQXpFLEtBQUEwTCxhQUNBMUwsS0FBQWtFLEdBQUEsWUFBQWxFLEtBQUEwTCxlQVNBckcsRUFBQTlFLFVBQUFtTCxZQUFBLFNBQUFDLEdBQ0FDLGFBQUE1TCxLQUFBdUksa0JBQ0EsSUFBQWtCLEVBQUF6SixLQUNBeUosRUFBQWxCLGlCQUFBbUIsV0FBQSxXQUNBLFdBQUFELEVBQUE3QyxZQUNBNkMsRUFBQVEsUUFBQSxpQkFDQTBCLEdBQUFsQyxFQUFBckIsYUFBQXFCLEVBQUFwQixjQVVBaEQsRUFBQTlFLFVBQUFpTCxRQUFBLFdBQ0EsSUFBQS9CLEVBQUF6SixLQUNBNEwsYUFBQW5DLEVBQUFuQixtQkFDQW1CLEVBQUFuQixrQkFBQW9CLFdBQUEsV0FDQWYsRUFBQSxtREFBQWMsRUFBQXBCLGFBQ0FvQixFQUFBb0MsT0FDQXBDLEVBQUFpQyxZQUFBakMsRUFBQXBCLGNBQ0FvQixFQUFBckIsZUFTQS9DLEVBQUE5RSxVQUFBc0wsS0FBQSxXQUNBLElBQUFwQyxFQUFBekosS0FDQUEsS0FBQThMLFdBQUEsT0FBQSxXQUNBckMsRUFBQTFFLEtBQUEsV0FVQU0sRUFBQTlFLFVBQUFzSixRQUFBLFdBQ0E3SixLQUFBNkcsWUFBQS9CLE9BQUEsRUFBQTlFLEtBQUE4RyxlQUtBOUcsS0FBQThHLGNBQUEsRUFFQSxJQUFBOUcsS0FBQTZHLFlBQUFySSxPQUNBd0IsS0FBQStFLEtBQUEsU0FFQS9FLEtBQUE2SyxTQVVBeEYsRUFBQTlFLFVBQUFzSyxNQUFBLFdBQ0EsV0FBQTdLLEtBQUE0RyxZQUFBNUcsS0FBQW1KLFVBQUE0QyxXQUNBL0wsS0FBQTBLLFdBQUExSyxLQUFBNkcsWUFBQXJJLFNBQ0FtSyxFQUFBLGdDQUFBM0ksS0FBQTZHLFlBQUFySSxRQUNBd0IsS0FBQW1KLFVBQUFvQixLQUFBdkssS0FBQTZHLGFBR0E3RyxLQUFBOEcsY0FBQTlHLEtBQUE2RyxZQUFBckksT0FDQXdCLEtBQUErRSxLQUFBLFdBY0FNLEVBQUE5RSxVQUFBeUwsTUFDQTNHLEVBQUE5RSxVQUFBZ0ssS0FBQSxTQUFBRSxFQUFBaEksRUFBQWlCLEdBRUEsT0FEQTFELEtBQUE4TCxXQUFBLFVBQUFyQixFQUFBaEksRUFBQWlCLEdBQ0ExRCxNQWFBcUYsRUFBQTlFLFVBQUF1TCxXQUFBLFNBQUFoSixFQUFBMEgsRUFBQS9ILEVBQUFpQixHQVdBLEdBVkEsbUJBQUE4RyxJQUNBOUcsRUFBQThHLEVBQ0FBLE9BQUE3QyxHQUdBLG1CQUFBbEYsSUFDQWlCLEVBQUFqQixFQUNBQSxFQUFBLE1BR0EsWUFBQXpDLEtBQUE0RyxZQUFBLFdBQUE1RyxLQUFBNEcsV0FBQSxFQUlBbkUsRUFBQUEsT0FDQXdKLFVBQUEsSUFBQXhKLEVBQUF3SixTQUVBLElBQUFuQyxHQUNBaEgsS0FBQUEsRUFDQTBILEtBQUFBLEVBQ0EvSCxRQUFBQSxHQUVBekMsS0FBQStFLEtBQUEsZUFBQStFLEdBQ0E5SixLQUFBNkcsWUFBQXZDLEtBQUF3RixHQUNBcEcsR0FBQTFELEtBQUF1RSxLQUFBLFFBQUFiLEdBQ0ExRCxLQUFBNkssVUFTQXhGLEVBQUE5RSxVQUFBd0ssTUFBQSxXQXFCQSxTQUFBQSxJQUNBdEIsRUFBQVEsUUFBQSxnQkFDQXRCLEVBQUEsK0NBQ0FjLEVBQUFOLFVBQUE0QixRQUdBLFNBQUFtQixJQUNBekMsRUFBQWhGLGVBQUEsVUFBQXlILEdBQ0F6QyxFQUFBaEYsZUFBQSxlQUFBeUgsR0FDQW5CLElBR0EsU0FBQW9CLElBRUExQyxFQUFBbEYsS0FBQSxVQUFBMkgsR0FDQXpDLEVBQUFsRixLQUFBLGVBQUEySCxHQW5DQSxHQUFBLFlBQUFsTSxLQUFBNEcsWUFBQSxTQUFBNUcsS0FBQTRHLFdBQUEsQ0FDQTVHLEtBQUE0RyxXQUFBLFVBRUEsSUFBQTZDLEVBQUF6SixLQUVBQSxLQUFBNkcsWUFBQXJJLE9BQ0F3QixLQUFBdUUsS0FBQSxRQUFBLFdBQ0F2RSxLQUFBMEssVUFDQXlCLElBRUFwQixNQUdBL0ssS0FBQTBLLFVBQ0F5QixJQUVBcEIsSUFzQkEsT0FBQS9LLE1BU0FxRixFQUFBOUUsVUFBQXlKLFFBQUEsU0FBQWhMLEdBQ0EySixFQUFBLGtCQUFBM0osR0FDQXFHLEVBQUF5RCx1QkFBQSxFQUNBOUksS0FBQStFLEtBQUEsUUFBQS9GLEdBQ0FnQixLQUFBaUssUUFBQSxrQkFBQWpMLElBU0FxRyxFQUFBOUUsVUFBQTBKLFFBQUEsU0FBQW1DLEVBQUFDLEdBQ0EsR0FBQSxZQUFBck0sS0FBQTRHLFlBQUEsU0FBQTVHLEtBQUE0RyxZQUFBLFlBQUE1RyxLQUFBNEcsV0FBQSxDQUNBK0IsRUFBQSxpQ0FBQXlELEdBQ0EsSUFBQTNDLEVBQUF6SixLQUdBNEwsYUFBQTVMLEtBQUFzSSxtQkFDQXNELGFBQUE1TCxLQUFBdUksa0JBR0F2SSxLQUFBbUosVUFBQXpFLG1CQUFBLFNBR0ExRSxLQUFBbUosVUFBQTRCLFFBR0EvSyxLQUFBbUosVUFBQXpFLHFCQUdBMUUsS0FBQTRHLFdBQUEsU0FHQTVHLEtBQUFrSSxHQUFBLEtBR0FsSSxLQUFBK0UsS0FBQSxRQUFBcUgsRUFBQUMsR0FJQTVDLEVBQUE1QyxlQUNBNEMsRUFBQTNDLGNBQUEsSUFZQXpCLEVBQUE5RSxVQUFBa0wsZUFBQSxTQUFBdEQsR0FFQSxJQUFBLElBREFtRSxLQUNBck8sRUFBQSxFQUFBc08sRUFBQXBFLEVBQUEzSixPQUFBUCxFQUFBc08sRUFBQXRPLEtBQ0EySyxFQUFBNUksS0FBQTBHLFdBQUF5QixFQUFBbEssS0FBQXFPLEVBQUFoSSxLQUFBNkQsRUFBQWxLLElBRUEsT0FBQXFPLDBSQ2x0QkEsU0FBQXZELEVBQUFoSixHQUNBQyxLQUFBa0csS0FBQW5HLEVBQUFtRyxLQUNBbEcsS0FBQXdGLFNBQUF6RixFQUFBeUYsU0FDQXhGLEtBQUE0RixLQUFBN0YsRUFBQTZGLEtBQ0E1RixLQUFBMEYsT0FBQTNGLEVBQUEyRixPQUNBMUYsS0FBQTZGLE1BQUE5RixFQUFBOEYsTUFDQTdGLEtBQUF3RyxlQUFBekcsRUFBQXlHLGVBQ0F4RyxLQUFBeUcsa0JBQUExRyxFQUFBMEcsa0JBQ0F6RyxLQUFBNEcsV0FBQSxHQUNBNUcsS0FBQStGLE1BQUFoRyxFQUFBZ0csUUFBQSxFQUNBL0YsS0FBQXFKLE9BQUF0SixFQUFBc0osT0FDQXJKLEtBQUF1RyxXQUFBeEcsRUFBQXdHLFdBR0F2RyxLQUFBcUgsSUFBQXRILEVBQUFzSCxJQUNBckgsS0FBQWlFLElBQUFsRSxFQUFBa0UsSUFDQWpFLEtBQUFzSCxXQUFBdkgsRUFBQXVILFdBQ0F0SCxLQUFBdUgsS0FBQXhILEVBQUF3SCxLQUNBdkgsS0FBQXdILEdBQUF6SCxFQUFBeUgsR0FDQXhILEtBQUF5SCxRQUFBMUgsRUFBQTBILFFBQ0F6SCxLQUFBMEgsbUJBQUEzSCxFQUFBMkgsbUJBQ0ExSCxLQUFBNEgsVUFBQTdILEVBQUE2SCxVQUdBNUgsS0FBQThILGFBQUEvSCxFQUFBK0gsYUFDQTlILEtBQUFpSSxhQUFBbEksRUFBQWtJLGFBekNBLElBQUE3QyxFQUFBcEgsRUFBQSxvQkFDQStGLEVBQUEvRixFQUFBLHFCQU1BVSxFQUFBSixRQUFBeUssRUF5Q0FoRixFQUFBZ0YsRUFBQXhJLFdBVUF3SSxFQUFBeEksVUFBQXlKLFFBQUEsU0FBQVMsRUFBQTRCLEdBQ0EsSUFBQXJOLEVBQUEsSUFBQWIsTUFBQXNNLEdBSUEsT0FIQXpMLEVBQUE4RCxLQUFBLGlCQUNBOUQsRUFBQXdOLFlBQUFILEVBQ0FyTSxLQUFBK0UsS0FBQSxRQUFBL0YsR0FDQWdCLE1BU0ErSSxFQUFBeEksVUFBQWlJLEtBQUEsV0FNQSxNQUxBLFdBQUF4SSxLQUFBNEcsWUFBQSxLQUFBNUcsS0FBQTRHLGFBQ0E1RyxLQUFBNEcsV0FBQSxVQUNBNUcsS0FBQXlNLFVBR0F6TSxNQVNBK0ksRUFBQXhJLFVBQUF3SyxNQUFBLFdBTUEsTUFMQSxZQUFBL0ssS0FBQTRHLFlBQUEsU0FBQTVHLEtBQUE0RyxhQUNBNUcsS0FBQTBNLFVBQ0ExTSxLQUFBaUssV0FHQWpLLE1BVUErSSxFQUFBeEksVUFBQWdLLEtBQUEsU0FBQW9DLEdBQ0EsR0FBQSxTQUFBM00sS0FBQTRHLFdBR0EsTUFBQSxJQUFBekksTUFBQSxzQkFGQTZCLEtBQUFnTSxNQUFBVyxJQVlBNUQsRUFBQXhJLFVBQUErSyxPQUFBLFdBQ0F0TCxLQUFBNEcsV0FBQSxPQUNBNUcsS0FBQStMLFVBQUEsRUFDQS9MLEtBQUErRSxLQUFBLFNBVUFnRSxFQUFBeEksVUFBQXFNLE9BQUEsU0FBQXBDLEdBQ0EsSUFBQVYsRUFBQTFFLEVBQUF5SCxhQUFBckMsRUFBQXhLLEtBQUFxSixPQUFBcEMsWUFDQWpILEtBQUErSixTQUFBRCxJQU9BZixFQUFBeEksVUFBQXdKLFNBQUEsU0FBQUQsR0FDQTlKLEtBQUErRSxLQUFBLFNBQUErRSxJQVNBZixFQUFBeEksVUFBQTBKLFFBQUEsV0FDQWpLLEtBQUE0RyxXQUFBLFNBQ0E1RyxLQUFBK0UsS0FBQSwyRkN2SkEsSUFBQStILEVBQUE5TyxFQUFBLHNCQUNBK08sRUFBQS9PLEVBQUEsaUJBQ0FnUCxFQUFBaFAsRUFBQSxtQkFDQWlQLEVBQUFqUCxFQUFBLGVBTUFNLEVBQUE0TyxRQVVBLFNBQUFuTixHQUNBLElBQ0FvTixHQUFBLEVBQ0FDLEdBQUEsRUFDQS9HLEdBQUEsSUFBQXRHLEVBQUFzRyxNQUVBLEdBQUFwRCxFQUFBNkMsU0FBQSxDQUNBLElBQUF1SCxFQUFBLFdBQUF2SCxTQUFBSCxTQUNBQyxFQUFBRSxTQUFBRixLQUdBQSxJQUNBQSxFQUFBeUgsRUFBQSxJQUFBLElBR0FGLEVBQUFwTixFQUFBeUYsV0FBQU0sU0FBQU4sVUFBQUksSUFBQTdGLEVBQUE2RixLQUNBd0gsRUFBQXJOLEVBQUEyRixTQUFBMkgsRUFPQSxHQUpBdE4sRUFBQXVOLFFBQUFILEVBQ0FwTixFQUFBd04sUUFBQUgsRUFHQSxTQUZBLElBQUFOLEVBQUEvTSxLQUVBQSxFQUFBcUcsV0FDQSxPQUFBLElBQUEyRyxFQUFBaE4sR0FFQSxJQUFBc0csRUFBQSxNQUFBLElBQUFsSSxNQUFBLGtCQUNBLE9BQUEsSUFBQTZPLEVBQUFqTixJQXBDQXpCLEVBQUEyTyxVQUFBQSwwT0NpQkEsU0FBQU8sS0FTQSxTQUFBQyxFQUFBMU4sR0FDQTJOLEVBQUFuUCxLQUFBeUIsS0FBQUQsR0FFQUMsS0FBQTZGLE1BQUE3RixLQUFBNkYsVUFJQWpCLElBRUEzQixFQUFBMEssU0FBQTFLLEVBQUEwSyxXQUNBL0ksRUFBQTNCLEVBQUEwSyxRQUlBM04sS0FBQTRJLE1BQUFoRSxFQUFBcEcsT0FHQSxJQUFBaUwsRUFBQXpKLEtBQ0E0RSxFQUFBTixLQUFBLFNBQUFtRyxHQUNBaEIsRUFBQW1ELE9BQUFuQyxLQUlBekssS0FBQTZGLE1BQUEwRyxFQUFBdk0sS0FBQTRJLE1BR0EzRixFQUFBMkssVUFBQTNLLEVBQUFrQixrQkFDQWxCLEVBQUFrQixpQkFBQSxlQUFBLFdBQ0FzRixFQUFBb0UsU0FBQXBFLEVBQUFvRSxPQUFBN0MsUUFBQXdDLEtBQ0EsR0FoRUEsSUFBQUUsRUFBQTFQLEVBQUEsYUFDQThQLEVBQUE5UCxFQUFBLHFCQU1BVSxFQUFBSixRQUFBbVAsRUFNQSxJQU9BN0ksRUFQQW1KLEVBQUEsTUFDQUMsRUFBQSxPQTBEQUYsRUFBQUwsRUFBQUMsR0FNQUQsRUFBQWxOLFVBQUE4SixnQkFBQSxFQVFBb0QsRUFBQWxOLFVBQUFtTSxRQUFBLFdBQ0ExTSxLQUFBNk4sU0FDQTdOLEtBQUE2TixPQUFBSSxXQUFBQyxZQUFBbE8sS0FBQTZOLFFBQ0E3TixLQUFBNk4sT0FBQSxNQUdBN04sS0FBQW1PLE9BQ0FuTyxLQUFBbU8sS0FBQUYsV0FBQUMsWUFBQWxPLEtBQUFtTyxNQUNBbk8sS0FBQW1PLEtBQUEsS0FDQW5PLEtBQUFvTyxPQUFBLE1BR0FWLEVBQUFuTixVQUFBbU0sUUFBQW5PLEtBQUF5QixPQVNBeU4sRUFBQWxOLFVBQUE4TixPQUFBLFdBQ0EsSUFBQTVFLEVBQUF6SixLQUNBNk4sRUFBQUQsU0FBQVUsY0FBQSxVQUVBdE8sS0FBQTZOLFNBQ0E3TixLQUFBNk4sT0FBQUksV0FBQUMsWUFBQWxPLEtBQUE2TixRQUNBN04sS0FBQTZOLE9BQUEsTUFHQUEsRUFBQVUsT0FBQSxFQUNBVixFQUFBVyxJQUFBeE8sS0FBQXNGLE1BQ0F1SSxFQUFBN0MsUUFBQSxTQUFBeE4sR0FDQWlNLEVBQUFPLFFBQUEsbUJBQUF4TSxJQUdBLElBQUFpUixFQUFBYixTQUFBYyxxQkFBQSxVQUFBLEdBQ0FELEVBQ0FBLEVBQUFSLFdBQUFVLGFBQUFkLEVBQUFZLElBRUFiLFNBQUFnQixNQUFBaEIsU0FBQWlCLE1BQUFDLFlBQUFqQixHQUVBN04sS0FBQTZOLE9BQUFBLEVBRUEsb0JBQUFrQixXQUFBLFNBQUFDLEtBQUFELFVBQUFFLFlBR0F2RixXQUFBLFdBQ0EsSUFBQTBFLEVBQUFSLFNBQUFVLGNBQUEsVUFDQVYsU0FBQWlCLEtBQUFDLFlBQUFWLEdBQ0FSLFNBQUFpQixLQUFBWCxZQUFBRSxJQUNBLE1BWUFYLEVBQUFsTixVQUFBMk8sUUFBQSxTQUFBMUUsRUFBQTlHLEdBMEJBLFNBQUF5TCxJQUNBQyxJQUNBMUwsSUFHQSxTQUFBMEwsSUFDQSxHQUFBM0YsRUFBQTJFLE9BQ0EsSUFDQTNFLEVBQUEwRSxLQUFBRCxZQUFBekUsRUFBQTJFLFFBQ0EsTUFBQTVRLEdBQ0FpTSxFQUFBTyxRQUFBLHFDQUFBeE0sR0FJQSxJQUVBLElBQUE2UixFQUFBLG9DQUFBNUYsRUFBQTZGLFNBQUEsS0FDQWxCLEVBQUFSLFNBQUFVLGNBQUFlLEdBQ0EsTUFBQTdSLElBQ0E0USxFQUFBUixTQUFBVSxjQUFBLFdBQ0FyRixLQUFBUSxFQUFBNkYsU0FDQWxCLEVBQUFJLElBQUEsZUFHQUosRUFBQWxHLEdBQUF1QixFQUFBNkYsU0FFQTdGLEVBQUEwRSxLQUFBVyxZQUFBVixHQUNBM0UsRUFBQTJFLE9BQUFBLEVBcERBLElBQUEzRSxFQUFBekosS0FFQSxJQUFBQSxLQUFBbU8sS0FBQSxDQUNBLElBR0FDLEVBSEFELEVBQUFQLFNBQUFVLGNBQUEsUUFDQWlCLEVBQUEzQixTQUFBVSxjQUFBLFlBQ0FwRyxFQUFBbEksS0FBQXNQLFNBQUEsY0FBQXRQLEtBQUE0SSxNQUdBdUYsRUFBQXFCLFVBQUEsV0FDQXJCLEVBQUFzQixNQUFBQyxTQUFBLFdBQ0F2QixFQUFBc0IsTUFBQUUsSUFBQSxVQUNBeEIsRUFBQXNCLE1BQUFHLEtBQUEsVUFDQXpCLEVBQUEwQixPQUFBM0gsRUFDQWlHLEVBQUEyQixPQUFBLE9BQ0EzQixFQUFBNEIsYUFBQSxpQkFBQSxTQUNBUixFQUFBdEcsS0FBQSxJQUNBa0YsRUFBQVcsWUFBQVMsR0FDQTNCLFNBQUFpQixLQUFBQyxZQUFBWCxHQUVBbk8sS0FBQW1PLEtBQUFBLEVBQ0FuTyxLQUFBdVAsS0FBQUEsRUFHQXZQLEtBQUFtTyxLQUFBNkIsT0FBQWhRLEtBQUFzRixNQWdDQThKLElBSUE1RSxFQUFBQSxFQUFBckUsUUFBQTZILEVBQUEsUUFDQWhPLEtBQUF1UCxLQUFBVSxNQUFBekYsRUFBQXJFLFFBQUE0SCxFQUFBLE9BRUEsSUFDQS9OLEtBQUFtTyxLQUFBK0IsU0FDQSxNQUFBMVMsSUFFQXdDLEtBQUFvTyxPQUFBK0IsWUFDQW5RLEtBQUFvTyxPQUFBZ0MsbUJBQUEsV0FDQSxhQUFBM0csRUFBQTJFLE9BQUF4SCxZQUNBdUksS0FJQW5QLEtBQUFvTyxPQUFBaUMsT0FBQWxCLCtMQy9NQSxTQUFBM0IsS0FTQSxTQUFBVCxFQUFBaE4sR0FLQSxHQUpBMk4sRUFBQW5QLEtBQUF5QixLQUFBRCxHQUNBQyxLQUFBc0osZUFBQXZKLEVBQUF1SixlQUNBdEosS0FBQThILGFBQUEvSCxFQUFBK0gsYUFFQTdFLEVBQUE2QyxTQUFBLENBQ0EsSUFBQXVILEVBQUEsV0FBQXZILFNBQUFILFNBQ0FDLEVBQUFFLFNBQUFGLEtBR0FBLElBQ0FBLEVBQUF5SCxFQUFBLElBQUEsSUFHQXJOLEtBQUFtTixHQUFBcE4sRUFBQXlGLFdBQUF2QyxFQUFBNkMsU0FBQU4sVUFDQUksSUFBQTdGLEVBQUE2RixLQUNBNUYsS0FBQW9OLEdBQUFyTixFQUFBMkYsU0FBQTJILEdBNkZBLFNBQUFpRCxFQUFBdlEsR0FDQUMsS0FBQThQLE9BQUEvUCxFQUFBK1AsUUFBQSxNQUNBOVAsS0FBQXNGLElBQUF2RixFQUFBdUYsSUFDQXRGLEtBQUFtTixLQUFBcE4sRUFBQW9OLEdBQ0FuTixLQUFBb04sS0FBQXJOLEVBQUFxTixHQUNBcE4sS0FBQXVPLE9BQUEsSUFBQXhPLEVBQUF3TyxNQUNBdk8sS0FBQXdLLFVBQUE3QyxJQUFBNUgsRUFBQXlLLEtBQUF6SyxFQUFBeUssS0FBQSxLQUNBeEssS0FBQStGLE1BQUFoRyxFQUFBZ0csTUFDQS9GLEtBQUF1USxTQUFBeFEsRUFBQXdRLFNBQ0F2USxLQUFBcUssZUFBQXRLLEVBQUFzSyxlQUNBckssS0FBQXVHLFdBQUF4RyxFQUFBd0csV0FDQXZHLEtBQUFzSixlQUFBdkosRUFBQXVKLGVBR0F0SixLQUFBcUgsSUFBQXRILEVBQUFzSCxJQUNBckgsS0FBQWlFLElBQUFsRSxFQUFBa0UsSUFDQWpFLEtBQUFzSCxXQUFBdkgsRUFBQXVILFdBQ0F0SCxLQUFBdUgsS0FBQXhILEVBQUF3SCxLQUNBdkgsS0FBQXdILEdBQUF6SCxFQUFBeUgsR0FDQXhILEtBQUF5SCxRQUFBMUgsRUFBQTBILFFBQ0F6SCxLQUFBMEgsbUJBQUEzSCxFQUFBMkgsbUJBR0ExSCxLQUFBOEgsYUFBQS9ILEVBQUErSCxhQUVBOUgsS0FBQXdRLFNBa1BBLFNBQUFDLElBQ0EsSUFBQSxJQUFBeFMsS0FBQXFTLEVBQUFJLFNBQ0FKLEVBQUFJLFNBQUFoSSxlQUFBekssSUFDQXFTLEVBQUFJLFNBQUF6UyxHQUFBMFMsUUFyWkEsSUFBQTdELEVBQUE5TyxFQUFBLHNCQUNBMFAsRUFBQTFQLEVBQUEsYUFDQStGLEVBQUEvRixFQUFBLHFCQUNBOFAsRUFBQTlQLEVBQUEscUJBQ0EySyxFQUFBM0ssRUFBQSxTQUFBLGdDQU1BVSxFQUFBSixRQUFBeU8sRUFDQXJPLEVBQUFKLFFBQUFnUyxRQUFBQSxFQXVDQXhDLEVBQUFmLEVBQUFXLEdBTUFYLEVBQUF4TSxVQUFBOEosZ0JBQUEsRUFTQTBDLEVBQUF4TSxVQUFBcVEsUUFBQSxTQUFBN1EsR0FzQkEsT0FyQkFBLEVBQUFBLE1BQ0FBLEVBQUF1RixJQUFBdEYsS0FBQXNGLE1BQ0F2RixFQUFBb04sR0FBQW5OLEtBQUFtTixHQUNBcE4sRUFBQXFOLEdBQUFwTixLQUFBb04sR0FDQXJOLEVBQUFnRyxNQUFBL0YsS0FBQStGLFFBQUEsRUFDQWhHLEVBQUFzSyxlQUFBckssS0FBQXFLLGVBQ0F0SyxFQUFBd0csV0FBQXZHLEtBQUF1RyxXQUdBeEcsRUFBQXNILElBQUFySCxLQUFBcUgsSUFDQXRILEVBQUFrRSxJQUFBakUsS0FBQWlFLElBQ0FsRSxFQUFBdUgsV0FBQXRILEtBQUFzSCxXQUNBdkgsRUFBQXdILEtBQUF2SCxLQUFBdUgsS0FDQXhILEVBQUF5SCxHQUFBeEgsS0FBQXdILEdBQ0F6SCxFQUFBMEgsUUFBQXpILEtBQUF5SCxRQUNBMUgsRUFBQTJILG1CQUFBMUgsS0FBQTBILG1CQUNBM0gsRUFBQXVKLGVBQUF0SixLQUFBc0osZUFHQXZKLEVBQUErSCxhQUFBOUgsS0FBQThILGFBRUEsSUFBQXdJLEVBQUF2USxJQVdBZ04sRUFBQXhNLFVBQUEyTyxRQUFBLFNBQUExRSxFQUFBOUcsR0FDQSxJQUFBNk0sRUFBQSxpQkFBQS9GLFFBQUE3QyxJQUFBNkMsRUFDQXFHLEVBQUE3USxLQUFBNFEsU0FBQWQsT0FBQSxPQUFBdEYsS0FBQUEsRUFBQStGLFNBQUFBLElBQ0E5RyxFQUFBekosS0FDQTZRLEVBQUEzTSxHQUFBLFVBQUFSLEdBQ0FtTixFQUFBM00sR0FBQSxRQUFBLFNBQUFsRixHQUNBeUssRUFBQU8sUUFBQSxpQkFBQWhMLEtBRUFnQixLQUFBOFEsUUFBQUQsR0FTQTlELEVBQUF4TSxVQUFBOE4sT0FBQSxXQUNBMUYsRUFBQSxZQUNBLElBQUFrSSxFQUFBN1EsS0FBQTRRLFVBQ0FuSCxFQUFBekosS0FDQTZRLEVBQUEzTSxHQUFBLE9BQUEsU0FBQXNHLEdBQ0FmLEVBQUFtRCxPQUFBcEMsS0FFQXFHLEVBQUEzTSxHQUFBLFFBQUEsU0FBQWxGLEdBQ0F5SyxFQUFBTyxRQUFBLGlCQUFBaEwsS0FFQWdCLEtBQUErUSxRQUFBRixHQTBDQTlNLEVBQUF1TSxFQUFBL1AsV0FRQStQLEVBQUEvUCxVQUFBaVEsT0FBQSxXQUNBLElBQUF6USxHQUFBZ0csTUFBQS9GLEtBQUErRixNQUFBdUgsUUFBQXROLEtBQUFtTixHQUFBSSxRQUFBdk4sS0FBQW9OLEdBQUE3RyxXQUFBdkcsS0FBQXVHLFlBR0F4RyxFQUFBc0gsSUFBQXJILEtBQUFxSCxJQUNBdEgsRUFBQWtFLElBQUFqRSxLQUFBaUUsSUFDQWxFLEVBQUF1SCxXQUFBdEgsS0FBQXNILFdBQ0F2SCxFQUFBd0gsS0FBQXZILEtBQUF1SCxLQUNBeEgsRUFBQXlILEdBQUF4SCxLQUFBd0gsR0FDQXpILEVBQUEwSCxRQUFBekgsS0FBQXlILFFBQ0ExSCxFQUFBMkgsbUJBQUExSCxLQUFBMEgsbUJBRUEsSUFBQXNKLEVBQUFoUixLQUFBZ1IsSUFBQSxJQUFBbEUsRUFBQS9NLEdBQ0EwSixFQUFBekosS0FFQSxJQUNBMkksRUFBQSxrQkFBQTNJLEtBQUE4UCxPQUFBOVAsS0FBQXNGLEtBQ0EwTCxFQUFBeEksS0FBQXhJLEtBQUE4UCxPQUFBOVAsS0FBQXNGLElBQUF0RixLQUFBdU8sT0FDQSxJQUNBLEdBQUF2TyxLQUFBOEgsYUFBQSxDQUNBa0osRUFBQUMsdUJBQUFELEVBQUFDLHVCQUFBLEdBQ0EsSUFBQSxJQUFBaFQsS0FBQStCLEtBQUE4SCxhQUNBOUgsS0FBQThILGFBQUFZLGVBQUF6SyxJQUNBK1MsRUFBQUUsaUJBQUFqVCxFQUFBK0IsS0FBQThILGFBQUE3SixLQUlBLE1BQUFULElBRUEsR0FBQSxTQUFBd0MsS0FBQThQLE9BQ0EsSUFDQTlQLEtBQUF1USxTQUNBUyxFQUFBRSxpQkFBQSxlQUFBLDRCQUVBRixFQUFBRSxpQkFBQSxlQUFBLDRCQUVBLE1BQUExVCxJQUdBLElBQ0F3VCxFQUFBRSxpQkFBQSxTQUFBLE9BQ0EsTUFBQTFULElBR0Esb0JBQUF3VCxJQUNBQSxFQUFBRyxpQkFBQSxHQUdBblIsS0FBQXNKLGlCQUNBMEgsRUFBQXJGLFFBQUEzTCxLQUFBc0osZ0JBR0F0SixLQUFBb1IsVUFDQUosRUFBQVgsT0FBQSxXQUNBNUcsRUFBQTRILFVBRUFMLEVBQUFoRyxRQUFBLFdBQ0F2QixFQUFBTyxRQUFBZ0gsRUFBQU0sZ0JBR0FOLEVBQUFaLG1CQUFBLFdBQ0EsR0FBQSxJQUFBWSxFQUFBcEssV0FBQSxDQUNBLElBQUEySyxFQUNBLElBQ0FBLEVBQUFQLEVBQUFRLGtCQUFBLGdCQUNBLE1BQUFoVSxJQUNBLDZCQUFBK1QsSUFDQVAsRUFBQVMsYUFBQSxlQUdBLElBQUFULEVBQUFwSyxhQUNBLE1BQUFvSyxFQUFBVSxRQUFBLE9BQUFWLEVBQUFVLE9BQ0FqSSxFQUFBNEgsU0FJQTNILFdBQUEsV0FDQUQsRUFBQU8sUUFBQWdILEVBQUFVLFNBQ0EsS0FLQS9JLEVBQUEsY0FBQTNJLEtBQUF3SyxNQUNBd0csRUFBQXpHLEtBQUF2SyxLQUFBd0ssTUFDQSxNQUFBaE4sR0FPQSxZQUhBa00sV0FBQSxXQUNBRCxFQUFBTyxRQUFBeE0sSUFDQSxHQUlBeUYsRUFBQTJLLFdBQ0E1TixLQUFBNEksTUFBQTBILEVBQUFxQixnQkFDQXJCLEVBQUFJLFNBQUExUSxLQUFBNEksT0FBQTVJLE9BVUFzUSxFQUFBL1AsVUFBQXFSLFVBQUEsV0FDQTVSLEtBQUErRSxLQUFBLFdBQ0EvRSxLQUFBNEssV0FTQTBGLEVBQUEvUCxVQUFBcU0sT0FBQSxTQUFBcEMsR0FDQXhLLEtBQUErRSxLQUFBLE9BQUF5RixHQUNBeEssS0FBQTRSLGFBU0F0QixFQUFBL1AsVUFBQXlKLFFBQUEsU0FBQWhMLEdBQ0FnQixLQUFBK0UsS0FBQSxRQUFBL0YsR0FDQWdCLEtBQUE0SyxTQUFBLElBU0EwRixFQUFBL1AsVUFBQXFLLFFBQUEsU0FBQWlILEdBQ0EsUUFBQSxJQUFBN1IsS0FBQWdSLEtBQUEsT0FBQWhSLEtBQUFnUixJQUFBLENBVUEsR0FOQWhSLEtBQUFvUixTQUNBcFIsS0FBQWdSLElBQUFYLE9BQUFyUSxLQUFBZ1IsSUFBQWhHLFFBQUF3QyxFQUVBeE4sS0FBQWdSLElBQUFaLG1CQUFBNUMsRUFHQXFFLEVBQ0EsSUFDQTdSLEtBQUFnUixJQUFBTCxRQUNBLE1BQUFuVCxJQUdBeUYsRUFBQTJLLGlCQUNBMEMsRUFBQUksU0FBQTFRLEtBQUE0SSxPQUdBNUksS0FBQWdSLElBQUEsT0FTQVYsRUFBQS9QLFVBQUE4USxPQUFBLFdBQ0EsSUFBQTdHLEVBQ0EsSUFDQSxJQUFBK0csRUFDQSxJQUNBQSxFQUFBdlIsS0FBQWdSLElBQUFRLGtCQUFBLGdCQUNBLE1BQUFoVSxJQUVBZ04sRUFEQSw2QkFBQStHLEVBQ0F2UixLQUFBZ1IsSUFBQWMsVUFBQTlSLEtBQUFnUixJQUFBTSxhQUVBdFIsS0FBQWdSLElBQUFNLGFBRUEsTUFBQTlULEdBQ0F3QyxLQUFBZ0ssUUFBQXhNLEdBRUEsTUFBQWdOLEdBQ0F4SyxLQUFBNE0sT0FBQXBDLElBVUE4RixFQUFBL1AsVUFBQTZRLE9BQUEsV0FDQSxZQUFBLElBQUFuTyxFQUFBOE8saUJBQUEvUixLQUFBb04sSUFBQXBOLEtBQUF1RyxZQVNBK0osRUFBQS9QLFVBQUFvUSxNQUFBLFdBQ0EzUSxLQUFBNEssV0FTQTBGLEVBQUFxQixjQUFBLEVBQ0FyQixFQUFBSSxZQUVBek4sRUFBQTJLLFdBQ0EzSyxFQUFBa04sWUFDQWxOLEVBQUFrTixZQUFBLFdBQUFNLEdBQ0F4TixFQUFBa0Isa0JBQ0FsQixFQUFBa0IsaUJBQUEsZUFBQXNNLEdBQUEsME9DaFhBLFNBQUEvQyxFQUFBM04sR0FDQSxJQUFBdUcsRUFBQXZHLEdBQUFBLEVBQUF1RyxZQUNBMEwsSUFBQTFMLElBQ0F0RyxLQUFBcUssZ0JBQUEsR0FFQXRCLEVBQUF4SyxLQUFBeUIsS0FBQUQsR0FuQ0EsSUFBQWdKLEVBQUEvSyxFQUFBLGdCQUNBZ0ksRUFBQWhJLEVBQUEsV0FDQW9ILEVBQUFwSCxFQUFBLG9CQUNBOFAsRUFBQTlQLEVBQUEscUJBQ0FpVSxFQUFBalUsRUFBQSxTQUNBMkssRUFBQTNLLEVBQUEsU0FBQSw0QkFNQVUsRUFBQUosUUFBQW9QLEVBTUEsSUFBQXNFLEVBR0EsTUFEQSxJQURBaFUsRUFBQSx3QkFDQXNQLFNBQUEsSUFDQW1FLGFBc0JBM0QsRUFBQUosRUFBQTNFLEdBTUEyRSxFQUFBbk4sVUFBQTBJLEtBQUEsVUFTQXlFLEVBQUFuTixVQUFBa00sT0FBQSxXQUNBek0sS0FBQWtTLFFBVUF4RSxFQUFBbk4sVUFBQW9LLE1BQUEsU0FBQXdILEdBS0EsU0FBQXhILElBQ0FoQyxFQUFBLFVBQ0FjLEVBQUE3QyxXQUFBLFNBQ0F1TCxJQVBBLElBQUExSSxFQUFBekosS0FVQSxHQVJBQSxLQUFBNEcsV0FBQSxVQVFBNUcsS0FBQWtOLFVBQUFsTixLQUFBK0wsU0FBQSxDQUNBLElBQUFxRyxFQUFBLEVBRUFwUyxLQUFBa04sVUFDQXZFLEVBQUEsK0NBQ0F5SixJQUNBcFMsS0FBQXVFLEtBQUEsZUFBQSxXQUNBb0UsRUFBQSxnQ0FDQXlKLEdBQUF6SCxPQUlBM0ssS0FBQStMLFdBQ0FwRCxFQUFBLCtDQUNBeUosSUFDQXBTLEtBQUF1RSxLQUFBLFFBQUEsV0FDQW9FLEVBQUEsZ0NBQ0F5SixHQUFBekgsWUFJQUEsS0FVQStDLEVBQUFuTixVQUFBMlIsS0FBQSxXQUNBdkosRUFBQSxXQUNBM0ksS0FBQWtOLFNBQUEsRUFDQWxOLEtBQUFxTyxTQUNBck8sS0FBQStFLEtBQUEsU0FTQTJJLEVBQUFuTixVQUFBcU0sT0FBQSxTQUFBcEMsR0FDQSxJQUFBZixFQUFBekosS0FDQTJJLEVBQUEsc0JBQUE2QixHQWtCQXBGLEVBQUFpTixjQUFBN0gsRUFBQXhLLEtBQUFxSixPQUFBcEMsV0FqQkEsU0FBQTZDLEVBQUFsQixFQUFBd0osR0FPQSxHQUxBLFlBQUEzSSxFQUFBN0MsWUFDQTZDLEVBQUE2QixTQUlBLFVBQUF4QixFQUFBaEgsS0FFQSxPQURBMkcsRUFBQVEsV0FDQSxFQUlBUixFQUFBTSxTQUFBRCxLQU9BLFdBQUE5SixLQUFBNEcsYUFFQTVHLEtBQUFrTixTQUFBLEVBQ0FsTixLQUFBK0UsS0FBQSxnQkFFQSxTQUFBL0UsS0FBQTRHLFdBQ0E1RyxLQUFBa1MsT0FFQXZKLEVBQUEsdUNBQUEzSSxLQUFBNEcsY0FXQThHLEVBQUFuTixVQUFBbU0sUUFBQSxXQUdBLFNBQUEzQixJQUNBcEMsRUFBQSx3QkFDQWMsRUFBQXVDLFFBQUFsSixLQUFBLFdBSkEsSUFBQTJHLEVBQUF6SixLQU9BLFNBQUFBLEtBQUE0RyxZQUNBK0IsRUFBQSw0QkFDQW9DLE1BSUFwQyxFQUFBLHdDQUNBM0ksS0FBQXVFLEtBQUEsT0FBQXdHLEtBWUEyQyxFQUFBbk4sVUFBQXlMLE1BQUEsU0FBQVcsR0FDQSxJQUFBbEQsRUFBQXpKLEtBQ0FBLEtBQUErTCxVQUFBLEVBQ0EsSUFBQXVHLEVBQUEsV0FDQTdJLEVBQUFzQyxVQUFBLEVBQ0F0QyxFQUFBMUUsS0FBQSxVQUdBSyxFQUFBbU4sY0FBQTVGLEVBQUEzTSxLQUFBcUssZUFBQSxTQUFBRyxHQUNBZixFQUFBeUYsUUFBQTFFLEVBQUE4SCxNQVVBNUUsRUFBQW5OLFVBQUErRSxJQUFBLFdBQ0EsSUFBQU8sRUFBQTdGLEtBQUE2RixVQUNBMk0sRUFBQXhTLEtBQUEwRixPQUFBLFFBQUEsT0FDQUUsRUFBQSxHQXlCQSxPQXRCQSxJQUFBNUYsS0FBQXlHLG9CQUNBWixFQUFBN0YsS0FBQXdHLGdCQUFBeUwsS0FHQWpTLEtBQUFxSyxnQkFBQXhFLEVBQUF1RCxNQUNBdkQsRUFBQTRNLElBQUEsR0FHQTVNLEVBQUFHLEVBQUExRSxPQUFBdUUsR0FHQTdGLEtBQUE0RixPQUFBLFVBQUE0TSxHQUFBLE1BQUFFLE9BQUExUyxLQUFBNEYsT0FDQSxTQUFBNE0sR0FBQSxLQUFBRSxPQUFBMVMsS0FBQTRGLFNBQ0FBLEVBQUEsSUFBQTVGLEtBQUE0RixNQUlBQyxFQUFBckgsU0FDQXFILEVBQUEsSUFBQUEsR0FJQTJNLEVBQUEsUUFEQSxJQUFBeFMsS0FBQXdGLFNBQUFnRSxRQUFBLEtBQ0EsSUFBQXhKLEtBQUF3RixTQUFBLElBQUF4RixLQUFBd0YsVUFBQUksRUFBQTVGLEtBQUFrRyxLQUFBTCwySkN6TUEsU0FBQThNLEVBQUE1UyxHQUNBQSxHQUFBQSxFQUFBdUcsY0FFQXRHLEtBQUFxSyxnQkFBQSxHQUVBckssS0FBQW1ILGtCQUFBcEgsRUFBQW9ILGtCQUNBbkgsS0FBQTRTLHNCQUFBQyxJQUFBOVMsRUFBQTZILFVBQ0E1SCxLQUFBdUosVUFBQXhKLEVBQUF3SixVQUNBdkosS0FBQTRTLHdCQUNBRSxFQUFBQyxHQUVBaEssRUFBQXhLLEtBQUF5QixLQUFBRCxHQWpEQSxJQU9BZ1QsRUFQQWhLLEVBQUEvSyxFQUFBLGdCQUNBb0gsRUFBQXBILEVBQUEsb0JBQ0FnSSxFQUFBaEksRUFBQSxXQUNBOFAsRUFBQTlQLEVBQUEscUJBQ0FpVSxFQUFBalUsRUFBQSxTQUNBMkssRUFBQTNLLEVBQUEsU0FBQSw4QkFDQTZVLEVBQUE1UCxFQUFBNlAsV0FBQTdQLEVBQUErUCxhQUVBLEdBQUEsb0JBQUFDLE9BQ0EsSUFDQUYsRUFBQS9VLEVBQUEsTUFDQSxNQUFBUixJQVNBLElBQUFzVixFQUFBRCxFQUNBQyxHQUFBLG9CQUFBRyxTQUNBSCxFQUFBQyxHQU9BclUsRUFBQUosUUFBQXFVLEVBMkJBN0UsRUFBQTZFLEVBQUE1SixHQVFBNEosRUFBQXBTLFVBQUEwSSxLQUFBLFlBTUEwSixFQUFBcFMsVUFBQThKLGdCQUFBLEVBUUFzSSxFQUFBcFMsVUFBQWtNLE9BQUEsV0FDQSxHQUFBek0sS0FBQWtULFFBQUEsQ0FLQSxJQUFBNU4sRUFBQXRGLEtBQUFzRixNQUNBaUUsRUFBQXZKLEtBQUF1SixVQUNBeEosR0FDQWdHLE1BQUEvRixLQUFBK0YsTUFDQW9CLGtCQUFBbkgsS0FBQW1ILG1CQUlBcEgsRUFBQXNILElBQUFySCxLQUFBcUgsSUFDQXRILEVBQUFrRSxJQUFBakUsS0FBQWlFLElBQ0FsRSxFQUFBdUgsV0FBQXRILEtBQUFzSCxXQUNBdkgsRUFBQXdILEtBQUF2SCxLQUFBdUgsS0FDQXhILEVBQUF5SCxHQUFBeEgsS0FBQXdILEdBQ0F6SCxFQUFBMEgsUUFBQXpILEtBQUF5SCxRQUNBMUgsRUFBQTJILG1CQUFBMUgsS0FBQTBILG1CQUNBMUgsS0FBQThILGVBQ0EvSCxFQUFBb1QsUUFBQW5ULEtBQUE4SCxjQUVBOUgsS0FBQWlJLGVBQ0FsSSxFQUFBa0ksYUFBQWpJLEtBQUFpSSxjQUdBLElBQ0FqSSxLQUFBb1QsR0FBQXBULEtBQUE0UyxzQkFBQXJKLEVBQUEsSUFBQXVKLEVBQUF4TixFQUFBaUUsR0FBQSxJQUFBdUosRUFBQXhOLEdBQUEsSUFBQXdOLEVBQUF4TixFQUFBaUUsRUFBQXhKLEdBQ0EsTUFBQWYsR0FDQSxPQUFBZ0IsS0FBQStFLEtBQUEsUUFBQS9GLFFBR0EySSxJQUFBM0gsS0FBQW9ULEdBQUFuTSxhQUNBakgsS0FBQXFLLGdCQUFBLEdBR0FySyxLQUFBb1QsR0FBQUMsVUFBQXJULEtBQUFvVCxHQUFBQyxTQUFBQyxRQUNBdFQsS0FBQXFLLGdCQUFBLEVBQ0FySyxLQUFBb1QsR0FBQW5NLFdBQUEsY0FFQWpILEtBQUFvVCxHQUFBbk0sV0FBQSxjQUdBakgsS0FBQXVULHNCQVNBWixFQUFBcFMsVUFBQWdULGtCQUFBLFdBQ0EsSUFBQTlKLEVBQUF6SixLQUVBQSxLQUFBb1QsR0FBQUksT0FBQSxXQUNBL0osRUFBQTZCLFVBRUF0TCxLQUFBb1QsR0FBQWpJLFFBQUEsV0FDQTFCLEVBQUFRLFdBRUFqSyxLQUFBb1QsR0FBQUssVUFBQSxTQUFBQyxHQUNBakssRUFBQW1ELE9BQUE4RyxFQUFBbEosT0FFQXhLLEtBQUFvVCxHQUFBcEksUUFBQSxTQUFBeE4sR0FDQWlNLEVBQUFPLFFBQUEsa0JBQUF4TSxLQVdBbVYsRUFBQXBTLFVBQUF5TCxNQUFBLFNBQUFXLEdBNENBLFNBQUFnSCxJQUNBbEssRUFBQTFFLEtBQUEsU0FJQTJFLFdBQUEsV0FDQUQsRUFBQXNDLFVBQUEsRUFDQXRDLEVBQUExRSxLQUFBLFVBQ0EsR0FuREEsSUFBQTBFLEVBQUF6SixLQUNBQSxLQUFBK0wsVUFBQSxFQUtBLElBQUEsSUFEQXFHLEVBQUF6RixFQUFBbk8sT0FDQVAsRUFBQSxFQUFBSSxFQUFBK1QsRUFBQW5VLEVBQUFJLEVBQUFKLEtBQ0EsU0FBQTZMLEdBQ0ExRSxFQUFBd08sYUFBQTlKLEVBQUFMLEVBQUFZLGVBQUEsU0FBQUcsR0FDQSxJQUFBZixFQUFBbUosc0JBQUEsQ0FFQSxJQUFBN1MsS0FDQStKLEVBQUFySCxVQUNBMUMsRUFBQWtNLFNBQUFuQyxFQUFBckgsUUFBQXdKLFVBR0F4QyxFQUFBdEMsb0JBQ0EsaUJBQUFxRCxFQUFBdkgsRUFBQTRRLE9BQUF0VSxXQUFBaUwsR0FBQUEsRUFBQWhNLFFBQ0FpTCxFQUFBdEMsa0JBQUFDLFlBQ0FySCxFQUFBa00sVUFBQSxHQVFBLElBQ0F4QyxFQUFBbUosc0JBRUFuSixFQUFBMkosR0FBQTdJLEtBQUFDLEdBRUFmLEVBQUEySixHQUFBN0ksS0FBQUMsRUFBQXpLLEdBRUEsTUFBQXZDLEdBQ0FtTCxFQUFBLDJDQUdBeUosR0FBQXVCLE1BL0JBLENBaUNBaEgsRUFBQTFPLEtBcUJBMFUsRUFBQXBTLFVBQUEwSixRQUFBLFdBQ0FsQixFQUFBeEksVUFBQTBKLFFBQUExTCxLQUFBeUIsT0FTQTJTLEVBQUFwUyxVQUFBbU0sUUFBQSxnQkFDQSxJQUFBMU0sS0FBQW9ULElBQ0FwVCxLQUFBb1QsR0FBQXJJLFNBVUE0SCxFQUFBcFMsVUFBQStFLElBQUEsV0FDQSxJQUFBTyxFQUFBN0YsS0FBQTZGLFVBQ0EyTSxFQUFBeFMsS0FBQTBGLE9BQUEsTUFBQSxLQUNBRSxFQUFBLEdBMEJBLE9BdkJBNUYsS0FBQTRGLE9BQUEsUUFBQTRNLEdBQUEsTUFBQUUsT0FBQTFTLEtBQUE0RixPQUNBLE9BQUE0TSxHQUFBLEtBQUFFLE9BQUExUyxLQUFBNEYsU0FDQUEsRUFBQSxJQUFBNUYsS0FBQTRGLE1BSUE1RixLQUFBeUcsb0JBQ0FaLEVBQUE3RixLQUFBd0csZ0JBQUF5TCxLQUlBalMsS0FBQXFLLGlCQUNBeEUsRUFBQTRNLElBQUEsSUFHQTVNLEVBQUFHLEVBQUExRSxPQUFBdUUsSUFHQXJILFNBQ0FxSCxFQUFBLElBQUFBLEdBSUEyTSxFQUFBLFFBREEsSUFBQXhTLEtBQUF3RixTQUFBZ0UsUUFBQSxLQUNBLElBQUF4SixLQUFBd0YsU0FBQSxJQUFBeEYsS0FBQXdGLFVBQUFJLEVBQUE1RixLQUFBa0csS0FBQUwsR0FVQThNLEVBQUFwUyxVQUFBMlMsTUFBQSxXQUNBLFNBQUFKLEdBQUEsaUJBQUFBLEdBQUE5UyxLQUFBaUosT0FBQTBKLEVBQUFwUyxVQUFBMEksOFBDMVJBLElBQUE2SyxFQUFBOVYsRUFBQSxZQUVBVSxFQUFBSixRQUFBLFNBQUF5QixHQUNBLElBQUF1TixFQUFBdk4sRUFBQXVOLFFBSUFDLEVBQUF4TixFQUFBd04sUUFJQWhILEVBQUF4RyxFQUFBd0csV0FHQSxJQUNBLEdBQUEsb0JBQUF1RyxrQkFBQVEsR0FBQXdHLEdBQ0EsT0FBQSxJQUFBaEgsZUFFQSxNQUFBdFAsSUFLQSxJQUNBLEdBQUEsb0JBQUF1VSxpQkFBQXhFLEdBQUFoSCxFQUNBLE9BQUEsSUFBQXdMLGVBRUEsTUFBQXZVLElBRUEsSUFBQThQLEVBQ0EsSUFDQSxPQUFBLElBQUFySyxHQUFBLFVBQUFhLE9BQUEsVUFBQWlRLEtBQUEsT0FBQSxxQkFDQSxNQUFBdlcsMktDbUhBLFNBQUF3VyxJQUNBLElBQUFyVyxFQUNBLElBQ0FBLEVBQUFXLEVBQUEyVixRQUFBdEwsTUFDQSxNQUFBbkwsSUFPQSxPQUpBRyxRQUFBLElBQUF1VyxHQUFBLFFBQUFBLElBQ0F2VyxFQUFBdVcsRUFBQUMsSUFBQUMsT0FHQXpXLEdBMUpBVyxFQUFBSSxFQUFBSixRQUFBTixFQUFBLFlBQ0FxVyxJQThHQSxXQUdBLE1BQUEsaUJBQUFDLFNBQ0FBLFFBQUFELEtBQ0FFLFNBQUFoVSxVQUFBc0QsTUFBQXRGLEtBQUErVixRQUFBRCxJQUFBQyxRQUFBMVEsWUFsSEF0RixFQUFBa1csV0FxRUEsU0FBQTdRLEdBQ0EsSUFBQThRLEVBQUF6VSxLQUFBeVUsVUFTQSxHQVBBOVEsRUFBQSxJQUFBOFEsRUFBQSxLQUFBLElBQ0F6VSxLQUFBMFUsV0FDQUQsRUFBQSxNQUFBLEtBQ0E5USxFQUFBLElBQ0E4USxFQUFBLE1BQUEsS0FDQSxJQUFBblcsRUFBQXFXLFNBQUEzVSxLQUFBNFUsTUFFQUgsRUFBQSxDQUVBLElBQUFJLEVBQUEsVUFBQTdVLEtBQUE4VSxNQUNBblIsRUFBQW1CLE9BQUEsRUFBQSxFQUFBK1AsRUFBQSxrQkFLQSxJQUFBak0sRUFBQSxFQUNBbU0sRUFBQSxFQUNBcFIsRUFBQSxHQUFBd0MsUUFBQSxjQUFBLFNBQUE2TyxHQUNBLE9BQUFBLElBQ0FwTSxJQUNBLE9BQUFvTSxJQUdBRCxFQUFBbk0sTUFJQWpGLEVBQUFtQixPQUFBaVEsRUFBQSxFQUFBRixLQWxHQXZXLEVBQUEyVyxLQTJIQSxTQUFBQyxHQUNBLElBQ0EsTUFBQUEsRUFDQTVXLEVBQUEyVixRQUFBa0IsV0FBQSxTQUVBN1csRUFBQTJWLFFBQUF0TCxNQUFBdU0sRUFFQSxNQUFBMVgsTUFqSUFjLEVBQUEwVixLQUFBQSxFQUNBMVYsRUFBQW1XLFVBMkJBLFdBSUEsUUFBQSxvQkFBQXhCLFNBQUFBLE9BQUFpQixTQUFBLGFBQUFqQixPQUFBaUIsUUFBQXBSLE9BTUEsb0JBQUE4SyxVQUFBQSxTQUFBd0gsaUJBQUF4SCxTQUFBd0gsZ0JBQUEzRixPQUFBN0IsU0FBQXdILGdCQUFBM0YsTUFBQTRGLGtCQUVBLG9CQUFBcEMsUUFBQUEsT0FBQXFCLFVBQUFyQixPQUFBcUIsUUFBQWdCLFNBQUFyQyxPQUFBcUIsUUFBQWlCLFdBQUF0QyxPQUFBcUIsUUFBQWtCLFFBR0Esb0JBQUF6RyxXQUFBQSxVQUFBRSxXQUFBRixVQUFBRSxVQUFBd0csY0FBQVQsTUFBQSxtQkFBQVUsU0FBQUMsT0FBQUMsR0FBQSxLQUFBLElBRUEsb0JBQUE3RyxXQUFBQSxVQUFBRSxXQUFBRixVQUFBRSxVQUFBd0csY0FBQVQsTUFBQSx1QkEzQ0ExVyxFQUFBMlYsUUFBQSxvQkFBQTRCLGFBQ0EsSUFBQUEsT0FBQTVCLFFBQ0E0QixPQUFBNUIsUUFBQTZCLE1Bc0tBLFdBQ0EsSUFDQSxPQUFBN0MsT0FBQThDLGFBQ0EsTUFBQXZZLEtBeEtBd1ksR0FNQTFYLEVBQUEyWCxRQUNBLGdCQUNBLGNBQ0EsWUFDQSxhQUNBLGFBQ0EsV0FtQ0EzWCxFQUFBNFgsV0FBQTNKLEVBQUEsU0FBQTRKLEdBQ0EsSUFDQSxPQUFBQyxLQUFBQyxVQUFBRixHQUNBLE1BQUFuWCxHQUNBLE1BQUEsK0JBQUFBLEVBQUFzWCxVQXFHQWhZLEVBQUFpWSxPQUFBdkMsaUZDNUhBLFNBQUF3QyxFQUFBOUIsR0FDQSxJQUFBelcsRUFBQXdZLEVBQUEsRUFFQSxJQUFBeFksS0FBQXlXLEVBQ0ErQixHQUFBQSxHQUFBLEdBQUFBLEVBQUEvQixFQUFBclQsV0FBQXBELEdBQ0F3WSxHQUFBLEVBR0EsT0FBQW5ZLEVBQUEyWCxPQUFBeFYsS0FBQWlXLElBQUFELEdBQUFuWSxFQUFBMlgsT0FBQXpYLFFBV0EsU0FBQW1ZLEVBQUFqQyxHQUVBLFNBQUEvTCxJQUVBLEdBQUFBLEVBQUFpTyxRQUFBLENBRUEsSUFBQW5OLEVBQUFkLEVBR0FrTyxHQUFBLElBQUFDLEtBQ0E3VyxFQUFBNFcsR0FBQUUsR0FBQUYsR0FDQXBOLEVBQUFtTCxLQUFBM1UsRUFDQXdKLEVBQUF1TixLQUFBRCxFQUNBdE4sRUFBQW9OLEtBQUFBLEVBQ0FFLEVBQUFGLEVBSUEsSUFBQSxJQURBbFQsRUFBQSxJQUFBc1QsTUFBQXJULFVBQUFwRixRQUNBUCxFQUFBLEVBQUFBLEVBQUEwRixFQUFBbkYsT0FBQVAsSUFDQTBGLEVBQUExRixHQUFBMkYsVUFBQTNGLEdBR0EwRixFQUFBLEdBQUFyRixFQUFBNFksT0FBQXZULEVBQUEsSUFFQSxpQkFBQUEsRUFBQSxJQUVBQSxFQUFBd1QsUUFBQSxNQUlBLElBQUF2TyxFQUFBLEVBQ0FqRixFQUFBLEdBQUFBLEVBQUEsR0FBQXdDLFFBQUEsZ0JBQUEsU0FBQTZPLEVBQUFvQyxHQUVBLEdBQUEsT0FBQXBDLEVBQUEsT0FBQUEsRUFDQXBNLElBQ0EsSUFBQXlPLEVBQUEvWSxFQUFBNFgsV0FBQWtCLEdBQ0EsR0FBQSxtQkFBQUMsRUFBQSxDQUNBLElBQUFDLEVBQUEzVCxFQUFBaUYsR0FDQW9NLEVBQUFxQyxFQUFBOVksS0FBQWtMLEVBQUE2TixHQUdBM1QsRUFBQW1CLE9BQUE4RCxFQUFBLEdBQ0FBLElBRUEsT0FBQW9NLElBSUExVyxFQUFBa1csV0FBQWpXLEtBQUFrTCxFQUFBOUYsSUFFQWdGLEVBQUEwTCxLQUFBL1YsRUFBQStWLEtBQUFDLFFBQUFELElBQUFrRCxLQUFBakQsVUFDQXpRLE1BQUE0RixFQUFBOUYsSUFhQSxPQVZBZ0YsRUFBQStMLFVBQUFBLEVBQ0EvTCxFQUFBaU8sUUFBQXRZLEVBQUFzWSxRQUFBbEMsR0FDQS9MLEVBQUE4TCxVQUFBblcsRUFBQW1XLFlBQ0E5TCxFQUFBbU0sTUFBQTBCLEVBQUE5QixHQUdBLG1CQUFBcFcsRUFBQWtaLE1BQ0FsWixFQUFBa1osS0FBQTdPLEdBR0FBLEdBdEhBckssRUFBQUksRUFBQUosUUFBQXFZLEVBQUFoTyxNQUFBZ08sRUFBQSxRQUFBQSxHQUNBTyxPQTZMQSxTQUFBSSxHQUNBLE9BQUFBLGFBQUFuWixNQUFBbVosRUFBQUcsT0FBQUgsRUFBQWhCLFFBQ0FnQixHQTlMQWhaLEVBQUFvWixRQXlKQSxXQUNBcFosRUFBQWlZLE9BQUEsS0F6SkFqWSxFQUFBaVksT0E4SEEsU0FBQXJCLEdBQ0E1VyxFQUFBMlcsS0FBQUMsR0FFQTVXLEVBQUFxWixTQUNBclosRUFBQXNaLFNBS0EsSUFBQSxJQUhBQyxHQUFBLGlCQUFBM0MsRUFBQUEsRUFBQSxJQUFBMkMsTUFBQSxVQUNBdFcsRUFBQXNXLEVBQUFyWixPQUVBUCxFQUFBLEVBQUFBLEVBQUFzRCxFQUFBdEQsSUFDQTRaLEVBQUE1WixLQUVBLE9BREFpWCxFQUFBMkMsRUFBQTVaLEdBQUFrSSxRQUFBLE1BQUEsUUFDQSxHQUNBN0gsRUFBQXNaLE1BQUF0VCxLQUFBLElBQUFxUixPQUFBLElBQUFULEVBQUE0QyxPQUFBLEdBQUEsTUFFQXhaLEVBQUFxWixNQUFBclQsS0FBQSxJQUFBcVIsT0FBQSxJQUFBVCxFQUFBLFFBNUlBNVcsRUFBQXNZLFFBbUtBLFNBQUEzTixHQUNBLElBQUFoTCxFQUFBc0QsRUFDQSxJQUFBdEQsRUFBQSxFQUFBc0QsRUFBQWpELEVBQUFzWixNQUFBcFosT0FBQVAsRUFBQXNELEVBQUF0RCxJQUNBLEdBQUFLLEVBQUFzWixNQUFBM1osR0FBQStRLEtBQUEvRixHQUNBLE9BQUEsRUFHQSxJQUFBaEwsRUFBQSxFQUFBc0QsRUFBQWpELEVBQUFxWixNQUFBblosT0FBQVAsRUFBQXNELEVBQUF0RCxJQUNBLEdBQUFLLEVBQUFxWixNQUFBMVosR0FBQStRLEtBQUEvRixHQUNBLE9BQUEsRUFHQSxPQUFBLEdBOUtBM0ssRUFBQXFXLFNBQUEzVyxFQUFBLE1BTUFNLEVBQUFxWixTQUNBclosRUFBQXNaLFNBUUF0WixFQUFBNFgsY0FNQSxJQUFBYSxnQ0NZQSxTQUFBZ0IsRUFBQUMsR0FFQSxNQURBQSxFQUFBQyxPQUFBRCxJQUNBeFosT0FBQSxLQUFBLENBR0EsSUFBQXdXLEVBQUEsd0hBQUFrRCxLQUNBRixHQUVBLEdBQUFoRCxFQUFBLENBR0EsSUFBQXRYLEVBQUF5YSxXQUFBbkQsRUFBQSxJQUVBLFFBREFBLEVBQUEsSUFBQSxNQUFBUyxlQUVBLElBQUEsUUFDQSxJQUFBLE9BQ0EsSUFBQSxNQUNBLElBQUEsS0FDQSxJQUFBLElBQ0EsT0FBQS9YLEVBQUEwYSxFQUNBLElBQUEsT0FDQSxJQUFBLE1BQ0EsSUFBQSxJQUNBLE9BQUExYSxFQUFBMmEsRUFDQSxJQUFBLFFBQ0EsSUFBQSxPQUNBLElBQUEsTUFDQSxJQUFBLEtBQ0EsSUFBQSxJQUNBLE9BQUEzYSxFQUFBNGEsRUFDQSxJQUFBLFVBQ0EsSUFBQSxTQUNBLElBQUEsT0FDQSxJQUFBLE1BQ0EsSUFBQSxJQUNBLE9BQUE1YSxFQUFBNmEsRUFDQSxJQUFBLFVBQ0EsSUFBQSxTQUNBLElBQUEsT0FDQSxJQUFBLE1BQ0EsSUFBQSxJQUNBLE9BQUE3YSxFQUFBRSxFQUNBLElBQUEsZUFDQSxJQUFBLGNBQ0EsSUFBQSxRQUNBLElBQUEsT0FDQSxJQUFBLEtBQ0EsT0FBQUYsRUFDQSxRQUNBLFVBWUEsU0FBQThhLEVBQUF2WSxHQUNBLE9BQUFBLEdBQUFvWSxFQUNBNVgsS0FBQWdZLE1BQUF4WSxFQUFBb1ksR0FBQSxJQUVBcFksR0FBQXFZLEVBQ0E3WCxLQUFBZ1ksTUFBQXhZLEVBQUFxWSxHQUFBLElBRUFyWSxHQUFBc1ksRUFDQTlYLEtBQUFnWSxNQUFBeFksRUFBQXNZLEdBQUEsSUFFQXRZLEdBQUFyQyxFQUNBNkMsS0FBQWdZLE1BQUF4WSxFQUFBckMsR0FBQSxJQUVBcUMsRUFBQSxLQVdBLFNBQUF5WSxFQUFBelksR0FDQSxPQUFBMFksRUFBQTFZLEVBQUFvWSxFQUFBLFFBQ0FNLEVBQUExWSxFQUFBcVksRUFBQSxTQUNBSyxFQUFBMVksRUFBQXNZLEVBQUEsV0FDQUksRUFBQTFZLEVBQUFyQyxFQUFBLFdBQ0FxQyxFQUFBLE1BT0EsU0FBQTBZLEVBQUExWSxFQUFBdkMsRUFBQXVMLEdBQ0EsS0FBQWhKLEVBQUF2QyxHQUdBLE9BQUF1QyxFQUFBLElBQUF2QyxFQUNBK0MsS0FBQUssTUFBQWIsRUFBQXZDLEdBQUEsSUFBQXVMLEVBRUF4SSxLQUFBbVksS0FBQTNZLEVBQUF2QyxHQUFBLElBQUF1TCxFQUFBLElBbEpBLElBQUFyTCxFQUFBLElBQ0EyYSxFQUFBLEdBQUEzYSxFQUNBMGEsRUFBQSxHQUFBQyxFQUNBRixFQUFBLEdBQUFDLEVBQ0FGLEVBQUEsT0FBQUMsRUFnQkEzWixFQUFBSixRQUFBLFNBQUFnWixFQUFBN1UsR0FDQUEsRUFBQUEsTUFDQSxJQUFBSyxTQUFBd1UsRUFDQSxHQUFBLFdBQUF4VSxHQUFBd1UsRUFBQTlZLE9BQUEsRUFDQSxPQUFBdVosRUFBQVQsR0FDQSxHQUFBLFdBQUF4VSxJQUFBLElBQUErVixNQUFBdkIsR0FDQSxPQUFBN1UsRUFBQXFXLEtBQUFKLEVBQUFwQixHQUFBa0IsRUFBQWxCLEdBRUEsTUFBQSxJQUFBblosTUFDQSx3REFDQWlZLEtBQUFDLFVBQUFpQiwyQ0M0RkEsU0FBQXlCLEVBQUFqUCxFQUFBakwsR0FHQSxPQUFBQSxFQURBLElBQUFQLEVBQUFxTyxRQUFBN0MsRUFBQWhILE1BQUFnSCxFQUFBVSxLQUFBQSxNQVFBLFNBQUF3TyxFQUFBbFAsRUFBQU8sRUFBQXhMLEdBQ0EsSUFBQXdMLEVBQ0EsT0FBQS9MLEVBQUEyYSxtQkFBQW5QLEVBQUFqTCxHQUdBLElBQUEyTCxFQUFBVixFQUFBVSxLQUNBME8sRUFBQSxJQUFBdlosV0FBQTZLLEdBQ0EyTyxFQUFBLElBQUF4WixXQUFBLEVBQUE2SyxFQUFBakwsWUFFQTRaLEVBQUEsR0FBQXhNLEVBQUE3QyxFQUFBaEgsTUFDQSxJQUFBLElBQUE3RSxFQUFBLEVBQUFBLEVBQUFpYixFQUFBMWEsT0FBQVAsSUFDQWtiLEVBQUFsYixFQUFBLEdBQUFpYixFQUFBamIsR0FHQSxPQUFBWSxFQUFBc2EsRUFBQXRaLFFBR0EsU0FBQXVaLEVBQUF0UCxFQUFBTyxFQUFBeEwsR0FDQSxJQUFBd0wsRUFDQSxPQUFBL0wsRUFBQTJhLG1CQUFBblAsRUFBQWpMLEdBR0EsSUFBQXdhLEVBQUEsSUFBQUMsV0FLQSxPQUpBRCxFQUFBaEosT0FBQSxXQUNBdkcsRUFBQVUsS0FBQTZPLEVBQUFwYSxPQUNBWCxFQUFBc1YsYUFBQTlKLEVBQUFPLEdBQUEsRUFBQXhMLElBRUF3YSxFQUFBRSxrQkFBQXpQLEVBQUFVLE1BR0EsU0FBQWdQLEVBQUExUCxFQUFBTyxFQUFBeEwsR0FDQSxJQUFBd0wsRUFDQSxPQUFBL0wsRUFBQTJhLG1CQUFBblAsRUFBQWpMLEdBR0EsR0FBQTRhLEVBQ0EsT0FBQUwsRUFBQXRQLEVBQUFPLEVBQUF4TCxHQUdBLElBQUFMLEVBQUEsSUFBQW1CLFdBQUEsR0FJQSxPQUhBbkIsRUFBQSxHQUFBbU8sRUFBQTdDLEVBQUFoSCxNQUdBakUsRUFGQSxJQUFBbUUsR0FBQXhFLEVBQUFxQixPQUFBaUssRUFBQVUsUUFvRkEsU0FBQWtQLEVBQUFsUCxHQUNBLElBQ0FBLEVBQUFtUCxFQUFBalksT0FBQThJLEdBQUFvUCxRQUFBLElBQ0EsTUFBQXBjLEdBQ0EsT0FBQSxFQUVBLE9BQUFnTixFQWdGQSxTQUFBcVAsRUFBQTNYLEVBQUE0WCxFQUFBbkcsR0FXQSxJQUFBLElBVkExVSxFQUFBLElBQUFnWSxNQUFBL1UsRUFBQTFELFFBQ0F1YixFQUFBQyxFQUFBOVgsRUFBQTFELE9BQUFtVixHQVNBMVYsRUFBQSxFQUFBQSxFQUFBaUUsRUFBQTFELE9BQUFQLEtBUEEsU0FBQUEsRUFBQWdjLEVBQUFwVixHQUNBaVYsRUFBQUcsRUFBQSxTQUFBaFAsRUFBQVIsR0FDQXhMLEVBQUFoQixHQUFBd00sRUFDQTVGLEVBQUFvRyxFQUFBaE0sS0FLQWliLENBQUFqYyxFQUFBaUUsRUFBQWpFLEdBQUE4YixHQW5XQSxJQU1BSSxFQU5BblMsRUFBQWhLLEVBQUEsVUFDQW9jLEVBQUFwYyxFQUFBLGVBQ0FxYyxFQUFBcmMsRUFBQSxxQkFDQWdjLEVBQUFoYyxFQUFBLFNBQ0EyYixFQUFBM2IsRUFBQSxVQUdBaUYsR0FBQUEsRUFBQXhELGNBQ0EwYSxFQUFBbmMsRUFBQSx1QkFVQSxJQUFBc2MsRUFBQSxvQkFBQXZMLFdBQUEsV0FBQUMsS0FBQUQsVUFBQUUsV0FRQXNMLEVBQUEsb0JBQUF4TCxXQUFBLGFBQUFDLEtBQUFELFVBQUFFLFdBTUF3SyxFQUFBYSxHQUFBQyxFQU1BamMsRUFBQXFILFNBQUEsRUFNQSxJQUFBZ0gsRUFBQXJPLEVBQUFxTyxTQUNBbkUsS0FBQSxFQUNBdUMsTUFBQSxFQUNBYyxLQUFBLEVBQ0EyTyxLQUFBLEVBQ0FsRSxRQUFBLEVBQ0FyUSxRQUFBLEVBQ0F0SCxLQUFBLEdBR0E4YixFQUFBelMsRUFBQTJFLEdBTUEzTixHQUFBOEQsS0FBQSxRQUFBMEgsS0FBQSxnQkFNQXhILEVBQUFoRixFQUFBLFFBa0JBTSxFQUFBc1YsYUFBQSxTQUFBOUosRUFBQU8sRUFBQXFRLEVBQUE3YixHQUNBLG1CQUFBd0wsSUFDQXhMLEVBQUF3TCxFQUNBQSxHQUFBLEdBR0EsbUJBQUFxUSxJQUNBN2IsRUFBQTZiLEVBQ0FBLEVBQUEsTUFHQSxJQUFBbFEsT0FBQTdDLElBQUFtQyxFQUFBVSxVQUNBN0MsRUFDQW1DLEVBQUFVLEtBQUEzSyxRQUFBaUssRUFBQVUsS0FFQSxHQUFBdkgsRUFBQXhELGFBQUErSyxhQUFBL0ssWUFDQSxPQUFBdVosRUFBQWxQLEVBQUFPLEVBQUF4TCxHQUNBLEdBQUFtRSxHQUFBd0gsYUFBQXZILEVBQUFELEtBQ0EsT0FBQXdXLEVBQUExUCxFQUFBTyxFQUFBeEwsR0FJQSxHQUFBMkwsR0FBQUEsRUFBQWhKLE9BQ0EsT0FBQXVYLEVBQUFqUCxFQUFBakwsR0FJQSxJQUFBOGIsRUFBQWhPLEVBQUE3QyxFQUFBaEgsTUFPQSxZQUpBNkUsSUFBQW1DLEVBQUFVLE9BQ0FtUSxHQUFBRCxFQUFBZixFQUFBclksT0FBQTJXLE9BQUFuTyxFQUFBVSxPQUFBb1AsUUFBQSxJQUFBM0IsT0FBQW5PLEVBQUFVLE9BR0EzTCxFQUFBLEdBQUE4YixJQW1FQXJjLEVBQUEyYSxtQkFBQSxTQUFBblAsRUFBQWpMLEdBQ0EsSUFBQXlYLEVBQUEsSUFBQWhZLEVBQUFxTyxRQUFBN0MsRUFBQWhILE1BQ0EsR0FBQUUsR0FBQThHLEVBQUFVLGdCQUFBdkgsRUFBQUQsS0FBQSxDQUNBLElBQUFxVyxFQUFBLElBQUFDLFdBS0EsT0FKQUQsRUFBQWhKLE9BQUEsV0FDQSxJQUFBb0MsRUFBQTRHLEVBQUFwYSxPQUFBNFksTUFBQSxLQUFBLEdBQ0FoWixFQUFBeVgsRUFBQTdELElBRUE0RyxFQUFBdUIsY0FBQTlRLEVBQUFVLE1BR0EsSUFBQXFRLEVBQ0EsSUFDQUEsRUFBQTVDLE9BQUE2QyxhQUFBalgsTUFBQSxLQUFBLElBQUFsRSxXQUFBbUssRUFBQVUsT0FDQSxNQUFBaE4sR0FJQSxJQUFBLElBRkF1ZCxFQUFBLElBQUFwYixXQUFBbUssRUFBQVUsTUFDQXdRLEVBQUEsSUFBQS9ELE1BQUE4RCxFQUFBdmMsUUFDQVAsRUFBQSxFQUFBQSxFQUFBOGMsRUFBQXZjLE9BQUFQLElBQ0ErYyxFQUFBL2MsR0FBQThjLEVBQUE5YyxHQUVBNGMsRUFBQTVDLE9BQUE2QyxhQUFBalgsTUFBQSxLQUFBbVgsR0FHQSxPQURBMUUsR0FBQXJULEVBQUFnWSxLQUFBSixHQUNBaGMsRUFBQXlYLElBVUFoWSxFQUFBdU8sYUFBQSxTQUFBckMsRUFBQXZELEVBQUFpVSxHQUNBLFFBQUF2VCxJQUFBNkMsRUFDQSxPQUFBeEwsRUFHQSxHQUFBLGlCQUFBd0wsRUFBQSxDQUNBLEdBQUEsTUFBQUEsRUFBQTJRLE9BQUEsR0FDQSxPQUFBN2MsRUFBQThjLG1CQUFBNVEsRUFBQXNOLE9BQUEsR0FBQTdRLEdBR0EsR0FBQWlVLElBRUEsS0FEQTFRLEVBQUFrUCxFQUFBbFAsSUFFQSxPQUFBeEwsRUFHQThELEVBQUEwSCxFQUFBMlEsT0FBQSxHQUVBLE9BQUF6SSxPQUFBNVAsSUFBQUEsR0FBQTJYLEVBQUEzWCxHQUlBMEgsRUFBQWhNLE9BQUEsR0FDQXNFLEtBQUEyWCxFQUFBM1gsR0FBQTBILEtBQUFBLEVBQUEvSSxVQUFBLEtBRUFxQixLQUFBMlgsRUFBQTNYLElBTkE5RCxFQVVBLElBQ0E4RCxFQURBLElBQUFuRCxXQUFBNkssR0FDQSxHQUNBNlEsRUFBQWhCLEVBQUE3UCxFQUFBLEdBSUEsT0FIQXhILEdBQUEsU0FBQWlFLElBQ0FvVSxFQUFBLElBQUFyWSxHQUFBcVksTUFFQXZZLEtBQUEyWCxFQUFBM1gsR0FBQTBILEtBQUE2USxJQW1CQS9jLEVBQUE4YyxtQkFBQSxTQUFBM1EsRUFBQXhELEdBQ0EsSUFBQW5FLEVBQUEyWCxFQUFBaFEsRUFBQTBRLE9BQUEsSUFDQSxJQUFBaEIsRUFDQSxPQUFBclgsS0FBQUEsRUFBQTBILE1BQUFoSixRQUFBLEVBQUFnSixLQUFBQyxFQUFBcU4sT0FBQSxLQUdBLElBQUF0TixFQUFBMlAsRUFBQXpZLE9BQUErSSxFQUFBcU4sT0FBQSxJQU1BLE1BSkEsU0FBQTdRLEdBQUFqRSxJQUNBd0gsRUFBQSxJQUFBeEgsR0FBQXdILE1BR0ExSCxLQUFBQSxFQUFBMEgsS0FBQUEsSUFtQkFsTSxFQUFBaVUsY0FBQSxTQUFBNUYsRUFBQXRDLEVBQUF4TCxHQW9CQSxTQUFBeWMsRUFBQWhGLEdBQ0EsT0FBQUEsRUFBQTlYLE9BQUEsSUFBQThYLEVBcEJBLG1CQUFBak0sSUFDQXhMLEVBQUF3TCxFQUNBQSxFQUFBLE1BR0EsSUFBQWtHLEVBQUE2SixFQUFBek4sR0FFQSxPQUFBdEMsR0FBQWtHLEVBQ0F2TixJQUFBeVcsRUFDQW5iLEVBQUFpZCxvQkFBQTVPLEVBQUE5TixHQUdBUCxFQUFBa2QsMkJBQUE3TyxFQUFBOU4sR0FHQThOLEVBQUFuTyxZQWNBcWIsRUFBQWxOLEVBTkEsU0FBQTdDLEVBQUEyUixHQUNBbmQsRUFBQXNWLGFBQUE5SixJQUFBeUcsR0FBQWxHLEdBQUEsRUFBQSxTQUFBaU0sR0FDQW1GLEVBQUEsS0FBQUgsRUFBQWhGLE9BSUEsU0FBQXRYLEVBQUEwYyxHQUNBLE9BQUE3YyxFQUFBNmMsRUFBQTNILEtBQUEsT0FkQWxWLEVBQUEsT0E4Q0FQLEVBQUErVCxjQUFBLFNBQUE3SCxFQUFBdkQsRUFBQXBJLEdBQ0EsR0FBQSxpQkFBQTJMLEVBQ0EsT0FBQWxNLEVBQUFxZCxzQkFBQW5SLEVBQUF2RCxFQUFBcEksR0FHQSxtQkFBQW9JLElBQ0FwSSxFQUFBb0ksRUFDQUEsRUFBQSxNQUdBLElBQUE2QyxFQUNBLEdBQUEsS0FBQVUsRUFFQSxPQUFBM0wsRUFBQUcsRUFBQSxFQUFBLEdBS0EsSUFBQSxJQUZBdEIsRUFBQStNLEVBQUFqTSxFQUFBLEdBRUFQLEVBQUEsRUFBQUksRUFBQW1NLEVBQUFoTSxPQUFBUCxFQUFBSSxFQUFBSixJQUFBLENBQ0EsSUFBQTJkLEVBQUFwUixFQUFBMlEsT0FBQWxkLEdBRUEsR0FBQSxNQUFBMmQsRUFBQSxDQUtBLEdBQUEsS0FBQXBkLEdBQUFBLElBQUFkLEVBQUFnVixPQUFBbFUsSUFFQSxPQUFBSyxFQUFBRyxFQUFBLEVBQUEsR0FLQSxHQUZBeUwsRUFBQUQsRUFBQXNOLE9BQUE3WixFQUFBLEVBQUFQLEdBRUFjLEdBQUFpTSxFQUFBak0sT0FFQSxPQUFBSyxFQUFBRyxFQUFBLEVBQUEsR0FHQSxHQUFBeUwsRUFBQWpNLE9BQUEsQ0FHQSxHQUZBc0wsRUFBQXhMLEVBQUF1TyxhQUFBcEMsRUFBQXhELEdBQUEsR0FFQWpJLEVBQUE4RCxPQUFBZ0gsRUFBQWhILE1BQUE5RCxFQUFBd0wsT0FBQVYsRUFBQVUsS0FFQSxPQUFBM0wsRUFBQUcsRUFBQSxFQUFBLEdBSUEsSUFBQSxJQURBSCxFQUFBaUwsRUFBQTdMLEVBQUFQLEVBQUFXLEdBQ0EsT0FJQUosR0FBQVAsRUFDQWMsRUFBQSxRQTlCQUEsR0FBQW9kLEVBaUNBLE1BQUEsS0FBQXBkLEVBRUFLLEVBQUFHLEVBQUEsRUFBQSxRQUZBLEdBcUJBVixFQUFBa2QsMkJBQUEsU0FBQTdPLEVBQUE5TixHQUNBLElBQUE4TixFQUFBbk8sT0FDQSxPQUFBSyxFQUFBLElBQUFZLFlBQUEsSUFTQW9hLEVBQUFsTixFQU5BLFNBQUE3QyxFQUFBMlIsR0FDQW5kLEVBQUFzVixhQUFBOUosR0FBQSxHQUFBLEVBQUEsU0FBQVUsR0FDQSxPQUFBaVIsRUFBQSxLQUFBalIsTUFJQSxTQUFBeEwsRUFBQTZjLEdBQ0EsSUFBQUMsRUFBQUQsRUFBQUUsT0FBQSxTQUFBQyxFQUFBaGEsR0FDQSxJQUFBVCxFQU1BLE9BSkFBLEVBREEsaUJBQUFTLEVBQ0FBLEVBQUF4RCxPQUVBd0QsRUFBQXpDLFdBRUF5YyxFQUFBemEsRUFBQTBhLFdBQUF6ZCxPQUFBK0MsRUFBQSxHQUNBLEdBRUEyYSxFQUFBLElBQUF2YyxXQUFBbWMsR0FFQUssRUFBQSxFQThCQSxPQTdCQU4sRUFBQU8sUUFBQSxTQUFBcGEsR0FDQSxJQUFBcWEsRUFBQSxpQkFBQXJhLEVBQ0FzYSxFQUFBdGEsRUFDQSxHQUFBcWEsRUFBQSxDQUVBLElBQUEsSUFEQUUsRUFBQSxJQUFBNWMsV0FBQXFDLEVBQUF4RCxRQUNBUCxFQUFBLEVBQUFBLEVBQUErRCxFQUFBeEQsT0FBQVAsSUFDQXNlLEVBQUF0ZSxHQUFBK0QsRUFBQVgsV0FBQXBELEdBRUFxZSxFQUFBQyxFQUFBMWMsT0FJQXFjLEVBQUFDLEtBREFFLEVBQ0EsRUFFQSxFQUlBLElBQUEsSUFEQUcsRUFBQUYsRUFBQS9jLFdBQUEwYyxXQUNBaGUsRUFBQSxFQUFBQSxFQUFBdWUsRUFBQWhlLE9BQUFQLElBQ0FpZSxFQUFBQyxLQUFBekcsU0FBQThHLEVBQUF2ZSxJQUVBaWUsRUFBQUMsS0FBQSxJQUdBLElBQUEsSUFEQUksRUFBQSxJQUFBNWMsV0FBQTJjLEdBQ0FyZSxFQUFBLEVBQUFBLEVBQUFzZSxFQUFBL2QsT0FBQVAsSUFDQWllLEVBQUFDLEtBQUFJLEVBQUF0ZSxLQUlBWSxFQUFBcWQsRUFBQXJjLFdBUUF2QixFQUFBaWQsb0JBQUEsU0FBQTVPLEVBQUE5TixHQWdDQWdiLEVBQUFsTixFQS9CQSxTQUFBN0MsRUFBQTJSLEdBQ0FuZCxFQUFBc1YsYUFBQTlKLEdBQUEsR0FBQSxFQUFBLFNBQUE2USxHQUNBLElBQUE4QixFQUFBLElBQUE5YyxXQUFBLEdBRUEsR0FEQThjLEVBQUEsR0FBQSxFQUNBLGlCQUFBOUIsRUFBQSxDQUVBLElBQUEsSUFEQTRCLEVBQUEsSUFBQTVjLFdBQUFnYixFQUFBbmMsUUFDQVAsRUFBQSxFQUFBQSxFQUFBMGMsRUFBQW5jLE9BQUFQLElBQ0FzZSxFQUFBdGUsR0FBQTBjLEVBQUF0WixXQUFBcEQsR0FFQTBjLEVBQUE0QixFQUFBMWMsT0FDQTRjLEVBQUEsR0FBQSxFQVNBLElBQUEsSUFGQUQsR0FKQTdCLGFBQUFsYixZQUNBa2IsRUFBQXBiLFdBQ0FvYixFQUFBclgsTUFFQTJZLFdBQ0FTLEVBQUEsSUFBQS9jLFdBQUE2YyxFQUFBaGUsT0FBQSxHQUNBUCxFQUFBLEVBQUFBLEVBQUF1ZSxFQUFBaGUsT0FBQVAsSUFDQXllLEVBQUF6ZSxHQUFBeVgsU0FBQThHLEVBQUF2ZSxJQUlBLEdBRkF5ZSxFQUFBRixFQUFBaGUsUUFBQSxJQUVBd0UsRUFBQSxDQUNBLElBQUEyWixFQUFBLElBQUEzWixHQUFBeVosRUFBQTVjLE9BQUE2YyxFQUFBN2MsT0FBQThhLElBQ0FjLEVBQUEsS0FBQWtCLE9BS0EsU0FBQTNkLEVBQUEwYyxHQUNBLE9BQUE3YyxFQUFBLElBQUFtRSxFQUFBMFksT0FhQXBkLEVBQUFxZCxzQkFBQSxTQUFBblIsRUFBQXZELEVBQUFwSSxHQUNBLG1CQUFBb0ksSUFDQXBJLEVBQUFvSSxFQUNBQSxFQUFBLE1BTUEsSUFIQSxJQUFBMlYsRUFBQXBTLEVBQ0FxUyxLQUVBRCxFQUFBcmQsV0FBQSxHQUFBLENBS0EsSUFBQSxJQUpBdWQsRUFBQSxJQUFBbmQsV0FBQWlkLEdBQ0FQLEVBQUEsSUFBQVMsRUFBQSxHQUNBQyxFQUFBLEdBRUE5ZSxFQUFBLEVBQ0EsTUFBQTZlLEVBQUE3ZSxHQURBQSxJQUFBLENBSUEsR0FBQThlLEVBQUF2ZSxPQUFBLElBQ0EsT0FBQUssRUFBQUcsRUFBQSxFQUFBLEdBR0ErZCxHQUFBRCxFQUFBN2UsR0FHQTJlLEVBQUF2QyxFQUFBdUMsRUFBQSxFQUFBRyxFQUFBdmUsUUFDQXVlLEVBQUFySCxTQUFBcUgsR0FFQSxJQUFBdFMsRUFBQTRQLEVBQUF1QyxFQUFBLEVBQUFHLEdBQ0EsR0FBQVYsRUFDQSxJQUNBNVIsRUFBQXdOLE9BQUE2QyxhQUFBalgsTUFBQSxLQUFBLElBQUFsRSxXQUFBOEssSUFDQSxNQUFBak4sR0FFQSxJQUFBdWQsRUFBQSxJQUFBcGIsV0FBQThLLEdBQ0FBLEVBQUEsR0FDQSxJQUFBeE0sRUFBQSxFQUFBQSxFQUFBOGMsRUFBQXZjLE9BQUFQLElBQ0F3TSxHQUFBd04sT0FBQTZDLGFBQUFDLEVBQUE5YyxJQUtBNGUsRUFBQXZZLEtBQUFtRyxHQUNBbVMsRUFBQXZDLEVBQUF1QyxFQUFBRyxHQUdBLElBQUEzSyxFQUFBeUssRUFBQXJlLE9BQ0FxZSxFQUFBVCxRQUFBLFNBQUF2YyxFQUFBNUIsR0FDQVksRUFBQVAsRUFBQXVPLGFBQUFoTixFQUFBb0gsR0FBQSxHQUFBaEosRUFBQW1VLHFQQ25sQkExVCxFQUFBSixRQUFBeUosT0FBQUMsTUFBQSxTQUFBdkUsR0FDQSxJQUFBdVosS0FDQUMsRUFBQWxWLE9BQUF4SCxVQUFBbUksZUFFQSxJQUFBLElBQUF6SyxLQUFBd0YsRUFDQXdaLEVBQUExZSxLQUFBa0YsRUFBQXhGLElBQ0ErZSxFQUFBMVksS0FBQXJHLEdBR0EsT0FBQStlLDBDQ2hCQSxTQUFBRSxHQXFCQSxTQUFBQyxFQUFBQyxHQU1BLElBTEEsSUFHQW5OLEVBQ0FvTixFQUpBQyxLQUNBQyxFQUFBLEVBQ0EvZSxFQUFBNGUsRUFBQTVlLE9BR0ErZSxFQUFBL2UsSUFDQXlSLEVBQUFtTixFQUFBL2IsV0FBQWtjLE9BQ0EsT0FBQXROLEdBQUEsT0FBQXNOLEVBQUEvZSxFQUdBLFFBQUEsT0FEQTZlLEVBQUFELEVBQUEvYixXQUFBa2MsT0FFQUQsRUFBQWhaLE9BQUEsS0FBQTJMLElBQUEsS0FBQSxLQUFBb04sR0FBQSxRQUlBQyxFQUFBaFosS0FBQTJMLEdBQ0FzTixLQUdBRCxFQUFBaFosS0FBQTJMLEdBR0EsT0FBQXFOLEVBSUEsU0FBQUUsRUFBQUMsR0FLQSxJQUpBLElBRUF4TixFQUZBelIsRUFBQWlmLEVBQUFqZixPQUNBb0ssR0FBQSxFQUVBMFUsRUFBQSxLQUNBMVUsRUFBQXBLLElBQ0F5UixFQUFBd04sRUFBQTdVLElBQ0EsUUFFQTBVLEdBQUFJLEdBREF6TixHQUFBLFNBQ0EsR0FBQSxLQUFBLE9BQ0FBLEVBQUEsTUFBQSxLQUFBQSxHQUVBcU4sR0FBQUksRUFBQXpOLEdBRUEsT0FBQXFOLEVBR0EsU0FBQUssRUFBQUMsRUFBQWhFLEdBQ0EsR0FBQWdFLEdBQUEsT0FBQUEsR0FBQSxNQUFBLENBQ0EsR0FBQWhFLEVBQ0EsTUFBQXpiLE1BQ0Esb0JBQUF5ZixFQUFBM0IsU0FBQSxJQUFBNEIsY0FDQSwwQkFHQSxPQUFBLEVBRUEsT0FBQSxFQUlBLFNBQUFDLEVBQUFGLEVBQUFqVSxHQUNBLE9BQUErVCxFQUFBRSxHQUFBalUsRUFBQSxHQUFBLEtBR0EsU0FBQW9VLEVBQUFILEVBQUFoRSxHQUNBLEdBQUEsSUFBQSxXQUFBZ0UsR0FDQSxPQUFBRixFQUFBRSxHQUVBLElBQUFJLEVBQUEsR0FpQkEsT0FoQkEsSUFBQSxXQUFBSixHQUNBSSxFQUFBTixFQUFBRSxHQUFBLEVBQUEsR0FBQSxLQUVBLElBQUEsV0FBQUEsSUFDQUQsRUFBQUMsRUFBQWhFLEtBQ0FnRSxFQUFBLE9BRUFJLEVBQUFOLEVBQUFFLEdBQUEsR0FBQSxHQUFBLEtBQ0FJLEdBQUFGLEVBQUFGLEVBQUEsSUFFQSxJQUFBLFdBQUFBLEtBQ0FJLEVBQUFOLEVBQUFFLEdBQUEsR0FBQSxFQUFBLEtBQ0FJLEdBQUFGLEVBQUFGLEVBQUEsSUFDQUksR0FBQUYsRUFBQUYsRUFBQSxJQUVBSSxHQUFBTixFQUFBLEdBQUFFLEVBQUEsS0FzQkEsU0FBQUssSUFDQSxHQUFBQyxHQUFBQyxFQUNBLE1BQUFoZ0IsTUFBQSxzQkFHQSxJQUFBaWdCLEVBQUEsSUFBQUMsRUFBQUgsR0FHQSxHQUZBQSxJQUVBLE1BQUEsSUFBQUUsR0FDQSxPQUFBLEdBQUFBLEVBSUEsTUFBQWpnQixNQUFBLDZCQUdBLFNBQUFtZ0IsRUFBQTFFLEdBQ0EsSUFBQTJFLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FkLEVBRUEsR0FBQU0sRUFBQUMsRUFDQSxNQUFBaGdCLE1BQUEsc0JBR0EsR0FBQStmLEdBQUFDLEVBQ0EsT0FBQSxFQVFBLEdBSkFJLEVBQUEsSUFBQUYsRUFBQUgsR0FDQUEsSUFHQSxJQUFBLElBQUFLLEdBQ0EsT0FBQUEsRUFJQSxHQUFBLE1BQUEsSUFBQUEsR0FBQSxDQUdBLEdBRkFDLEVBQUFQLEtBQ0FMLEdBQUEsR0FBQVcsSUFBQSxFQUFBQyxJQUNBLElBQ0EsT0FBQVosRUFFQSxNQUFBemYsTUFBQSw2QkFLQSxHQUFBLE1BQUEsSUFBQW9nQixHQUFBLENBSUEsR0FIQUMsRUFBQVAsSUFDQVEsRUFBQVIsS0FDQUwsR0FBQSxHQUFBVyxJQUFBLEdBQUFDLEdBQUEsRUFBQUMsSUFDQSxLQUNBLE9BQUFkLEVBQUFDLEVBQUFoRSxHQUFBZ0UsRUFBQSxNQUVBLE1BQUF6ZixNQUFBLDZCQUtBLEdBQUEsTUFBQSxJQUFBb2dCLEtBQ0FDLEVBQUFQLElBQ0FRLEVBQUFSLElBQ0FTLEVBQUFULEtBQ0FMLEdBQUEsRUFBQVcsSUFBQSxHQUFBQyxHQUFBLEdBQ0FDLEdBQUEsRUFBQUMsSUFDQSxPQUFBZCxHQUFBLFNBQ0EsT0FBQUEsRUFJQSxNQUFBemYsTUFBQSwwQkFyTUEsSUFBQXdnQixFQUFBLGlCQUFBcmdCLEdBQUFBLEVBR0FzZ0IsRUFBQSxpQkFBQWxnQixHQUFBQSxHQUNBQSxFQUFBSixTQUFBcWdCLEdBQUFqZ0IsRUFJQW1KLEVBQUEsaUJBQUE1RSxHQUFBQSxFQUNBNEUsRUFBQTVFLFNBQUE0RSxHQUFBQSxFQUFBb0wsU0FBQXBMLElBQ0FxVixFQUFBclYsR0FLQSxJQXlMQXdXLEVBQ0FGLEVBQ0FELEVBM0xBUixFQUFBekYsT0FBQTZDLGFBNk1BbkIsR0FDQWtGLFFBQUEsUUFDQXZkLE9BdEhBLFNBQUE4YixFQUFBcmQsR0FTQSxJQVBBLElBQUE2WixHQUFBLEtBREE3WixFQUFBQSxPQUNBNlosT0FFQWtGLEVBQUEzQixFQUFBQyxHQUNBNWUsRUFBQXNnQixFQUFBdGdCLE9BQ0FvSyxHQUFBLEVBRUFtVyxFQUFBLEtBQ0FuVyxFQUFBcEssR0FFQXVnQixHQUFBaEIsRUFEQWUsRUFBQWxXLEdBQ0FnUixHQUVBLE9BQUFtRixHQTBHQXJkLE9BcEJBLFNBQUFxZCxFQUFBaGYsR0FFQSxJQUFBNlosR0FBQSxLQURBN1osRUFBQUEsT0FDQTZaLE9BRUF5RSxFQUFBbEIsRUFBQTRCLEdBQ0FaLEVBQUFFLEVBQUE3ZixPQUNBMGYsRUFBQSxFQUdBLElBRkEsSUFDQWMsRUFEQUYsTUFFQSxLQUFBRSxFQUFBVixFQUFBMUUsS0FDQWtGLEVBQUF4YSxLQUFBMGEsR0FFQSxPQUFBeEIsRUFBQXNCLEtBYUEsR0FDQSxtQkFBQUcsUUFDQSxpQkFBQUEsT0FBQUMsS0FDQUQsT0FBQUMsSUFFQUQsT0FBQSxXQUNBLE9BQUF0RixTQUVBLEdBQUFnRixJQUFBQSxFQUFBUSxTQUNBLEdBQUFQLEVBQ0FBLEVBQUF0Z0IsUUFBQXFiLE1BQ0EsQ0FDQSxJQUNBalIsS0FBQUEsZUFDQSxJQUFBLElBQUF6RSxLQUFBMFYsRUFDQWpSLEVBQUFuSyxLQUFBb2IsRUFBQTFWLEtBQUEwYSxFQUFBMWEsR0FBQTBWLEVBQUExVixTQUlBaVosRUFBQXZELEtBQUFBLEVBMVBBLENBNlBBM1osOEpDbk9BLFNBQUFvYSxFQUFBM1csR0FDQSxJQUFBQSxHQUFBLGlCQUFBQSxFQUNBLE9BQUEsRUFHQSxHQUFBMmIsRUFBQTNiLEdBQUEsQ0FDQSxJQUFBLElBQUF4RixFQUFBLEVBQUFJLEVBQUFvRixFQUFBakYsT0FBQVAsRUFBQUksRUFBQUosSUFDQSxHQUFBbWMsRUFBQTNXLEVBQUF4RixJQUNBLE9BQUEsRUFHQSxPQUFBLEVBR0EsR0FBQSxtQkFBQWdGLEVBQUE0USxRQUFBNVEsRUFBQTRRLE9BQUF3TCxVQUFBcGMsRUFBQTRRLE9BQUF3TCxTQUFBNWIsSUFDQSxtQkFBQVIsRUFBQXhELGFBQUFnRSxhQUFBaEUsYUFDQTZmLEdBQUE3YixhQUFBVCxNQUNBdWMsR0FBQTliLGFBQUErYixLQUVBLE9BQUEsRUFJQSxHQUFBL2IsRUFBQWdjLFFBQUEsbUJBQUFoYyxFQUFBZ2MsUUFBQSxJQUFBN2IsVUFBQXBGLE9BQ0EsT0FBQTRiLEVBQUEzVyxFQUFBZ2MsVUFBQSxHQUdBLElBQUEsSUFBQXhiLEtBQUFSLEVBQ0EsR0FBQXNFLE9BQUF4SCxVQUFBbUksZUFBQW5LLEtBQUFrRixFQUFBUSxJQUFBbVcsRUFBQTNXLEVBQUFRLElBQ0EsT0FBQSxFQUlBLE9BQUEsRUF0REEsSUFBQW1iLEVBQUFwaEIsRUFBQSxXQUVBaWUsRUFBQWxVLE9BQUF4SCxVQUFBMGIsU0FDQXFELEVBQUEsbUJBQUFyYyxFQUFBRCxNQUFBLDZCQUFBaVosRUFBQTFkLEtBQUEwRSxFQUFBRCxNQUNBdWMsRUFBQSxtQkFBQXRjLEVBQUF1YyxNQUFBLDZCQUFBdkQsRUFBQTFkLEtBQUEwRSxFQUFBdWMsTUFNQTlnQixFQUFBSixRQUFBOGIsdUpDaEJBLElBQUE2QixLQUFBQSxTQUVBdmQsRUFBQUosUUFBQTJZLE1BQUFtSSxTQUFBLFNBQUFwQyxHQUNBLE1BQUEsa0JBQUFmLEVBQUExZCxLQUFBeWUsNkJDTUEsSUFDQXRlLEVBQUFKLFFBQUEsb0JBQUF3TyxnQkFDQSxvQkFBQSxJQUFBQSxlQUNBLE1BQUE5TixHQUdBTixFQUFBSixTQUFBLDRCQ2RBLElBQUFrTCxLQUFBQSxRQUVBOUssRUFBQUosUUFBQSxTQUFBMGUsRUFBQXZaLEdBQ0EsR0FBQStGLEVBQUEsT0FBQXdULEVBQUF4VCxRQUFBL0YsR0FDQSxJQUFBLElBQUF4RixFQUFBLEVBQUFBLEVBQUErZSxFQUFBeGUsU0FBQVAsRUFDQSxHQUFBK2UsRUFBQS9lLEtBQUF3RixFQUFBLE9BQUF4RixFQUVBLE9BQUEsNkJDS0EsU0FBQWdGLEVBQUF5YyxHQUVBLGFBRUEsaUJBQUFoaEIsR0FBQSxpQkFBQUEsRUFBQUosUUFTQUksRUFBQUosUUFBQTJFLEVBQUEySyxTQUNBOFIsRUFBQXpjLEdBQUEsR0FDQSxTQUFBMGMsR0FDQSxJQUFBQSxFQUFBL1IsU0FDQSxNQUFBLElBQUF6UCxNQUFBLDRDQUVBLE9BQUF1aEIsRUFBQUMsSUFHQUQsRUFBQXpjLEdBdEJBLENBMEJBLG9CQUFBZ1EsT0FBQUEsT0FBQWpULEtBQUEsU0FBQWlULEVBQUEyTSxHQU1BLGFBOEJBLFNBQUFDLEVBQUF6aEIsRUFBQTBoQixHQUdBLElBQUFqUyxHQUZBaVMsRUFBQUEsR0FBQWxTLElBRUFVLGNBQUEsVUFFQVQsRUFBQWtTLEtBQUEzaEIsRUFDQTBoQixFQUFBbFIsS0FBQUUsWUFBQWpCLEdBQUFJLFdBQUFDLFlBQUFMLEdBd2JBLFNBQUFtUyxFQUFBdmMsR0FNQSxJQUFBakYsSUFBQWlGLEdBQUEsV0FBQUEsR0FBQUEsRUFBQWpGLE9BQ0FzRSxFQUFBbWQsR0FBQW5kLEtBQUFXLEdBRUEsTUFBQSxhQUFBWCxJQUFBbWQsR0FBQUMsU0FBQXpjLEtBSUEsVUFBQVgsR0FBQSxJQUFBdEUsR0FDQSxpQkFBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEtBQUFpRixHQWt3RUEsU0FBQTBjLEVBQUFDLEVBQUFuWCxHQUVBLE9BQUFtWCxFQUFBRCxVQUFBQyxFQUFBRCxTQUFBMUssZ0JBQUF4TSxFQUFBd00sY0FVQSxTQUFBNEssRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBUCxHQUFBUSxXQUFBRixHQUNBTixHQUFBUyxLQUFBSixFQUFBLFNBQUFGLEVBQUFuaUIsR0FDQSxRQUFBc2lCLEVBQUFoaUIsS0FBQTZoQixFQUFBbmlCLEVBQUFtaUIsS0FBQUksSUFLQUQsRUFBQXBCLFNBQ0FjLEdBQUFTLEtBQUFKLEVBQUEsU0FBQUYsR0FDQSxPQUFBQSxJQUFBRyxJQUFBQyxJQUtBLGlCQUFBRCxFQUNBTixHQUFBUyxLQUFBSixFQUFBLFNBQUFGLEdBQ0EsT0FBQTVXLEdBQUFqTCxLQUFBZ2lCLEVBQUFILElBQUEsSUFBQUksSUFLQUcsR0FBQTNSLEtBQUF1UixHQUNBTixHQUFBVyxPQUFBTCxFQUFBRCxFQUFBRSxJQUlBRCxFQUFBTixHQUFBVyxPQUFBTCxFQUFBRCxHQUNBTCxHQUFBUyxLQUFBSixFQUFBLFNBQUFGLEdBQ0EsT0FBQTVXLEdBQUFqTCxLQUFBZ2lCLEVBQUFILElBQUEsSUFBQUksR0FBQSxJQUFBSixFQUFBakIsWUFrUkEsU0FBQTBCLEVBQUFDLEVBQUFDLEdBQ0EsTUFBQUQsRUFBQUEsRUFBQUMsS0FBQSxJQUFBRCxFQUFBM0IsV0FDQSxPQUFBMkIsRUFxRkEsU0FBQUUsRUFBQXZlLEdBQ0EsSUFBQXdlLEtBSUEsT0FIQWhCLEdBQUFuRyxLQUFBclgsRUFBQXVTLE1BQUFrTSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFHLElBQUEsSUFFQUgsRUE0TkEsU0FBQUksRUFBQWxMLEdBQ0EsT0FBQUEsRUFFQSxTQUFBbUwsRUFBQUMsR0FDQSxNQUFBQSxFQUdBLFNBQUFDLEVBQUF2UixFQUFBd1IsRUFBQUMsRUFBQUMsR0FDQSxJQUFBN1IsRUFFQSxJQUdBRyxHQUFBZ1EsR0FBQVEsV0FBQTNRLEVBQUFHLEVBQUEyUixTQUNBOVIsRUFBQXZSLEtBQUEwUixHQUFBMEQsS0FBQThOLEdBQUFJLEtBQUFILEdBR0F6UixHQUFBZ1EsR0FBQVEsV0FBQTNRLEVBQUFHLEVBQUE2UixNQUNBaFMsRUFBQXZSLEtBQUEwUixFQUFBd1IsRUFBQUMsR0FRQUQsRUFBQTVkLFdBQUE4RCxHQUFBc0ksR0FBQXpRLE1BQUFtaUIsSUFNQSxNQUFBMVIsR0FJQXlSLEVBQUE3ZCxXQUFBOEQsR0FBQXNJLEtBc2FBLFNBQUE4UixJQUNBblUsR0FBQWpKLG9CQUFBLG1CQUFBb2QsR0FDQTlPLEVBQUF0TyxvQkFBQSxPQUFBb2QsR0FDQTlCLEdBQUErQixRQW1HQSxTQUFBQyxJQUNBamlCLEtBQUFraUIsUUFBQWpDLEdBQUFpQyxRQUFBRCxFQUFBRSxNQXdLQSxTQUFBQyxFQUFBNVgsR0FDQSxNQUFBLFNBQUFBLEdBSUEsVUFBQUEsSUFJQSxTQUFBQSxFQUNBLEtBSUFBLEtBQUFBLEVBQUEsSUFDQUEsRUFHQTZYLEdBQUFyVCxLQUFBeEUsR0FDQTRMLEtBQUEyQixNQUFBdk4sR0FHQUEsR0FHQSxTQUFBOFgsRUFBQWxDLEVBQUFuYyxFQUFBdUcsR0FDQSxJQUFBdkIsRUFJQSxRQUFBdEIsSUFBQTZDLEdBQUEsSUFBQTRWLEVBQUFqQixTQUlBLEdBSEFsVyxFQUFBLFFBQUFoRixFQUFBa0MsUUFBQW9jLEdBQUEsT0FBQTlNLGNBR0EsaUJBRkFqTCxFQUFBNFYsRUFBQW9DLGFBQUF2WixJQUVBLENBQ0EsSUFDQXVCLEVBQUE0WCxFQUFBNVgsR0FDQSxNQUFBaE4sSUFHQWlsQixHQUFBbmdCLElBQUE4ZCxFQUFBbmMsRUFBQXVHLFFBRUFBLE9BQUE3QyxFQUdBLE9BQUE2QyxFQXFTQSxTQUFBa1ksRUFBQXRDLEVBQUF1QyxFQUFBQyxFQUFBQyxHQUNBLElBQUFDLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxHQUNBQyxFQUFBSixFQUNBLFdBQ0EsT0FBQUEsRUFBQS9CLE9BRUEsV0FDQSxPQUFBYixHQUFBaUQsSUFBQTlDLEVBQUF1QyxFQUFBLEtBRUFRLEVBQUFGLElBQ0FHLEVBQUFSLEdBQUFBLEVBQUEsS0FBQTNDLEdBQUFvRCxVQUFBVixHQUFBLEdBQUEsTUFHQVcsR0FBQXJELEdBQUFvRCxVQUFBVixJQUFBLE9BQUFTLElBQUFELElBQ0FJLEdBQUFyTCxLQUFBK0gsR0FBQWlELElBQUE5QyxFQUFBdUMsSUFFQSxHQUFBVyxHQUFBQSxFQUFBLEtBQUFGLEVBQUEsQ0FHQUEsRUFBQUEsR0FBQUUsRUFBQSxHQUdBVixFQUFBQSxNQUdBVSxHQUFBSCxHQUFBLEVBRUEsR0FPQUcsR0FIQVAsRUFBQUEsR0FBQSxLQUlBOUMsR0FBQXhRLE1BQUEyUSxFQUFBdUMsRUFBQVcsRUFBQUYsU0FLQUwsS0FBQUEsRUFBQUUsSUFBQUUsSUFBQSxJQUFBSixLQUFBQyxHQWlCQSxPQWJBSixJQUNBVSxHQUFBQSxJQUFBSCxHQUFBLEVBR0FMLEVBQUFGLEVBQUEsR0FDQVUsR0FBQVYsRUFBQSxHQUFBLEdBQUFBLEVBQUEsSUFDQUEsRUFBQSxHQUNBQyxJQUNBQSxFQUFBTyxLQUFBQSxFQUNBUCxFQUFBempCLE1BQUFra0IsRUFDQVQsRUFBQXhqQixJQUFBeWpCLElBR0FBLEVBTUEsU0FBQVUsRUFBQXBELEdBQ0EsSUFBQXFELEVBQ0EzRCxFQUFBTSxFQUFBc0QsY0FDQXZELEVBQUFDLEVBQUFELFNBQ0F3RCxFQUFBQyxHQUFBekQsR0FFQSxPQUFBd0QsSUFJQUYsRUFBQTNELEVBQUFqUixLQUFBQyxZQUFBZ1IsRUFBQXhSLGNBQUE2UixJQUNBd0QsRUFBQTFELEdBQUFpRCxJQUFBTyxFQUFBLFdBRUFBLEVBQUF4VixXQUFBQyxZQUFBdVYsR0FFQSxTQUFBRSxJQUNBQSxFQUFBLFNBRUFDLEdBQUF6RCxHQUFBd0QsRUFFQUEsR0FHQSxTQUFBRSxFQUFBdkQsRUFBQXdELEdBT0EsSUFOQSxJQUFBSCxFQUFBdkQsRUFDQTJELEtBQ0FuYixFQUFBLEVBQ0FwSyxFQUFBOGhCLEVBQUE5aEIsT0FHQW9LLEVBQUFwSyxFQUFBb0ssS0FDQXdYLEVBQUFFLEVBQUExWCxJQUNBNkcsUUFJQWtVLEVBQUF2RCxFQUFBM1EsTUFBQWtVLFFBQ0FHLEdBS0EsU0FBQUgsSUFDQUksRUFBQW5iLEdBQUFvYixHQUFBQyxJQUFBN0QsRUFBQSxZQUFBLEtBQ0EyRCxFQUFBbmIsS0FDQXdYLEVBQUEzUSxNQUFBa1UsUUFBQSxLQUdBLEtBQUF2RCxFQUFBM1EsTUFBQWtVLFNBQUFPLEdBQUE5RCxLQUNBMkQsRUFBQW5iLEdBQUE0YSxFQUFBcEQsS0FHQSxTQUFBdUQsSUFDQUksRUFBQW5iLEdBQUEsT0FHQW9iLEdBQUExaEIsSUFBQThkLEVBQUEsVUFBQXVELEtBTUEsSUFBQS9hLEVBQUEsRUFBQUEsRUFBQXBLLEVBQUFvSyxJQUNBLE1BQUFtYixFQUFBbmIsS0FDQTBYLEVBQUExWCxHQUFBNkcsTUFBQWtVLFFBQUFJLEVBQUFuYixJQUlBLE9BQUEwWCxFQXdEQSxTQUFBNkQsRUFBQUMsRUFBQUMsR0FJQSxJQUFBQyxFQVlBLE9BVEFBLE9BREEsSUFBQUYsRUFBQTFWLHFCQUNBMFYsRUFBQTFWLHFCQUFBMlYsR0FBQSxVQUVBLElBQUFELEVBQUFHLGlCQUNBSCxFQUFBRyxpQkFBQUYsR0FBQSxhQU1BMWMsSUFBQTBjLEdBQUFBLEdBQUFsRSxFQUFBaUUsRUFBQUMsR0FDQXBFLEdBQUF1RSxPQUFBSixHQUFBRSxHQUdBQSxFQUtBLFNBQUFHLEVBQUFDLEVBQUFDLEdBSUEsSUFIQSxJQUFBMW1CLEVBQUEsRUFDQUksRUFBQXFtQixFQUFBbG1CLE9BRUFQLEVBQUFJLEVBQUFKLElBQ0ErbEIsR0FBQTFoQixJQUNBb2lCLEVBQUF6bUIsR0FDQSxjQUNBMG1CLEdBQUFYLEdBQUFDLElBQUFVLEVBQUExbUIsR0FBQSxlQVFBLFNBQUEybUIsRUFBQUYsRUFBQU4sRUFBQVMsRUFBQUMsRUFBQUMsR0FPQSxJQU5BLElBQUEzRSxFQUFBcEIsRUFBQXFGLEVBQUFXLEVBQUFDLEVBQUExWSxFQUNBMlksRUFBQWQsRUFBQWUseUJBQ0FDLEtBQ0FubkIsRUFBQSxFQUNBSSxFQUFBcW1CLEVBQUFsbUIsT0FFQVAsRUFBQUksRUFBQUosSUFHQSxJQUZBbWlCLEVBQUFzRSxFQUFBem1CLEtBRUEsSUFBQW1pQixFQUdBLEdBQUEsV0FBQUgsR0FBQW5kLEtBQUFzZCxHQUlBSCxHQUFBdUUsTUFBQVksRUFBQWhGLEVBQUFqQixVQUFBaUIsR0FBQUEsUUFHQSxHQUFBaUYsR0FBQXJXLEtBQUFvUixHQUlBLENBVUEsSUFUQXBCLEVBQUFBLEdBQUFrRyxFQUFBcFcsWUFBQXNWLEVBQUE5VixjQUFBLFFBR0ErVixHQUFBaUIsR0FBQXBOLEtBQUFrSSxLQUFBLEdBQUEsS0FBQSxHQUFBM0ssY0FDQXVQLEVBQUFPLEdBQUFsQixJQUFBa0IsR0FBQUMsU0FDQXhHLEVBQUF5RyxVQUFBVCxFQUFBLEdBQUEvRSxHQUFBeUYsY0FBQXRGLEdBQUE0RSxFQUFBLEdBR0F6WSxFQUFBeVksRUFBQSxHQUNBelksS0FDQXlTLEVBQUFBLEVBQUEyRyxVQUtBMUYsR0FBQXVFLE1BQUFZLEVBQUFwRyxFQUFBNEcsYUFHQTVHLEVBQUFrRyxFQUFBVyxZQUdBQyxZQUFBLFFBekJBVixFQUFBOWdCLEtBQUE4ZixFQUFBMkIsZUFBQTNGLElBa0NBLElBSEE4RSxFQUFBWSxZQUFBLEdBRUE3bkIsRUFBQSxFQUNBbWlCLEVBQUFnRixFQUFBbm5CLE1BR0EsR0FBQTZtQixHQUFBN0UsR0FBQStGLFFBQUE1RixFQUFBMEUsSUFBQSxFQUNBQyxHQUNBQSxFQUFBemdCLEtBQUE4YixRQWdCQSxHQVhBNkUsRUFBQWhGLEdBQUFnRixTQUFBN0UsRUFBQXNELGNBQUF0RCxHQUdBcEIsRUFBQW1GLEVBQUFlLEVBQUFwVyxZQUFBc1IsR0FBQSxVQUdBNkUsR0FDQVIsRUFBQXpGLEdBSUE2RixFQUVBLElBREF0WSxFQUFBLEVBQ0E2VCxFQUFBcEIsRUFBQXpTLE1BQ0EwWixHQUFBalgsS0FBQW9SLEVBQUF0ZCxNQUFBLEtBQ0EraEIsRUFBQXZnQixLQUFBOGIsR0FNQSxPQUFBOEUsRUFxQ0EsU0FBQWdCLElBQ0EsT0FBQSxFQUdBLFNBQUFDLElBQ0EsT0FBQSxFQUtBLFNBQUFDLElBQ0EsSUFDQSxPQUFBeFksR0FBQXlZLGNBQ0EsTUFBQXJuQixLQUdBLFNBQUFrRixFQUFBa2MsRUFBQWtHLEVBQUFDLEVBQUEvYixFQUFBOUcsRUFBQThpQixHQUNBLElBQUFDLEVBQUEzakIsRUFHQSxHQUFBLGlCQUFBd2pCLEVBQUEsQ0FHQSxpQkFBQUMsSUFHQS9iLEVBQUFBLEdBQUErYixFQUNBQSxPQUFBNWUsR0FFQSxJQUFBN0UsS0FBQXdqQixFQUNBcGlCLEVBQUFrYyxFQUFBdGQsRUFBQXlqQixFQUFBL2IsRUFBQThiLEVBQUF4akIsR0FBQTBqQixHQUVBLE9BQUFwRyxFQXNCQSxHQW5CQSxNQUFBNVYsR0FBQSxNQUFBOUcsR0FHQUEsRUFBQTZpQixFQUNBL2IsRUFBQStiLE9BQUE1ZSxHQUNBLE1BQUFqRSxJQUNBLGlCQUFBNmlCLEdBR0E3aUIsRUFBQThHLEVBQ0FBLE9BQUE3QyxJQUlBakUsRUFBQThHLEVBQ0FBLEVBQUErYixFQUNBQSxPQUFBNWUsS0FHQSxJQUFBakUsRUFDQUEsRUFBQXlpQixPQUNBLElBQUF6aUIsRUFDQSxPQUFBMGMsRUFlQSxPQVpBLElBQUFvRyxJQUNBQyxFQUFBL2lCLEdBQ0FBLEVBQUEsU0FBQVUsR0FJQSxPQURBNmIsS0FBQXpiLElBQUFKLEdBQ0FxaUIsRUFBQTVpQixNQUFBN0QsS0FBQTRELGFBSUE4aUIsS0FBQUQsRUFBQUMsT0FBQUQsRUFBQUMsS0FBQXpHLEdBQUF5RyxTQUVBdEcsRUFBQXRHLEtBQUEsV0FDQW1HLEdBQUE3YixNQUFBdWlCLElBQUEzbUIsS0FBQXNtQixFQUFBNWlCLEVBQUE4RyxFQUFBK2IsS0FncUJBLFNBQUFLLEVBQUF4RyxFQUFBeUcsR0FDQSxPQUFBMUcsRUFBQUMsRUFBQSxVQUNBRCxFQUFBLEtBQUEwRyxFQUFBMUgsU0FBQTBILEVBQUFBLEVBQUFoQixXQUFBLE1BRUE1RixHQUFBLFNBQUFHLEdBQUEsSUFBQUEsRUFHQUEsRUFJQSxTQUFBMEcsRUFBQTFHLEdBRUEsT0FEQUEsRUFBQXRkLE1BQUEsT0FBQXNkLEVBQUFvQyxhQUFBLFNBQUEsSUFBQXBDLEVBQUF0ZCxLQUNBc2QsRUFFQSxTQUFBMkcsRUFBQTNHLEdBQ0EsSUFBQXBMLEVBQUFnUyxHQUFBOU8sS0FBQWtJLEVBQUF0ZCxNQVFBLE9BTkFrUyxFQUNBb0wsRUFBQXRkLEtBQUFrUyxFQUFBLEdBRUFvTCxFQUFBNkcsZ0JBQUEsUUFHQTdHLEVBR0EsU0FBQThHLEVBQUExWSxFQUFBMlksR0FDQSxJQUFBbHBCLEVBQUFJLEVBQUF5RSxFQUFBc2tCLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBRUEsR0FBQSxJQUFBTCxFQUFBaEksU0FBQSxDQUtBLEdBQUE2RSxHQUFBeUQsUUFBQWpaLEtBQ0E0WSxFQUFBcEQsR0FBQTBELE9BQUFsWixHQUNBNlksRUFBQXJELEdBQUExaEIsSUFBQTZrQixFQUFBQyxHQUNBSSxFQUFBSixFQUFBSSxRQUVBLFFBQ0FILEVBQUFNLE9BQ0FOLEVBQUFHLFVBRUEsSUFBQTFrQixLQUFBMGtCLEVBQ0EsSUFBQXZwQixFQUFBLEVBQUFJLEVBQUFtcEIsRUFBQTFrQixHQUFBdEUsT0FBQVAsRUFBQUksRUFBQUosSUFDQWdpQixHQUFBN2IsTUFBQXVpQixJQUFBUSxFQUFBcmtCLEVBQUEwa0IsRUFBQTFrQixHQUFBN0UsSUFPQXdrQixHQUFBZ0YsUUFBQWpaLEtBQ0E4WSxFQUFBN0UsR0FBQWlGLE9BQUFsWixHQUNBK1ksRUFBQXRILEdBQUEySCxVQUFBTixHQUVBN0UsR0FBQW5nQixJQUFBNmtCLEVBQUFJLEtBS0EsU0FBQU0sRUFBQXJaLEVBQUEyWSxHQUNBLElBQUFoSCxFQUFBZ0gsRUFBQWhILFNBQUExSyxjQUdBLFVBQUEwSyxHQUFBMkgsR0FBQTlZLEtBQUFSLEVBQUExTCxNQUNBcWtCLEVBQUFZLFFBQUF2WixFQUFBdVosUUFHQSxVQUFBNUgsR0FBQSxhQUFBQSxJQUNBZ0gsRUFBQWEsYUFBQXhaLEVBQUF3WixjQUlBLFNBQUFDLEVBQUFDLEVBQUF2a0IsRUFBQTlFLEVBQUFrbUIsR0FHQXBoQixFQUFBRyxHQUFBRCxTQUFBRixHQUVBLElBQUF1aEIsRUFBQWlELEVBQUF0RCxFQUFBdUQsRUFBQUMsRUFBQXZJLEVBQ0E3aEIsRUFBQSxFQUNBSSxFQUFBNnBCLEVBQUExcEIsT0FDQThwQixFQUFBanFCLEVBQUEsRUFDQTRSLEVBQUF0TSxFQUFBLEdBQ0E4YyxFQUFBUixHQUFBUSxXQUFBeFEsR0FHQSxHQUFBd1EsR0FDQXBpQixFQUFBLEdBQUEsaUJBQUE0UixJQUNBc1ksR0FBQUMsWUFBQUMsR0FBQXpaLEtBQUFpQixHQUNBLE9BQUFpWSxFQUFBcE8sS0FBQSxTQUFBbFIsR0FDQSxJQUFBYSxFQUFBeWUsRUFBQVEsR0FBQTlmLEdBQ0E2WCxJQUNBOWMsRUFBQSxHQUFBc00sRUFBQTFSLEtBQUF5QixLQUFBNEksRUFBQWEsRUFBQTRGLFNBRUE0WSxFQUFBeGUsRUFBQTlGLEVBQUE5RSxFQUFBa21CLEtBSUEsR0FBQTFtQixJQUNBNm1CLEVBQUFOLEVBQUFqaEIsRUFBQXVrQixFQUFBLEdBQUF4RSxlQUFBLEVBQUF3RSxFQUFBbkQsR0FDQW9ELEVBQUFqRCxFQUFBVyxXQUVBLElBQUFYLEVBQUFVLFdBQUFwbkIsU0FDQTBtQixFQUFBaUQsR0FJQUEsR0FBQXBELEdBQUEsQ0FPQSxJQUxBcUQsR0FEQXZELEVBQUE1RSxHQUFBcEcsSUFBQXNLLEVBQUFlLEVBQUEsVUFBQTRCLElBQ0F0b0IsT0FLQVAsRUFBQUksRUFBQUosSUFDQW9xQixFQUFBbkQsRUFFQWpuQixJQUFBcXFCLElBQ0FELEVBQUFwSSxHQUFBeFgsTUFBQTRmLEdBQUEsR0FBQSxHQUdBRCxHQUlBbkksR0FBQXVFLE1BQUFLLEVBQUFWLEVBQUFrRSxFQUFBLFlBSUF4cEIsRUFBQU4sS0FBQTJwQixFQUFBanFCLEdBQUFvcUIsRUFBQXBxQixHQUdBLEdBQUFtcUIsRUFPQSxJQU5BdEksRUFBQStFLEVBQUFBLEVBQUFybUIsT0FBQSxHQUFBa2xCLGNBR0F6RCxHQUFBcEcsSUFBQWdMLEVBQUFrQyxHQUdBOW9CLEVBQUEsRUFBQUEsRUFBQW1xQixFQUFBbnFCLElBQ0FvcUIsRUFBQXhELEVBQUE1bUIsR0FDQWdvQixHQUFBalgsS0FBQXFaLEVBQUF2bEIsTUFBQSxNQUNBa2hCLEdBQUEwRCxPQUFBVyxFQUFBLGVBQ0FwSSxHQUFBZ0YsU0FBQW5GLEVBQUF1SSxLQUVBQSxFQUFBN1osSUFHQXlSLEdBQUEwSSxVQUNBMUksR0FBQTBJLFNBQUFOLEVBQUE3WixLQUdBcVIsRUFBQXdJLEVBQUF2QyxZQUFBM2YsUUFBQXlpQixHQUFBLElBQUE5SSxJQVFBLE9BQUFvSSxFQUdBLFNBQUFXLEVBQUF6SSxFQUFBbUcsRUFBQXVDLEdBS0EsSUFKQSxJQUFBVCxFQUNBakQsRUFBQW1CLEVBQUF0RyxHQUFBVyxPQUFBMkYsRUFBQW5HLEdBQUFBLEVBQ0FuaUIsRUFBQSxFQUVBLE9BQUFvcUIsRUFBQWpELEVBQUFubkIsSUFBQUEsSUFDQTZxQixHQUFBLElBQUFULEVBQUFsSixVQUNBYyxHQUFBOEksVUFBQTVFLEVBQUFrRSxJQUdBQSxFQUFBcGEsYUFDQTZhLEdBQUE3SSxHQUFBZ0YsU0FBQW9ELEVBQUEzRSxjQUFBMkUsSUFDQTVELEVBQUFOLEVBQUFrRSxFQUFBLFdBRUFBLEVBQUFwYSxXQUFBQyxZQUFBbWEsSUFJQSxPQUFBakksRUE2VkEsU0FBQTRJLEVBQUE1SSxFQUFBblgsRUFBQWdnQixHQUNBLElBQUFDLEVBQUFDLEVBQUFDLEVBQUE5RSxFQU1BN1UsRUFBQTJRLEVBQUEzUSxNQXFDQSxPQW5DQXdaLEVBQUFBLEdBQUFJLEdBQUFqSixNQVFBLE1BRkFrRSxFQUFBMkUsRUFBQUssaUJBQUFyZ0IsSUFBQWdnQixFQUFBaGdCLEtBRUFnWCxHQUFBZ0YsU0FBQTdFLEVBQUFzRCxjQUFBdEQsS0FDQWtFLEVBQUFyRSxHQUFBeFEsTUFBQTJRLEVBQUFuWCxLQVFBc2YsR0FBQWdCLG9CQUFBQyxHQUFBeGEsS0FBQXNWLElBQUFtRixHQUFBemEsS0FBQS9GLEtBR0FpZ0IsRUFBQXpaLEVBQUF5WixNQUNBQyxFQUFBMVosRUFBQTBaLFNBQ0FDLEVBQUEzWixFQUFBMlosU0FHQTNaLEVBQUEwWixTQUFBMVosRUFBQTJaLFNBQUEzWixFQUFBeVosTUFBQTVFLEVBQ0FBLEVBQUEyRSxFQUFBQyxNQUdBelosRUFBQXlaLE1BQUFBLEVBQ0F6WixFQUFBMFosU0FBQUEsRUFDQTFaLEVBQUEyWixTQUFBQSxTQUlBemhCLElBQUEyYyxFQUlBQSxFQUFBLEdBQ0FBLEVBSUEsU0FBQW9GLEVBQUFDLEVBQUFDLEdBR0EsT0FDQTNGLElBQUEsV0FDQSxJQUFBMEYsSUFTQSxPQUFBM3BCLEtBQUFpa0IsSUFBQTJGLEdBQUEvbEIsTUFBQTdELEtBQUE0RCxrQkFMQTVELEtBQUFpa0IsTUE0QkEsU0FBQTRGLEVBQUE1Z0IsR0FHQSxHQUFBQSxLQUFBNmdCLEdBQ0EsT0FBQTdnQixFQU9BLElBSEEsSUFBQThnQixFQUFBOWdCLEVBQUEsR0FBQTRVLGNBQUE1VSxFQUFBekosTUFBQSxHQUNBdkIsRUFBQStyQixHQUFBeHJCLE9BRUFQLEtBRUEsSUFEQWdMLEVBQUErZ0IsR0FBQS9yQixHQUFBOHJCLEtBQ0FELEdBQ0EsT0FBQTdnQixFQU9BLFNBQUFnaEIsRUFBQWhoQixHQUNBLElBQUFxYixFQUFBckUsR0FBQWlLLFNBQUFqaEIsR0FJQSxPQUhBcWIsSUFDQUEsRUFBQXJFLEdBQUFpSyxTQUFBamhCLEdBQUE0Z0IsRUFBQTVnQixJQUFBQSxHQUVBcWIsRUFHQSxTQUFBNkYsRUFBQS9KLEVBQUFuUSxFQUFBbWEsR0FJQSxJQUFBQyxFQUFBOUcsR0FBQXJMLEtBQUFqSSxHQUNBLE9BQUFvYSxFQUdBNXBCLEtBQUFOLElBQUEsRUFBQWtxQixFQUFBLElBQUFELEdBQUEsS0FBQUMsRUFBQSxJQUFBLE1BQ0FwYSxFQUdBLFNBQUFxYSxFQUFBbEssRUFBQW5YLEVBQUFvVSxFQUFBa04sRUFBQUMsR0FDQSxJQUFBdnNCLEVBQ0FxWixFQUFBLEVBV0EsSUFQQXJaLEVBREFvZixLQUFBa04sRUFBQSxTQUFBLFdBQ0EsRUFJQSxVQUFBdGhCLEVBQUEsRUFBQSxFQUdBaEwsRUFBQSxFQUFBQSxHQUFBLEVBR0EsV0FBQW9mLElBQ0EvRixHQUFBMkksR0FBQWlELElBQUE5QyxFQUFBL0MsRUFBQW9OLEdBQUF4c0IsSUFBQSxFQUFBdXNCLElBR0FELEdBR0EsWUFBQWxOLElBQ0EvRixHQUFBMkksR0FBQWlELElBQUE5QyxFQUFBLFVBQUFxSyxHQUFBeHNCLElBQUEsRUFBQXVzQixJQUlBLFdBQUFuTixJQUNBL0YsR0FBQTJJLEdBQUFpRCxJQUFBOUMsRUFBQSxTQUFBcUssR0FBQXhzQixHQUFBLFNBQUEsRUFBQXVzQixNQUtBbFQsR0FBQTJJLEdBQUFpRCxJQUFBOUMsRUFBQSxVQUFBcUssR0FBQXhzQixJQUFBLEVBQUF1c0IsR0FHQSxZQUFBbk4sSUFDQS9GLEdBQUEySSxHQUFBaUQsSUFBQTlDLEVBQUEsU0FBQXFLLEdBQUF4c0IsR0FBQSxTQUFBLEVBQUF1c0IsS0FLQSxPQUFBbFQsRUFHQSxTQUFBb1QsRUFBQXRLLEVBQUFuWCxFQUFBb1UsR0FHQSxJQUFBc04sRUFDQUgsRUFBQW5CLEdBQUFqSixHQUNBOUksRUFBQTBSLEVBQUE1SSxFQUFBblgsRUFBQXVoQixHQUNBRCxFQUFBLGVBQUF0SyxHQUFBaUQsSUFBQTlDLEVBQUEsYUFBQSxFQUFBb0ssR0FHQSxPQUFBaEIsR0FBQXhhLEtBQUFzSSxHQUNBQSxHQUtBcVQsRUFBQUosSUFDQWhDLEdBQUFxQyxxQkFBQXRULElBQUE4SSxFQUFBM1EsTUFBQXhHLElBSUEsU0FBQXFPLElBQ0FBLEVBQUE4SSxFQUFBLFNBQUFuWCxFQUFBLEdBQUE0VSxjQUFBNVUsRUFBQXpKLE1BQUEsTUFJQThYLEVBQUFhLFdBQUFiLElBQUEsR0FJQWdULEVBQ0FsSyxFQUNBblgsRUFDQW9VLElBQUFrTixFQUFBLFNBQUEsV0FDQUksRUFDQUgsR0FFQSxNQWlSQSxTQUFBSyxFQUFBekssRUFBQTNkLEVBQUFrZ0IsRUFBQXRqQixFQUFBeXJCLEdBQ0EsT0FBQSxJQUFBRCxFQUFBdHFCLFVBQUFpWCxLQUFBNEksRUFBQTNkLEVBQUFrZ0IsRUFBQXRqQixFQUFBeXJCLEdBMEhBLFNBQUFDLElBQ0FDLE1BQ0EsSUFBQXBkLEdBQUFxZCxRQUFBaFksRUFBQWlZLHNCQUNBalksRUFBQWlZLHNCQUFBSCxHQUVBOVgsRUFBQXZKLFdBQUFxaEIsRUFBQTlLLEdBQUFrTCxHQUFBQyxVQUdBbkwsR0FBQWtMLEdBQUFFLFFBS0EsU0FBQUMsSUFJQSxPQUhBclksRUFBQXZKLFdBQUEsV0FDQTZoQixRQUFBNWpCLElBRUE0akIsR0FBQXRMLEdBQUF1TCxNQUlBLFNBQUFDLEVBQUEzb0IsRUFBQTRvQixHQUNBLElBQUFDLEVBQ0ExdEIsRUFBQSxFQUNBMnRCLEdBQUFDLE9BQUEvb0IsR0FLQSxJQURBNG9CLEVBQUFBLEVBQUEsRUFBQSxFQUNBenRCLEVBQUEsRUFBQUEsR0FBQSxFQUFBeXRCLEVBRUFFLEVBQUEsVUFEQUQsRUFBQWxCLEdBQUF4c0IsS0FDQTJ0QixFQUFBLFVBQUFELEdBQUE3b0IsRUFPQSxPQUpBNG9CLElBQ0FFLEVBQUFFLFFBQUFGLEVBQUExQyxNQUFBcG1CLEdBR0E4b0IsRUFHQSxTQUFBRyxFQUFBOWIsRUFBQTBTLEVBQUFxSixHQUtBLElBSkEsSUFBQW5KLEVBQ0FxRixHQUFBK0QsRUFBQUMsU0FBQXZKLFFBQUE3ZSxPQUFBbW9CLEVBQUFDLFNBQUEsTUFDQXRqQixFQUFBLEVBQ0FwSyxFQUFBMHBCLEVBQUExcEIsT0FDQW9LLEVBQUFwSyxFQUFBb0ssSUFDQSxHQUFBaWEsRUFBQXFGLEVBQUF0ZixHQUFBckssS0FBQXl0QixFQUFBckosRUFBQTFTLEdBR0EsT0FBQTRTLEVBZ0xBLFNBQUFzSixFQUFBQyxFQUFBQyxHQUNBLElBQUF6akIsRUFBQUssRUFBQTZoQixFQUFBN2EsRUFBQXFjLEVBR0EsSUFBQTFqQixLQUFBd2pCLEVBZUEsR0FkQW5qQixFQUFBZ1gsR0FBQXNNLFVBQUEzakIsR0FDQWtpQixFQUFBdUIsRUFBQXBqQixHQUNBZ0gsRUFBQW1jLEVBQUF4akIsR0FDQXFPLE1BQUFtSSxRQUFBblAsS0FDQTZhLEVBQUE3YSxFQUFBLEdBQ0FBLEVBQUFtYyxFQUFBeGpCLEdBQUFxSCxFQUFBLElBR0FySCxJQUFBSyxJQUNBbWpCLEVBQUFuakIsR0FBQWdILFNBQ0FtYyxFQUFBeGpCLEtBR0EwakIsRUFBQXJNLEdBQUF1TSxTQUFBdmpCLEtBQ0EsV0FBQXFqQixFQUFBLENBQ0FyYyxFQUFBcWMsRUFBQUcsT0FBQXhjLFVBQ0FtYyxFQUFBbmpCLEdBSUEsSUFBQUwsS0FBQXFILEVBQ0FySCxLQUFBd2pCLElBQ0FBLEVBQUF4akIsR0FBQXFILEVBQUFySCxHQUNBeWpCLEVBQUF6akIsR0FBQWtpQixRQUlBdUIsRUFBQXBqQixHQUFBNmhCLEVBS0EsU0FBQW1CLEVBQUE3TCxFQUFBc00sRUFBQWpxQixHQUNBLElBQUF4RCxFQUNBMHRCLEVBQ0EvakIsRUFBQSxFQUNBcEssRUFBQXl0QixFQUFBVyxXQUFBcHVCLE9BQ0FxdUIsRUFBQTVNLEdBQUE2TSxXQUFBQyxPQUFBLGtCQUdBMUIsRUFBQWpMLE9BRUFpTCxFQUFBLFdBQ0EsR0FBQXNCLEVBQ0EsT0FBQSxFQVlBLElBVkEsSUFBQUssRUFBQXpCLElBQUFELElBQ0EyQixFQUFBeHNCLEtBQUFOLElBQUEsRUFBQTZyQixFQUFBa0IsVUFBQWxCLEVBQUF4ckIsU0FBQXdzQixHQUtBRyxFQUFBLEdBREFGLEVBQUFqQixFQUFBeHJCLFVBQUEsR0FFQW9JLEVBQUEsRUFDQXBLLEVBQUF3dEIsRUFBQW9CLE9BQUE1dUIsT0FFQW9LLEVBQUFwSyxFQUFBb0ssSUFDQW9qQixFQUFBb0IsT0FBQXhrQixHQUFBeWtCLElBQUFGLEdBTUEsT0FIQU4sRUFBQVMsV0FBQWxOLEdBQUE0TCxFQUFBbUIsRUFBQUYsSUFHQUUsRUFBQSxHQUFBM3VCLEVBQ0F5dUIsR0FJQXp1QixHQUNBcXVCLEVBQUFTLFdBQUFsTixHQUFBNEwsRUFBQSxFQUFBLElBSUFhLEVBQUFVLFlBQUFuTixHQUFBNEwsS0FDQSxJQUVBQSxFQUFBYSxFQUFBakwsU0FDQXhCLEtBQUFBLEVBQ0FnTSxNQUFBbk0sR0FBQTJILFVBQUE4RSxHQUNBM3NCLEtBQUFrZ0IsR0FBQTJILFFBQUEsR0FDQXlFLGlCQUNBdkIsT0FBQTdLLEdBQUE2SyxPQUFBdEYsVUFDQS9pQixHQUNBK3FCLG1CQUFBZCxFQUNBZSxnQkFBQWhyQixFQUNBeXFCLFVBQUEzQixJQUFBRCxJQUNBOXFCLFNBQUFpQyxFQUFBakMsU0FDQTRzQixVQUNBckIsWUFBQSxTQUFBcEosRUFBQXRqQixHQUNBLElBQUF3akIsRUFBQTVDLEdBQUE0SyxNQUFBekssRUFBQTRMLEVBQUFqc0IsS0FBQTRpQixFQUFBdGpCLEVBQ0Eyc0IsRUFBQWpzQixLQUFBc3NCLGNBQUExSixJQUFBcUosRUFBQWpzQixLQUFBK3FCLFFBRUEsT0FEQWtCLEVBQUFvQixPQUFBOW9CLEtBQUF1ZSxHQUNBQSxHQUVBNkssS0FBQSxTQUFBQyxHQUNBLElBQUEva0IsRUFBQSxFQUlBcEssRUFBQW12QixFQUFBM0IsRUFBQW9CLE9BQUE1dUIsT0FBQSxFQUNBLEdBQUFtdUIsRUFDQSxPQUFBM3NCLEtBR0EsSUFEQTJzQixHQUFBLEVBQ0EvakIsRUFBQXBLLEVBQUFvSyxJQUNBb2pCLEVBQUFvQixPQUFBeGtCLEdBQUF5a0IsSUFBQSxHQVVBLE9BTkFNLEdBQ0FkLEVBQUFTLFdBQUFsTixHQUFBNEwsRUFBQSxFQUFBLElBQ0FhLEVBQUFVLFlBQUFuTixHQUFBNEwsRUFBQTJCLEtBRUFkLEVBQUFlLFdBQUF4TixHQUFBNEwsRUFBQTJCLElBRUEzdEIsUUFHQW9zQixFQUFBSixFQUFBSSxNQUlBLElBRkFELEVBQUFDLEVBQUFKLEVBQUFqc0IsS0FBQXNzQixlQUVBempCLEVBQUFwSyxFQUFBb0ssSUFFQSxHQURBM0osRUFBQWd0QixFQUFBVyxXQUFBaGtCLEdBQUFySyxLQUFBeXRCLEVBQUE1TCxFQUFBZ00sRUFBQUosRUFBQWpzQixNQU1BLE9BSkFrZ0IsR0FBQVEsV0FBQXhoQixFQUFBeXVCLFFBQ0F6TixHQUFBNE4sWUFBQTdCLEVBQUE1TCxLQUFBNEwsRUFBQWpzQixLQUFBK3RCLE9BQUFKLEtBQ0F6TixHQUFBbGhCLE1BQUFFLEVBQUF5dUIsS0FBQXp1QixJQUVBQSxFQXlCQSxPQXJCQWdoQixHQUFBcEcsSUFBQXVTLEVBQUFMLEVBQUFDLEdBRUEvTCxHQUFBUSxXQUFBdUwsRUFBQWpzQixLQUFBWCxRQUNBNHNCLEVBQUFqc0IsS0FBQVgsTUFBQWIsS0FBQTZoQixFQUFBNEwsR0FJQUEsRUFDQStCLFNBQUEvQixFQUFBanNCLEtBQUFndUIsVUFDQXBhLEtBQUFxWSxFQUFBanNCLEtBQUE0VCxLQUFBcVksRUFBQWpzQixLQUFBb1AsVUFDQTBTLEtBQUFtSyxFQUFBanNCLEtBQUE4aEIsTUFDQWtMLE9BQUFmLEVBQUFqc0IsS0FBQWd0QixRQUVBOU0sR0FBQWtMLEdBQUE2QyxNQUNBL04sR0FBQTJILE9BQUF5RCxHQUNBakwsS0FBQUEsRUFDQTZOLEtBQUFqQyxFQUNBOEIsTUFBQTlCLEVBQUFqc0IsS0FBQSt0QixTQUlBOUIsRUFpbEJBLFNBQUFrQyxFQUFBamUsR0FFQSxPQURBQSxFQUFBK0UsTUFBQWtNLFNBQ0FuTixLQUFBLEtBSUEsU0FBQW9hLEVBQUEvTixHQUNBLE9BQUFBLEVBQUFvQyxjQUFBcEMsRUFBQW9DLGFBQUEsVUFBQSxHQSttQkEsU0FBQTRMLEVBQUFDLEVBQUE1cUIsRUFBQTZxQixFQUFBM0gsR0FDQSxJQUFBMWQsRUFFQSxHQUFBZ08sTUFBQW1JLFFBQUEzYixHQUdBd2MsR0FBQW5HLEtBQUFyVyxFQUFBLFNBQUF4RixFQUFBa1ksR0FDQW1ZLEdBQUFDLEdBQUF2ZixLQUFBcWYsR0FHQTFILEVBQUEwSCxFQUFBbFksR0FLQWlZLEVBQ0FDLEVBQUEsS0FBQSxpQkFBQWxZLEdBQUEsTUFBQUEsRUFBQWxZLEVBQUEsSUFBQSxJQUNBa1ksRUFDQW1ZLEVBQ0EzSCxVQUtBLEdBQUEySCxHQUFBLFdBQUFyTyxHQUFBbmQsS0FBQVcsR0FVQWtqQixFQUFBMEgsRUFBQTVxQixRQVBBLElBQUF3RixLQUFBeEYsRUFDQTJxQixFQUFBQyxFQUFBLElBQUFwbEIsRUFBQSxJQUFBeEYsRUFBQXdGLEdBQUFxbEIsRUFBQTNILEdBMEhBLFNBQUE2SCxFQUFBQyxHQUdBLE9BQUEsU0FBQUMsRUFBQUMsR0FFQSxpQkFBQUQsSUFDQUMsRUFBQUQsRUFDQUEsRUFBQSxLQUdBLElBQUFFLEVBQ0Ezd0IsRUFBQSxFQUNBNHdCLEVBQUFILEVBQUFqWixjQUFBVCxNQUFBa00sUUFFQSxHQUFBakIsR0FBQVEsV0FBQWtPLEdBR0EsS0FBQUMsRUFBQUMsRUFBQTV3QixNQUdBLE1BQUEyd0IsRUFBQSxJQUNBQSxFQUFBQSxFQUFBcHZCLE1BQUEsSUFBQSxLQUNBaXZCLEVBQUFHLEdBQUFILEVBQUFHLFFBQUF6WCxRQUFBd1gsS0FJQUYsRUFBQUcsR0FBQUgsRUFBQUcsUUFBQXRxQixLQUFBcXFCLElBUUEsU0FBQUcsRUFBQUwsRUFBQWhzQixFQUFBZ3JCLEVBQUFzQixHQUtBLFNBQUFDLEVBQUFKLEdBQ0EsSUFBQUssRUFjQSxPQWJBQyxFQUFBTixJQUFBLEVBQ0EzTyxHQUFBbkcsS0FBQTJVLEVBQUFHLE9BQUEsU0FBQXpOLEVBQUFnTyxHQUNBLElBQUFDLEVBQUFELEVBQUExc0IsRUFBQWdyQixFQUFBc0IsR0FDQSxNQUFBLGlCQUFBSyxHQUNBQyxHQUFBSCxFQUFBRSxHQUtBQyxJQUNBSixFQUFBRyxRQURBLEdBSEEzc0IsRUFBQW9zQixVQUFBMVgsUUFBQWlZLEdBQ0FKLEVBQUFJLElBQ0EsS0FLQUgsRUFsQkEsSUFBQUMsS0FDQUcsRUFBQVosSUFBQS9uQixHQW9CQSxPQUFBc29CLEVBQUF2c0IsRUFBQW9zQixVQUFBLE1BQUFLLEVBQUEsTUFBQUYsRUFBQSxLQU1BLFNBQUFNLEVBQUF6ZixFQUFBckIsR0FDQSxJQUFBdkssRUFBQXNyQixFQUNBQyxFQUFBdlAsR0FBQXdQLGFBQUFELGdCQUVBLElBQUF2ckIsS0FBQXVLLE9BQ0E3RyxJQUFBNkcsRUFBQXZLLE1BQ0F1ckIsRUFBQXZyQixHQUFBNEwsRUFBQTBmLElBQUFBLE9BQUF0ckIsR0FBQXVLLEVBQUF2SyxJQU9BLE9BSkFzckIsR0FDQXRQLEdBQUEySCxRQUFBLEVBQUEvWCxFQUFBMGYsR0FHQTFmLEVBT0EsU0FBQTZmLEVBQUE5eEIsRUFBQW14QixFQUFBWSxHQU9BLElBTEEsSUFBQUMsRUFBQTlzQixFQUFBK3NCLEVBQUFDLEVBQ0FDLEVBQUFueUIsRUFBQW15QixTQUNBbEIsRUFBQWp4QixFQUFBaXhCLFVBR0EsTUFBQUEsRUFBQSxJQUNBQSxFQUFBbGxCLGFBQ0FoQyxJQUFBaW9CLElBQ0FBLEVBQUFoeUIsRUFBQW95QixVQUFBakIsRUFBQXZkLGtCQUFBLGlCQUtBLEdBQUFvZSxFQUNBLElBQUE5c0IsS0FBQWl0QixFQUNBLEdBQUFBLEVBQUFqdEIsSUFBQWl0QixFQUFBanRCLEdBQUFrTSxLQUFBNGdCLEdBQUEsQ0FDQWYsRUFBQTFYLFFBQUFyVSxHQUNBLE1BTUEsR0FBQStyQixFQUFBLEtBQUFjLEVBQ0FFLEVBQUFoQixFQUFBLE9BQ0EsQ0FHQSxJQUFBL3JCLEtBQUE2c0IsRUFBQSxDQUNBLElBQUFkLEVBQUEsSUFBQWp4QixFQUFBcXlCLFdBQUFudEIsRUFBQSxJQUFBK3JCLEVBQUEsSUFBQSxDQUNBZ0IsRUFBQS9zQixFQUNBLE1BRUFndEIsSUFDQUEsRUFBQWh0QixHQUtBK3NCLEVBQUFBLEdBQUFDLEVBTUEsR0FBQUQsRUFJQSxPQUhBQSxJQUFBaEIsRUFBQSxJQUNBQSxFQUFBMVgsUUFBQTBZLEdBRUFGLEVBQUFFLEdBT0EsU0FBQUssRUFBQXR5QixFQUFBa1UsRUFBQWlkLEVBQUFvQixHQUNBLElBQUFDLEVBQUFDLEVBQUFDLEVBQUF0UixFQUFBaEksRUFDQWlaLEtBR0FwQixFQUFBanhCLEVBQUFpeEIsVUFBQXJ2QixRQUdBLEdBQUFxdkIsRUFBQSxHQUNBLElBQUF5QixLQUFBMXlCLEVBQUFxeUIsV0FDQUEsRUFBQUssRUFBQTdhLGVBQUE3WCxFQUFBcXlCLFdBQUFLLEdBT0EsSUFIQUQsRUFBQXhCLEVBQUFsbEIsUUFHQTBtQixHQWNBLEdBWkF6eUIsRUFBQTJ5QixlQUFBRixLQUNBdEIsRUFBQW54QixFQUFBMnlCLGVBQUFGLElBQUF2ZSxJQUlBa0YsR0FBQW1aLEdBQUF2eUIsRUFBQTR5QixhQUNBMWUsRUFBQWxVLEVBQUE0eUIsV0FBQTFlLEVBQUFsVSxFQUFBZ3hCLFdBR0E1WCxFQUFBcVosRUFDQUEsRUFBQXhCLEVBQUFsbEIsUUFLQSxHQUFBLE1BQUEwbUIsRUFFQUEsRUFBQXJaLE9BR0EsR0FBQSxNQUFBQSxHQUFBQSxJQUFBcVosRUFBQSxDQU1BLEtBSEFDLEVBQUFMLEVBQUFqWixFQUFBLElBQUFxWixJQUFBSixFQUFBLEtBQUFJLElBSUEsSUFBQUQsS0FBQUgsRUFJQSxJQURBalIsRUFBQW9SLEVBQUF2WSxNQUFBLE1BQ0EsS0FBQXdZLElBR0FDLEVBQUFMLEVBQUFqWixFQUFBLElBQUFnSSxFQUFBLEtBQ0FpUixFQUFBLEtBQUFqUixFQUFBLEtBQ0EsRUFHQSxJQUFBc1IsRUFDQUEsRUFBQUwsRUFBQUcsSUFHQSxJQUFBSCxFQUFBRyxLQUNBQyxFQUFBclIsRUFBQSxHQUNBNlAsRUFBQTFYLFFBQUE2SCxFQUFBLEtBRUEsTUFPQSxJQUFBLElBQUFzUixFQUdBLEdBQUFBLEdBQUExeUIsRUFBQTZ5QixPQUNBM2UsRUFBQXdlLEVBQUF4ZSxRQUVBLElBQ0FBLEVBQUF3ZSxFQUFBeGUsR0FDQSxNQUFBdFUsR0FDQSxPQUNBa3pCLE1BQUEsY0FDQXpsQixNQUFBcWxCLEVBQUE5eUIsRUFBQSxzQkFBQXdaLEVBQUEsT0FBQXFaLElBU0EsT0FBQUssTUFBQSxVQUFBbG1CLEtBQUFzSCxHQS9nUkEsSUFBQWtMLE1BRUFwUCxHQUFBcUYsRUFBQXJGLFNBRUEraUIsR0FBQTVvQixPQUFBNm9CLGVBRUFweEIsR0FBQXdkLEdBQUF4ZCxNQUVBc0UsR0FBQWtaLEdBQUFsWixPQUVBUSxHQUFBMFksR0FBQTFZLEtBRUFrRixHQUFBd1QsR0FBQXhULFFBRUFxbkIsTUFFQTVVLEdBQUE0VSxHQUFBNVUsU0FFQTZVLEdBQUFELEdBQUFub0IsZUFFQXFvQixHQUFBRCxHQUFBN1UsU0FFQStVLEdBQUFELEdBQUF4eUIsS0FBQXdKLFFBRUF3Z0IsTUFzQkF0SSxHQUFBLFNBQUFzRyxFQUFBbkMsR0FJQSxPQUFBLElBQUFuRSxHQUFBdmMsR0FBQThULEtBQUErTyxFQUFBbkMsSUFLQTZNLEdBQUEscUNBR0FDLEdBQUEsUUFDQUMsR0FBQSxZQUdBQyxHQUFBLFNBQUFDLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQXpULGVBR0FvQyxHQUFBdmMsR0FBQXVjLEdBQUExZixXQUdBZ3hCLE9BMUJBLFFBNEJBcHNCLFlBQUE4YSxHQUdBemhCLE9BQUEsRUFFQWd6QixRQUFBLFdBQ0EsT0FBQWh5QixHQUFBakIsS0FBQXlCLE9BS0Fpa0IsSUFBQSxTQUFBd04sR0FHQSxPQUFBLE1BQUFBLEVBQ0FqeUIsR0FBQWpCLEtBQUF5QixNQUlBeXhCLEVBQUEsRUFBQXp4QixLQUFBeXhCLEVBQUF6eEIsS0FBQXhCLFFBQUF3QixLQUFBeXhCLElBS0FDLFVBQUEsU0FBQWhOLEdBR0EsSUFBQUosRUFBQXJFLEdBQUF1RSxNQUFBeGtCLEtBQUFtRixjQUFBdWYsR0FNQSxPQUhBSixFQUFBcU4sV0FBQTN4QixLQUdBc2tCLEdBSUF4SyxLQUFBLFNBQUFqYixHQUNBLE9BQUFvaEIsR0FBQW5HLEtBQUE5WixLQUFBbkIsSUFHQWdiLElBQUEsU0FBQWhiLEdBQ0EsT0FBQW1CLEtBQUEweEIsVUFBQXpSLEdBQUFwRyxJQUFBN1osS0FBQSxTQUFBb2dCLEVBQUFuaUIsR0FDQSxPQUFBWSxFQUFBTixLQUFBNmhCLEVBQUFuaUIsRUFBQW1pQixPQUlBNWdCLE1BQUEsV0FDQSxPQUFBUSxLQUFBMHhCLFVBQUFseUIsR0FBQXFFLE1BQUE3RCxLQUFBNEQsYUFHQXVrQixNQUFBLFdBQ0EsT0FBQW5vQixLQUFBMG9CLEdBQUEsSUFHQWtKLEtBQUEsV0FDQSxPQUFBNXhCLEtBQUEwb0IsSUFBQSxJQUdBQSxHQUFBLFNBQUF6cUIsR0FDQSxJQUFBc0QsRUFBQXZCLEtBQUF4QixPQUNBK04sR0FBQXRPLEdBQUFBLEVBQUEsRUFBQXNELEVBQUEsR0FDQSxPQUFBdkIsS0FBQTB4QixVQUFBbmxCLEdBQUEsR0FBQUEsRUFBQWhMLEdBQUF2QixLQUFBdU0sU0FHQWxOLElBQUEsV0FDQSxPQUFBVyxLQUFBMnhCLFlBQUEzeEIsS0FBQW1GLGVBS0FiLEtBQUFBLEdBQ0F1dEIsS0FBQTdVLEdBQUE2VSxLQUNBL3NCLE9BQUFrWSxHQUFBbFksUUFHQW1iLEdBQUEySCxPQUFBM0gsR0FBQXZjLEdBQUFra0IsT0FBQSxXQUNBLElBQUFubEIsRUFBQXdHLEVBQUF1RixFQUFBbk0sRUFBQXl2QixFQUFBcnBCLEVBQ0FvSCxFQUFBak0sVUFBQSxPQUNBM0YsRUFBQSxFQUNBTyxFQUFBb0YsVUFBQXBGLE9BQ0Erd0IsR0FBQSxFQXNCQSxJQW5CQSxrQkFBQTFmLElBQ0EwZixFQUFBMWYsRUFHQUEsRUFBQWpNLFVBQUEzRixPQUNBQSxLQUlBLGlCQUFBNFIsR0FBQW9RLEdBQUFRLFdBQUE1USxLQUNBQSxNQUlBNVIsSUFBQU8sSUFDQXFSLEVBQUE3UCxLQUNBL0IsS0FHQUEsRUFBQU8sRUFBQVAsSUFHQSxHQUFBLE9BQUF3RSxFQUFBbUIsVUFBQTNGLElBR0EsSUFBQWdMLEtBQUF4RyxFQUNBK0wsRUFBQXFCLEVBQUE1RyxHQUlBNEcsS0FIQXhOLEVBQUFJLEVBQUF3RyxNQVFBc21CLEdBQUFsdEIsSUFBQTRkLEdBQUE4UixjQUFBMXZCLEtBQ0F5dkIsRUFBQTdhLE1BQUFtSSxRQUFBL2MsTUFFQXl2QixHQUNBQSxHQUFBLEVBQ0FycEIsRUFBQStGLEdBQUF5SSxNQUFBbUksUUFBQTVRLEdBQUFBLE1BR0EvRixFQUFBK0YsR0FBQXlSLEdBQUE4UixjQUFBdmpCLEdBQUFBLEtBSUFxQixFQUFBNUcsR0FBQWdYLEdBQUEySCxPQUFBMkgsRUFBQTltQixFQUFBcEcsU0FHQXNGLElBQUF0RixJQUNBd04sRUFBQTVHLEdBQUE1RyxJQU9BLE9BQUF3TixHQUdBb1EsR0FBQTJILFFBR0ExRixRQUFBLFVBaExBLFFBZ0xBemhCLEtBQUFHLFVBQUF1RixRQUFBLE1BQUEsSUFHQTZyQixTQUFBLEVBRUEvbUIsTUFBQSxTQUFBUixHQUNBLE1BQUEsSUFBQXRNLE1BQUFzTSxJQUdBOUwsS0FBQSxhQUVBOGhCLFdBQUEsU0FBQWhkLEdBQ0EsTUFBQSxhQUFBd2MsR0FBQW5kLEtBQUFXLElBR0F5YyxTQUFBLFNBQUF6YyxHQUNBLE9BQUEsTUFBQUEsR0FBQUEsSUFBQUEsRUFBQXdQLFFBR0FnZixVQUFBLFNBQUF4dUIsR0FLQSxJQUFBWCxFQUFBbWQsR0FBQW5kLEtBQUFXLEdBQ0EsT0FBQSxXQUFBWCxHQUFBLFdBQUFBLEtBS0ErVixNQUFBcFYsRUFBQTBVLFdBQUExVSxLQUdBc3VCLGNBQUEsU0FBQXR1QixHQUNBLElBQUF5dUIsRUFBQUMsRUFJQSxTQUFBMXVCLEdBQUEsb0JBQUF3WSxHQUFBMWQsS0FBQWtGLFFBSUF5dUIsRUFBQXZCLEdBQUFsdEIsS0FTQSxtQkFEQTB1QixFQUFBckIsR0FBQXZ5QixLQUFBMnpCLEVBQUEsZ0JBQUFBLEVBQUEvc0IsY0FDQTRyQixHQUFBeHlCLEtBQUE0ekIsS0FBQW5CLEtBR0FvQixjQUFBLFNBQUEzdUIsR0FJQSxJQUFBd0YsRUFFQSxJQUFBQSxLQUFBeEYsRUFDQSxPQUFBLEVBRUEsT0FBQSxHQUdBWCxLQUFBLFNBQUFXLEdBQ0EsT0FBQSxNQUFBQSxFQUNBQSxFQUFBLEdBSUEsaUJBQUFBLEdBQUEsbUJBQUFBLEVBQ0FvdEIsR0FBQTVVLEdBQUExZCxLQUFBa0YsS0FBQSxnQkFDQUEsR0FJQTR1QixXQUFBLFNBQUFqMEIsR0FDQXloQixFQUFBemhCLElBTUFtdUIsVUFBQSxTQUFBblAsR0FDQSxPQUFBQSxFQUFBalgsUUFBQStxQixHQUFBLE9BQUEvcUIsUUFBQWdyQixHQUFBQyxLQUdBdFgsS0FBQSxTQUFBclcsRUFBQTVFLEdBQ0EsSUFBQUwsRUFBQVAsRUFBQSxFQUVBLEdBQUEraEIsRUFBQXZjLEdBRUEsSUFEQWpGLEVBQUFpRixFQUFBakYsT0FDQVAsRUFBQU8sSUFDQSxJQUFBSyxFQUFBTixLQUFBa0YsRUFBQXhGLEdBQUFBLEVBQUF3RixFQUFBeEYsSUFEQUEsVUFNQSxJQUFBQSxLQUFBd0YsRUFDQSxJQUFBLElBQUE1RSxFQUFBTixLQUFBa0YsRUFBQXhGLEdBQUFBLEVBQUF3RixFQUFBeEYsSUFDQSxNQUtBLE9BQUF3RixHQUlBNnVCLEtBQUEsU0FBQXZTLEdBQ0EsT0FBQSxNQUFBQSxFQUNBLElBQ0FBLEVBQUEsSUFBQTVaLFFBQUE4cUIsR0FBQSxLQUlBc0IsVUFBQSxTQUFBdlYsRUFBQXRCLEdBQ0EsSUFBQTRJLEVBQUE1SSxNQWFBLE9BWEEsTUFBQXNCLElBQ0FnRCxFQUFBalksT0FBQWlWLElBQ0FpRCxHQUFBdUUsTUFBQUYsRUFDQSxpQkFBQXRILEdBQ0FBLEdBQUFBLEdBR0ExWSxHQUFBL0YsS0FBQStsQixFQUFBdEgsSUFJQXNILEdBR0EwQixRQUFBLFNBQUE1RixFQUFBcEQsRUFBQS9lLEdBQ0EsT0FBQSxNQUFBK2UsR0FBQSxFQUFBeFQsR0FBQWpMLEtBQUF5ZSxFQUFBb0QsRUFBQW5pQixJQUtBdW1CLE1BQUEsU0FBQTJELEVBQUFxSyxHQUtBLElBSkEsSUFBQWp4QixHQUFBaXhCLEVBQUFoMEIsT0FDQStOLEVBQUEsRUFDQXRPLEVBQUFrcUIsRUFBQTNwQixPQUVBK04sRUFBQWhMLEVBQUFnTCxJQUNBNGIsRUFBQWxxQixLQUFBdTBCLEVBQUFqbUIsR0FLQSxPQUZBNGIsRUFBQTNwQixPQUFBUCxFQUVBa3FCLEdBR0F6SCxLQUFBLFNBQUFnRSxFQUFBN2xCLEVBQUE0ekIsR0FTQSxJQVJBLElBQ0FwSSxLQUNBcHNCLEVBQUEsRUFDQU8sRUFBQWttQixFQUFBbG1CLE9BQ0FrMEIsR0FBQUQsRUFJQXgwQixFQUFBTyxFQUFBUCxLQUNBWSxFQUFBNmxCLEVBQUF6bUIsR0FBQUEsS0FDQXkwQixHQUNBckksRUFBQS9sQixLQUFBb2dCLEVBQUF6bUIsSUFJQSxPQUFBb3NCLEdBSUF4USxJQUFBLFNBQUE2SyxFQUFBN2xCLEVBQUE4ekIsR0FDQSxJQUFBbjBCLEVBQUF5UixFQUNBaFMsRUFBQSxFQUNBcW1CLEtBR0EsR0FBQXRFLEVBQUEwRSxHQUVBLElBREFsbUIsRUFBQWttQixFQUFBbG1CLE9BQ0FQLEVBQUFPLEVBQUFQLElBR0EsT0FGQWdTLEVBQUFwUixFQUFBNmxCLEVBQUF6bUIsR0FBQUEsRUFBQTAwQixLQUdBck8sRUFBQWhnQixLQUFBMkwsUUFNQSxJQUFBaFMsS0FBQXltQixFQUdBLE9BRkF6VSxFQUFBcFIsRUFBQTZsQixFQUFBem1CLEdBQUFBLEVBQUEwMEIsS0FHQXJPLEVBQUFoZ0IsS0FBQTJMLEdBTUEsT0FBQW5NLEdBQUFELFNBQUF5Z0IsSUFJQW9DLEtBQUEsRUFJQTNuQixNQUFBLFNBQUEyRSxFQUFBMGdCLEdBQ0EsSUFBQXBGLEVBQUFyYixFQUFBNUUsRUFVQSxHQVJBLGlCQUFBcWxCLElBQ0FwRixFQUFBdGIsRUFBQTBnQixHQUNBQSxFQUFBMWdCLEVBQ0FBLEVBQUFzYixHQUtBaUIsR0FBQVEsV0FBQS9jLEdBYUEsT0FSQUMsRUFBQW5FLEdBQUFqQixLQUFBcUYsVUFBQSxHQUNBN0UsRUFBQSxXQUNBLE9BQUEyRSxFQUFBRyxNQUFBdWdCLEdBQUFwa0IsS0FBQTJELEVBQUFHLE9BQUF0RSxHQUFBakIsS0FBQXFGLGNBSUE3RSxFQUFBMm5CLEtBQUFoakIsRUFBQWdqQixLQUFBaGpCLEVBQUFnakIsTUFBQXpHLEdBQUF5RyxPQUVBM25CLEdBR0F5c0IsSUFBQTFVLEtBQUEwVSxJQUlBakQsUUFBQUEsS0FHQSxtQkFBQXFLLFNBQ0EzUyxHQUFBdmMsR0FBQWt2QixPQUFBQyxVQUFBN1YsR0FBQTRWLE9BQUFDLFdBSUE1UyxHQUFBbkcsS0FBQSx1RUFBQWpDLE1BQUEsS0FDQSxTQUFBNVosRUFBQWdMLEdBQ0E0bkIsR0FBQSxXQUFBNW5CLEVBQUEsS0FBQUEsRUFBQXdNLGdCQW1CQSxJQUFBcWQsR0FXQSxTQUFBN2YsR0E2TUEsU0FBQTZmLEVBQUF2TSxFQUFBbkMsRUFBQTFJLEVBQUFxWCxHQUNBLElBQUF4YSxFQUFBdGEsRUFBQW1pQixFQUFBNFMsRUFBQWhlLEVBQUFpZSxFQUFBQyxFQUNBQyxFQUFBL08sR0FBQUEsRUFBQVYsY0FHQXZFLEVBQUFpRixFQUFBQSxFQUFBakYsU0FBQSxFQUtBLEdBSEF6RCxFQUFBQSxNQUdBLGlCQUFBNkssSUFBQUEsR0FDQSxJQUFBcEgsR0FBQSxJQUFBQSxHQUFBLEtBQUFBLEVBRUEsT0FBQXpELEVBSUEsSUFBQXFYLEtBRUEzTyxFQUFBQSxFQUFBVixlQUFBVSxFQUFBZ1AsS0FBQXhsQixHQUNBeWxCLEVBQUFqUCxHQUVBQSxFQUFBQSxHQUFBeFcsRUFFQTBsQixHQUFBLENBSUEsR0FBQSxLQUFBblUsSUFBQW5LLEVBQUF1ZSxHQUFBcmIsS0FBQXFPLElBR0EsR0FBQWhPLEVBQUF2RCxFQUFBLElBR0EsR0FBQSxJQUFBbUssRUFBQSxDQUNBLEtBQUFpQixFQUFBZ0UsRUFBQW9QLGVBQUFqYixJQVVBLE9BQUFtRCxFQUxBLEdBQUEwRSxFQUFBbFksS0FBQXFRLEVBRUEsT0FEQW1ELEVBQUFwWCxLQUFBOGIsR0FDQTFFLE9BWUEsR0FBQXlYLElBQUEvUyxFQUFBK1MsRUFBQUssZUFBQWpiLEtBQ0EwTSxFQUFBYixFQUFBaEUsSUFDQUEsRUFBQWxZLEtBQUFxUSxFQUdBLE9BREFtRCxFQUFBcFgsS0FBQThiLEdBQ0ExRSxNQUtBLENBQUEsR0FBQTFHLEVBQUEsR0FFQSxPQURBMVEsRUFBQVQsTUFBQTZYLEVBQUEwSSxFQUFBMVYscUJBQUE2WCxJQUNBN0ssRUFHQSxJQUFBbkQsRUFBQXZELEVBQUEsS0FBQXVULEVBQUFrTCx3QkFDQXJQLEVBQUFxUCx1QkFHQSxPQURBbnZCLEVBQUFULE1BQUE2WCxFQUFBMEksRUFBQXFQLHVCQUFBbGIsSUFDQW1ELEVBS0EsR0FBQTZNLEVBQUFtTCxNQUNBQyxFQUFBcE4sRUFBQSxRQUNBcU4sSUFBQUEsRUFBQTVrQixLQUFBdVgsSUFBQSxDQUVBLEdBQUEsSUFBQXBILEVBQ0FnVSxFQUFBL08sRUFDQThPLEVBQUEzTSxPQU1BLEdBQUEsV0FBQW5DLEVBQUFqRSxTQUFBMUssY0FBQSxDQVlBLEtBVEF1ZCxFQUFBNU8sRUFBQTVCLGFBQUEsT0FDQXdRLEVBQUFBLEVBQUE3c0IsUUFBQTB0QixHQUFBQyxJQUVBMVAsRUFBQXJVLGFBQUEsS0FBQWlqQixFQUFBOVEsR0FLQWprQixHQURBZzFCLEVBQUFjLEVBQUF4TixJQUNBL25CLE9BQ0FQLEtBQ0FnMUIsRUFBQWgxQixHQUFBLElBQUErMEIsRUFBQSxJQUFBZ0IsRUFBQWYsRUFBQWgxQixJQUVBaTFCLEVBQUFELEVBQUFsZixLQUFBLEtBR0FvZixFQUFBYyxHQUFBamxCLEtBQUF1WCxJQUFBMk4sRUFBQTlQLEVBQUFuVyxhQUNBbVcsRUFHQSxHQUFBOE8sRUFDQSxJQUlBLE9BSEE1dUIsRUFBQVQsTUFBQTZYLEVBQ0F5WCxFQUFBNU8saUJBQUEyTyxJQUVBeFgsRUFDQSxNQUFBeVksSUFDQSxRQUNBbkIsSUFBQTlRLEdBQ0FrQyxFQUFBNkMsZ0JBQUEsUUFTQSxPQUFBbU4sRUFBQTdOLEVBQUFwZ0IsUUFBQThxQixHQUFBLE1BQUE3TSxFQUFBMUksRUFBQXFYLEdBU0EsU0FBQXNCLElBR0EsU0FBQUMsRUFBQXJ3QixFQUFBZ00sR0FNQSxPQUpBakksRUFBQTFELEtBQUFMLEVBQUEsS0FBQXN3QixFQUFBQyxvQkFFQUYsRUFBQXRzQixFQUFBMkIsU0FFQTJxQixFQUFBcndCLEVBQUEsS0FBQWdNLEVBUkEsSUFBQWpJLEtBVUEsT0FBQXNzQixFQU9BLFNBQUFHLEVBQUEvd0IsR0FFQSxPQURBQSxFQUFBd2UsSUFBQSxFQUNBeGUsRUFPQSxTQUFBZ3hCLEVBQUFoeEIsR0FDQSxJQUFBdVcsRUFBQXJNLEVBQUFVLGNBQUEsWUFFQSxJQUNBLFFBQUE1SyxFQUFBdVcsR0FDQSxNQUFBemMsR0FDQSxPQUFBLEVBQ0EsUUFFQXljLEVBQUFoTSxZQUNBZ00sRUFBQWhNLFdBQUFDLFlBQUErTCxHQUdBQSxFQUFBLE1BU0EsU0FBQTBhLEVBQUEvSSxFQUFBZ0osR0FJQSxJQUhBLElBQUE1WCxFQUFBNE8sRUFBQS9ULE1BQUEsS0FDQTVaLEVBQUErZSxFQUFBeGUsT0FFQVAsS0FDQXMyQixFQUFBTSxXQUFBN1gsRUFBQS9lLElBQUEyMkIsRUFVQSxTQUFBRSxFQUFBLzJCLEVBQUFtSCxHQUNBLElBQUE0YixFQUFBNWIsR0FBQW5ILEVBQ0E2VyxFQUFBa00sR0FBQSxJQUFBL2lCLEVBQUFvaEIsVUFBQSxJQUFBamEsRUFBQWlhLFVBQ0FwaEIsRUFBQWczQixZQUFBN3ZCLEVBQUE2dkIsWUFHQSxHQUFBbmdCLEVBQ0EsT0FBQUEsRUFJQSxHQUFBa00sRUFDQSxLQUFBQSxFQUFBQSxFQUFBa1UsYUFDQSxHQUFBbFUsSUFBQTViLEVBQ0EsT0FBQSxFQUtBLE9BQUFuSCxFQUFBLEdBQUEsRUE2QkEsU0FBQWszQixFQUFBQyxHQUdBLE9BQUEsU0FBQTlVLEdBS0EsTUFBQSxTQUFBQSxFQVNBQSxFQUFBblMsYUFBQSxJQUFBbVMsRUFBQThVLFNBR0EsVUFBQTlVLEVBQ0EsVUFBQUEsRUFBQW5TLFdBQ0FtUyxFQUFBblMsV0FBQWluQixXQUFBQSxFQUVBOVUsRUFBQThVLFdBQUFBLEVBTUE5VSxFQUFBK1UsYUFBQUQsR0FJQTlVLEVBQUErVSxjQUFBRCxHQUNBRSxHQUFBaFYsS0FBQThVLEVBR0E5VSxFQUFBOFUsV0FBQUEsRUFLQSxVQUFBOVUsR0FDQUEsRUFBQThVLFdBQUFBLEdBWUEsU0FBQUcsRUFBQTN4QixHQUNBLE9BQUErd0IsRUFBQSxTQUFBYSxHQUVBLE9BREFBLEdBQUFBLEVBQ0FiLEVBQUEsU0FBQTFCLEVBQUExSSxHQU1BLElBTEEsSUFBQTlkLEVBQ0FncEIsRUFBQTd4QixLQUFBcXZCLEVBQUF2MEIsT0FBQTgyQixHQUNBcjNCLEVBQUFzM0IsRUFBQS8yQixPQUdBUCxLQUNBODBCLEVBQUF4bUIsRUFBQWdwQixFQUFBdDNCLE1BQ0E4MEIsRUFBQXhtQixLQUFBOGQsRUFBQTlkLEdBQUF3bUIsRUFBQXhtQixTQVlBLFNBQUEybkIsRUFBQTlQLEdBQ0EsT0FBQUEsUUFBQSxJQUFBQSxFQUFBMVYsc0JBQUEwVixFQXlqQ0EsU0FBQW9SLEtBdUVBLFNBQUF4QixFQUFBeUIsR0FJQSxJQUhBLElBQUF4M0IsRUFBQSxFQUNBc0QsRUFBQWswQixFQUFBajNCLE9BQ0ErbkIsRUFBQSxHQUNBdG9CLEVBQUFzRCxFQUFBdEQsSUFDQXNvQixHQUFBa1AsRUFBQXgzQixHQUFBZ1MsTUFFQSxPQUFBc1csRUFHQSxTQUFBbVAsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBOVUsRUFBQTZVLEVBQUE3VSxJQUNBK1UsRUFBQUYsRUFBQTdiLEtBQ0E5VixFQUFBNnhCLEdBQUEvVSxFQUNBZ1YsRUFBQUYsR0FBQSxlQUFBNXhCLEVBQ0EreEIsRUFBQXJpQixJQUVBLE9BQUFpaUIsRUFBQXpOLE1BRUEsU0FBQS9ILEVBQUFnRSxFQUFBNlIsR0FDQSxLQUFBN1YsRUFBQUEsRUFBQVcsSUFDQSxHQUFBLElBQUFYLEVBQUFqQixVQUFBNFcsRUFDQSxPQUFBSixFQUFBdlYsRUFBQWdFLEVBQUE2UixHQUdBLE9BQUEsR0FJQSxTQUFBN1YsRUFBQWdFLEVBQUE2UixHQUNBLElBQUFDLEVBQUFDLEVBQUFDLEVBQ0FDLEdBQUFDLEVBQUFOLEdBR0EsR0FBQUMsR0FDQSxLQUFBN1YsRUFBQUEsRUFBQVcsSUFDQSxJQUFBLElBQUFYLEVBQUFqQixVQUFBNFcsSUFDQUosRUFBQXZWLEVBQUFnRSxFQUFBNlIsR0FDQSxPQUFBLE9BS0EsS0FBQTdWLEVBQUFBLEVBQUFXLElBQ0EsR0FBQSxJQUFBWCxFQUFBakIsVUFBQTRXLEVBT0EsR0FOQUssRUFBQWhXLEVBQUE4QixLQUFBOUIsRUFBQThCLE9BSUFpVSxFQUFBQyxFQUFBaFcsRUFBQW1XLFlBQUFILEVBQUFoVyxFQUFBbVcsY0FFQVQsR0FBQUEsSUFBQTFWLEVBQUFELFNBQUExSyxjQUNBMkssRUFBQUEsRUFBQVcsSUFBQVgsTUFDQSxDQUFBLElBQUE4VixFQUFBQyxFQUFBbHlCLEtBQ0FpeUIsRUFBQSxLQUFBSSxHQUFBSixFQUFBLEtBQUFGLEVBR0EsT0FBQUssRUFBQSxHQUFBSCxFQUFBLEdBTUEsR0FIQUMsRUFBQWx5QixHQUFBb3lCLEVBR0FBLEVBQUEsR0FBQVYsRUFBQXZWLEVBQUFnRSxFQUFBNlIsR0FDQSxPQUFBLEVBTUEsT0FBQSxHQUlBLFNBQUFPLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQWo0QixPQUFBLEVBQ0EsU0FBQTRoQixFQUFBZ0UsRUFBQTZSLEdBRUEsSUFEQSxJQUFBaDRCLEVBQUF3NEIsRUFBQWo0QixPQUNBUCxLQUNBLElBQUF3NEIsRUFBQXg0QixHQUFBbWlCLEVBQUFnRSxFQUFBNlIsR0FDQSxPQUFBLEVBR0EsT0FBQSxHQUVBUSxFQUFBLEdBR0EsU0FBQUMsRUFBQW5RLEVBQUFvUSxFQUFBamIsR0FHQSxJQUZBLElBQUF6ZCxFQUFBLEVBQ0FzRCxFQUFBbzFCLEVBQUFuNEIsT0FDQVAsRUFBQXNELEVBQUF0RCxJQUNBNjBCLEVBQUF2TSxFQUFBb1EsRUFBQTE0QixHQUFBeWQsR0FFQSxPQUFBQSxFQUdBLFNBQUFrYixFQUFBQyxFQUFBaGQsRUFBQStHLEVBQUF3RCxFQUFBNlIsR0FPQSxJQU5BLElBQUE3VixFQUNBMFcsS0FDQTc0QixFQUFBLEVBQ0FzRCxFQUFBczFCLEVBQUFyNEIsT0FDQXU0QixFQUFBLE1BQUFsZCxFQUVBNWIsRUFBQXNELEVBQUF0RCxLQUNBbWlCLEVBQUF5VyxFQUFBNTRCLE1BQ0EyaUIsSUFBQUEsRUFBQVIsRUFBQWdFLEVBQUE2UixLQUNBYSxFQUFBeHlCLEtBQUE4YixHQUNBMlcsR0FDQWxkLEVBQUF2VixLQUFBckcsS0FNQSxPQUFBNjRCLEVBR0EsU0FBQUUsRUFBQUMsRUFBQTFRLEVBQUFvUCxFQUFBdUIsRUFBQUMsRUFBQUMsR0FPQSxPQU5BRixJQUFBQSxFQUFBaFYsS0FDQWdWLEVBQUFGLEVBQUFFLElBRUFDLElBQUFBLEVBQUFqVixLQUNBaVYsRUFBQUgsRUFBQUcsRUFBQUMsSUFFQTNDLEVBQUEsU0FBQTFCLEVBQUFyWCxFQUFBMEksRUFBQTZSLEdBQ0EsSUFBQXhTLEVBQUF4bEIsRUFBQW1pQixFQUNBaVgsS0FDQUMsS0FDQUMsRUFBQTdiLEVBQUFsZCxPQUdBa21CLEVBQUFxTyxHQUFBMkQsRUFBQW5RLEdBQUEsSUFBQW5DLEVBQUFqRixVQUFBaUYsR0FBQUEsTUFHQW9ULEdBQUFQLElBQUFsRSxHQUFBeE0sRUFFQTdCLEVBREFrUyxFQUFBbFMsRUFBQTJTLEVBQUFKLEVBQUE3UyxFQUFBNlIsR0FHQXdCLEVBQUE5QixFQUVBd0IsSUFBQXBFLEVBQUFrRSxFQUFBTSxHQUFBTCxNQU1BeGIsRUFDQThiLEVBUUEsR0FMQTdCLEdBQ0FBLEVBQUE2QixFQUFBQyxFQUFBclQsRUFBQTZSLEdBSUFpQixFQU1BLElBTEF6VCxFQUFBbVQsRUFBQWEsRUFBQUgsR0FDQUosRUFBQXpULEtBQUFXLEVBQUE2UixHQUdBaDRCLEVBQUF3bEIsRUFBQWpsQixPQUNBUCxNQUNBbWlCLEVBQUFxRCxFQUFBeGxCLE1BQ0F3NUIsRUFBQUgsRUFBQXI1QixNQUFBdTVCLEVBQUFGLEVBQUFyNUIsSUFBQW1pQixJQUtBLEdBQUEyUyxHQUNBLEdBQUFvRSxHQUFBRixFQUFBLENBQ0EsR0FBQUUsRUFBQSxDQUlBLElBRkExVCxLQUNBeGxCLEVBQUF3NUIsRUFBQWo1QixPQUNBUCxNQUNBbWlCLEVBQUFxWCxFQUFBeDVCLEtBRUF3bEIsRUFBQW5mLEtBQUFrekIsRUFBQXY1QixHQUFBbWlCLEdBR0ErVyxFQUFBLEtBQUFNLEtBQUFoVSxFQUFBd1MsR0FLQSxJQURBaDRCLEVBQUF3NUIsRUFBQWo1QixPQUNBUCxNQUNBbWlCLEVBQUFxWCxFQUFBeDVCLE1BQ0F3bEIsRUFBQTBULEVBQUEzdEIsRUFBQXVwQixFQUFBM1MsR0FBQWlYLEVBQUFwNUIsS0FBQSxJQUVBODBCLEVBQUF0UCxLQUFBL0gsRUFBQStILEdBQUFyRCxVQU9BcVgsRUFBQWIsRUFDQWEsSUFBQS9iLEVBQ0ErYixFQUFBM3lCLE9BQUF5eUIsRUFBQUUsRUFBQWo1QixRQUNBaTVCLEdBRUFOLEVBQ0FBLEVBQUEsS0FBQXpiLEVBQUErYixFQUFBeEIsR0FFQTN4QixFQUFBVCxNQUFBNlgsRUFBQStiLEtBTUEsU0FBQUMsRUFBQWpDLEdBd0JBLElBdkJBLElBQUFrQyxFQUFBaEMsRUFBQXBwQixFQUNBaEwsRUFBQWswQixFQUFBajNCLE9BQ0FvNUIsRUFBQXJELEVBQUFzRCxTQUFBcEMsRUFBQSxHQUFBM3lCLE1BQ0FnMUIsRUFBQUYsR0FBQXJELEVBQUFzRCxTQUFBLEtBQ0E1NUIsRUFBQTI1QixFQUFBLEVBQUEsRUFHQUcsRUFBQXJDLEVBQUEsU0FBQXRWLEdBQ0EsT0FBQUEsSUFBQXVYLEdBQ0FHLEdBQUEsR0FDQUUsRUFBQXRDLEVBQUEsU0FBQXRWLEdBQ0EsT0FBQTVXLEVBQUFtdUIsRUFBQXZYLElBQUEsR0FDQTBYLEdBQUEsR0FDQXJCLEdBQUEsU0FBQXJXLEVBQUFnRSxFQUFBNlIsR0FDQSxJQUFBM1IsR0FBQXNULElBQUEzQixHQUFBN1IsSUFBQTZULE1BQ0FOLEVBQUF2VCxHQUFBakYsU0FDQTRZLEVBQUEzWCxFQUFBZ0UsRUFBQTZSLEdBQ0ErQixFQUFBNVgsRUFBQWdFLEVBQUE2UixJQUdBLE9BREEwQixFQUFBLEtBQ0FyVCxJQUdBcm1CLEVBQUFzRCxFQUFBdEQsSUFDQSxHQUFBMDNCLEVBQUFwQixFQUFBc0QsU0FBQXBDLEVBQUF4M0IsR0FBQTZFLE1BQ0EyekIsR0FBQWYsRUFBQWMsRUFBQUMsR0FBQWQsUUFDQSxDQUlBLElBSEFBLEVBQUFwQixFQUFBM1QsT0FBQTZVLEVBQUF4M0IsR0FBQTZFLE1BQUFlLE1BQUEsS0FBQTR4QixFQUFBeDNCLEdBQUFvc0IsVUFHQW5JLEdBQUEsQ0FHQSxJQURBM1YsSUFBQXRPLEVBQ0FzTyxFQUFBaEwsSUFDQWd6QixFQUFBc0QsU0FBQXBDLEVBQUFscEIsR0FBQXpKLE1BREF5SixLQUtBLE9BQUF5cUIsRUFDQS80QixFQUFBLEdBQUF1NEIsRUFBQUMsR0FDQXg0QixFQUFBLEdBQUErMUIsRUFFQXlCLEVBQUFqMkIsTUFBQSxFQUFBdkIsRUFBQSxHQUFBNkYsUUFBQW1NLE1BQUEsTUFBQXdsQixFQUFBeDNCLEVBQUEsR0FBQTZFLEtBQUEsSUFBQSxNQUNBcUQsUUFBQThxQixHQUFBLE1BQ0EwRSxFQUNBMTNCLEVBQUFzTyxHQUFBbXJCLEVBQUFqQyxFQUFBajJCLE1BQUF2QixFQUFBc08sSUFDQUEsRUFBQWhMLEdBQUFtMkIsRUFBQWpDLEVBQUFBLEVBQUFqMkIsTUFBQStNLElBQ0FBLEVBQUFoTCxHQUFBeXlCLEVBQUF5QixJQUdBZ0IsRUFBQW55QixLQUFBcXhCLEdBSUEsT0FBQWEsRUFBQUMsR0FHQSxTQUFBeUIsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRCxFQUFBNTVCLE9BQUEsRUFDQTg1QixFQUFBSCxFQUFBMzVCLE9BQUEsRUFDQSs1QixFQUFBLFNBQUF4RixFQUFBM08sRUFBQTZSLEVBQUF2YSxFQUFBOGMsR0FDQSxJQUFBcFksRUFBQTdULEVBQUFvcEIsRUFDQThDLEVBQUEsRUFDQXg2QixFQUFBLElBQ0E0NEIsRUFBQTlELE1BQ0EyRixLQUNBQyxFQUFBVixFQUVBdlQsRUFBQXFPLEdBQUF1RixHQUFBL0QsRUFBQXFFLEtBQUEsSUFBQSxJQUFBSixHQUVBSyxFQUFBdkMsR0FBQSxNQUFBcUMsRUFBQSxFQUFBbDRCLEtBQUFHLFVBQUEsR0FDQVcsRUFBQW1qQixFQUFBbG1CLE9BU0EsSUFQQWc2QixJQUNBUCxFQUFBN1QsSUFBQXhXLEdBQUF3VyxHQUFBb1UsR0FNQXY2QixJQUFBc0QsR0FBQSxPQUFBNmUsRUFBQXNFLEVBQUF6bUIsSUFBQUEsSUFBQSxDQUNBLEdBQUFxNkIsR0FBQWxZLEVBQUEsQ0FNQSxJQUxBN1QsRUFBQSxFQUNBNlgsR0FBQWhFLEVBQUFzRCxnQkFBQTlWLElBQ0F5bEIsRUFBQWpULEdBQ0E2VixHQUFBM0MsR0FFQXFDLEVBQUF3QyxFQUFBNXJCLE1BQ0EsR0FBQW9wQixFQUFBdlYsRUFBQWdFLEdBQUF4VyxFQUFBcW9CLEdBQUEsQ0FDQXZhLEVBQUFwWCxLQUFBOGIsR0FDQSxNQUdBb1ksSUFDQWxDLEVBQUF1QyxHQUtBUixLQUVBalksR0FBQXVWLEdBQUF2VixJQUNBcVksSUFJQTFGLEdBQ0E4RCxFQUFBdnlCLEtBQUE4YixJQWdCQSxHQVRBcVksR0FBQXg2QixFQVNBbzZCLEdBQUFwNkIsSUFBQXc2QixFQUFBLENBRUEsSUFEQWxzQixFQUFBLEVBQ0FvcEIsRUFBQXlDLEVBQUE3ckIsTUFDQW9wQixFQUFBa0IsRUFBQTZCLEVBQUF0VSxFQUFBNlIsR0FHQSxHQUFBbEQsRUFBQSxDQUVBLEdBQUEwRixFQUFBLEVBQ0EsS0FBQXg2QixLQUNBNDRCLEVBQUE1NEIsSUFBQXk2QixFQUFBejZCLEtBQ0F5NkIsRUFBQXo2QixHQUFBNjZCLEVBQUF2NkIsS0FBQW1kLElBTUFnZCxFQUFBOUIsRUFBQThCLEdBSUFwMEIsRUFBQVQsTUFBQTZYLEVBQUFnZCxHQUdBRixJQUFBekYsR0FBQTJGLEVBQUFsNkIsT0FBQSxHQUNBaTZCLEVBQUFMLEVBQUE1NUIsT0FBQSxHQUVBczBCLEVBQUFpRyxXQUFBcmQsR0FVQSxPQUxBOGMsSUFDQWxDLEVBQUF1QyxFQUNBWixFQUFBVSxHQUdBOUIsR0FHQSxPQUFBd0IsRUFDQTVELEVBQUE4RCxHQUNBQSxFQS9nRUEsSUFBQXQ2QixFQUNBc3FCLEVBQ0FnTSxFQUNBeUUsRUFDQUMsRUFDQWxGLEVBQ0FtRixFQUNBOUUsRUFDQTZELEVBQ0FrQixFQUNBQyxFQUdBL0YsRUFDQXpsQixFQUNBeXJCLEVBQ0EvRixFQUNBTSxFQUNBMEYsRUFDQWpQLEVBQ0FwRixFQUdBL0MsRUFBQSxTQUFBLEVBQUEsSUFBQXBMLEtBQ0FzYyxFQUFBbmdCLEVBQUFyRixTQUNBMG9CLEVBQUEsRUFDQTNpQixFQUFBLEVBQ0E0bEIsRUFBQWxGLElBQ0FtRixFQUFBbkYsSUFDQVYsRUFBQVUsSUFDQW9GLEVBQUEsU0FBQTE3QixFQUFBbUgsR0FJQSxPQUhBbkgsSUFBQW1ILElBQ0FrMEIsR0FBQSxHQUVBLEdBSUF0SSxLQUFBcG9CLGVBQ0FzVSxLQUNBOGIsRUFBQTliLEVBQUE4YixJQUNBWSxFQUFBMWMsRUFBQTFZLEtBQ0FBLEVBQUEwWSxFQUFBMVksS0FDQTlFLEVBQUF3ZCxFQUFBeGQsTUFHQWdLLEVBQUEsU0FBQW13QixFQUFBdlosR0FHQSxJQUZBLElBQUFuaUIsRUFBQSxFQUNBc0QsRUFBQW80QixFQUFBbjdCLE9BQ0FQLEVBQUFzRCxFQUFBdEQsSUFDQSxHQUFBMDdCLEVBQUExN0IsS0FBQW1pQixFQUNBLE9BQUFuaUIsRUFHQSxPQUFBLEdBR0EyN0IsRUFBQSw2SEFLQUMsR0FBQSxzQkFHQUMsR0FBQSxnQ0FHQUMsR0FBQSxNQUFBRixHQUFBLEtBQUFDLEdBQUEsT0FBQUQsR0FFQSxnQkFBQUEsR0FFQSwyREFBQUMsR0FBQSxPQUFBRCxHQUNBLE9BRUFHLEdBQUEsS0FBQUYsR0FBQSx3RkFLQUMsR0FBQSxlQU1BRSxHQUFBLElBQUF0a0IsT0FBQWtrQixHQUFBLElBQUEsS0FDQTVJLEdBQUEsSUFBQXRiLE9BQUEsSUFBQWtrQixHQUFBLDhCQUFBQSxHQUFBLEtBQUEsS0FFQUssR0FBQSxJQUFBdmtCLE9BQUEsSUFBQWtrQixHQUFBLEtBQUFBLEdBQUEsS0FDQU0sR0FBQSxJQUFBeGtCLE9BQUEsSUFBQWtrQixHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxLQUVBTyxHQUFBLElBQUF6a0IsT0FBQSxJQUFBa2tCLEdBQUEsaUJBQUFBLEdBQUEsT0FBQSxLQUVBUSxHQUFBLElBQUExa0IsT0FBQXFrQixJQUNBTSxHQUFBLElBQUEza0IsT0FBQSxJQUFBbWtCLEdBQUEsS0FFQVMsSUFDQUMsR0FBQSxJQUFBN2tCLE9BQUEsTUFBQW1rQixHQUFBLEtBQ0FXLE1BQUEsSUFBQTlrQixPQUFBLFFBQUFta0IsR0FBQSxLQUNBWSxJQUFBLElBQUEva0IsT0FBQSxLQUFBbWtCLEdBQUEsU0FDQWEsS0FBQSxJQUFBaGxCLE9BQUEsSUFBQW9rQixJQUNBYSxPQUFBLElBQUFqbEIsT0FBQSxJQUFBcWtCLElBQ0FhLE1BQUEsSUFBQWxsQixPQUFBLHlEQUFBa2tCLEdBQ0EsK0JBQUFBLEdBQUEsY0FBQUEsR0FDQSxhQUFBQSxHQUFBLFNBQUEsS0FDQWlCLEtBQUEsSUFBQW5sQixPQUFBLE9BQUFpa0IsRUFBQSxLQUFBLEtBR0FtQixhQUFBLElBQUFwbEIsT0FBQSxJQUFBa2tCLEdBQUEsbURBQ0FBLEdBQUEsbUJBQUFBLEdBQUEsbUJBQUEsTUFHQW1CLEdBQUEsc0NBQ0FDLEdBQUEsU0FFQUMsR0FBQSx5QkFHQTNILEdBQUEsbUNBRUFVLEdBQUEsT0FJQWtILEdBQUEsSUFBQXhsQixPQUFBLHFCQUFBa2tCLEdBQUEsTUFBQUEsR0FBQSxPQUFBLE1BQ0F1QixHQUFBLFNBQUFqYSxFQUFBa2EsRUFBQUMsR0FDQSxJQUFBQyxFQUFBLEtBQUFGLEVBQUEsTUFJQSxPQUFBRSxJQUFBQSxHQUFBRCxFQUNBRCxFQUNBRSxFQUFBLEVBRUF0akIsT0FBQTZDLGFBQUF5Z0IsRUFBQSxPQUVBdGpCLE9BQUE2QyxhQUFBeWdCLEdBQUEsR0FBQSxNQUFBLEtBQUFBLEVBQUEsUUFLQTFILEdBQUEsc0RBQ0FDLEdBQUEsU0FBQTBILEVBQUFDLEdBQ0EsT0FBQUEsRUFHQSxPQUFBRCxFQUNBLElBSUFBLEVBQUFoOEIsTUFBQSxHQUFBLEdBQUEsS0FBQWc4QixFQUFBbjZCLFdBQUFtNkIsRUFBQWg5QixPQUFBLEdBQUF5ZCxTQUFBLElBQUEsSUFJQSxLQUFBdWYsR0FPQS9xQixHQUFBLFdBQ0E0aUIsS0FHQStCLEdBQUFNLEVBQ0EsU0FBQXRWLEdBQ0EsT0FBQSxJQUFBQSxFQUFBOFUsV0FBQSxTQUFBOVUsR0FBQSxVQUFBQSxLQUVBVyxJQUFBLGFBQUFoSCxLQUFBLFdBSUEsSUFDQXpWLEVBQUFULE1BQ0FtWixFQUFBeGQsRUFBQWpCLEtBQUE2MEIsRUFBQXhOLFlBQ0F3TixFQUFBeE4sWUFJQTVJLEVBQUFvVyxFQUFBeE4sV0FBQXBuQixRQUFBMmdCLFNBQ0EsTUFBQTNoQixHQUNBOEcsR0FBQVQsTUFBQW1aLEVBQUF4ZSxPQUdBLFNBQUFxUixFQUFBNnJCLEdBQ0FoQyxFQUFBNzFCLE1BQUFnTSxFQUFBclEsRUFBQWpCLEtBQUFtOUIsS0FLQSxTQUFBN3JCLEVBQUE2ckIsR0FJQSxJQUhBLElBQUFudkIsRUFBQXNELEVBQUFyUixPQUNBUCxFQUFBLEVBRUE0UixFQUFBdEQsS0FBQW12QixFQUFBejlCLE9BQ0E0UixFQUFBclIsT0FBQStOLEVBQUEsSUFvVkFnYyxFQUFBdUssRUFBQXZLLFdBT0EwUSxFQUFBbkcsRUFBQW1HLE1BQUEsU0FBQTdZLEdBR0EsSUFBQWhMLEVBQUFnTCxJQUFBQSxFQUFBc0QsZUFBQXRELEdBQUFoTCxnQkFDQSxRQUFBQSxHQUFBLFNBQUFBLEVBQUErSyxVQVFBa1QsRUFBQVAsRUFBQU8sWUFBQSxTQUFBaEwsR0FDQSxJQUFBc1QsRUFBQUMsRUFDQTliLEVBQUF1SSxFQUFBQSxFQUFBM0UsZUFBQTJFLEVBQUErSyxFQUdBLE9BQUF0VCxJQUFBbFMsR0FBQSxJQUFBa1MsRUFBQVgsVUFBQVcsRUFBQTFLLGlCQUtBeEgsRUFBQWtTLEVBQ0F1WixFQUFBenJCLEVBQUF3SCxnQkFDQWtlLEdBQUEyRixFQUFBcnJCLEdBSUF3bEIsSUFBQXhsQixJQUNBZ3VCLEVBQUFodUIsRUFBQWl1QixjQUFBRCxFQUFBanNCLE1BQUFpc0IsSUFHQUEsRUFBQXozQixpQkFDQXkzQixFQUFBejNCLGlCQUFBLFNBQUFzTSxJQUFBLEdBR0FtckIsRUFBQXpyQixhQUNBeXJCLEVBQUF6ckIsWUFBQSxXQUFBTSxLQVVBOFgsRUFBQXdSLFdBQUFyRixFQUFBLFNBQUF6YSxHQUVBLE9BREFBLEVBQUF6SyxVQUFBLEtBQ0F5SyxFQUFBdUksYUFBQSxlQU9BK0YsRUFBQTdaLHFCQUFBZ21CLEVBQUEsU0FBQXphLEdBRUEsT0FEQUEsRUFBQW5MLFlBQUFsQixFQUFBa3VCLGNBQUEsTUFDQTdoQixFQUFBdkwscUJBQUEsS0FBQWxRLFNBSUErcEIsRUFBQWtMLHVCQUFBeUgsR0FBQWxzQixLQUFBcEIsRUFBQTZsQix3QkFNQWxMLEVBQUF3VCxRQUFBckgsRUFBQSxTQUFBemEsR0FFQSxPQURBb2YsRUFBQXZxQixZQUFBbUwsR0FBQS9SLEdBQUFnYSxHQUNBdFUsRUFBQW91QixvQkFBQXB1QixFQUFBb3VCLGtCQUFBOVosR0FBQTFqQixTQUlBK3BCLEVBQUF3VCxTQUNBeEgsRUFBQTNULE9BQUEsR0FBQSxTQUFBMVksR0FDQSxJQUFBK3pCLEVBQUEvekIsRUFBQS9CLFFBQUFnMUIsR0FBQUMsSUFDQSxPQUFBLFNBQUFoYixHQUNBLE9BQUFBLEVBQUFvQyxhQUFBLFFBQUF5WixJQUdBMUgsRUFBQXFFLEtBQUEsR0FBQSxTQUFBMXdCLEVBQUFrYyxHQUNBLFFBQUEsSUFBQUEsRUFBQW9QLGdCQUFBRixFQUFBLENBQ0EsSUFBQWxULEVBQUFnRSxFQUFBb1AsZUFBQXRyQixHQUNBLE9BQUFrWSxHQUFBQSxVQUlBbVUsRUFBQTNULE9BQUEsR0FBQSxTQUFBMVksR0FDQSxJQUFBK3pCLEVBQUEvekIsRUFBQS9CLFFBQUFnMUIsR0FBQUMsSUFDQSxPQUFBLFNBQUFoYixHQUNBLElBQUFpSSxPQUFBLElBQUFqSSxFQUFBOGIsa0JBQ0E5YixFQUFBOGIsaUJBQUEsTUFDQSxPQUFBN1QsR0FBQUEsRUFBQXBZLFFBQUFnc0IsSUFNQTFILEVBQUFxRSxLQUFBLEdBQUEsU0FBQTF3QixFQUFBa2MsR0FDQSxRQUFBLElBQUFBLEVBQUFvUCxnQkFBQUYsRUFBQSxDQUNBLElBQUFqTCxFQUFBcHFCLEVBQUF5bUIsRUFDQXRFLEVBQUFnRSxFQUFBb1AsZUFBQXRyQixHQUVBLEdBQUFrWSxFQUFBLENBSUEsSUFEQWlJLEVBQUFqSSxFQUFBOGIsaUJBQUEsUUFDQTdULEVBQUFwWSxRQUFBL0gsRUFDQSxPQUFBa1ksR0FNQSxJQUZBc0UsRUFBQU4sRUFBQTRYLGtCQUFBOXpCLEdBQ0FqSyxFQUFBLEVBQ0FtaUIsRUFBQXNFLEVBQUF6bUIsTUFFQSxJQURBb3FCLEVBQUFqSSxFQUFBOGIsaUJBQUEsUUFDQTdULEVBQUFwWSxRQUFBL0gsRUFDQSxPQUFBa1ksR0FLQSxZQU1BbVUsRUFBQXFFLEtBQUEsSUFBQXJRLEVBQUE3WixxQkFDQSxTQUFBMlYsRUFBQUQsR0FDQSxZQUFBLElBQUFBLEVBQUExVixxQkFDQTBWLEVBQUExVixxQkFBQTJWLEdBR0FrRSxFQUFBbUwsSUFDQXRQLEVBQUFHLGlCQUFBRixRQURBLEdBS0EsU0FBQUEsRUFBQUQsR0FDQSxJQUFBaEUsRUFDQXBCLEtBQ0EvZ0IsRUFBQSxFQUVBeWQsRUFBQTBJLEVBQUExVixxQkFBQTJWLEdBR0EsR0FBQSxNQUFBQSxFQUFBLENBQ0EsS0FBQWpFLEVBQUExRSxFQUFBemQsTUFDQSxJQUFBbWlCLEVBQUFqQixVQUNBSCxFQUFBMWEsS0FBQThiLEdBSUEsT0FBQXBCLEVBRUEsT0FBQXRELEdBSUE2WSxFQUFBcUUsS0FBQSxNQUFBclEsRUFBQWtMLHdCQUFBLFNBQUFqa0IsRUFBQTRVLEdBQ0EsUUFBQSxJQUFBQSxFQUFBcVAsd0JBQUFILEVBQ0EsT0FBQWxQLEVBQUFxUCx1QkFBQWprQixJQVVBOHBCLEtBT0ExRixNQUVBckwsRUFBQW1MLElBQUF3SCxHQUFBbHNCLEtBQUFwQixFQUFBMlcscUJBR0FtUSxFQUFBLFNBQUF6YSxHQU1Bb2YsRUFBQXZxQixZQUFBbUwsR0FBQXdMLFVBQUEsVUFBQXZELEVBQUEscUJBQ0FBLEVBQUEsa0VBT0FqSSxFQUFBc0ssaUJBQUEsd0JBQUEvbEIsUUFDQW8xQixFQUFBdHZCLEtBQUEsU0FBQXUxQixHQUFBLGdCQUtBNWYsRUFBQXNLLGlCQUFBLGNBQUEvbEIsUUFDQW8xQixFQUFBdHZCLEtBQUEsTUFBQXUxQixHQUFBLGFBQUFELEVBQUEsS0FJQTNmLEVBQUFzSyxpQkFBQSxRQUFBckMsRUFBQSxNQUFBMWpCLFFBQ0FvMUIsRUFBQXR2QixLQUFBLE1BTUEyVixFQUFBc0ssaUJBQUEsWUFBQS9sQixRQUNBbzFCLEVBQUF0dkIsS0FBQSxZQU1BMlYsRUFBQXNLLGlCQUFBLEtBQUFyQyxFQUFBLE1BQUExakIsUUFDQW8xQixFQUFBdHZCLEtBQUEsY0FJQW93QixFQUFBLFNBQUF6YSxHQUNBQSxFQUFBd0wsVUFBQSxvRkFLQSxJQUFBMFcsRUFBQXZ1QixFQUFBVSxjQUFBLFNBQ0E2dEIsRUFBQXBzQixhQUFBLE9BQUEsVUFDQWtLLEVBQUFuTCxZQUFBcXRCLEdBQUFwc0IsYUFBQSxPQUFBLEtBSUFrSyxFQUFBc0ssaUJBQUEsWUFBQS9sQixRQUNBbzFCLEVBQUF0dkIsS0FBQSxPQUFBdTFCLEdBQUEsZUFLQSxJQUFBNWYsRUFBQXNLLGlCQUFBLFlBQUEvbEIsUUFDQW8xQixFQUFBdHZCLEtBQUEsV0FBQSxhQUtBKzBCLEVBQUF2cUIsWUFBQW1MLEdBQUFpYixVQUFBLEVBQ0EsSUFBQWpiLEVBQUFzSyxpQkFBQSxhQUFBL2xCLFFBQ0FvMUIsRUFBQXR2QixLQUFBLFdBQUEsYUFJQTJWLEVBQUFzSyxpQkFBQSxRQUNBcVAsRUFBQXR2QixLQUFBLFlBSUFpa0IsRUFBQTZULGdCQUFBbEIsR0FBQWxzQixLQUFBcWIsRUFBQWdQLEVBQUFoUCxTQUNBZ1AsRUFBQWdELHVCQUNBaEQsRUFBQWlELG9CQUNBakQsRUFBQWtELGtCQUNBbEQsRUFBQW1ELHFCQUVBOUgsRUFBQSxTQUFBemEsR0FHQXNPLEVBQUFrVSxrQkFBQXBTLEVBQUE5ckIsS0FBQTBiLEVBQUEsS0FJQW9RLEVBQUE5ckIsS0FBQTBiLEVBQUEsYUFDQXFmLEVBQUFoMUIsS0FBQSxLQUFBMDFCLE1BSUFwRyxFQUFBQSxFQUFBcDFCLFFBQUEsSUFBQW1YLE9BQUFpZSxFQUFBN2YsS0FBQSxNQUNBdWxCLEVBQUFBLEVBQUE5NkIsUUFBQSxJQUFBbVgsT0FBQTJqQixFQUFBdmxCLEtBQUEsTUFJQTRuQixFQUFBVCxHQUFBbHNCLEtBQUFxcUIsRUFBQXFELHlCQUtBelgsRUFBQTBXLEdBQUFULEdBQUFsc0IsS0FBQXFxQixFQUFBcFUsVUFDQSxTQUFBbG5CLEVBQUFtSCxHQUNBLElBQUF5M0IsRUFBQSxJQUFBNStCLEVBQUFvaEIsU0FBQXBoQixFQUFBcVgsZ0JBQUFyWCxFQUNBNitCLEVBQUExM0IsR0FBQUEsRUFBQStJLFdBQ0EsT0FBQWxRLElBQUE2K0IsTUFBQUEsR0FBQSxJQUFBQSxFQUFBemQsWUFDQXdkLEVBQUExWCxTQUNBMFgsRUFBQTFYLFNBQUEyWCxHQUNBNytCLEVBQUEyK0IseUJBQUEsR0FBQTMrQixFQUFBMitCLHdCQUFBRSxNQUdBLFNBQUE3K0IsRUFBQW1ILEdBQ0EsR0FBQUEsRUFDQSxLQUFBQSxFQUFBQSxFQUFBK0ksWUFDQSxHQUFBL0ksSUFBQW5ILEVBQ0EsT0FBQSxFQUlBLE9BQUEsR0FPQTA3QixFQUFBa0MsRUFDQSxTQUFBNTlCLEVBQUFtSCxHQUdBLEdBQUFuSCxJQUFBbUgsRUFFQSxPQURBazBCLEdBQUEsRUFDQSxFQUlBLElBQUF5RCxHQUFBOStCLEVBQUEyK0IseUJBQUF4M0IsRUFBQXczQix3QkFDQSxPQUFBRyxJQVlBLEdBUEFBLEdBQUE5K0IsRUFBQTJsQixlQUFBM2xCLE1BQUFtSCxFQUFBd2UsZUFBQXhlLEdBQ0FuSCxFQUFBMitCLHdCQUFBeDNCLEdBR0EsS0FJQXFqQixFQUFBdVUsY0FBQTUzQixFQUFBdzNCLHdCQUFBMytCLEtBQUE4K0IsRUFHQTkrQixJQUFBNlAsR0FBQTdQLEVBQUEybEIsZ0JBQUEwUCxHQUFBbk8sRUFBQW1PLEVBQUFyMUIsSUFDQSxFQUVBbUgsSUFBQTBJLEdBQUExSSxFQUFBd2UsZ0JBQUEwUCxHQUFBbk8sRUFBQW1PLEVBQUFsdUIsR0FDQSxFQUlBaTBCLEVBQ0EzdkIsRUFBQTJ2QixFQUFBcDdCLEdBQUF5TCxFQUFBMnZCLEVBQUFqMEIsR0FDQSxFQUdBLEVBQUEyM0IsR0FBQSxFQUFBLElBRUEsU0FBQTkrQixFQUFBbUgsR0FFQSxHQUFBbkgsSUFBQW1ILEVBRUEsT0FEQWswQixHQUFBLEVBQ0EsRUFHQSxJQUFBdFksRUFDQTdpQixFQUFBLEVBQ0E4K0IsRUFBQWgvQixFQUFBa1EsV0FDQTJ1QixFQUFBMTNCLEVBQUErSSxXQUNBK3VCLEdBQUFqL0IsR0FDQWsvQixHQUFBLzNCLEdBR0EsSUFBQTYzQixJQUFBSCxFQUNBLE9BQUE3K0IsSUFBQTZQLEdBQUEsRUFDQTFJLElBQUEwSSxFQUFBLEVBQ0FtdkIsR0FBQSxFQUNBSCxFQUFBLEVBQ0F6RCxFQUNBM3ZCLEVBQUEydkIsRUFBQXA3QixHQUFBeUwsRUFBQTJ2QixFQUFBajBCLEdBQ0EsRUFHQSxHQUFBNjNCLElBQUFILEVBQ0EsT0FBQTlILEVBQUEvMkIsRUFBQW1ILEdBS0EsSUFEQTRiLEVBQUEvaUIsRUFDQStpQixFQUFBQSxFQUFBN1MsWUFDQSt1QixFQUFBN2xCLFFBQUEySixHQUdBLElBREFBLEVBQUE1YixFQUNBNGIsRUFBQUEsRUFBQTdTLFlBQ0FndkIsRUFBQTlsQixRQUFBMkosR0FJQSxLQUFBa2MsRUFBQS8rQixLQUFBZy9CLEVBQUFoL0IsSUFDQUEsSUFHQSxPQUFBQSxFQUVBNjJCLEVBQUFrSSxFQUFBLytCLEdBQUFnL0IsRUFBQWgvQixJQUdBKytCLEVBQUEvK0IsS0FBQW0xQixHQUFBLEVBQ0E2SixFQUFBaC9CLEtBQUFtMUIsRUFBQSxFQUNBLEdBR0F4bEIsR0EzWUFBLEdBOFlBa2xCLEVBQUF6SSxRQUFBLFNBQUE2UyxFQUFBNWMsR0FDQSxPQUFBd1MsRUFBQW9LLEVBQUEsS0FBQSxLQUFBNWMsSUFHQXdTLEVBQUFzSixnQkFBQSxTQUFBaGMsRUFBQThjLEdBU0EsSUFQQTljLEVBQUFzRCxlQUFBdEQsS0FBQXhTLEdBQ0F5bEIsRUFBQWpULEdBSUE4YyxFQUFBQSxFQUFBLzJCLFFBQUFpMEIsR0FBQSxVQUVBN1IsRUFBQTZULGlCQUFBOUksSUFDQUssRUFBQXVKLEVBQUEsUUFDQTVELElBQUFBLEVBQUF0cUIsS0FBQWt1QixPQUNBdEosSUFBQUEsRUFBQTVrQixLQUFBa3VCLElBRUEsSUFDQSxJQUFBNVksRUFBQStGLEVBQUE5ckIsS0FBQTZoQixFQUFBOGMsR0FHQSxHQUFBNVksR0FBQWlFLEVBQUFrVSxtQkFHQXJjLEVBQUF4UyxVQUFBLEtBQUF3UyxFQUFBeFMsU0FBQXVSLFNBQ0EsT0FBQW1GLEVBRUEsTUFBQTltQixJQUdBLE9BQUFzMUIsRUFBQW9LLEVBQUF0dkIsRUFBQSxNQUFBd1MsSUFBQTVoQixPQUFBLEdBR0FzMEIsRUFBQTdOLFNBQUEsU0FBQWIsRUFBQWhFLEdBS0EsT0FIQWdFLEVBQUFWLGVBQUFVLEtBQUF4VyxHQUNBeWxCLEVBQUFqUCxHQUVBYSxFQUFBYixFQUFBaEUsSUFHQTBTLEVBQUFxSyxLQUFBLFNBQUEvYyxFQUFBblgsSUFFQW1YLEVBQUFzRCxlQUFBdEQsS0FBQXhTLEdBQ0F5bEIsRUFBQWpULEdBR0EsSUFBQTFjLEVBQUE2d0IsRUFBQU0sV0FBQTVyQixFQUFBd00sZUFFQTZCLEVBQUE1VCxHQUFBb3RCLEVBQUF2eUIsS0FBQWcyQixFQUFBTSxXQUFBNXJCLEVBQUF3TSxlQUNBL1IsRUFBQTBjLEVBQUFuWCxHQUFBcXFCLFFBQ0EzckIsRUFFQSxZQUFBQSxJQUFBMlAsRUFDQUEsRUFDQWlSLEVBQUF3UixhQUFBekcsRUFDQWxULEVBQUFvQyxhQUFBdlosSUFDQXFPLEVBQUE4SSxFQUFBOGIsaUJBQUFqekIsS0FBQXFPLEVBQUE4bEIsVUFDQTlsQixFQUFBckgsTUFDQSxNQUdBNmlCLEVBQUF1SyxPQUFBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQSxJQUFBbjNCLFFBQUEwdEIsR0FBQUMsS0FHQWhCLEVBQUE3bkIsTUFBQSxTQUFBUixHQUNBLE1BQUEsSUFBQXRNLE1BQUEsMENBQUFzTSxJQU9BcW9CLEVBQUFpRyxXQUFBLFNBQUFyZCxHQUNBLElBQUEwRSxFQUNBbWQsS0FDQWh4QixFQUFBLEVBQ0F0TyxFQUFBLEVBT0EsR0FKQW03QixHQUFBN1EsRUFBQWlWLGlCQUNBckUsR0FBQTVRLEVBQUFrVixZQUFBL2hCLEVBQUFsYyxNQUFBLEdBQ0FrYyxFQUFBbVcsS0FBQTRILEdBRUFMLEVBQUEsQ0FDQSxLQUFBaFosRUFBQTFFLEVBQUF6ZCxNQUNBbWlCLElBQUExRSxFQUFBemQsS0FDQXNPLEVBQUFneEIsRUFBQWo1QixLQUFBckcsSUFHQSxLQUFBc08sS0FDQW1QLEVBQUE1VyxPQUFBeTRCLEVBQUFoeEIsR0FBQSxHQVFBLE9BRkE0c0IsRUFBQSxLQUVBemQsR0FPQXNkLEVBQUFsRyxFQUFBa0csUUFBQSxTQUFBNVksR0FDQSxJQUFBaUksRUFDQS9ELEVBQUEsR0FDQXJtQixFQUFBLEVBQ0FraEIsRUFBQWlCLEVBQUFqQixTQUVBLEdBQUFBLEdBTUEsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEdBQUEsS0FBQUEsRUFBQSxDQUdBLEdBQUEsaUJBQUFpQixFQUFBMEYsWUFDQSxPQUFBMUYsRUFBQTBGLFlBR0EsSUFBQTFGLEVBQUFBLEVBQUF5RixXQUFBekYsRUFBQUEsRUFBQUEsRUFBQTRVLFlBQ0ExUSxHQUFBMFUsRUFBQTVZLFFBR0EsR0FBQSxJQUFBakIsR0FBQSxJQUFBQSxFQUNBLE9BQUFpQixFQUFBc2QsZUFoQkEsS0FBQXJWLEVBQUFqSSxFQUFBbmlCLE1BRUFxbUIsR0FBQTBVLEVBQUEzUSxHQWtCQSxPQUFBL0QsSUFHQWlRLEVBQUF6QixFQUFBNkssV0FHQW5KLFlBQUEsR0FFQW9KLGFBQUFuSixFQUVBemYsTUFBQXVsQixHQUVBMUYsY0FFQStELFFBRUFmLFVBQ0FnRyxLQUFBOWMsSUFBQSxhQUFBb0gsT0FBQSxHQUNBMlYsS0FBQS9jLElBQUEsY0FDQWdkLEtBQUFoZCxJQUFBLGtCQUFBb0gsT0FBQSxHQUNBNlYsS0FBQWpkLElBQUEsb0JBR0FrVyxXQUNBMEQsS0FBQSxTQUFBM2xCLEdBVUEsT0FUQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUE3TyxRQUFBZzFCLEdBQUFDLElBR0FwbUIsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFBLElBQUE3TyxRQUFBZzFCLEdBQUFDLElBRUEsT0FBQXBtQixFQUFBLEtBQ0FBLEVBQUEsR0FBQSxJQUFBQSxFQUFBLEdBQUEsS0FHQUEsRUFBQXhWLE1BQUEsRUFBQSxJQUdBcTdCLE1BQUEsU0FBQTdsQixHQTZCQSxPQWxCQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFTLGNBRUEsUUFBQVQsRUFBQSxHQUFBeFYsTUFBQSxFQUFBLElBRUF3VixFQUFBLElBQ0E4ZCxFQUFBN25CLE1BQUErSixFQUFBLElBS0FBLEVBQUEsS0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQSxHQUFBLEdBQUEsU0FBQUEsRUFBQSxJQUFBLFFBQUFBLEVBQUEsS0FDQUEsRUFBQSxLQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQSxRQUFBQSxFQUFBLEtBR0FBLEVBQUEsSUFDQThkLEVBQUE3bkIsTUFBQStKLEVBQUEsSUFHQUEsR0FHQTRsQixPQUFBLFNBQUE1bEIsR0FDQSxJQUFBaXBCLEVBQ0FDLEdBQUFscEIsRUFBQSxJQUFBQSxFQUFBLEdBRUEsT0FBQXVsQixHQUFBLE1BQUF2ckIsS0FBQWdHLEVBQUEsSUFDQSxNQUlBQSxFQUFBLEdBQ0FBLEVBQUEsR0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUEsR0FHQWtwQixHQUFBN0QsR0FBQXJyQixLQUFBa3ZCLEtBRUFELEVBQUFsSyxFQUFBbUssR0FBQSxNQUVBRCxFQUFBQyxFQUFBMTBCLFFBQUEsSUFBQTAwQixFQUFBMS9CLE9BQUF5L0IsR0FBQUMsRUFBQTEvQixVQUdBd1csRUFBQSxHQUFBQSxFQUFBLEdBQUF4VixNQUFBLEVBQUF5K0IsR0FDQWpwQixFQUFBLEdBQUFrcEIsRUFBQTErQixNQUFBLEVBQUF5K0IsSUFJQWpwQixFQUFBeFYsTUFBQSxFQUFBLE1BSUFvaEIsUUFFQThaLElBQUEsU0FBQXlELEdBQ0EsSUFBQWhlLEVBQUFnZSxFQUFBaDRCLFFBQUFnMUIsR0FBQUMsSUFBQTNsQixjQUNBLE1BQUEsTUFBQTBvQixFQUNBLFdBQUEsT0FBQSxHQUNBLFNBQUEvZCxHQUNBLE9BQUFBLEVBQUFELFVBQUFDLEVBQUFELFNBQUExSyxnQkFBQTBLLElBSUFzYSxNQUFBLFNBQUFqckIsR0FDQSxJQUFBNHVCLEVBQUE3RSxFQUFBL3BCLEVBQUEsS0FFQSxPQUFBNHVCLElBQ0FBLEVBQUEsSUFBQXpvQixPQUFBLE1BQUFra0IsR0FBQSxJQUFBcnFCLEVBQUEsSUFBQXFxQixHQUFBLFNBQ0FOLEVBQUEvcEIsRUFBQSxTQUFBNFEsR0FDQSxPQUFBZ2UsRUFBQXB2QixLQUFBLGlCQUFBb1IsRUFBQTVRLFdBQUE0USxFQUFBNVEsZ0JBQUEsSUFBQTRRLEVBQUFvQyxjQUFBcEMsRUFBQW9DLGFBQUEsVUFBQSxPQUlBbVksS0FBQSxTQUFBMXhCLEVBQUFvMUIsRUFBQW5yQixHQUNBLE9BQUEsU0FBQWtOLEdBQ0EsSUFBQW5oQixFQUFBNnpCLEVBQUFxSyxLQUFBL2MsRUFBQW5YLEdBRUEsT0FBQSxNQUFBaEssRUFDQSxPQUFBby9CLEdBRUFBLElBSUFwL0IsR0FBQSxHQUVBLE1BQUFvL0IsRUFBQXAvQixJQUFBaVUsRUFDQSxPQUFBbXJCLEVBQUFwL0IsSUFBQWlVLEVBQ0EsT0FBQW1yQixFQUFBbnJCLEdBQUEsSUFBQWpVLEVBQUF1SyxRQUFBMEosR0FDQSxPQUFBbXJCLEVBQUFuckIsR0FBQWpVLEVBQUF1SyxRQUFBMEosSUFBQSxFQUNBLE9BQUFtckIsRUFBQW5yQixHQUFBalUsRUFBQU8sT0FBQTBULEVBQUExVSxVQUFBMFUsRUFDQSxPQUFBbXJCLEdBQUEsSUFBQXAvQixFQUFBa0gsUUFBQTh6QixHQUFBLEtBQUEsS0FBQXp3QixRQUFBMEosSUFBQSxFQUNBLE9BQUFtckIsSUFBQXAvQixJQUFBaVUsR0FBQWpVLEVBQUFPLE1BQUEsRUFBQTBULEVBQUExVSxPQUFBLEtBQUEwVSxFQUFBLFFBS0EybkIsTUFBQSxTQUFBLzNCLEVBQUF3N0IsRUFBQWhKLEVBQUFuTixFQUFBeUosR0FDQSxJQUFBMk0sRUFBQSxRQUFBejdCLEVBQUF0RCxNQUFBLEVBQUEsR0FDQWcvQixFQUFBLFNBQUExN0IsRUFBQXRELE9BQUEsR0FDQWkvQixFQUFBLFlBQUFILEVBRUEsT0FBQSxJQUFBblcsR0FBQSxJQUFBeUosRUFHQSxTQUFBeFIsR0FDQSxRQUFBQSxFQUFBblMsWUFHQSxTQUFBbVMsRUFBQWdFLEVBQUE2UixHQUNBLElBQUEzQixFQUFBNkIsRUFBQUMsRUFBQS9OLEVBQUFxVyxFQUFBdC9CLEVBQ0EyaEIsRUFBQXdkLElBQUFDLEVBQUEsY0FBQSxrQkFDQUcsRUFBQXZlLEVBQUFuUyxXQUNBaEYsRUFBQXcxQixHQUFBcmUsRUFBQUQsU0FBQTFLLGNBQ0FtcEIsR0FBQTNJLElBQUF3SSxFQUNBN3BCLEdBQUEsRUFFQSxHQUFBK3BCLEVBQUEsQ0FHQSxHQUFBSixFQUFBLENBQ0EsS0FBQXhkLEdBQUEsQ0FFQSxJQURBc0gsRUFBQWpJLEVBQ0FpSSxFQUFBQSxFQUFBdEgsSUFDQSxHQUFBMGQsRUFDQXBXLEVBQUFsSSxTQUFBMUssZ0JBQUF4TSxFQUNBLElBQUFvZixFQUFBbEosU0FFQSxPQUFBLEVBSUEvZixFQUFBMmhCLEVBQUEsU0FBQWplLElBQUExRCxHQUFBLGNBRUEsT0FBQSxFQU1BLEdBSEFBLEdBQUFvL0IsRUFBQUcsRUFBQTlZLFdBQUE4WSxFQUFBaFosV0FHQTZZLEdBQUFJLEdBa0JBLElBSEFocUIsR0FEQThwQixHQURBcEssR0FIQTZCLEdBSkFDLEdBREEvTixFQUFBc1csR0FDQXpjLEtBQUFtRyxFQUFBbkcsUUFJQW1HLEVBQUFrTyxZQUNBSCxFQUFBL04sRUFBQWtPLGVBRUF6ekIsUUFDQSxLQUFBd3pCLEdBQUFoQyxFQUFBLEtBQ0FBLEVBQUEsR0FDQWpNLEVBQUFxVyxHQUFBQyxFQUFBL1ksV0FBQThZLEdBRUFyVyxJQUFBcVcsR0FBQXJXLEdBQUFBLEVBQUF0SCxLQUdBbk0sRUFBQThwQixFQUFBLElBQUF0L0IsRUFBQTA1QixPQUdBLEdBQUEsSUFBQXpRLEVBQUFsSixZQUFBdkssR0FBQXlULElBQUFqSSxFQUFBLENBQ0ErVixFQUFBcnpCLElBQUF3ekIsRUFBQW9JLEVBQUE5cEIsR0FDQSxZQXVCQSxHQWpCQWdxQixJQVlBaHFCLEVBREE4cEIsR0FEQXBLLEdBSEE2QixHQUpBQyxHQURBL04sRUFBQWpJLEdBQ0E4QixLQUFBbUcsRUFBQW5HLFFBSUFtRyxFQUFBa08sWUFDQUgsRUFBQS9OLEVBQUFrTyxlQUVBenpCLFFBQ0EsS0FBQXd6QixHQUFBaEMsRUFBQSxLQU1BLElBQUExZixFQUVBLE1BQUF5VCxJQUFBcVcsR0FBQXJXLEdBQUFBLEVBQUF0SCxLQUNBbk0sRUFBQThwQixFQUFBLElBQUF0L0IsRUFBQTA1QixVQUVBMkYsRUFDQXBXLEVBQUFsSSxTQUFBMUssZ0JBQUF4TSxFQUNBLElBQUFvZixFQUFBbEosY0FDQXZLLElBR0FncUIsS0FLQXpJLEdBSkFDLEVBQUEvTixFQUFBbkcsS0FBQW1HLEVBQUFuRyxRQUlBbUcsRUFBQWtPLFlBQ0FILEVBQUEvTixFQUFBa08sZUFFQXp6QixJQUFBd3pCLEVBQUExaEIsSUFHQXlULElBQUFqSSxNQVVBLE9BREF4TCxHQUFBZ2QsS0FDQXpKLEdBQUF2VCxFQUFBdVQsR0FBQSxHQUFBdlQsRUFBQXVULEdBQUEsS0FLQXlTLE9BQUEsU0FBQWlFLEVBQUF2SixHQUtBLElBQUEzeEIsRUFDQUQsRUFBQTZ3QixFQUFBeUYsUUFBQTZFLElBQUF0SyxFQUFBaUIsV0FBQXFKLEVBQUFwcEIsZ0JBQ0FxZCxFQUFBN25CLE1BQUEsdUJBQUE0ekIsR0FLQSxPQUFBbjdCLEVBQUF3ZSxHQUNBeGUsRUFBQTR4QixHQUlBNXhCLEVBQUFsRixPQUFBLEdBQ0FtRixHQUFBazdCLEVBQUFBLEVBQUEsR0FBQXZKLEdBQ0FmLEVBQUFpQixXQUFBOXNCLGVBQUFtMkIsRUFBQXBwQixlQUNBZ2YsRUFBQSxTQUFBMUIsRUFBQTFJLEdBSUEsSUFIQSxJQUFBeVUsRUFDQUMsRUFBQXI3QixFQUFBcXZCLEVBQUF1QyxHQUNBcjNCLEVBQUE4Z0MsRUFBQXZnQyxPQUNBUCxLQUVBODBCLEVBREErTCxFQUFBdDFCLEVBQUF1cEIsRUFBQWdNLEVBQUE5Z0MsT0FDQW9zQixFQUFBeVUsR0FBQUMsRUFBQTlnQyxNQUdBLFNBQUFtaUIsR0FDQSxPQUFBMWMsRUFBQTBjLEVBQUEsRUFBQXpjLEtBSUFELElBSUFzMkIsU0FFQXhaLElBQUFpVSxFQUFBLFNBQUFsTyxHQUlBLElBQUE0VixLQUNBemdCLEtBQ0FpYSxFQUFBdUQsRUFBQTNTLEVBQUFwZ0IsUUFBQThxQixHQUFBLE9BRUEsT0FBQTBFLEVBQUF6VCxHQUNBdVMsRUFBQSxTQUFBMUIsRUFBQTFJLEVBQUFqRyxFQUFBNlIsR0FNQSxJQUxBLElBQUE3VixFQUNBeVcsRUFBQWxCLEVBQUE1QyxFQUFBLEtBQUFrRCxNQUNBaDRCLEVBQUE4MEIsRUFBQXYwQixPQUdBUCxNQUNBbWlCLEVBQUF5VyxFQUFBNTRCLE1BQ0E4MEIsRUFBQTkwQixLQUFBb3NCLEVBQUFwc0IsR0FBQW1pQixNQUlBLFNBQUFBLEVBQUFnRSxFQUFBNlIsR0FLQSxPQUpBa0csRUFBQSxHQUFBL2IsRUFDQXVWLEVBQUF3RyxFQUFBLEtBQUFsRyxFQUFBdmEsR0FFQXlnQixFQUFBLEdBQUEsTUFDQXpnQixFQUFBb2QsU0FJQTdiLElBQUF3WCxFQUFBLFNBQUFsTyxHQUNBLE9BQUEsU0FBQW5HLEdBQ0EsT0FBQTBTLEVBQUF2TSxFQUFBbkcsR0FBQTVoQixPQUFBLEtBSUF5bUIsU0FBQXdQLEVBQUEsU0FBQTFVLEdBRUEsT0FEQUEsRUFBQUEsRUFBQTVaLFFBQUFnMUIsR0FBQUMsSUFDQSxTQUFBaGIsR0FDQSxPQUFBQSxFQUFBMEYsYUFBQTFGLEVBQUE0ZSxXQUFBaEcsRUFBQTVZLElBQUE1VyxRQUFBdVcsSUFBQSxLQVdBa2YsS0FBQXhLLEVBQUEsU0FBQXdLLEdBTUEsT0FKQTNFLEdBQUF0ckIsS0FBQWl3QixHQUFBLEtBQ0FuTSxFQUFBN25CLE1BQUEscUJBQUFnMEIsR0FFQUEsRUFBQUEsRUFBQTk0QixRQUFBZzFCLEdBQUFDLElBQUEzbEIsY0FDQSxTQUFBMkssR0FDQSxJQUFBOGUsRUFDQSxHQUNBLEdBQUFBLEVBQUE1TCxFQUNBbFQsRUFBQTZlLEtBQ0E3ZSxFQUFBb0MsYUFBQSxhQUFBcEMsRUFBQW9DLGFBQUEsUUFHQSxPQURBMGMsRUFBQUEsRUFBQXpwQixpQkFDQXdwQixHQUFBLElBQUFDLEVBQUExMUIsUUFBQXkxQixFQUFBLFlBRUE3ZSxFQUFBQSxFQUFBblMsYUFBQSxJQUFBbVMsRUFBQWpCLFVBQ0EsT0FBQSxLQUtBdFAsT0FBQSxTQUFBdVEsR0FDQSxJQUFBM0osRUFBQXhELEVBQUFuTixVQUFBbU4sRUFBQW5OLFNBQUEyUSxLQUNBLE9BQUFBLEdBQUFBLEVBQUFqWCxNQUFBLEtBQUE0Z0IsRUFBQWxZLElBR0FnVixLQUFBLFNBQUFrRCxHQUNBLE9BQUFBLElBQUFpWixHQUdBOEYsTUFBQSxTQUFBL2UsR0FDQSxPQUFBQSxJQUFBeFMsRUFBQXlZLGlCQUFBelksRUFBQXd4QixVQUFBeHhCLEVBQUF3eEIsZ0JBQUFoZixFQUFBdGQsTUFBQXNkLEVBQUFpZixPQUFBamYsRUFBQWtmLFdBSUExb0IsUUFBQXFlLEdBQUEsR0FDQUMsU0FBQUQsR0FBQSxHQUVBbE4sUUFBQSxTQUFBM0gsR0FHQSxJQUFBRCxFQUFBQyxFQUFBRCxTQUFBMUssY0FDQSxNQUFBLFVBQUEwSyxLQUFBQyxFQUFBMkgsU0FBQSxXQUFBNUgsS0FBQUMsRUFBQTZPLFVBR0FBLFNBQUEsU0FBQTdPLEdBT0EsT0FKQUEsRUFBQW5TLFlBQ0FtUyxFQUFBblMsV0FBQXN4QixlQUdBLElBQUFuZixFQUFBNk8sVUFJQXpoQixNQUFBLFNBQUE0UyxHQUtBLElBQUFBLEVBQUFBLEVBQUF5RixXQUFBekYsRUFBQUEsRUFBQUEsRUFBQTRVLFlBQ0EsR0FBQTVVLEVBQUFqQixTQUFBLEVBQ0EsT0FBQSxFQUdBLE9BQUEsR0FHQXdmLE9BQUEsU0FBQXZlLEdBQ0EsT0FBQW1VLEVBQUF5RixRQUFBLE1BQUE1WixJQUlBb2YsT0FBQSxTQUFBcGYsR0FDQSxPQUFBNmEsR0FBQWpzQixLQUFBb1IsRUFBQUQsV0FHQWdjLE1BQUEsU0FBQS9iLEdBQ0EsT0FBQTRhLEdBQUFoc0IsS0FBQW9SLEVBQUFELFdBR0FzZixPQUFBLFNBQUFyZixHQUNBLElBQUFuWCxFQUFBbVgsRUFBQUQsU0FBQTFLLGNBQ0EsTUFBQSxVQUFBeE0sR0FBQSxXQUFBbVgsRUFBQXRkLE1BQUEsV0FBQW1HLEdBR0E4VyxLQUFBLFNBQUFLLEdBQ0EsSUFBQStjLEVBQ0EsTUFBQSxVQUFBL2MsRUFBQUQsU0FBQTFLLGVBQ0EsU0FBQTJLLEVBQUF0ZCxPQUlBLE9BQUFxNkIsRUFBQS9jLEVBQUFvQyxhQUFBLFVBQUEsU0FBQTJhLEVBQUExbkIsZ0JBSUEwUyxNQUFBa04sRUFBQSxXQUNBLE9BQUEsS0FHQXpELEtBQUF5RCxFQUFBLFNBQUFFLEVBQUEvMkIsR0FDQSxPQUFBQSxFQUFBLEtBR0FrcUIsR0FBQTJNLEVBQUEsU0FBQUUsRUFBQS8yQixFQUFBODJCLEdBQ0EsT0FBQUEsRUFBQSxFQUFBQSxFQUFBOTJCLEVBQUE4MkIsS0FHQW9LLEtBQUFySyxFQUFBLFNBQUFFLEVBQUEvMkIsR0FFQSxJQURBLElBQUFQLEVBQUEsRUFDQUEsRUFBQU8sRUFBQVAsR0FBQSxFQUNBczNCLEVBQUFqeEIsS0FBQXJHLEdBRUEsT0FBQXMzQixJQUdBb0ssSUFBQXRLLEVBQUEsU0FBQUUsRUFBQS8yQixHQUVBLElBREEsSUFBQVAsRUFBQSxFQUNBQSxFQUFBTyxFQUFBUCxHQUFBLEVBQ0FzM0IsRUFBQWp4QixLQUFBckcsR0FFQSxPQUFBczNCLElBR0FxSyxHQUFBdkssRUFBQSxTQUFBRSxFQUFBLzJCLEVBQUE4MkIsR0FFQSxJQURBLElBQUFyM0IsRUFBQXEzQixFQUFBLEVBQUFBLEVBQUE5MkIsRUFBQTgyQixJQUNBcjNCLEdBQUEsR0FDQXMzQixFQUFBanhCLEtBQUFyRyxHQUVBLE9BQUFzM0IsSUFHQXNLLEdBQUF4SyxFQUFBLFNBQUFFLEVBQUEvMkIsRUFBQTgyQixHQUVBLElBREEsSUFBQXIzQixFQUFBcTNCLEVBQUEsRUFBQUEsRUFBQTkyQixFQUFBODJCLElBQ0FyM0IsRUFBQU8sR0FDQSsyQixFQUFBanhCLEtBQUFyRyxHQUVBLE9BQUFzM0IsT0FLQXlFLFFBQUEsSUFBQXpGLEVBQUF5RixRQUFBLEdBR0EsSUFBQS83QixLQUFBNmhDLE9BQUEsRUFBQUMsVUFBQSxFQUFBQyxNQUFBLEVBQUFDLFVBQUEsRUFBQUMsT0FBQSxHQUNBM0wsRUFBQXlGLFFBQUEvN0IsR0F4cENBLFNBQUE2RSxHQUNBLE9BQUEsU0FBQXNkLEdBRUEsTUFBQSxVQURBQSxFQUFBRCxTQUFBMUssZUFDQTJLLEVBQUF0ZCxPQUFBQSxHQXFwQ0FxOUIsQ0FBQWxpQyxHQUVBLElBQUFBLEtBQUFpUyxRQUFBLEVBQUFuUCxPQUFBLEdBQ0F3ekIsRUFBQXlGLFFBQUEvN0IsR0FocENBLFNBQUE2RSxHQUNBLE9BQUEsU0FBQXNkLEdBQ0EsSUFBQW5YLEVBQUFtWCxFQUFBRCxTQUFBMUssY0FDQSxPQUFBLFVBQUF4TSxHQUFBLFdBQUFBLElBQUFtWCxFQUFBdGQsT0FBQUEsR0E2b0NBczlCLENBQUFuaUMsR0FtbkJBLE9BOW1CQXUzQixFQUFBajFCLFVBQUFnMEIsRUFBQThMLFFBQUE5TCxFQUFBeUYsUUFDQXpGLEVBQUFpQixXQUFBLElBQUFBLEVBRUF6QixFQUFBakIsRUFBQWlCLFNBQUEsU0FBQXhOLEVBQUErWixHQUNBLElBQUF2QixFQUFBL3BCLEVBQUF5Z0IsRUFBQTN5QixFQUNBeTlCLEVBQUF0TixFQUFBdU4sRUFDQUMsRUFBQWpILEVBQUFqVCxFQUFBLEtBRUEsR0FBQWthLEVBQ0EsT0FBQUgsRUFBQSxFQUFBRyxFQUFBamhDLE1BQUEsR0FPQSxJQUpBK2dDLEVBQUFoYSxFQUNBME0sS0FDQXVOLEVBQUFqTSxFQUFBMEMsVUFFQXNKLEdBQUEsQ0FHQXhCLEtBQUEvcEIsRUFBQWtsQixHQUFBaGlCLEtBQUFxb0IsTUFDQXZyQixJQUVBdXJCLEVBQUFBLEVBQUEvZ0MsTUFBQXdWLEVBQUEsR0FBQXhXLFNBQUEraEMsR0FFQXROLEVBQUEzdUIsS0FBQW14QixPQUdBc0osR0FBQSxHQUdBL3BCLEVBQUFtbEIsR0FBQWppQixLQUFBcW9CLE1BQ0F4QixFQUFBL3BCLEVBQUFyTCxRQUNBOHJCLEVBQUFueEIsTUFDQTJMLE1BQUE4dUIsRUFFQWo4QixLQUFBa1MsRUFBQSxHQUFBN08sUUFBQThxQixHQUFBLE9BRUFzUCxFQUFBQSxFQUFBL2dDLE1BQUF1L0IsRUFBQXZnQyxTQUlBLElBQUFzRSxLQUFBeXhCLEVBQUEzVCxTQUNBNUwsRUFBQXVsQixHQUFBejNCLEdBQUFvVixLQUFBcW9CLEtBQUFDLEVBQUExOUIsTUFDQWtTLEVBQUF3ckIsRUFBQTE5QixHQUFBa1MsTUFDQStwQixFQUFBL3BCLEVBQUFyTCxRQUNBOHJCLEVBQUFueEIsTUFDQTJMLE1BQUE4dUIsRUFDQWo4QixLQUFBQSxFQUNBdW5CLFFBQUFyVixJQUVBdXJCLEVBQUFBLEVBQUEvZ0MsTUFBQXUvQixFQUFBdmdDLFNBSUEsSUFBQXVnQyxFQUNBLE1BT0EsT0FBQXVCLEVBQ0FDLEVBQUEvaEMsT0FDQStoQyxFQUNBek4sRUFBQTduQixNQUFBc2IsR0FFQWlULEVBQUFqVCxFQUFBME0sR0FBQXp6QixNQUFBLElBK1hBMDVCLEVBQUFwRyxFQUFBb0csUUFBQSxTQUFBM1MsRUFBQXZSLEdBQ0EsSUFBQS9XLEVBQ0FtNkIsS0FDQUQsS0FDQXNJLEVBQUE5TSxFQUFBcE4sRUFBQSxLQUVBLElBQUFrYSxFQUFBLENBTUEsSUFKQXpyQixJQUNBQSxFQUFBK2UsRUFBQXhOLElBRUF0b0IsRUFBQStXLEVBQUF4VyxPQUNBUCxNQUNBd2lDLEVBQUEvSSxFQUFBMWlCLEVBQUEvVyxLQUNBaWtCLEdBQ0FrVyxFQUFBOXpCLEtBQUFtOEIsR0FFQXRJLEVBQUE3ekIsS0FBQW04QixJQUtBQSxFQUFBOU0sRUFBQXBOLEVBQUEyUixFQUFBQyxFQUFBQyxLQUdBN1IsU0FBQUEsRUFFQSxPQUFBa2EsR0FZQXJNLEVBQUF0QixFQUFBc0IsT0FBQSxTQUFBN04sRUFBQW5DLEVBQUExSSxFQUFBcVgsR0FDQSxJQUFBOTBCLEVBQUF3M0IsRUFBQWlMLEVBQUE1OUIsRUFBQTgxQixFQUNBK0gsRUFBQSxtQkFBQXBhLEdBQUFBLEVBQ0F2UixHQUFBK2QsR0FBQWdCLEVBQUF4TixFQUFBb2EsRUFBQXBhLFVBQUFBLEdBTUEsR0FKQTdLLEVBQUFBLE1BSUEsSUFBQTFHLEVBQUF4VyxPQUFBLENBSUEsSUFEQWkzQixFQUFBemdCLEVBQUEsR0FBQUEsRUFBQSxHQUFBeFYsTUFBQSxJQUNBaEIsT0FBQSxHQUFBLFFBQUFraUMsRUFBQWpMLEVBQUEsSUFBQTN5QixNQUNBLElBQUFzaEIsRUFBQWpGLFVBQUFtVSxHQUFBaUIsRUFBQXNELFNBQUFwQyxFQUFBLEdBQUEzeUIsTUFBQSxDQUdBLEtBREFzaEIsR0FBQW1RLEVBQUFxRSxLQUFBLEdBQUE4SCxFQUFBclcsUUFBQSxHQUFBbGtCLFFBQUFnMUIsR0FBQUMsSUFBQWhYLFFBQUEsSUFFQSxPQUFBMUksRUFHQWlsQixJQUNBdmMsRUFBQUEsRUFBQW5XLFlBR0FzWSxFQUFBQSxFQUFBL21CLE1BQUFpMkIsRUFBQTlyQixRQUFBc0csTUFBQXpSLFFBS0EsSUFEQVAsRUFBQXM4QixHQUFBLGFBQUF2ckIsS0FBQXVYLEdBQUEsRUFBQWtQLEVBQUFqM0IsT0FDQVAsTUFDQXlpQyxFQUFBakwsRUFBQXgzQixJQUdBczJCLEVBQUFzRCxTQUFBLzBCLEVBQUE0OUIsRUFBQTU5QixRQUdBLElBQUE4MUIsRUFBQXJFLEVBQUFxRSxLQUFBOTFCLE1BRUFpd0IsRUFBQTZGLEVBQ0E4SCxFQUFBclcsUUFBQSxHQUFBbGtCLFFBQUFnMUIsR0FBQUMsSUFDQW5ILEdBQUFqbEIsS0FBQXltQixFQUFBLEdBQUEzeUIsT0FBQW94QixFQUFBOVAsRUFBQW5XLGFBQUFtVyxJQUNBLENBS0EsR0FGQXFSLEVBQUEzd0IsT0FBQTdHLEVBQUEsS0FDQXNvQixFQUFBd00sRUFBQXYwQixRQUFBdzFCLEVBQUF5QixJQUdBLE9BREFueEIsRUFBQVQsTUFBQTZYLEVBQUFxWCxHQUNBclgsRUFHQSxPQWVBLE9BUEFpbEIsR0FBQXpILEVBQUEzUyxFQUFBdlIsSUFDQStkLEVBQ0EzTyxHQUNBa1AsRUFDQTVYLEdBQ0EwSSxHQUFBNlAsR0FBQWpsQixLQUFBdVgsSUFBQTJOLEVBQUE5UCxFQUFBblcsYUFBQW1XLEdBRUExSSxHQU1BNk0sRUFBQWtWLFdBQUF2YixFQUFBckssTUFBQSxJQUFBZ2EsS0FBQTRILEdBQUExbEIsS0FBQSxNQUFBbU8sRUFJQXFHLEVBQUFpVixtQkFBQXBFLEVBR0EvRixJQUlBOUssRUFBQXVVLGFBQUFwSSxFQUFBLFNBQUF6YSxHQUVBLE9BQUEsRUFBQUEsRUFBQXlpQix3QkFBQTl1QixFQUFBVSxjQUFBLGVBTUFvbUIsRUFBQSxTQUFBemEsR0FFQSxPQURBQSxFQUFBd0wsVUFBQSxtQkFDQSxNQUFBeEwsRUFBQTRMLFdBQUFyRCxhQUFBLFdBRUFtUyxFQUFBLHlCQUFBLFNBQUF2VSxFQUFBblgsRUFBQWd3QixHQUNBLElBQUFBLEVBQ0EsT0FBQTdZLEVBQUFvQyxhQUFBdlosRUFBQSxTQUFBQSxFQUFBd00sY0FBQSxFQUFBLEtBT0E4UyxFQUFBd1IsWUFBQXJGLEVBQUEsU0FBQXphLEdBR0EsT0FGQUEsRUFBQXdMLFVBQUEsV0FDQXhMLEVBQUE0TCxXQUFBOVYsYUFBQSxRQUFBLElBQ0EsS0FBQWtLLEVBQUE0TCxXQUFBckQsYUFBQSxZQUVBbVMsRUFBQSxRQUFBLFNBQUF2VSxFQUFBblgsRUFBQWd3QixHQUNBLElBQUFBLEdBQUEsVUFBQTdZLEVBQUFELFNBQUExSyxjQUNBLE9BQUEySyxFQUFBNEgsZUFPQTBNLEVBQUEsU0FBQXphLEdBQ0EsT0FBQSxNQUFBQSxFQUFBdUksYUFBQSxlQUVBbVMsRUFBQWlGLEVBQUEsU0FBQXhaLEVBQUFuWCxFQUFBZ3dCLEdBQ0EsSUFBQTNoQixFQUNBLElBQUEyaEIsRUFDQSxPQUFBLElBQUE3WSxFQUFBblgsR0FBQUEsRUFBQXdNLGVBQ0E2QixFQUFBOEksRUFBQThiLGlCQUFBanpCLEtBQUFxTyxFQUFBOGxCLFVBQ0E5bEIsRUFBQXJILE1BQ0EsT0FLQTZpQixFQWhzRUEsQ0Frc0VBN2YsR0FJQWdOLEdBQUEyWSxLQUFBOUYsR0FDQTdTLEdBQUFpZCxLQUFBcEssR0FBQTZLLFVBR0ExZCxHQUFBaWQsS0FBQSxLQUFBamQsR0FBQWlkLEtBQUFsRCxRQUNBL1osR0FBQThZLFdBQUE5WSxHQUFBMmdCLE9BQUE5TixHQUFBaUcsV0FDQTlZLEdBQUFGLEtBQUErUyxHQUFBa0csUUFDQS9ZLEdBQUE0Z0IsU0FBQS9OLEdBQUFtRyxNQUNBaFosR0FBQWdGLFNBQUE2TixHQUFBN04sU0FDQWhGLEdBQUE2Z0IsZUFBQWhPLEdBQUF1SyxPQUtBLElBQUF0YyxHQUFBLFNBQUFYLEVBQUFXLEVBQUFnZ0IsR0FJQSxJQUhBLElBQUFoQyxLQUNBaUMsT0FBQXI1QixJQUFBbzVCLEdBRUEzZ0IsRUFBQUEsRUFBQVcsS0FBQSxJQUFBWCxFQUFBakIsVUFDQSxHQUFBLElBQUFpQixFQUFBakIsU0FBQSxDQUNBLEdBQUE2aEIsR0FBQS9nQixHQUFBRyxHQUFBNmdCLEdBQUFGLEdBQ0EsTUFFQWhDLEVBQUF6NkIsS0FBQThiLEdBR0EsT0FBQTJlLEdBSUFtQyxHQUFBLFNBQUF4akMsRUFBQTBpQixHQUdBLElBRkEsSUFBQTJlLEtBRUFyaEMsRUFBQUEsRUFBQUEsRUFBQXMzQixZQUNBLElBQUF0M0IsRUFBQXloQixVQUFBemhCLElBQUEwaUIsR0FDQTJlLEVBQUF6NkIsS0FBQTVHLEdBSUEsT0FBQXFoQyxHQUlBb0MsR0FBQWxoQixHQUFBaWQsS0FBQWxvQixNQUFBK2xCLGFBU0FxRyxHQUFBLGtFQUlBemdCLEdBQUEsaUJBb0NBVixHQUFBVyxPQUFBLFNBQUFzYyxFQUFBeFksRUFBQWxFLEdBQ0EsSUFBQUosRUFBQXNFLEVBQUEsR0FNQSxPQUpBbEUsSUFDQTBjLEVBQUEsUUFBQUEsRUFBQSxLQUdBLElBQUF4WSxFQUFBbG1CLFFBQUEsSUFBQTRoQixFQUFBakIsU0FDQWMsR0FBQTJZLEtBQUF3RCxnQkFBQWhjLEVBQUE4YyxJQUFBOWMsTUFHQUgsR0FBQTJZLEtBQUF2TyxRQUFBNlMsRUFBQWpkLEdBQUFTLEtBQUFnRSxFQUFBLFNBQUF0RSxHQUNBLE9BQUEsSUFBQUEsRUFBQWpCLGFBSUFjLEdBQUF2YyxHQUFBa2tCLFFBQ0FnUixLQUFBLFNBQUFyUyxHQUNBLElBQUF0b0IsRUFBQXFtQixFQUNBL2lCLEVBQUF2QixLQUFBeEIsT0FDQWlMLEVBQUF6SixLQUVBLEdBQUEsaUJBQUF1bUIsRUFDQSxPQUFBdm1CLEtBQUEweEIsVUFBQXpSLEdBQUFzRyxHQUFBM0YsT0FBQSxXQUNBLElBQUEzaUIsRUFBQSxFQUFBQSxFQUFBc0QsRUFBQXRELElBQ0EsR0FBQWdpQixHQUFBZ0YsU0FBQXhiLEVBQUF4TCxHQUFBK0IsTUFDQSxPQUFBLEtBUUEsSUFGQXNrQixFQUFBdGtCLEtBQUEweEIsY0FFQXp6QixFQUFBLEVBQUFBLEVBQUFzRCxFQUFBdEQsSUFDQWdpQixHQUFBMlksS0FBQXJTLEVBQUE5YyxFQUFBeEwsR0FBQXFtQixHQUdBLE9BQUEvaUIsRUFBQSxFQUFBMGUsR0FBQThZLFdBQUF6VSxHQUFBQSxHQUVBMUQsT0FBQSxTQUFBMkYsR0FDQSxPQUFBdm1CLEtBQUEweEIsVUFBQXJSLEVBQUFyZ0IsS0FBQXVtQixPQUFBLEtBRUEvRixJQUFBLFNBQUErRixHQUNBLE9BQUF2bUIsS0FBQTB4QixVQUFBclIsRUFBQXJnQixLQUFBdW1CLE9BQUEsS0FFQTBhLEdBQUEsU0FBQTFhLEdBQ0EsUUFBQWxHLEVBQ0FyZ0IsS0FJQSxpQkFBQXVtQixHQUFBNGEsR0FBQW55QixLQUFBdVgsR0FDQXRHLEdBQUFzRyxHQUNBQSxPQUNBLEdBQ0EvbkIsVUFTQSxJQUFBNmlDLEdBTUE5TixHQUFBLHVDQUVBdFQsR0FBQXZjLEdBQUE4VCxLQUFBLFNBQUErTyxFQUFBbkMsRUFBQWxILEdBQ0EsSUFBQWxJLEVBQUFvTCxFQUdBLElBQUFtRyxFQUNBLE9BQUF2bUIsS0FRQSxHQUhBa2QsRUFBQUEsR0FBQW1rQixHQUdBLGlCQUFBOWEsRUFBQSxDQWFBLEtBUEF2UixFQUxBLE1BQUF1UixFQUFBLElBQ0EsTUFBQUEsRUFBQUEsRUFBQS9uQixPQUFBLElBQ0ErbkIsRUFBQS9uQixRQUFBLEdBR0EsS0FBQStuQixFQUFBLE1BR0FnTixHQUFBcmIsS0FBQXFPLE1BSUF2UixFQUFBLElBQUFvUCxFQTZDQSxPQUFBQSxHQUFBQSxFQUFBbU4sUUFDQW5OLEdBQUFsSCxHQUFBMGIsS0FBQXJTLEdBS0F2bUIsS0FBQW1GLFlBQUFpZixHQUFBd1UsS0FBQXJTLEdBaERBLEdBQUF2UixFQUFBLEdBQUEsQ0FZQSxHQVhBb1AsRUFBQUEsYUFBQW5FLEdBQUFtRSxFQUFBLEdBQUFBLEVBSUFuRSxHQUFBdUUsTUFBQXhrQixLQUFBaWdCLEdBQUFxaEIsVUFDQXRzQixFQUFBLEdBQ0FvUCxHQUFBQSxFQUFBakYsU0FBQWlGLEVBQUFWLGVBQUFVLEVBQUF4VyxJQUNBLElBSUF3ekIsR0FBQXB5QixLQUFBZ0csRUFBQSxLQUFBaUwsR0FBQThSLGNBQUEzTixHQUNBLElBQUFwUCxLQUFBb1AsRUFHQW5FLEdBQUFRLFdBQUF6Z0IsS0FBQWdWLElBQ0FoVixLQUFBZ1YsR0FBQW9QLEVBQUFwUCxJQUlBaFYsS0FBQW05QixLQUFBbm9CLEVBQUFvUCxFQUFBcFAsSUFLQSxPQUFBaFYsS0FZQSxPQVJBb2dCLEVBQUF4UyxHQUFBNGxCLGVBQUF4ZSxFQUFBLE9BS0FoVixLQUFBLEdBQUFvZ0IsRUFDQXBnQixLQUFBeEIsT0FBQSxHQUVBd0IsS0FjQSxPQUFBdW1CLEVBQUFwSCxVQUNBbmYsS0FBQSxHQUFBdW1CLEVBQ0F2bUIsS0FBQXhCLE9BQUEsRUFDQXdCLE1BSUFpZ0IsR0FBQVEsV0FBQThGLFFBQ0E1ZSxJQUFBdVYsRUFBQThFLE1BQ0E5RSxFQUFBOEUsTUFBQXVFLEdBR0FBLEVBQUF0RyxJQUdBQSxHQUFBc1MsVUFBQWhNLEVBQUF2bUIsUUFJQU8sVUFBQTBmLEdBQUF2YyxHQUdBMjlCLEdBQUFwaEIsR0FBQXJTLElBR0EsSUFBQTJ6QixHQUFBLGlDQUdBQyxJQUNBQyxVQUFBLEVBQ0ExUixVQUFBLEVBQ0FoVyxNQUFBLEVBQ0EvQyxNQUFBLEdBR0FpSixHQUFBdmMsR0FBQWtrQixRQUNBM0ssSUFBQSxTQUFBcE4sR0FDQSxJQUFBNnhCLEVBQUF6aEIsR0FBQXBRLEVBQUE3UCxNQUNBM0IsRUFBQXFqQyxFQUFBbGpDLE9BRUEsT0FBQXdCLEtBQUE0Z0IsT0FBQSxXQUVBLElBREEsSUFBQTNpQixFQUFBLEVBQ0FBLEVBQUFJLEVBQUFKLElBQ0EsR0FBQWdpQixHQUFBZ0YsU0FBQWpsQixLQUFBMGhDLEVBQUF6akMsSUFDQSxPQUFBLEtBTUEwakMsUUFBQSxTQUFBaEUsRUFBQXZaLEdBQ0EsSUFBQXRELEVBQ0E3aUIsRUFBQSxFQUNBSSxFQUFBMkIsS0FBQXhCLE9BQ0F1Z0MsS0FDQTJDLEVBQUEsaUJBQUEvRCxHQUFBMWQsR0FBQTBkLEdBR0EsSUFBQXdELEdBQUFueUIsS0FBQTJ1QixHQUNBLEtBQUExL0IsRUFBQUksRUFBQUosSUFDQSxJQUFBNmlCLEVBQUE5Z0IsS0FBQS9CLEdBQUE2aUIsR0FBQUEsSUFBQXNELEVBQUF0RCxFQUFBQSxFQUFBN1MsV0FHQSxHQUFBNlMsRUFBQTNCLFNBQUEsS0FBQXVpQixFQUNBQSxFQUFBOTRCLE1BQUFrWSxJQUFBLEVBR0EsSUFBQUEsRUFBQTNCLFVBQ0FjLEdBQUEyWSxLQUFBd0QsZ0JBQUF0YixFQUFBNmMsSUFBQSxDQUVBb0IsRUFBQXo2QixLQUFBd2MsR0FDQSxNQU1BLE9BQUE5Z0IsS0FBQTB4QixVQUFBcU4sRUFBQXZnQyxPQUFBLEVBQUF5aEIsR0FBQThZLFdBQUFnRyxHQUFBQSxJQUlBbjJCLE1BQUEsU0FBQXdYLEdBR0EsT0FBQUEsRUFLQSxpQkFBQUEsRUFDQTVXLEdBQUFqTCxLQUFBMGhCLEdBQUFHLEdBQUFwZ0IsS0FBQSxJQUlBd0osR0FBQWpMLEtBQUF5QixLQUdBb2dCLEVBQUFtUixPQUFBblIsRUFBQSxHQUFBQSxHQVpBcGdCLEtBQUEsSUFBQUEsS0FBQSxHQUFBaU8sV0FBQWpPLEtBQUFtb0IsUUFBQXlaLFVBQUFwakMsUUFBQSxHQWdCQW1vQixJQUFBLFNBQUFKLEVBQUFuQyxHQUNBLE9BQUFwa0IsS0FBQTB4QixVQUNBelIsR0FBQThZLFdBQ0E5WSxHQUFBdUUsTUFBQXhrQixLQUFBaWtCLE1BQUFoRSxHQUFBc0csRUFBQW5DLE9BS0F5ZCxRQUFBLFNBQUF0YixHQUNBLE9BQUF2bUIsS0FBQTJtQixJQUFBLE1BQUFKLEVBQ0F2bUIsS0FBQTJ4QixXQUFBM3hCLEtBQUEyeEIsV0FBQS9RLE9BQUEyRixPQVVBdEcsR0FBQW5HLE1BQ0E2a0IsT0FBQSxTQUFBdmUsR0FDQSxJQUFBdWUsRUFBQXZlLEVBQUFuUyxXQUNBLE9BQUEwd0IsR0FBQSxLQUFBQSxFQUFBeGYsU0FBQXdmLEVBQUEsTUFFQW1ELFFBQUEsU0FBQTFoQixHQUNBLE9BQUFXLEdBQUFYLEVBQUEsZUFFQTJoQixhQUFBLFNBQUEzaEIsRUFBQW5pQixFQUFBOGlDLEdBQ0EsT0FBQWhnQixHQUFBWCxFQUFBLGFBQUEyZ0IsSUFFQWhuQixLQUFBLFNBQUFxRyxHQUNBLE9BQUFTLEVBQUFULEVBQUEsZ0JBRUFwSixLQUFBLFNBQUFvSixHQUNBLE9BQUFTLEVBQUFULEVBQUEsb0JBRUE0aEIsUUFBQSxTQUFBNWhCLEdBQ0EsT0FBQVcsR0FBQVgsRUFBQSxnQkFFQXdoQixRQUFBLFNBQUF4aEIsR0FDQSxPQUFBVyxHQUFBWCxFQUFBLG9CQUVBNmhCLFVBQUEsU0FBQTdoQixFQUFBbmlCLEVBQUE4aUMsR0FDQSxPQUFBaGdCLEdBQUFYLEVBQUEsY0FBQTJnQixJQUVBbUIsVUFBQSxTQUFBOWhCLEVBQUFuaUIsRUFBQThpQyxHQUNBLE9BQUFoZ0IsR0FBQVgsRUFBQSxrQkFBQTJnQixJQUVBRyxTQUFBLFNBQUE5Z0IsR0FDQSxPQUFBOGdCLElBQUE5Z0IsRUFBQW5TLGdCQUFBNFgsV0FBQXpGLElBRUFxaEIsU0FBQSxTQUFBcmhCLEdBQ0EsT0FBQThnQixHQUFBOWdCLEVBQUF5RixhQUVBa0ssU0FBQSxTQUFBM1AsR0FDQSxPQUFBRCxFQUFBQyxFQUFBLFVBQ0FBLEVBQUEraEIsaUJBTUFoaUIsRUFBQUMsRUFBQSxjQUNBQSxFQUFBQSxFQUFBeUcsU0FBQXpHLEdBR0FILEdBQUF1RSxTQUFBcEUsRUFBQXdGLGVBRUEsU0FBQTNjLEVBQUF2RixHQUNBdWMsR0FBQXZjLEdBQUF1RixHQUFBLFNBQUE4M0IsRUFBQXhhLEdBQ0EsSUFBQXdZLEVBQUE5ZSxHQUFBcEcsSUFBQTdaLEtBQUEwRCxFQUFBcTlCLEdBdUJBLE1BckJBLFVBQUE5M0IsRUFBQXpKLE9BQUEsS0FDQSttQixFQUFBd2EsR0FHQXhhLEdBQUEsaUJBQUFBLElBQ0F3WSxFQUFBOWUsR0FBQVcsT0FBQTJGLEVBQUF3WSxJQUdBLytCLEtBQUF4QixPQUFBLElBR0FnakMsR0FBQXY0QixJQUNBZ1gsR0FBQThZLFdBQUFnRyxHQUlBd0MsR0FBQXZ5QixLQUFBL0YsSUFDQTgxQixFQUFBcUQsV0FJQXBpQyxLQUFBMHhCLFVBQUFxTixNQUdBLElBQUE3ZCxHQUFBLG9CQW1DQWpCLEdBQUFvaUIsVUFBQSxTQUFBNS9CLEdBSUFBLEVBQUEsaUJBQUFBLEVBQ0F1ZSxFQUFBdmUsR0FDQXdkLEdBQUEySCxVQUFBbmxCLEdBRUEsSUFDQTYvQixFQUdBQyxFQUdBQyxFQUdBQyxFQUdBOUksS0FHQTdMLEtBR0E0VSxHQUFBLEVBR0FDLEVBQUEsV0FRQSxJQUxBRixFQUFBQSxHQUFBaGdDLEVBQUE4QixLQUlBaStCLEVBQUFGLEdBQUEsRUFDQXhVLEVBQUF0dkIsT0FBQWtrQyxHQUFBLEVBRUEsSUFEQUgsRUFBQXpVLEVBQUFua0IsVUFDQSs0QixFQUFBL0ksRUFBQW43QixTQUdBLElBQUFtN0IsRUFBQStJLEdBQUE3K0IsTUFBQTArQixFQUFBLEdBQUFBLEVBQUEsS0FDQTkvQixFQUFBbWdDLGNBR0FGLEVBQUEvSSxFQUFBbjdCLE9BQ0ErakMsR0FBQSxHQU1BOS9CLEVBQUE4L0IsU0FDQUEsR0FBQSxHQUdBRCxHQUFBLEVBR0FHLElBSUE5SSxFQURBNEksS0FLQSxLQU1BOTRCLEdBR0FrZCxJQUFBLFdBMkJBLE9BMUJBZ1QsSUFHQTRJLElBQUFELElBQ0FJLEVBQUEvSSxFQUFBbjdCLE9BQUEsRUFDQXN2QixFQUFBeHBCLEtBQUFpK0IsSUFHQSxTQUFBNWIsRUFBQWhqQixHQUNBc2MsR0FBQW5HLEtBQUFuVyxFQUFBLFNBQUF3ZCxFQUFBd1IsR0FDQTFTLEdBQUFRLFdBQUFrUyxHQUNBbHdCLEVBQUFtK0IsUUFBQW4zQixFQUFBd1QsSUFBQTBWLElBQ0FnSCxFQUFBcjFCLEtBQUFxdUIsR0FFQUEsR0FBQUEsRUFBQW4wQixRQUFBLFdBQUF5aEIsR0FBQW5kLEtBQUE2dkIsSUFHQWhNLEVBQUFnTSxLQVRBLENBWUEvdUIsV0FFQTIrQixJQUFBRCxHQUNBSyxLQUdBM2lDLE1BSUE2b0IsT0FBQSxXQVlBLE9BWEE1SSxHQUFBbkcsS0FBQWxXLFVBQUEsU0FBQXVkLEVBQUF3UixHQUVBLElBREEsSUFBQS9wQixHQUNBQSxFQUFBcVgsR0FBQStGLFFBQUEyTSxFQUFBZ0gsRUFBQS93QixLQUFBLEdBQ0Erd0IsRUFBQTcwQixPQUFBOEQsRUFBQSxHQUdBQSxHQUFBODVCLEdBQ0FBLE1BSUExaUMsTUFLQWlkLElBQUEsU0FBQXZaLEdBQ0EsT0FBQUEsRUFDQXVjLEdBQUErRixRQUFBdGlCLEVBQUFpMkIsSUFBQSxFQUNBQSxFQUFBbjdCLE9BQUEsR0FJQWdQLE1BQUEsV0FJQSxPQUhBbXNCLElBQ0FBLE1BRUEzNUIsTUFNQTBYLFFBQUEsV0FHQSxPQUZBK3FCLEVBQUEzVSxLQUNBNkwsRUFBQTRJLEVBQUEsR0FDQXZpQyxNQUVBazFCLFNBQUEsV0FDQSxPQUFBeUUsR0FNQWtKLEtBQUEsV0FLQSxPQUpBSixFQUFBM1UsS0FDQXlVLEdBQUFELElBQ0EzSSxFQUFBNEksRUFBQSxJQUVBdmlDLE1BRUF5aUMsT0FBQSxXQUNBLFFBQUFBLEdBSUFLLFNBQUEsU0FBQTFlLEVBQUF6Z0IsR0FTQSxPQVJBOCtCLElBRUE5K0IsR0FBQXlnQixHQURBemdCLEVBQUFBLE9BQ0FuRSxNQUFBbUUsRUFBQW5FLFFBQUFtRSxHQUNBbXFCLEVBQUF4cEIsS0FBQVgsR0FDQTIrQixHQUNBSyxLQUdBM2lDLE1BSUEyaUMsS0FBQSxXQUVBLE9BREFsNUIsRUFBQXE1QixTQUFBOWlDLEtBQUE0RCxXQUNBNUQsTUFJQXdpQyxNQUFBLFdBQ0EsUUFBQUEsSUFJQSxPQUFBLzRCLEdBNENBd1csR0FBQTJILFFBRUFrRixTQUFBLFNBQUE2QixHQUNBLElBQUFvVSxJQUlBLFNBQUEsV0FBQTlpQixHQUFBb2lCLFVBQUEsVUFDQXBpQixHQUFBb2lCLFVBQUEsVUFBQSxJQUNBLFVBQUEsT0FBQXBpQixHQUFBb2lCLFVBQUEsZUFDQXBpQixHQUFBb2lCLFVBQUEsZUFBQSxFQUFBLGFBQ0EsU0FBQSxPQUFBcGlCLEdBQUFvaUIsVUFBQSxlQUNBcGlCLEdBQUFvaUIsVUFBQSxlQUFBLEVBQUEsYUFFQTNSLEVBQUEsVUFDQTlPLEdBQ0E4TyxNQUFBLFdBQ0EsT0FBQUEsR0FFQTNELE9BQUEsV0FFQSxPQURBRixFQUFBbFosS0FBQS9QLFdBQUFpZSxLQUFBamUsV0FDQTVELE1BRUFnakMsTUFBQSxTQUFBdC9CLEdBQ0EsT0FBQWtlLEVBQUFFLEtBQUEsS0FBQXBlLElBSUF1L0IsS0FBQSxXQUNBLElBQUFDLEVBQUF0L0IsVUFFQSxPQUFBcWMsR0FBQTZNLFNBQUEsU0FBQXFXLEdBQ0FsakIsR0FBQW5HLEtBQUFpcEIsRUFBQSxTQUFBOWtDLEVBQUFtbEMsR0FHQSxJQUFBMS9CLEVBQUF1YyxHQUFBUSxXQUFBeWlCLEVBQUFFLEVBQUEsTUFBQUYsRUFBQUUsRUFBQSxJQUtBdlcsRUFBQXVXLEVBQUEsSUFBQSxXQUNBLElBQUFDLEVBQUEzL0IsR0FBQUEsRUFBQUcsTUFBQTdELEtBQUE0RCxXQUNBeS9CLEdBQUFwakIsR0FBQVEsV0FBQTRpQixFQUFBemhCLFNBQ0F5aEIsRUFBQXpoQixVQUNBbU0sU0FBQW9WLEVBQUFHLFFBQ0EzdkIsS0FBQXd2QixFQUFBMWhCLFNBQ0FJLEtBQUFzaEIsRUFBQXpoQixRQUVBeWhCLEVBQUFDLEVBQUEsR0FBQSxRQUNBcGpDLEtBQ0EwRCxHQUFBMi9CLEdBQUF6L0IsZUFLQXMvQixFQUFBLE9BQ0F0aEIsV0FFQUUsS0FBQSxTQUFBeWhCLEVBQUFDLEVBQUFDLEdBRUEsU0FBQWhpQixFQUFBaWlCLEVBQUE3VyxFQUFBK0gsRUFBQStPLEdBQ0EsT0FBQSxXQUNBLElBQUFDLEVBQUE1akMsS0FDQTJELEVBQUFDLFVBQ0FpZ0MsRUFBQSxXQUNBLElBQUFSLEVBQUF2aEIsRUFLQSxLQUFBNGhCLEVBQUFJLEdBQUEsQ0FRQSxJQUpBVCxFQUFBek8sRUFBQS93QixNQUFBKy9CLEVBQUFqZ0MsTUFJQWtwQixFQUFBakwsVUFDQSxNQUFBLElBQUFtaUIsVUFBQSw0QkFPQWppQixFQUFBdWhCLElBS0EsaUJBQUFBLEdBQ0EsbUJBQUFBLElBQ0FBLEVBQUF2aEIsS0FHQTdCLEdBQUFRLFdBQUFxQixHQUdBNmhCLEVBQ0E3aEIsRUFBQXZqQixLQUNBOGtDLEVBQ0E1aEIsRUFBQXFpQixFQUFBalgsRUFBQXhMLEVBQUFzaUIsR0FDQWxpQixFQUFBcWlCLEVBQUFqWCxFQUFBdkwsRUFBQXFpQixLQU9BRyxJQUVBaGlCLEVBQUF2akIsS0FDQThrQyxFQUNBNWhCLEVBQUFxaUIsRUFBQWpYLEVBQUF4TCxFQUFBc2lCLEdBQ0FsaUIsRUFBQXFpQixFQUFBalgsRUFBQXZMLEVBQUFxaUIsR0FDQWxpQixFQUFBcWlCLEVBQUFqWCxFQUFBeEwsRUFDQXdMLEVBQUFTLGVBU0FzSCxJQUFBdlQsSUFDQXVpQixPQUFBajhCLEVBQ0FoRSxHQUFBMC9CLEtBS0FNLEdBQUE5VyxFQUFBVSxhQUFBcVcsRUFBQWpnQyxNQUtBdVEsRUFBQXl2QixFQUNBRSxFQUNBLFdBQ0EsSUFDQUEsSUFDQSxNQUFBcm1DLEdBRUF5aUIsR0FBQTZNLFNBQUFrWCxlQUNBL2pCLEdBQUE2TSxTQUFBa1gsY0FBQXhtQyxFQUNBMFcsRUFBQSt2QixZQU1BUCxFQUFBLEdBQUFJLElBSUFsUCxJQUFBdFQsSUFDQXNpQixPQUFBajhCLEVBQ0FoRSxHQUFBbkcsSUFHQXF2QixFQUFBZSxXQUFBZ1csRUFBQWpnQyxNQVNBKy9CLEVBQ0F4dkIsS0FLQStMLEdBQUE2TSxTQUFBb1gsZUFDQWh3QixFQUFBK3ZCLFdBQUFoa0IsR0FBQTZNLFNBQUFvWCxnQkFFQWp4QixFQUFBdkosV0FBQXdLLEtBekhBLElBQUE0dkIsRUFBQSxFQThIQSxPQUFBN2pCLEdBQUE2TSxTQUFBLFNBQUFxVyxHQUdBSixFQUFBLEdBQUEsR0FBQXBjLElBQ0FsRixFQUNBLEVBQ0EwaEIsRUFDQWxqQixHQUFBUSxXQUFBZ2pCLEdBQ0FBLEVBQ0FwaUIsRUFDQThoQixFQUFBN1YsYUFLQXlWLEVBQUEsR0FBQSxHQUFBcGMsSUFDQWxGLEVBQ0EsRUFDQTBoQixFQUNBbGpCLEdBQUFRLFdBQUE4aUIsR0FDQUEsRUFDQWxpQixJQUtBMGhCLEVBQUEsR0FBQSxHQUFBcGMsSUFDQWxGLEVBQ0EsRUFDQTBoQixFQUNBbGpCLEdBQUFRLFdBQUEraUIsR0FDQUEsRUFDQWxpQixNQUdBTSxXQUtBQSxRQUFBLFNBQUFuZSxHQUNBLE9BQUEsTUFBQUEsRUFBQXdjLEdBQUEySCxPQUFBbmtCLEVBQUFtZSxHQUFBQSxJQUdBaUwsS0EyREEsT0F4REE1TSxHQUFBbkcsS0FBQWlwQixFQUFBLFNBQUE5a0MsRUFBQW1sQyxHQUNBLElBQUF6SixFQUFBeUosRUFBQSxHQUNBZSxFQUFBZixFQUFBLEdBS0F4aEIsRUFBQXdoQixFQUFBLElBQUF6SixFQUFBaFQsSUFHQXdkLEdBQ0F4SyxFQUFBaFQsSUFDQSxXQUlBK0osRUFBQXlULEdBS0FwQixFQUFBLEVBQUE5a0MsR0FBQSxHQUFBeVosUUFHQXFyQixFQUFBLEdBQUEsR0FBQUYsTUFPQWxKLEVBQUFoVCxJQUFBeWMsRUFBQSxHQUFBVCxNQUtBOVYsRUFBQXVXLEVBQUEsSUFBQSxXQUVBLE9BREF2VyxFQUFBdVcsRUFBQSxHQUFBLFFBQUFwakMsT0FBQTZzQixPQUFBbGxCLEVBQUEzSCxLQUFBNEQsV0FDQTVELE1BTUE2c0IsRUFBQXVXLEVBQUEsR0FBQSxRQUFBekosRUFBQW1KLFdBSUFsaEIsRUFBQUEsUUFBQWlMLEdBR0E4QixHQUNBQSxFQUFBcHdCLEtBQUFzdUIsRUFBQUEsR0FJQUEsR0FJQXVYLEtBQUEsU0FBQUMsR0FDQSxJQUdBcFgsRUFBQXJwQixVQUFBcEYsT0FHQVAsRUFBQWd2QixFQUdBcVgsRUFBQXJ0QixNQUFBaFosR0FDQXNtQyxFQUFBL2tDLEdBQUFqQixLQUFBcUYsV0FHQTRnQyxFQUFBdmtCLEdBQUE2TSxXQUdBMlgsRUFBQSxTQUFBeG1DLEdBQ0EsT0FBQSxTQUFBZ1MsR0FDQXEwQixFQUFBcm1DLEdBQUErQixLQUNBdWtDLEVBQUF0bUMsR0FBQTJGLFVBQUFwRixPQUFBLEVBQUFnQixHQUFBakIsS0FBQXFGLFdBQUFxTSxJQUNBZ2QsR0FDQXVYLEVBQUFqWCxZQUFBK1csRUFBQUMsS0FNQSxHQUFBdFgsR0FBQSxJQUNBekwsRUFBQTZpQixFQUFBRyxFQUFBN3dCLEtBQUE4d0IsRUFBQXhtQyxJQUFBd2pCLFFBQUEraUIsRUFBQTlpQixRQUNBdUwsR0FHQSxZQUFBdVgsRUFBQTlULFNBQ0F6USxHQUFBUSxXQUFBOGpCLEVBQUF0bUMsSUFBQXNtQyxFQUFBdG1DLEdBQUE2akIsT0FFQSxPQUFBMGlCLEVBQUExaUIsT0FLQSxLQUFBN2pCLEtBQ0F1akIsRUFBQStpQixFQUFBdG1DLEdBQUF3bUMsRUFBQXhtQyxHQUFBdW1DLEVBQUE5aUIsUUFHQSxPQUFBOGlCLEVBQUE1aUIsYUFPQSxJQUFBOGlCLEdBQUEseURBRUF6a0IsR0FBQTZNLFNBQUFrWCxjQUFBLFNBQUEvNEIsRUFBQXdNLEdBSUF4RSxFQUFBcUIsU0FBQXJCLEVBQUFxQixRQUFBcXdCLE1BQUExNUIsR0FBQXk1QixHQUFBMTFCLEtBQUEvRCxFQUFBaEMsT0FDQWdLLEVBQUFxQixRQUFBcXdCLEtBQUEsOEJBQUExNUIsRUFBQXFMLFFBQUFyTCxFQUFBd00sTUFBQUEsSUFPQXdJLEdBQUEya0IsZUFBQSxTQUFBMzVCLEdBQ0FnSSxFQUFBdkosV0FBQSxXQUNBLE1BQUF1QixLQVFBLElBQUE0NUIsR0FBQTVrQixHQUFBNk0sV0FFQTdNLEdBQUF2YyxHQUFBc2UsTUFBQSxTQUFBdGUsR0FZQSxPQVZBbWhDLEdBQ0EvaUIsS0FBQXBlLEdBS0FzL0IsTUFBQSxTQUFBLzNCLEdBQ0FnVixHQUFBMmtCLGVBQUEzNUIsS0FHQWpMLE1BR0FpZ0IsR0FBQTJILFFBR0FvSyxTQUFBLEVBSUE4UyxVQUFBLEVBR0E5aUIsTUFBQSxTQUFBK2lCLEtBR0EsSUFBQUEsSUFBQTlrQixHQUFBNmtCLFVBQUE3a0IsR0FBQStSLFdBS0EvUixHQUFBK1IsU0FBQSxHQUdBLElBQUErUyxLQUFBOWtCLEdBQUE2a0IsVUFBQSxHQUtBRCxHQUFBdFgsWUFBQTNmLElBQUFxUyxTQUlBQSxHQUFBK0IsTUFBQUYsS0FBQStpQixHQUFBL2lCLEtBYUEsYUFBQWxVLEdBQUFoSCxZQUNBLFlBQUFnSCxHQUFBaEgsYUFBQWdILEdBQUF3SCxnQkFBQTR2QixTQUdBL3hCLEVBQUF2SixXQUFBdVcsR0FBQStCLFFBS0FwVSxHQUFBekosaUJBQUEsbUJBQUE0ZCxHQUdBOU8sRUFBQTlPLGlCQUFBLE9BQUE0ZCxJQVFBLElBQUEyRixHQUFBLFNBQUFoRCxFQUFBaGhCLEVBQUFPLEVBQUFnTSxFQUFBZzFCLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQWxuQyxFQUFBLEVBQ0FzRCxFQUFBbWpCLEVBQUFsbUIsT0FDQTRtQyxFQUFBLE1BQUFuaEMsRUFHQSxHQUFBLFdBQUFnYyxHQUFBbmQsS0FBQW1CLEdBQUEsQ0FDQWdoQyxHQUFBLEVBQ0EsSUFBQWhuQyxLQUFBZ0csRUFDQXlqQixHQUFBaEQsRUFBQWhoQixFQUFBekYsRUFBQWdHLEVBQUFoRyxJQUFBLEVBQUFpbkMsRUFBQUMsUUFJQSxRQUFBeDlCLElBQUFzSSxJQUNBZzFCLEdBQUEsRUFFQWhsQixHQUFBUSxXQUFBeFEsS0FDQWsxQixHQUFBLEdBR0FDLElBR0FELEdBQ0F6aEMsRUFBQW5GLEtBQUFtbUIsRUFBQXpVLEdBQ0F2TSxFQUFBLE9BSUEwaEMsRUFBQTFoQyxFQUNBQSxFQUFBLFNBQUEwYyxFQUFBbmMsRUFBQWdNLEdBQ0EsT0FBQW0xQixFQUFBN21DLEtBQUEwaEIsR0FBQUcsR0FBQW5RLE1BS0F2TSxHQUNBLEtBQUF6RixFQUFBc0QsRUFBQXRELElBQ0F5RixFQUNBZ2hCLEVBQUF6bUIsR0FBQWdHLEVBQUFraEMsRUFDQWwxQixFQUNBQSxFQUFBMVIsS0FBQW1tQixFQUFBem1CLEdBQUFBLEVBQUF5RixFQUFBZ2hCLEVBQUF6bUIsR0FBQWdHLEtBTUEsT0FBQWdoQyxFQUNBdmdCLEVBSUEwZ0IsRUFDQTFoQyxFQUFBbkYsS0FBQW1tQixHQUdBbmpCLEVBQUFtQyxFQUFBZ2hCLEVBQUEsR0FBQXpnQixHQUFBaWhDLEdBRUFHLEdBQUEsU0FBQUMsR0FRQSxPQUFBLElBQUFBLEVBQUFubUIsVUFBQSxJQUFBbW1CLEVBQUFubUIsWUFBQW1tQixFQUFBbm1CLFVBVUE4QyxFQUFBRSxJQUFBLEVBRUFGLEVBQUExaEIsV0FFQSt6QixNQUFBLFNBQUFnUixHQUdBLElBQUFyMUIsRUFBQXExQixFQUFBdGxDLEtBQUFraUIsU0E0QkEsT0F6QkFqUyxJQUNBQSxLQUtBbzFCLEdBQUFDLEtBSUFBLEVBQUFubUIsU0FDQW1tQixFQUFBdGxDLEtBQUFraUIsU0FBQWpTLEVBTUFsSSxPQUFBdzlCLGVBQUFELEVBQUF0bEMsS0FBQWtpQixTQUNBalMsTUFBQUEsRUFDQXUxQixjQUFBLE1BTUF2MUIsR0FFQTNOLElBQUEsU0FBQWdqQyxFQUFBOTZCLEVBQUF5RixHQUNBLElBQUEwUyxFQUNBMlIsRUFBQXQwQixLQUFBczBCLE1BQUFnUixHQUlBLEdBQUEsaUJBQUE5NkIsRUFDQThwQixFQUFBclUsR0FBQXNNLFVBQUEvaEIsSUFBQXlGLE9BTUEsSUFBQTBTLEtBQUFuWSxFQUNBOHBCLEVBQUFyVSxHQUFBc00sVUFBQTVKLElBQUFuWSxFQUFBbVksR0FHQSxPQUFBMlIsR0FFQXJRLElBQUEsU0FBQXFoQixFQUFBcmhDLEdBQ0EsWUFBQTBELElBQUExRCxFQUNBakUsS0FBQXMwQixNQUFBZ1IsR0FHQUEsRUFBQXRsQyxLQUFBa2lCLFVBQUFvakIsRUFBQXRsQyxLQUFBa2lCLFNBQUFqQyxHQUFBc00sVUFBQXRvQixLQUVBeWpCLE9BQUEsU0FBQTRkLEVBQUFyaEMsRUFBQWdNLEdBYUEsWUFBQXRJLElBQUExRCxHQUNBQSxHQUFBLGlCQUFBQSxRQUFBMEQsSUFBQXNJLEVBRUFqUSxLQUFBaWtCLElBQUFxaEIsRUFBQXJoQyxJQVNBakUsS0FBQXNDLElBQUFnakMsRUFBQXJoQyxFQUFBZ00sUUFJQXRJLElBQUFzSSxFQUFBQSxFQUFBaE0sSUFFQTRrQixPQUFBLFNBQUF5YyxFQUFBcmhDLEdBQ0EsSUFBQWhHLEVBQ0FxMkIsRUFBQWdSLEVBQUF0bEMsS0FBQWtpQixTQUVBLFFBQUF2YSxJQUFBMnNCLEVBQUEsQ0FJQSxRQUFBM3NCLElBQUExRCxFQUFBLENBa0JBaEcsR0FYQWdHLEVBSkFnVCxNQUFBbUksUUFBQW5iLEdBSUFBLEVBQUE0VixJQUFBb0csR0FBQXNNLFlBRUF0b0IsRUFBQWdjLEdBQUFzTSxVQUFBdG9CLE1BSUFxd0IsR0FDQXJ3QixHQUNBQSxFQUFBK1EsTUFBQWtNLFNBR0ExaUIsT0FFQSxLQUFBUCxZQUNBcTJCLEVBQUFyd0IsRUFBQWhHLFVBS0EwSixJQUFBMUQsR0FBQWdjLEdBQUFtUyxjQUFBa0MsTUFNQWdSLEVBQUFubUIsU0FDQW1tQixFQUFBdGxDLEtBQUFraUIsY0FBQXZhLFNBRUEyOUIsRUFBQXRsQyxLQUFBa2lCLFlBSUF1RixRQUFBLFNBQUE2ZCxHQUNBLElBQUFoUixFQUFBZ1IsRUFBQXRsQyxLQUFBa2lCLFNBQ0EsWUFBQXZhLElBQUEyc0IsSUFBQXJVLEdBQUFtUyxjQUFBa0MsS0FHQSxJQUFBdFEsR0FBQSxJQUFBL0IsRUFFQVEsR0FBQSxJQUFBUixFQWNBSSxHQUFBLGdDQUNBRSxHQUFBLFNBa0RBdEMsR0FBQTJILFFBQ0FILFFBQUEsU0FBQXJILEdBQ0EsT0FBQXFDLEdBQUFnRixRQUFBckgsSUFBQTRELEdBQUF5RCxRQUFBckgsSUFHQTVWLEtBQUEsU0FBQTRWLEVBQUFuWCxFQUFBdUIsR0FDQSxPQUFBaVksR0FBQWlGLE9BQUF0SCxFQUFBblgsRUFBQXVCLElBR0FpN0IsV0FBQSxTQUFBcmxCLEVBQUFuWCxHQUNBd1osR0FBQW9HLE9BQUF6SSxFQUFBblgsSUFLQXk4QixNQUFBLFNBQUF0bEIsRUFBQW5YLEVBQUF1QixHQUNBLE9BQUF3WixHQUFBMEQsT0FBQXRILEVBQUFuWCxFQUFBdUIsSUFHQW03QixZQUFBLFNBQUF2bEIsRUFBQW5YLEdBQ0ErYSxHQUFBNkUsT0FBQXpJLEVBQUFuWCxNQUlBZ1gsR0FBQXZjLEdBQUFra0IsUUFDQXBkLEtBQUEsU0FBQXZHLEVBQUFnTSxHQUNBLElBQUFoUyxFQUFBZ0wsRUFBQXVCLEVBQ0E0VixFQUFBcGdCLEtBQUEsR0FDQTRyQixFQUFBeEwsR0FBQUEsRUFBQTJaLFdBR0EsUUFBQXB5QixJQUFBMUQsRUFBQSxDQUNBLEdBQUFqRSxLQUFBeEIsU0FDQWdNLEVBQUFpWSxHQUFBd0IsSUFBQTdELEdBRUEsSUFBQUEsRUFBQWpCLFdBQUE2RSxHQUFBQyxJQUFBN0QsRUFBQSxpQkFBQSxDQUVBLElBREFuaUIsRUFBQTJ0QixFQUFBcHRCLE9BQ0FQLEtBSUEydEIsRUFBQTN0QixJQUVBLEtBREFnTCxFQUFBMmlCLEVBQUEzdEIsR0FBQWdMLE1BQ0FPLFFBQUEsV0FDQVAsRUFBQWdYLEdBQUFzTSxVQUFBdGpCLEVBQUF6SixNQUFBLElBQ0E4aUIsRUFBQWxDLEVBQUFuWCxFQUFBdUIsRUFBQXZCLEtBSUErYSxHQUFBMWhCLElBQUE4ZCxFQUFBLGdCQUFBLEdBSUEsT0FBQTVWLEVBSUEsTUFBQSxpQkFBQXZHLEVBQ0FqRSxLQUFBOFosS0FBQSxXQUNBMkksR0FBQW5nQixJQUFBdEMsS0FBQWlFLEtBSUF5akIsR0FBQTFuQixLQUFBLFNBQUFpUSxHQUNBLElBQUF6RixFQU9BLEdBQUE0VixRQUFBelksSUFBQXNJLEVBQUEsQ0FLQSxRQUFBdEksS0FEQTZDLEVBQUFpWSxHQUFBd0IsSUFBQTdELEVBQUFuYyxJQUVBLE9BQUF1RyxFQU1BLFFBQUE3QyxLQURBNkMsRUFBQThYLEVBQUFsQyxFQUFBbmMsSUFFQSxPQUFBdUcsT0FRQXhLLEtBQUE4WixLQUFBLFdBR0EySSxHQUFBbmdCLElBQUF0QyxLQUFBaUUsRUFBQWdNLE1BRUEsS0FBQUEsRUFBQXJNLFVBQUFwRixPQUFBLEVBQUEsTUFBQSxJQUdBaW5DLFdBQUEsU0FBQXhoQyxHQUNBLE9BQUFqRSxLQUFBOFosS0FBQSxXQUNBMkksR0FBQW9HLE9BQUE3b0IsS0FBQWlFLFFBTUFnYyxHQUFBMkgsUUFDQWtHLE1BQUEsU0FBQTFOLEVBQUF0ZCxFQUFBMEgsR0FDQSxJQUFBc2pCLEVBRUEsR0FBQTFOLEVBWUEsT0FYQXRkLEdBQUFBLEdBQUEsTUFBQSxRQUNBZ3JCLEVBQUE5SixHQUFBQyxJQUFBN0QsRUFBQXRkLEdBR0EwSCxLQUNBc2pCLEdBQUE3VyxNQUFBbUksUUFBQTVVLEdBQ0FzakIsRUFBQTlKLEdBQUEwRCxPQUFBdEgsRUFBQXRkLEVBQUFtZCxHQUFBc1MsVUFBQS9uQixJQUVBc2pCLEVBQUF4cEIsS0FBQWtHLElBR0FzakIsT0FJQThYLFFBQUEsU0FBQXhsQixFQUFBdGQsR0FDQUEsRUFBQUEsR0FBQSxLQUVBLElBQUFnckIsRUFBQTdOLEdBQUE2TixNQUFBMU4sRUFBQXRkLEdBQ0EraUMsRUFBQS9YLEVBQUF0dkIsT0FDQWtGLEVBQUFvcUIsRUFBQW5rQixRQUNBMmlCLEVBQUFyTSxHQUFBNE4sWUFBQXpOLEVBQUF0ZCxHQU1BLGVBQUFZLElBQ0FBLEVBQUFvcUIsRUFBQW5rQixRQUNBazhCLEtBR0FuaUMsSUFJQSxPQUFBWixHQUNBZ3JCLEVBQUEzVyxRQUFBLHFCQUlBbVYsRUFBQW9CLEtBQ0FocUIsRUFBQW5GLEtBQUE2aEIsRUFwQkEsV0FDQUgsR0FBQTJsQixRQUFBeGxCLEVBQUF0ZCxJQW1CQXdwQixLQUdBdVosR0FBQXZaLEdBQ0FBLEVBQUE5ZSxNQUFBbTFCLFFBS0E5VSxZQUFBLFNBQUF6TixFQUFBdGQsR0FDQSxJQUFBbUIsRUFBQW5CLEVBQUEsYUFDQSxPQUFBa2hCLEdBQUFDLElBQUE3RCxFQUFBbmMsSUFBQStmLEdBQUEwRCxPQUFBdEgsRUFBQW5jLEdBQ0F1SixNQUFBeVMsR0FBQW9pQixVQUFBLGVBQUExYixJQUFBLFdBQ0EzQyxHQUFBNkUsT0FBQXpJLEdBQUF0ZCxFQUFBLFFBQUFtQixXQU1BZ2MsR0FBQXZjLEdBQUFra0IsUUFDQWtHLE1BQUEsU0FBQWhyQixFQUFBMEgsR0FDQSxJQUFBczdCLEVBQUEsRUFRQSxNQU5BLGlCQUFBaGpDLElBQ0EwSCxFQUFBMUgsRUFDQUEsRUFBQSxLQUNBZ2pDLEtBR0FsaUMsVUFBQXBGLE9BQUFzbkMsRUFDQTdsQixHQUFBNk4sTUFBQTl0QixLQUFBLEdBQUE4QyxRQUdBNkUsSUFBQTZDLEVBQ0F4SyxLQUNBQSxLQUFBOFosS0FBQSxXQUNBLElBQUFnVSxFQUFBN04sR0FBQTZOLE1BQUE5dEIsS0FBQThDLEVBQUEwSCxHQUdBeVYsR0FBQTROLFlBQUE3dEIsS0FBQThDLEdBRUEsT0FBQUEsR0FBQSxlQUFBZ3JCLEVBQUEsSUFDQTdOLEdBQUEybEIsUUFBQTVsQyxLQUFBOEMsTUFJQThpQyxRQUFBLFNBQUE5aUMsR0FDQSxPQUFBOUMsS0FBQThaLEtBQUEsV0FDQW1HLEdBQUEybEIsUUFBQTVsQyxLQUFBOEMsTUFHQWlqQyxXQUFBLFNBQUFqakMsR0FDQSxPQUFBOUMsS0FBQTh0QixNQUFBaHJCLEdBQUEsVUFLQThlLFFBQUEsU0FBQTllLEVBQUFXLEdBQ0EsSUFBQXViLEVBQ0FwZ0IsRUFBQSxFQUNBb25DLEVBQUEvbEIsR0FBQTZNLFdBQ0F4TSxFQUFBdGdCLEtBQ0EvQixFQUFBK0IsS0FBQXhCLE9BQ0FpakIsRUFBQSxhQUNBN2lCLEdBQ0FvbkMsRUFBQXpZLFlBQUFqTixHQUFBQSxLQVVBLElBTkEsaUJBQUF4ZCxJQUNBVyxFQUFBWCxFQUNBQSxPQUFBNkUsR0FFQTdFLEVBQUFBLEdBQUEsS0FFQTdFLE1BQ0ErZ0IsRUFBQWdGLEdBQUFDLElBQUEzRCxFQUFBcmlCLEdBQUE2RSxFQUFBLGdCQUNBa2MsRUFBQXhSLFFBQ0E1TyxJQUNBb2dCLEVBQUF4UixNQUFBbVosSUFBQWxGLElBSUEsT0FEQUEsSUFDQXVrQixFQUFBcGtCLFFBQUFuZSxNQUdBLElBQUF3aUMsR0FBQSxzQ0FBQUMsT0FFQTNpQixHQUFBLElBQUE1TixPQUFBLGlCQUFBc3dCLEdBQUEsY0FBQSxLQUdBeGIsSUFBQSxNQUFBLFFBQUEsU0FBQSxRQUVBdkcsR0FBQSxTQUFBOUQsRUFBQW5HLEdBT0EsTUFBQSxVQUhBbUcsRUFBQW5HLEdBQUFtRyxHQUdBM1EsTUFBQWtVLFNBQ0EsS0FBQXZELEVBQUEzUSxNQUFBa1UsU0FNQTFELEdBQUFnRixTQUFBN0UsRUFBQXNELGNBQUF0RCxJQUVBLFNBQUFILEdBQUFpRCxJQUFBOUMsRUFBQSxZQUdBK2xCLEdBQUEsU0FBQS9sQixFQUFBM2QsRUFBQTVELEVBQUE4RSxHQUNBLElBQUEyZ0IsRUFBQXJiLEVBQ0FtOUIsS0FHQSxJQUFBbjlCLEtBQUF4RyxFQUNBMmpDLEVBQUFuOUIsR0FBQW1YLEVBQUEzUSxNQUFBeEcsR0FDQW1YLEVBQUEzUSxNQUFBeEcsR0FBQXhHLEVBQUF3RyxHQUdBcWIsRUFBQXpsQixFQUFBZ0YsTUFBQXVjLEVBQUF6YyxPQUdBLElBQUFzRixLQUFBeEcsRUFDQTJkLEVBQUEzUSxNQUFBeEcsR0FBQW05QixFQUFBbjlCLEdBR0EsT0FBQXFiLEdBcUVBVixNQXlFQTNELEdBQUF2YyxHQUFBa2tCLFFBQ0E5RCxLQUFBLFdBQ0EsT0FBQUQsRUFBQTdqQixNQUFBLElBRUFxbUMsS0FBQSxXQUNBLE9BQUF4aUIsRUFBQTdqQixPQUVBc21DLE9BQUEsU0FBQTVWLEdBQ0EsTUFBQSxrQkFBQUEsRUFDQUEsRUFBQTF3QixLQUFBOGpCLE9BQUE5akIsS0FBQXFtQyxPQUdBcm1DLEtBQUE4WixLQUFBLFdBQ0FvSyxHQUFBbGtCLE1BQ0FpZ0IsR0FBQWpnQixNQUFBOGpCLE9BRUE3RCxHQUFBamdCLE1BQUFxbUMsWUFLQSxJQUFBdmUsR0FBQSx3QkFFQXhDLEdBQUEsaUNBRUFXLEdBQUEsNEJBS0FWLElBR0FnaEIsUUFBQSxFQUFBLCtCQUFBLGFBS0FDLE9BQUEsRUFBQSxVQUFBLFlBQ0FDLEtBQUEsRUFBQSxvQkFBQSx1QkFDQUMsSUFBQSxFQUFBLGlCQUFBLG9CQUNBQyxJQUFBLEVBQUEscUJBQUEseUJBRUFuaEIsVUFBQSxFQUFBLEdBQUEsS0FJQUQsR0FBQXFoQixTQUFBcmhCLEdBQUFnaEIsT0FFQWhoQixHQUFBc2hCLE1BQUF0aEIsR0FBQXVoQixNQUFBdmhCLEdBQUF3aEIsU0FBQXhoQixHQUFBeWhCLFFBQUF6aEIsR0FBQWloQixNQUNBamhCLEdBQUEwaEIsR0FBQTFoQixHQUFBb2hCLEdBMENBLElBQUF0aEIsR0FBQSxhQTRGQSxXQUNBLElBQ0E2aEIsRUFEQXQ1QixHQUFBdVgseUJBQ0FyVyxZQUFBbEIsR0FBQVUsY0FBQSxRQUNBNnRCLEVBQUF2dUIsR0FBQVUsY0FBQSxTQU1BNnRCLEVBQUFwc0IsYUFBQSxPQUFBLFNBQ0Fvc0IsRUFBQXBzQixhQUFBLFVBQUEsV0FDQW9zQixFQUFBcHNCLGFBQUEsT0FBQSxLQUVBbTNCLEVBQUFwNEIsWUFBQXF0QixHQUlBNVQsR0FBQUMsV0FBQTBlLEVBQUFDLFdBQUEsR0FBQUEsV0FBQSxHQUFBeGhCLFVBQUFvQyxRQUlBbWYsRUFBQXpoQixVQUFBLHlCQUNBOEMsR0FBQTZlLGlCQUFBRixFQUFBQyxXQUFBLEdBQUF4aEIsVUFBQXFDLGFBdEJBLEdBd0JBLElBQUE1UyxHQUFBeEgsR0FBQXdILGdCQUtBaXlCLEdBQUEsT0FDQUMsR0FBQSxpREFDQUMsR0FBQSxzQkFtRkF0bkIsR0FBQTdiLE9BRUFuQixVQUVBMGpCLElBQUEsU0FBQXZHLEVBQUFrRyxFQUFBc08sRUFBQXBxQixFQUFBK2IsR0FFQSxJQUFBaWhCLEVBQUFDLEVBQUF6b0IsRUFDQXdJLEVBQUEvcEIsRUFBQWlxQyxFQUNBL0QsRUFBQWdFLEVBQUE3a0MsRUFBQW9TLEVBQUEweUIsRUFDQUMsRUFBQTdqQixHQUFBQyxJQUFBN0QsR0FHQSxHQUFBeW5CLEVBdUNBLElBbENBalQsRUFBQUEsVUFFQUEsR0FEQTRTLEVBQUE1UyxHQUNBQSxRQUNBck8sRUFBQWloQixFQUFBamhCLFVBS0FBLEdBQ0F0RyxHQUFBMlksS0FBQXdELGdCQUFBaG5CLEdBQUFtUixHQUlBcU8sRUFBQWxPLE9BQ0FrTyxFQUFBbE8sS0FBQXpHLEdBQUF5RyxTQUlBYyxFQUFBcWdCLEVBQUFyZ0IsVUFDQUEsRUFBQXFnQixFQUFBcmdCLFlBRUFpZ0IsRUFBQUksRUFBQWxnQixVQUNBOGYsRUFBQUksRUFBQWxnQixPQUFBLFNBQUFucUIsR0FJQSxZQUFBLElBQUF5aUIsSUFBQUEsR0FBQTdiLE1BQUEwakMsWUFBQXRxQyxFQUFBc0YsS0FDQW1kLEdBQUE3YixNQUFBMmpDLFNBQUFsa0MsTUFBQXVjLEVBQUF4YyxnQkFBQStELElBTUFsSyxHQURBNm9CLEdBQUFBLEdBQUEsSUFBQXRSLE1BQUFrTSxNQUFBLEtBQ0ExaUIsT0FDQWYsS0FFQXFGLEVBQUE4a0MsR0FEQTVvQixFQUFBdW9CLEdBQUFydkIsS0FBQW9PLEVBQUE3b0IsU0FDQSxHQUNBeVgsR0FBQThKLEVBQUEsSUFBQSxJQUFBbkgsTUFBQSxLQUFBZ2EsT0FHQS91QixJQUtBNmdDLEVBQUExakIsR0FBQTdiLE1BQUF1L0IsUUFBQTdnQyxPQUdBQSxHQUFBeWpCLEVBQUFvZCxFQUFBcUUsYUFBQXJFLEVBQUFzRSxXQUFBbmxDLEVBR0E2Z0MsRUFBQTFqQixHQUFBN2IsTUFBQXUvQixRQUFBN2dDLE9BR0E0a0MsRUFBQXpuQixHQUFBMkgsUUFDQTlrQixLQUFBQSxFQUNBOGtDLFNBQUFBLEVBQ0FwOUIsS0FBQUEsRUFDQW9xQixRQUFBQSxFQUNBbE8sS0FBQWtPLEVBQUFsTyxLQUNBSCxTQUFBQSxFQUNBd1UsYUFBQXhVLEdBQUF0RyxHQUFBaWQsS0FBQWxvQixNQUFBK2xCLGFBQUEvckIsS0FBQXVYLEdBQ0E3UixVQUFBUSxFQUFBbkIsS0FBQSxNQUNBeXpCLElBR0FHLEVBQUFuZ0IsRUFBQTFrQixPQUNBNmtDLEVBQUFuZ0IsRUFBQTFrQixPQUNBb2xDLGNBQUEsRUFHQXZFLEVBQUF3RSxRQUNBLElBQUF4RSxFQUFBd0UsTUFBQTVwQyxLQUFBNmhCLEVBQUE1VixFQUFBMEssRUFBQXV5QixJQUVBcm5CLEVBQUFqYyxrQkFDQWljLEVBQUFqYyxpQkFBQXJCLEVBQUEya0MsSUFLQTlELEVBQUFoZCxNQUNBZ2QsRUFBQWhkLElBQUFwb0IsS0FBQTZoQixFQUFBc25CLEdBRUFBLEVBQUE5UyxRQUFBbE8sT0FDQWdoQixFQUFBOVMsUUFBQWxPLEtBQUFrTyxFQUFBbE8sT0FLQUgsRUFDQW9oQixFQUFBN2lDLE9BQUE2aUMsRUFBQU8sZ0JBQUEsRUFBQVIsR0FFQUMsRUFBQXJqQyxLQUFBb2pDLEdBSUF6bkIsR0FBQTdiLE1BQUFuQixPQUFBSCxJQUFBLElBTUErbEIsT0FBQSxTQUFBekksRUFBQWtHLEVBQUFzTyxFQUFBck8sRUFBQTZoQixHQUVBLElBQUE3N0IsRUFBQTg3QixFQUFBcnBCLEVBQ0F3SSxFQUFBL3BCLEVBQUFpcUMsRUFDQS9ELEVBQUFnRSxFQUFBN2tDLEVBQUFvUyxFQUFBMHlCLEVBQ0FDLEVBQUE3akIsR0FBQXlELFFBQUFySCxJQUFBNEQsR0FBQUMsSUFBQTdELEdBRUEsR0FBQXluQixJQUFBcmdCLEVBQUFxZ0IsRUFBQXJnQixRQUFBLENBT0EsSUFEQS9wQixHQURBNm9CLEdBQUFBLEdBQUEsSUFBQXRSLE1BQUFrTSxNQUFBLEtBQ0ExaUIsT0FDQWYsS0FNQSxHQUxBdWhCLEVBQUF1b0IsR0FBQXJ2QixLQUFBb08sRUFBQTdvQixRQUNBcUYsRUFBQThrQyxFQUFBNW9CLEVBQUEsR0FDQTlKLEdBQUE4SixFQUFBLElBQUEsSUFBQW5ILE1BQUEsS0FBQWdhLE9BR0EvdUIsRUFBQSxDQWVBLElBUkE2Z0MsRUFBQTFqQixHQUFBN2IsTUFBQXUvQixRQUFBN2dDLE9BRUE2a0MsRUFBQW5nQixFQURBMWtCLEdBQUF5akIsRUFBQW9kLEVBQUFxRSxhQUFBckUsRUFBQXNFLFdBQUFubEMsT0FFQWtjLEVBQUFBLEVBQUEsSUFDQSxJQUFBckosT0FBQSxVQUFBVCxFQUFBbkIsS0FBQSxpQkFBQSxXQUdBczBCLEVBQUE5N0IsRUFBQW83QixFQUFBbnBDLE9BQ0ErTixLQUNBbTdCLEVBQUFDLEVBQUFwN0IsSUFFQTY3QixHQUFBUixJQUFBRixFQUFBRSxVQUNBaFQsR0FBQUEsRUFBQWxPLE9BQUFnaEIsRUFBQWhoQixNQUNBMUgsSUFBQUEsRUFBQWhRLEtBQUEwNEIsRUFBQWh6QixZQUNBNlIsR0FBQUEsSUFBQW1oQixFQUFBbmhCLFdBQ0EsT0FBQUEsSUFBQW1oQixFQUFBbmhCLFlBQ0FvaEIsRUFBQTdpQyxPQUFBeUgsRUFBQSxHQUVBbTdCLEVBQUFuaEIsVUFDQW9oQixFQUFBTyxnQkFFQXZFLEVBQUE5YSxRQUNBOGEsRUFBQTlhLE9BQUF0cUIsS0FBQTZoQixFQUFBc25CLElBT0FXLElBQUFWLEVBQUFucEMsU0FDQW1sQyxFQUFBMkUsV0FDQSxJQUFBM0UsRUFBQTJFLFNBQUEvcEMsS0FBQTZoQixFQUFBbEwsRUFBQTJ5QixFQUFBbGdCLFNBRUExSCxHQUFBc29CLFlBQUFub0IsRUFBQXRkLEVBQUEra0MsRUFBQWxnQixlQUdBSCxFQUFBMWtCLFNBMUNBLElBQUFBLEtBQUEwa0IsRUFDQXZILEdBQUE3YixNQUFBeWtCLE9BQUF6SSxFQUFBdGQsRUFBQXdqQixFQUFBN29CLEdBQUFtM0IsRUFBQXJPLEdBQUEsR0E4Q0F0RyxHQUFBbVMsY0FBQTVLLElBQ0F4RCxHQUFBNkUsT0FBQXpJLEVBQUEsbUJBSUEybkIsU0FBQSxTQUFBUyxHQUdBLElBRUF2cUMsRUFBQXNPLEVBQUErWCxFQUFBeWEsRUFBQTJJLEVBQUFlLEVBRkFya0MsRUFBQTZiLEdBQUE3YixNQUFBc2tDLElBQUFGLEdBR0E3a0MsRUFBQSxJQUFBc1QsTUFBQXJULFVBQUFwRixRQUNBbXBDLEdBQUEzakIsR0FBQUMsSUFBQWprQixLQUFBLGVBQUFvRSxFQUFBdEIsVUFDQTZnQyxFQUFBMWpCLEdBQUE3YixNQUFBdS9CLFFBQUF2L0IsRUFBQXRCLFVBS0EsSUFGQWEsRUFBQSxHQUFBUyxFQUVBbkcsRUFBQSxFQUFBQSxFQUFBMkYsVUFBQXBGLE9BQUFQLElBQ0EwRixFQUFBMUYsR0FBQTJGLFVBQUEzRixHQU1BLEdBSEFtRyxFQUFBdWtDLGVBQUEzb0MsTUFHQTJqQyxFQUFBaUYsY0FBQSxJQUFBakYsRUFBQWlGLFlBQUFycUMsS0FBQXlCLEtBQUFvRSxHQUFBLENBU0EsSUFKQXFrQyxFQUFBeG9CLEdBQUE3YixNQUFBdWpDLFNBQUFwcEMsS0FBQXlCLEtBQUFvRSxFQUFBdWpDLEdBR0ExcEMsRUFBQSxHQUNBOGdDLEVBQUEwSixFQUFBeHFDLFFBQUFtRyxFQUFBeWtDLHdCQUlBLElBSEF6a0MsRUFBQTBrQyxjQUFBL0osRUFBQTNlLEtBRUE3VCxFQUFBLEdBQ0FtN0IsRUFBQTNJLEVBQUE0SSxTQUFBcDdCLFFBQ0FuSSxFQUFBMmtDLGlDQUlBM2tDLEVBQUE0a0MsYUFBQTVrQyxFQUFBNGtDLFdBQUFoNkIsS0FBQTA0QixFQUFBaHpCLGFBRUF0USxFQUFBc2pDLFVBQUFBLEVBQ0F0akMsRUFBQW9HLEtBQUFrOUIsRUFBQWw5QixVQUtBN0MsS0FIQTJjLElBQUFyRSxHQUFBN2IsTUFBQXUvQixRQUFBK0QsRUFBQUUsZUFBQWpnQixRQUNBK2YsRUFBQTlTLFNBQUEvd0IsTUFBQWs3QixFQUFBM2UsS0FBQXpjLE1BR0EsS0FBQVMsRUFBQW5GLE9BQUFxbEIsS0FDQWxnQixFQUFBNmtDLGlCQUNBN2tDLEVBQUE4a0Msb0JBWUEsT0FKQXZGLEVBQUF3RixjQUNBeEYsRUFBQXdGLGFBQUE1cUMsS0FBQXlCLEtBQUFvRSxHQUdBQSxFQUFBbkYsU0FHQTBvQyxTQUFBLFNBQUF2akMsRUFBQXVqQyxHQUNBLElBQUExcEMsRUFBQXlwQyxFQUFBcEssRUFBQThMLEVBQUFDLEVBQ0FaLEtBQ0FQLEVBQUFQLEVBQUFPLGNBQ0FwbkIsRUFBQTFjLEVBQUF5TCxPQUdBLEdBQUFxNEIsR0FJQXBuQixFQUFBM0IsWUFPQSxVQUFBL2EsRUFBQXRCLE1BQUFzQixFQUFBcTdCLFFBQUEsR0FFQSxLQUFBM2UsSUFBQTlnQixLQUFBOGdCLEVBQUFBLEVBQUE3UyxZQUFBak8sS0FJQSxHQUFBLElBQUE4Z0IsRUFBQTNCLFdBQUEsVUFBQS9hLEVBQUF0QixPQUFBLElBQUFnZSxFQUFBb1UsVUFBQSxDQUdBLElBRkFrVSxLQUNBQyxLQUNBcHJDLEVBQUEsRUFBQUEsRUFBQWlxQyxFQUFBanFDLFNBTUEwSixJQUFBMGhDLEVBRkEvTCxHQUhBb0ssRUFBQUMsRUFBQTFwQyxJQUdBc29CLFNBQUEsT0FHQThpQixFQUFBL0wsR0FBQW9LLEVBQUEzTSxhQUNBOWEsR0FBQXFkLEVBQUF0OUIsTUFBQTRJLE1BQUFrWSxJQUFBLEVBQ0FiLEdBQUEyWSxLQUFBMEUsRUFBQXQ5QixLQUFBLE1BQUE4Z0IsSUFBQXRpQixRQUVBNnFDLEVBQUEvTCxJQUNBOEwsRUFBQTlrQyxLQUFBb2pDLEdBR0EwQixFQUFBNXFDLFFBQ0FpcUMsRUFBQW5rQyxNQUFBOGIsS0FBQVUsRUFBQTZtQixTQUFBeUIsSUFZQSxPQUxBdG9CLEVBQUE5Z0IsS0FDQWtvQyxFQUFBUCxFQUFBbnBDLFFBQ0FpcUMsRUFBQW5rQyxNQUFBOGIsS0FBQVUsRUFBQTZtQixTQUFBQSxFQUFBbm9DLE1BQUEwb0MsS0FHQU8sR0FHQWEsUUFBQSxTQUFBcmdDLEVBQUFzZ0MsR0FDQXhoQyxPQUFBdzlCLGVBQUF0bEIsR0FBQXVwQixNQUFBanBDLFVBQUEwSSxHQUNBd2dDLFlBQUEsRUFDQWpFLGNBQUEsRUFFQXZoQixJQUFBaEUsR0FBQVEsV0FBQThvQixHQUNBLFdBQ0EsR0FBQXZwQyxLQUFBMHBDLGNBQ0EsT0FBQUgsRUFBQXZwQyxLQUFBMHBDLGdCQUdBLFdBQ0EsR0FBQTFwQyxLQUFBMHBDLGNBQ0EsT0FBQTFwQyxLQUFBMHBDLGNBQUF6Z0MsSUFJQTNHLElBQUEsU0FBQTJOLEdBQ0FsSSxPQUFBdzlCLGVBQUF2bEMsS0FBQWlKLEdBQ0F3Z0MsWUFBQSxFQUNBakUsY0FBQSxFQUNBejVCLFVBQUEsRUFDQWtFLE1BQUFBLFFBTUF5NEIsSUFBQSxTQUFBZ0IsR0FDQSxPQUFBQSxFQUFBenBCLEdBQUFpQyxTQUNBd25CLEVBQ0EsSUFBQXpwQixHQUFBdXBCLE1BQUFFLElBR0EvRixTQUNBM3ZCLE1BR0EyMUIsVUFBQSxHQUVBeEssT0FHQXlLLFFBQUEsV0FDQSxHQUFBNXBDLE9BQUFvbUIsS0FBQXBtQixLQUFBbS9CLE1BRUEsT0FEQW4vQixLQUFBbS9CLFNBQ0EsR0FHQTZJLGFBQUEsV0FFQTZCLE1BQ0FELFFBQUEsV0FDQSxHQUFBNXBDLE9BQUFvbUIsS0FBQXBtQixLQUFBNnBDLEtBRUEsT0FEQTdwQyxLQUFBNnBDLFFBQ0EsR0FHQTdCLGFBQUEsWUFFQThCLE9BR0FGLFFBQUEsV0FDQSxHQUFBLGFBQUE1cEMsS0FBQThDLE1BQUE5QyxLQUFBOHBDLE9BQUEzcEIsRUFBQW5nQixLQUFBLFNBRUEsT0FEQUEsS0FBQThwQyxTQUNBLEdBS0F0a0IsU0FBQSxTQUFBcGhCLEdBQ0EsT0FBQStiLEVBQUEvYixFQUFBeUwsT0FBQSxPQUlBazZCLGNBQ0FaLGFBQUEsU0FBQS9rQyxRQUlBdUQsSUFBQXZELEVBQUFuRixRQUFBbUYsRUFBQXNsQyxnQkFDQXRsQyxFQUFBc2xDLGNBQUFNLFlBQUE1bEMsRUFBQW5GLFlBT0FnaEIsR0FBQXNvQixZQUFBLFNBQUFub0IsRUFBQXRkLEVBQUE2a0IsR0FHQXZILEVBQUF6YixxQkFDQXliLEVBQUF6YixvQkFBQTdCLEVBQUE2a0IsSUFJQTFILEdBQUF1cEIsTUFBQSxTQUFBaDdCLEVBQUE0ZCxHQUdBLEtBQUFwc0IsZ0JBQUFpZ0IsR0FBQXVwQixPQUNBLE9BQUEsSUFBQXZwQixHQUFBdXBCLE1BQUFoN0IsRUFBQTRkLEdBSUE1ZCxHQUFBQSxFQUFBMUwsTUFDQTlDLEtBQUEwcEMsY0FBQWw3QixFQUNBeE8sS0FBQThDLEtBQUEwTCxFQUFBMUwsS0FJQTlDLEtBQUFpcUMsbUJBQUF6N0IsRUFBQTA3Qix1QkFDQXZpQyxJQUFBNkcsRUFBQTA3QixtQkFHQSxJQUFBMTdCLEVBQUF3N0IsWUFDQTlqQixFQUNBQyxFQUtBbm1CLEtBQUE2UCxPQUFBckIsRUFBQXFCLFFBQUEsSUFBQXJCLEVBQUFxQixPQUFBc1AsU0FDQTNRLEVBQUFxQixPQUFBNUIsV0FDQU8sRUFBQXFCLE9BRUE3UCxLQUFBOG9DLGNBQUF0NkIsRUFBQXM2QixjQUNBOW9DLEtBQUFtcUMsY0FBQTM3QixFQUFBMjdCLGVBSUFucUMsS0FBQThDLEtBQUEwTCxFQUlBNGQsR0FDQW5NLEdBQUEySCxPQUFBNW5CLEtBQUFvc0IsR0FJQXBzQixLQUFBb3FDLFVBQUE1N0IsR0FBQUEsRUFBQTQ3QixXQUFBbnFCLEdBQUF1TCxNQUdBeHJCLEtBQUFpZ0IsR0FBQWlDLFVBQUEsR0FLQWpDLEdBQUF1cEIsTUFBQWpwQyxXQUNBNEUsWUFBQThhLEdBQUF1cEIsTUFDQVMsbUJBQUE5akIsRUFDQTBpQixxQkFBQTFpQixFQUNBNGlCLDhCQUFBNWlCLEVBQ0Fra0IsYUFBQSxFQUVBcEIsZUFBQSxXQUNBLElBQUF6ckMsRUFBQXdDLEtBQUEwcEMsY0FFQTFwQyxLQUFBaXFDLG1CQUFBL2pCLEVBRUExb0IsSUFBQXdDLEtBQUFxcUMsYUFDQTdzQyxFQUFBeXJDLGtCQUdBQyxnQkFBQSxXQUNBLElBQUExckMsRUFBQXdDLEtBQUEwcEMsY0FFQTFwQyxLQUFBNm9DLHFCQUFBM2lCLEVBRUExb0IsSUFBQXdDLEtBQUFxcUMsYUFDQTdzQyxFQUFBMHJDLG1CQUdBb0IseUJBQUEsV0FDQSxJQUFBOXNDLEVBQUF3QyxLQUFBMHBDLGNBRUExcEMsS0FBQStvQyw4QkFBQTdpQixFQUVBMW9CLElBQUF3QyxLQUFBcXFDLGFBQ0E3c0MsRUFBQThzQywyQkFHQXRxQyxLQUFBa3BDLG9CQUtBanBCLEdBQUFuRyxNQUNBeXdCLFFBQUEsRUFDQUMsU0FBQSxFQUNBQyxZQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLFNBQUEsRUFDQUMsUUFBQSxFQUNBQyxZQUFBLEVBQ0FDLFNBQUEsRUFDQUMsT0FBQSxFQUNBQyxPQUFBLEVBQ0FDLFVBQUEsRUFDQTF1QixNQUFBLEVBQ0EydUIsTUFBQSxFQUNBQyxVQUFBLEVBQ0FsbkMsS0FBQSxFQUNBbW5DLFNBQUEsRUFDQTNMLFFBQUEsRUFDQTRMLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxXQUFBLEVBQ0FDLGFBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLGVBQUEsRUFDQUMsV0FBQSxFQUNBQyxTQUFBLEVBRUFyZ0IsTUFBQSxTQUFBdm5CLEdBQ0EsSUFBQXE3QixFQUFBcjdCLEVBQUFxN0IsT0FHQSxPQUFBLE1BQUFyN0IsRUFBQXVuQixPQUFBMGIsR0FBQXI0QixLQUFBNUssRUFBQXRCLE1BQ0EsTUFBQXNCLEVBQUErbUMsU0FBQS9tQyxFQUFBK21DLFNBQUEvbUMsRUFBQWduQyxTQUlBaG5DLEVBQUF1bkIsWUFBQWhrQixJQUFBODNCLEdBQUE2SCxHQUFBdDRCLEtBQUE1SyxFQUFBdEIsTUFDQSxFQUFBMjhCLEVBQ0EsRUFHQSxFQUFBQSxFQUNBLEVBR0EsRUFBQUEsRUFDQSxFQUdBLEVBR0FyN0IsRUFBQXVuQixRQUVBMUwsR0FBQTdiLE1BQUFrbEMsU0FVQXJwQixHQUFBbkcsTUFDQW15QixXQUFBLFlBQ0FDLFdBQUEsV0FDQUMsYUFBQSxjQUNBQyxhQUFBLGNBQ0EsU0FBQUMsRUFBQTNELEdBQ0F6b0IsR0FBQTdiLE1BQUF1L0IsUUFBQTBJLElBQ0FyRSxhQUFBVSxFQUNBVCxTQUFBUyxFQUVBL2dCLE9BQUEsU0FBQXZqQixHQUNBLElBQUFrZ0IsRUFDQXpVLEVBQUE3UCxLQUNBc3NDLEVBQUFsb0MsRUFBQStsQyxjQUNBekMsRUFBQXRqQyxFQUFBc2pDLFVBU0EsT0FMQTRFLElBQUFBLElBQUF6OEIsR0FBQW9RLEdBQUFnRixTQUFBcFYsRUFBQXk4QixNQUNBbG9DLEVBQUF0QixLQUFBNGtDLEVBQUFFLFNBQ0F0akIsRUFBQW9qQixFQUFBOVMsUUFBQS93QixNQUFBN0QsS0FBQTRELFdBQ0FRLEVBQUF0QixLQUFBNGxDLEdBRUFwa0IsTUFLQXJFLEdBQUF2YyxHQUFBa2tCLFFBRUExakIsR0FBQSxTQUFBb2lCLEVBQUFDLEVBQUEvYixFQUFBOUcsR0FDQSxPQUFBUSxFQUFBbEUsS0FBQXNtQixFQUFBQyxFQUFBL2IsRUFBQTlHLElBRUE4aUIsSUFBQSxTQUFBRixFQUFBQyxFQUFBL2IsRUFBQTlHLEdBQ0EsT0FBQVEsRUFBQWxFLEtBQUFzbUIsRUFBQUMsRUFBQS9iLEVBQUE5RyxFQUFBLElBRUFjLElBQUEsU0FBQThoQixFQUFBQyxFQUFBN2lCLEdBQ0EsSUFBQWdrQyxFQUFBNWtDLEVBQ0EsR0FBQXdqQixHQUFBQSxFQUFBMmlCLGdCQUFBM2lCLEVBQUFvaEIsVUFXQSxPQVJBQSxFQUFBcGhCLEVBQUFvaEIsVUFDQXpuQixHQUFBcUcsRUFBQXFpQixnQkFBQW5rQyxJQUNBa2pDLEVBQUFoekIsVUFDQWd6QixFQUFBRSxTQUFBLElBQUFGLEVBQUFoekIsVUFDQWd6QixFQUFBRSxTQUNBRixFQUFBbmhCLFNBQ0FtaEIsRUFBQTlTLFNBRUE1MEIsS0FFQSxHQUFBLGlCQUFBc21CLEVBQUEsQ0FHQSxJQUFBeGpCLEtBQUF3akIsRUFDQXRtQixLQUFBd0UsSUFBQTFCLEVBQUF5akIsRUFBQUQsRUFBQXhqQixJQUVBLE9BQUE5QyxLQVdBLE9BVEEsSUFBQXVtQixHQUFBLG1CQUFBQSxJQUdBN2lCLEVBQUE2aUIsRUFDQUEsT0FBQTVlLElBRUEsSUFBQWpFLElBQ0FBLEVBQUF5aUIsR0FFQW5tQixLQUFBOFosS0FBQSxXQUNBbUcsR0FBQTdiLE1BQUF5a0IsT0FBQTdvQixLQUFBc21CLEVBQUE1aUIsRUFBQTZpQixRQU1BLElBS0FnbUIsR0FBQSw4RkFPQUMsR0FBQSx3QkFHQS9qQixHQUFBLG9DQUNBekIsR0FBQSxjQUNBNEIsR0FBQSwyQ0E2TEEzSSxHQUFBMkgsUUFDQWxDLGNBQUEsU0FBQXJXLEdBQ0EsT0FBQUEsRUFBQWxKLFFBQUFvbUMsR0FBQSxjQUdBOWpDLE1BQUEsU0FBQTJYLEVBQUFxc0IsRUFBQUMsR0FDQSxJQUFBenVDLEVBQUFJLEVBQUFzdUMsRUFBQUMsRUFDQW5rQyxFQUFBMlgsRUFBQSttQixXQUFBLEdBQ0EwRixFQUFBNXNCLEdBQUFnRixTQUFBN0UsRUFBQXNELGNBQUF0RCxHQUdBLEtBQUFtSSxHQUFBNmUsZ0JBQUEsSUFBQWhuQixFQUFBakIsVUFBQSxLQUFBaUIsRUFBQWpCLFVBQ0FjLEdBQUE0Z0IsU0FBQXpnQixJQU1BLElBSEF3c0IsRUFBQXpvQixFQUFBMWIsR0FHQXhLLEVBQUEsRUFBQUksR0FGQXN1QyxFQUFBeG9CLEVBQUEvRCxJQUVBNWhCLE9BQUFQLEVBQUFJLEVBQUFKLElBQ0E0cEIsRUFBQThrQixFQUFBMXVDLEdBQUEydUMsRUFBQTN1QyxJQUtBLEdBQUF3dUMsRUFDQSxHQUFBQyxFQUlBLElBSEFDLEVBQUFBLEdBQUF4b0IsRUFBQS9ELEdBQ0F3c0IsRUFBQUEsR0FBQXpvQixFQUFBMWIsR0FFQXhLLEVBQUEsRUFBQUksRUFBQXN1QyxFQUFBbnVDLE9BQUFQLEVBQUFJLEVBQUFKLElBQ0FpcEIsRUFBQXlsQixFQUFBMXVDLEdBQUEydUMsRUFBQTN1QyxTQUdBaXBCLEVBQUE5RyxFQUFBM1gsR0FXQSxPQU5BbWtDLEVBQUF6b0IsRUFBQTFiLEVBQUEsV0FDQWpLLE9BQUEsR0FDQWltQixFQUFBbW9CLEdBQUFDLEdBQUExb0IsRUFBQS9ELEVBQUEsV0FJQTNYLEdBR0FzZ0IsVUFBQSxTQUFBckUsR0FLQSxJQUpBLElBQUFsYSxFQUFBNFYsRUFBQXRkLEVBQ0E2Z0MsRUFBQTFqQixHQUFBN2IsTUFBQXUvQixRQUNBMWxDLEVBQUEsT0FFQTBKLEtBQUF5WSxFQUFBc0UsRUFBQXptQixJQUFBQSxJQUNBLEdBQUFvbkMsR0FBQWpsQixHQUFBLENBQ0EsR0FBQTVWLEVBQUE0VixFQUFBNEQsR0FBQTlCLFNBQUEsQ0FDQSxHQUFBMVgsRUFBQWdkLE9BQ0EsSUFBQTFrQixLQUFBMEgsRUFBQWdkLE9BQ0FtYyxFQUFBN2dDLEdBQ0FtZCxHQUFBN2IsTUFBQXlrQixPQUFBekksRUFBQXRkLEdBSUFtZCxHQUFBc29CLFlBQUFub0IsRUFBQXRkLEVBQUEwSCxFQUFBbWQsUUFPQXZILEVBQUE0RCxHQUFBOUIsY0FBQXZhLEVBRUF5WSxFQUFBcUMsR0FBQVAsV0FJQTlCLEVBQUFxQyxHQUFBUCxjQUFBdmEsT0FPQXNZLEdBQUF2YyxHQUFBa2tCLFFBQ0FrbEIsT0FBQSxTQUFBdm1CLEdBQ0EsT0FBQXNDLEVBQUE3b0IsS0FBQXVtQixHQUFBLElBR0FzQyxPQUFBLFNBQUF0QyxHQUNBLE9BQUFzQyxFQUFBN29CLEtBQUF1bUIsSUFHQXhHLEtBQUEsU0FBQTlQLEdBQ0EsT0FBQXlYLEdBQUExbkIsS0FBQSxTQUFBaVEsR0FDQSxZQUFBdEksSUFBQXNJLEVBQ0FnUSxHQUFBRixLQUFBL2YsTUFDQUEsS0FBQXdOLFFBQUFzTSxLQUFBLFdBQ0EsSUFBQTlaLEtBQUFtZixVQUFBLEtBQUFuZixLQUFBbWYsVUFBQSxJQUFBbmYsS0FBQW1mLFdBQ0FuZixLQUFBOGxCLFlBQUE3VixNQUdBLEtBQUFBLEVBQUFyTSxVQUFBcEYsU0FHQW9FLE9BQUEsV0FDQSxPQUFBcWxCLEVBQUFqb0IsS0FBQTRELFVBQUEsU0FBQXdjLEdBQ0EsSUFBQXBnQixLQUFBbWYsVUFBQSxLQUFBbmYsS0FBQW1mLFVBQUEsSUFBQW5mLEtBQUFtZixVQUNBeUgsRUFBQTVtQixLQUFBb2dCLEdBQ0F0UixZQUFBc1IsTUFLQTJzQixRQUFBLFdBQ0EsT0FBQTlrQixFQUFBam9CLEtBQUE0RCxVQUFBLFNBQUF3YyxHQUNBLEdBQUEsSUFBQXBnQixLQUFBbWYsVUFBQSxLQUFBbmYsS0FBQW1mLFVBQUEsSUFBQW5mLEtBQUFtZixTQUFBLENBQ0EsSUFBQXRQLEVBQUErVyxFQUFBNW1CLEtBQUFvZ0IsR0FDQXZRLEVBQUFsQixhQUFBeVIsRUFBQXZRLEVBQUFnVyxnQkFLQW1uQixPQUFBLFdBQ0EsT0FBQS9rQixFQUFBam9CLEtBQUE0RCxVQUFBLFNBQUF3YyxHQUNBcGdCLEtBQUFpTyxZQUNBak8sS0FBQWlPLFdBQUFVLGFBQUF5UixFQUFBcGdCLFNBS0FnYSxNQUFBLFdBQ0EsT0FBQWlPLEVBQUFqb0IsS0FBQTRELFVBQUEsU0FBQXdjLEdBQ0FwZ0IsS0FBQWlPLFlBQ0FqTyxLQUFBaU8sV0FBQVUsYUFBQXlSLEVBQUFwZ0IsS0FBQWcxQixnQkFLQXhuQixNQUFBLFdBSUEsSUFIQSxJQUFBNFMsRUFDQW5pQixFQUFBLEVBRUEsT0FBQW1pQixFQUFBcGdCLEtBQUEvQixJQUFBQSxJQUNBLElBQUFtaUIsRUFBQWpCLFdBR0FjLEdBQUE4SSxVQUFBNUUsRUFBQS9ELEdBQUEsSUFHQUEsRUFBQTBGLFlBQUEsSUFJQSxPQUFBOWxCLE1BR0F5SSxNQUFBLFNBQUFna0MsRUFBQUMsR0FJQSxPQUhBRCxFQUFBLE1BQUFBLEdBQUFBLEVBQ0FDLEVBQUEsTUFBQUEsRUFBQUQsRUFBQUMsRUFFQTFzQyxLQUFBNlosSUFBQSxXQUNBLE9BQUFvRyxHQUFBeFgsTUFBQXpJLEtBQUF5c0MsRUFBQUMsTUFJQXI5QixLQUFBLFNBQUFZLEdBQ0EsT0FBQXlYLEdBQUExbkIsS0FBQSxTQUFBaVEsR0FDQSxJQUFBbVEsRUFBQXBnQixLQUFBLE9BQ0EvQixFQUFBLEVBQ0FJLEVBQUEyQixLQUFBeEIsT0FFQSxRQUFBbUosSUFBQXNJLEdBQUEsSUFBQW1RLEVBQUFqQixTQUNBLE9BQUFpQixFQUFBcUYsVUFJQSxHQUFBLGlCQUFBeFYsSUFBQXU4QixHQUFBeDlCLEtBQUFpQixLQUNBc1YsSUFBQUQsR0FBQXBOLEtBQUFqSSxLQUFBLEdBQUEsS0FBQSxHQUFBd0YsZUFBQSxDQUVBeEYsRUFBQWdRLEdBQUF5RixjQUFBelYsR0FFQSxJQUNBLEtBQUFoUyxFQUFBSSxFQUFBSixJQUlBLEtBSEFtaUIsRUFBQXBnQixLQUFBL0IsUUFHQWtoQixXQUNBYyxHQUFBOEksVUFBQTVFLEVBQUEvRCxHQUFBLElBQ0FBLEVBQUFxRixVQUFBeFYsR0FJQW1RLEVBQUEsRUFHQSxNQUFBNWlCLEtBR0E0aUIsR0FDQXBnQixLQUFBd04sUUFBQTVLLE9BQUFxTixJQUVBLEtBQUFBLEVBQUFyTSxVQUFBcEYsU0FHQXl1QyxZQUFBLFdBQ0EsSUFBQWxvQixLQUdBLE9BQUFrRCxFQUFBam9CLEtBQUE0RCxVQUFBLFNBQUF3YyxHQUNBLElBQUF1ZSxFQUFBMytCLEtBQUFpTyxXQUVBZ1MsR0FBQStGLFFBQUFobUIsS0FBQStrQixHQUFBLElBQ0E5RSxHQUFBOEksVUFBQTVFLEVBQUFua0IsT0FDQTIrQixHQUNBQSxFQUFBdU8sYUFBQTlzQixFQUFBcGdCLFFBS0Era0IsTUFJQTlFLEdBQUFuRyxNQUNBcXpCLFNBQUEsU0FDQUMsVUFBQSxVQUNBeitCLGFBQUEsU0FDQTArQixZQUFBLFFBQ0FDLFdBQUEsZUFDQSxTQUFBcmtDLEVBQUFza0MsR0FDQXR0QixHQUFBdmMsR0FBQXVGLEdBQUEsU0FBQXNkLEdBT0EsSUFOQSxJQUFBN0IsRUFDQUosS0FDQWtwQixFQUFBdnRCLEdBQUFzRyxHQUNBcUwsRUFBQTRiLEVBQUFodkMsT0FBQSxFQUNBUCxFQUFBLEVBRUFBLEdBQUEyekIsRUFBQTN6QixJQUNBeW1CLEVBQUF6bUIsSUFBQTJ6QixFQUFBNXhCLEtBQUFBLEtBQUF5SSxPQUFBLEdBQ0F3WCxHQUFBdXRCLEVBQUF2dkMsSUFBQXN2QyxHQUFBN29CLEdBSUFwZ0IsR0FBQVQsTUFBQXlnQixFQUFBSSxFQUFBVCxPQUdBLE9BQUFqa0IsS0FBQTB4QixVQUFBcE4sTUFHQSxJQUFBbUYsR0FBQSxVQUVBRCxHQUFBLElBQUE3VCxPQUFBLEtBQUFzd0IsR0FBQSxrQkFBQSxLQUVBNWMsR0FBQSxTQUFBakosR0FLQSxJQUFBN0QsRUFBQTZELEVBQUFzRCxjQUFBbVksWUFNQSxPQUpBdGYsR0FBQUEsRUFBQWt4QixTQUNBbHhCLEVBQUF0SixHQUdBc0osRUFBQW14QixpQkFBQXR0QixLQUtBLFdBSUEsU0FBQXV0QixJQUdBLEdBQUF6RyxFQUFBLENBSUFBLEVBQUF6M0IsTUFBQW0rQixRQUNBLDRHQUlBMUcsRUFBQXpoQixVQUFBLEdBQ0FyUSxHQUFBdEcsWUFBQSsrQixHQUVBLElBQUFDLEVBQUE3NkIsRUFBQXk2QixpQkFBQXhHLEdBQ0E2RyxFQUFBLE9BQUFELEVBQUFuK0IsSUFHQXErQixFQUFBLFFBQUFGLEVBQUFHLFdBQ0FDLEVBQUEsUUFBQUosRUFBQTVrQixNQUlBZ2UsRUFBQXozQixNQUFBMCtCLFlBQUEsTUFDQUMsRUFBQSxRQUFBTixFQUFBSyxZQUVBLzRCLEdBQUFsSCxZQUFBMi9CLEdBSUEzRyxFQUFBLE1BR0EsSUFBQTZHLEVBQUFHLEVBQUFFLEVBQUFKLEVBQ0FILEVBQUFqZ0MsR0FBQVUsY0FBQSxPQUNBNDRCLEVBQUF0NUIsR0FBQVUsY0FBQSxPQUdBNDRCLEVBQUF6M0IsUUFNQXkzQixFQUFBejNCLE1BQUE0K0IsZUFBQSxjQUNBbkgsRUFBQUMsV0FBQSxHQUFBMTNCLE1BQUE0K0IsZUFBQSxHQUNBOWxCLEdBQUErbEIsZ0JBQUEsZ0JBQUFwSCxFQUFBejNCLE1BQUE0K0IsZUFFQVIsRUFBQXArQixNQUFBbStCLFFBQUEsNEZBRUFDLEVBQUEvK0IsWUFBQW80QixHQUVBam5CLEdBQUEySCxPQUFBVyxJQUNBZ21CLGNBQUEsV0FFQSxPQURBWixJQUNBSSxHQUVBbmpCLGtCQUFBLFdBRUEsT0FEQStpQixJQUNBTyxHQUVBM2tCLGlCQUFBLFdBRUEsT0FEQW9rQixJQUNBUyxHQUVBSSxtQkFBQSxXQUVBLE9BREFiLElBQ0FLLE1BeEVBLEdBdUpBLElBS0FTLEdBQUEsNEJBQ0FDLEdBQUEsTUFDQUMsSUFBQWovQixTQUFBLFdBQUFrL0IsV0FBQSxTQUFBanJCLFFBQUEsU0FDQWtyQixJQUNBQyxjQUFBLElBQ0FDLFdBQUEsT0FHQS9rQixJQUFBLFNBQUEsTUFBQSxNQUNBRixHQUFBbGMsR0FBQVUsY0FBQSxPQUFBbUIsTUFpSUF3USxHQUFBMkgsUUFJQTRFLFVBQ0FWLFNBQ0E3SCxJQUFBLFNBQUE3RCxFQUFBNkksR0FDQSxHQUFBQSxFQUFBLENBR0EsSUFBQTNFLEVBQUEwRSxFQUFBNUksRUFBQSxXQUNBLE1BQUEsS0FBQWtFLEVBQUEsSUFBQUEsTUFPQWpCLFdBQ0EyckIseUJBQUEsRUFDQUMsYUFBQSxFQUNBQyxhQUFBLEVBQ0FDLFVBQUEsRUFDQUMsWUFBQSxFQUNBTCxZQUFBLEVBQ0FNLFlBQUEsRUFDQXZqQixTQUFBLEVBQ0F3akIsT0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsUUFBQSxFQUNBQyxNQUFBLEdBS0F4bEIsVUFDQXlsQixNQUFBLFlBSUFsZ0MsTUFBQSxTQUFBMlEsRUFBQW5YLEVBQUFnSCxFQUFBb04sR0FHQSxHQUFBK0MsR0FBQSxJQUFBQSxFQUFBakIsVUFBQSxJQUFBaUIsRUFBQWpCLFVBQUFpQixFQUFBM1EsTUFBQSxDQUtBLElBQUE2VSxFQUFBeGhCLEVBQUF3cEIsRUFDQXNqQixFQUFBM3ZCLEdBQUFzTSxVQUFBdGpCLEdBQ0E0bUMsRUFBQW5CLEdBQUExL0IsS0FBQS9GLEdBQ0F3RyxFQUFBMlEsRUFBQTNRLE1BYUEsR0FSQW9nQyxJQUNBNW1DLEVBQUFnaEIsRUFBQTJsQixJQUlBdGpCLEVBQUFyTSxHQUFBdU0sU0FBQXZqQixJQUFBZ1gsR0FBQXVNLFNBQUFvakIsUUFHQWpvQyxJQUFBc0ksRUF3Q0EsT0FBQXFjLEdBQUEsUUFBQUEsUUFDQTNrQixLQUFBMmMsRUFBQWdJLEVBQUFySSxJQUFBN0QsR0FBQSxFQUFBL0MsSUFFQWlILEVBSUE3VSxFQUFBeEcsR0EzQ0EsV0FIQW5HLFNBQUFtTixLQUdBcVUsRUFBQWYsR0FBQXJMLEtBQUFqSSxLQUFBcVUsRUFBQSxLQUNBclUsRUFBQXlTLEVBQUF0QyxFQUFBblgsRUFBQXFiLEdBR0F4aEIsRUFBQSxVQUlBLE1BQUFtTixHQUFBQSxJQUFBQSxJQUtBLFdBQUFuTixJQUNBbU4sR0FBQXFVLEdBQUFBLEVBQUEsS0FBQXJFLEdBQUFvRCxVQUFBdXNCLEdBQUEsR0FBQSxPQUlBcm5CLEdBQUErbEIsaUJBQUEsS0FBQXIrQixHQUFBLElBQUFoSCxFQUFBTyxRQUFBLGdCQUNBaUcsRUFBQXhHLEdBQUEsV0FJQXFqQixHQUFBLFFBQUFBLFFBQ0Eza0IsS0FBQXNJLEVBQUFxYyxFQUFBaHFCLElBQUE4ZCxFQUFBblEsRUFBQW9OLE1BRUF3eUIsRUFDQXBnQyxFQUFBcWdDLFlBQUE3bUMsRUFBQWdILEdBRUFSLEVBQUF4RyxHQUFBZ0gsTUFrQkFpVCxJQUFBLFNBQUE5QyxFQUFBblgsRUFBQW9VLEVBQUFtTixHQUNBLElBQUFsVCxFQUFBbWEsRUFBQW5GLEVBQ0FzakIsRUFBQTN2QixHQUFBc00sVUFBQXRqQixHQTZCQSxPQTVCQXlsQyxHQUFBMS9CLEtBQUEvRixLQU1BQSxFQUFBZ2hCLEVBQUEybEIsS0FJQXRqQixFQUFBck0sR0FBQXVNLFNBQUF2akIsSUFBQWdYLEdBQUF1TSxTQUFBb2pCLEtBR0EsUUFBQXRqQixJQUNBaFYsRUFBQWdWLEVBQUFySSxJQUFBN0QsR0FBQSxFQUFBL0MsU0FJQTFWLElBQUEyUCxJQUNBQSxFQUFBMFIsRUFBQTVJLEVBQUFuWCxFQUFBdWhCLElBSUEsV0FBQWxULEdBQUFyTyxLQUFBNGxDLEtBQ0F2M0IsRUFBQXUzQixHQUFBNWxDLElBSUEsS0FBQW9VLEdBQUFBLEdBQ0FvVSxFQUFBdFosV0FBQWIsSUFDQSxJQUFBK0YsR0FBQTB5QixTQUFBdGUsR0FBQUEsR0FBQSxFQUFBbmEsR0FHQUEsS0FJQTJJLEdBQUFuRyxNQUFBLFNBQUEsU0FBQSxTQUFBN2IsRUFBQWdMLEdBQ0FnWCxHQUFBdU0sU0FBQXZqQixJQUNBZ2IsSUFBQSxTQUFBN0QsRUFBQTZJLEVBQUE1TCxHQUNBLEdBQUE0TCxFQUlBLE9BQUF3bEIsR0FBQXovQixLQUFBaVIsR0FBQWlELElBQUE5QyxFQUFBLGFBUUFBLEVBQUE0dkIsaUJBQUF4eEMsUUFBQTRoQixFQUFBNnZCLHdCQUFBL21CLE1BSUF3QixFQUFBdEssRUFBQW5YLEVBQUFvVSxHQUhBOG9CLEdBQUEvbEIsRUFBQXV1QixHQUFBLFdBQ0EsT0FBQWprQixFQUFBdEssRUFBQW5YLEVBQUFvVSxNQU1BL2EsSUFBQSxTQUFBOGQsRUFBQW5RLEVBQUFvTixHQUNBLElBQUFnTixFQUNBRyxFQUFBbk4sR0FBQWdNLEdBQUFqSixHQUNBZ0ssRUFBQS9NLEdBQUFpTixFQUNBbEssRUFDQW5YLEVBQ0FvVSxFQUNBLGVBQUE0QyxHQUFBaUQsSUFBQTlDLEVBQUEsYUFBQSxFQUFBb0ssR0FDQUEsR0FXQSxPQVBBSixJQUFBQyxFQUFBOUcsR0FBQXJMLEtBQUFqSSxLQUNBLFFBQUFvYSxFQUFBLElBQUEsUUFFQWpLLEVBQUEzUSxNQUFBeEcsR0FBQWdILEVBQ0FBLEVBQUFnUSxHQUFBaUQsSUFBQTlDLEVBQUFuWCxJQUdBa2hCLEVBQUEvSixFQUFBblEsRUFBQW1hLE9BS0FuSyxHQUFBdU0sU0FBQXloQixXQUFBdmtCLEVBQUFuQixHQUFBaW1CLG1CQUNBLFNBQUFwdUIsRUFBQTZJLEdBQ0EsR0FBQUEsRUFDQSxPQUFBOVEsV0FBQTZRLEVBQUE1SSxFQUFBLGdCQUNBQSxFQUFBNnZCLHdCQUFBcmdDLEtBQ0F1MkIsR0FBQS9sQixHQUFBNnRCLFdBQUEsR0FBQSxXQUNBLE9BQUE3dEIsRUFBQTZ2Qix3QkFBQXJnQyxRQUVBLE9BTUFxUSxHQUFBbkcsTUFDQW8yQixPQUFBLEdBQ0FDLFFBQUEsR0FDQUMsT0FBQSxTQUNBLFNBQUEvaEIsRUFBQWdpQixHQUNBcHdCLEdBQUF1TSxTQUFBNkIsRUFBQWdpQixJQUNBNWpCLE9BQUEsU0FBQXhjLEdBT0EsSUFOQSxJQUFBaFMsRUFBQSxFQUNBcXlDLEtBR0FDLEVBQUEsaUJBQUF0Z0MsRUFBQUEsRUFBQTRILE1BQUEsTUFBQTVILEdBRUFoUyxFQUFBLEVBQUFBLElBQ0FxeUMsRUFBQWppQixFQUFBNUQsR0FBQXhzQixHQUFBb3lDLEdBQ0FFLEVBQUF0eUMsSUFBQXN5QyxFQUFBdHlDLEVBQUEsSUFBQXN5QyxFQUFBLEdBR0EsT0FBQUQsSUFJQTdtQixHQUFBemEsS0FBQXFmLEtBQ0FwTyxHQUFBdU0sU0FBQTZCLEVBQUFnaUIsR0FBQS90QyxJQUFBNm5CLEtBSUFsSyxHQUFBdmMsR0FBQWtrQixRQUNBMUUsSUFBQSxTQUFBamEsRUFBQWdILEdBQ0EsT0FBQXlYLEdBQUExbkIsS0FBQSxTQUFBb2dCLEVBQUFuWCxFQUFBZ0gsR0FDQSxJQUFBdWEsRUFBQWpwQixFQUNBc1ksS0FDQTViLEVBQUEsRUFFQSxHQUFBZ1osTUFBQW1JLFFBQUFuVyxHQUFBLENBSUEsSUFIQXVoQixFQUFBbkIsR0FBQWpKLEdBQ0E3ZSxFQUFBMEgsRUFBQXpLLE9BRUFQLEVBQUFzRCxFQUFBdEQsSUFDQTRiLEVBQUE1USxFQUFBaEwsSUFBQWdpQixHQUFBaUQsSUFBQTlDLEVBQUFuWCxFQUFBaEwsSUFBQSxFQUFBdXNCLEdBR0EsT0FBQTNRLEVBR0EsWUFBQWxTLElBQUFzSSxFQUNBZ1EsR0FBQXhRLE1BQUEyUSxFQUFBblgsRUFBQWdILEdBQ0FnUSxHQUFBaUQsSUFBQTlDLEVBQUFuWCxJQUNBQSxFQUFBZ0gsRUFBQXJNLFVBQUFwRixPQUFBLE1BUUF5aEIsR0FBQTRLLE1BQUFBLEVBRUFBLEVBQUF0cUIsV0FDQTRFLFlBQUEwbEIsRUFDQXJULEtBQUEsU0FBQTRJLEVBQUEzZCxFQUFBa2dCLEVBQUF0akIsRUFBQXlyQixFQUFBMUgsR0FDQXBqQixLQUFBb2dCLEtBQUFBLEVBQ0FwZ0IsS0FBQTJpQixLQUFBQSxFQUNBM2lCLEtBQUE4cUIsT0FBQUEsR0FBQTdLLEdBQUE2SyxPQUFBdEYsU0FDQXhsQixLQUFBeUMsUUFBQUEsRUFDQXpDLEtBQUFaLE1BQUFZLEtBQUF3ckIsSUFBQXhyQixLQUFBOGdCLE1BQ0E5Z0IsS0FBQVgsSUFBQUEsRUFDQVcsS0FBQW9qQixLQUFBQSxJQUFBbkQsR0FBQW9ELFVBQUFWLEdBQUEsR0FBQSxPQUVBN0IsSUFBQSxXQUNBLElBQUF3TCxFQUFBekIsRUFBQTJsQixVQUFBeHdDLEtBQUEyaUIsTUFFQSxPQUFBMkosR0FBQUEsRUFBQXJJLElBQ0FxSSxFQUFBckksSUFBQWprQixNQUNBNnFCLEVBQUEybEIsVUFBQWhyQixTQUFBdkIsSUFBQWprQixPQUVBcXRCLElBQUEsU0FBQUYsR0FDQSxJQUFBc2pCLEVBQ0Fua0IsRUFBQXpCLEVBQUEybEIsVUFBQXh3QyxLQUFBMmlCLE1Bb0JBLE9BbEJBM2lCLEtBQUF5QyxRQUFBakMsU0FDQVIsS0FBQTB3QyxJQUFBRCxFQUFBeHdCLEdBQUE2SyxPQUFBOXFCLEtBQUE4cUIsUUFDQXFDLEVBQUFudEIsS0FBQXlDLFFBQUFqQyxTQUFBMnNCLEVBQUEsRUFBQSxFQUFBbnRCLEtBQUF5QyxRQUFBakMsVUFHQVIsS0FBQTB3QyxJQUFBRCxFQUFBdGpCLEVBRUFudEIsS0FBQXdyQixLQUFBeHJCLEtBQUFYLElBQUFXLEtBQUFaLE9BQUFxeEMsRUFBQXp3QyxLQUFBWixNQUVBWSxLQUFBeUMsUUFBQWt1QyxNQUNBM3dDLEtBQUF5QyxRQUFBa3VDLEtBQUFweUMsS0FBQXlCLEtBQUFvZ0IsS0FBQXBnQixLQUFBd3JCLElBQUF4ckIsTUFHQXNzQixHQUFBQSxFQUFBaHFCLElBQ0FncUIsRUFBQWhxQixJQUFBdEMsTUFFQTZxQixFQUFBMmxCLFVBQUFockIsU0FBQWxqQixJQUFBdEMsTUFFQUEsT0FJQTZxQixFQUFBdHFCLFVBQUFpWCxLQUFBalgsVUFBQXNxQixFQUFBdHFCLFVBRUFzcUIsRUFBQTJsQixXQUNBaHJCLFVBQ0F2QixJQUFBLFNBQUFwQixHQUNBLElBQUE1akIsRUFJQSxPQUFBLElBQUE0akIsRUFBQXpDLEtBQUFqQixVQUNBLE1BQUEwRCxFQUFBekMsS0FBQXlDLEVBQUFGLE9BQUEsTUFBQUUsRUFBQXpDLEtBQUEzUSxNQUFBb1QsRUFBQUYsTUFDQUUsRUFBQXpDLEtBQUF5QyxFQUFBRixPQU9BMWpCLEVBQUFnaEIsR0FBQWlELElBQUFMLEVBQUF6QyxLQUFBeUMsRUFBQUYsS0FBQSxNQUdBLFNBQUExakIsRUFBQUEsRUFBQSxHQUVBcUQsSUFBQSxTQUFBdWdCLEdBS0E1QyxHQUFBa0wsR0FBQXdsQixLQUFBOXRCLEVBQUFGLE1BQ0ExQyxHQUFBa0wsR0FBQXdsQixLQUFBOXRCLEVBQUFGLE1BQUFFLEdBQ0EsSUFBQUEsRUFBQXpDLEtBQUFqQixVQUNBLE1BQUEwRCxFQUFBekMsS0FBQTNRLE1BQUF3USxHQUFBaUssU0FBQXJILEVBQUFGLFNBQ0ExQyxHQUFBdU0sU0FBQTNKLEVBQUFGLE1BR0FFLEVBQUF6QyxLQUFBeUMsRUFBQUYsTUFBQUUsRUFBQTJJLElBRkF2TCxHQUFBeFEsTUFBQW9ULEVBQUF6QyxLQUFBeUMsRUFBQUYsS0FBQUUsRUFBQTJJLElBQUEzSSxFQUFBTyxTQVVBeUgsRUFBQTJsQixVQUFBSSxVQUFBL2xCLEVBQUEybEIsVUFBQUssWUFDQXZ1QyxJQUFBLFNBQUF1Z0IsR0FDQUEsRUFBQXpDLEtBQUFqQixVQUFBMEQsRUFBQXpDLEtBQUFuUyxhQUNBNFUsRUFBQXpDLEtBQUF5QyxFQUFBRixNQUFBRSxFQUFBMkksT0FLQXZMLEdBQUE2SyxRQUNBZ21CLE9BQUEsU0FBQTl1QyxHQUNBLE9BQUFBLEdBRUErdUMsTUFBQSxTQUFBL3VDLEdBQ0EsTUFBQSxHQUFBdkIsS0FBQXV3QyxJQUFBaHZDLEVBQUF2QixLQUFBd3dDLElBQUEsR0FFQXpyQixTQUFBLFNBR0F2RixHQUFBa0wsR0FBQU4sRUFBQXRxQixVQUFBaVgsS0FHQXlJLEdBQUFrTCxHQUFBd2xCLFFBS0EsSUFDQXBsQixHQUFBUCxHQUNBa21CLEdBQUEseUJBQ0FDLEdBQUEsY0FzWUFseEIsR0FBQWdNLFVBQUFoTSxHQUFBMkgsT0FBQXFFLEdBRUFDLFVBQ0FrbEIsS0FBQSxTQUFBenVCLEVBQUExUyxHQUNBLElBQUE0UyxFQUFBN2lCLEtBQUErckIsWUFBQXBKLEVBQUExUyxHQUVBLE9BREF5UyxFQUFBRyxFQUFBekMsS0FBQXVDLEVBQUFZLEdBQUFyTCxLQUFBakksR0FBQTRTLEdBQ0FBLEtBSUF3dUIsUUFBQSxTQUFBamxCLEVBQUF2dEIsR0FDQW9oQixHQUFBUSxXQUFBMkwsSUFDQXZ0QixFQUFBdXRCLEVBQ0FBLEdBQUEsTUFFQUEsRUFBQUEsRUFBQXBYLE1BQUFrTSxJQU9BLElBSkEsSUFBQXlCLEVBQ0EvWixFQUFBLEVBQ0FwSyxFQUFBNHRCLEVBQUE1dEIsT0FFQW9LLEVBQUFwSyxFQUFBb0ssSUFDQStaLEVBQUF5SixFQUFBeGpCLEdBQ0FxakIsRUFBQUMsU0FBQXZKLEdBQUFzSixFQUFBQyxTQUFBdkosT0FDQXNKLEVBQUFDLFNBQUF2SixHQUFBeEwsUUFBQXRZLElBSUErdEIsWUExV0EsU0FBQXhNLEVBQUFnTSxFQUFBcnNCLEdBQ0EsSUFBQTRpQixFQUFBMVMsRUFBQXEyQixFQUFBaGEsRUFBQWdsQixFQUFBQyxFQUFBQyxFQUFBN3RCLEVBQ0E4dEIsRUFBQSxVQUFBcmxCLEdBQUEsV0FBQUEsRUFDQTZCLEVBQUFqdUIsS0FDQXFzQyxLQUNBNThCLEVBQUEyUSxFQUFBM1EsTUFDQXdiLEVBQUE3SyxFQUFBakIsVUFBQStFLEdBQUE5RCxHQUNBc3hCLEVBQUExdEIsR0FBQUMsSUFBQTdELEVBQUEsVUFHQXJnQixFQUFBK3RCLFFBRUEsT0FEQXhCLEVBQUFyTSxHQUFBNE4sWUFBQXpOLEVBQUEsT0FDQXV4QixXQUNBcmxCLEVBQUFxbEIsU0FBQSxFQUNBTCxFQUFBaGxCLEVBQUE5ZSxNQUFBbTFCLEtBQ0FyVyxFQUFBOWUsTUFBQW0xQixLQUFBLFdBQ0FyVyxFQUFBcWxCLFVBQ0FMLE1BSUFobEIsRUFBQXFsQixXQUVBMWpCLEVBQUFsQixPQUFBLFdBR0FrQixFQUFBbEIsT0FBQSxXQUNBVCxFQUFBcWxCLFdBQ0ExeEIsR0FBQTZOLE1BQUExTixFQUFBLE1BQUE1aEIsUUFDQTh0QixFQUFBOWUsTUFBQW0xQixZQU9BLElBQUFoZ0IsS0FBQXlKLEVBRUEsR0FEQW5jLEVBQUFtYyxFQUFBekosR0FDQXV1QixHQUFBbGlDLEtBQUFpQixHQUFBLENBR0EsVUFGQW1jLEVBQUF6SixHQUNBMmpCLEVBQUFBLEdBQUEsV0FBQXIyQixFQUNBQSxLQUFBZ2IsRUFBQSxPQUFBLFFBQUEsQ0FJQSxHQUFBLFNBQUFoYixJQUFBeWhDLFFBQUEvcEMsSUFBQStwQyxFQUFBL3VCLEdBS0EsU0FKQXNJLEdBQUEsRUFPQW9oQixFQUFBMXBCLEdBQUErdUIsR0FBQUEsRUFBQS91QixJQUFBMUMsR0FBQXhRLE1BQUEyUSxFQUFBdUMsR0FNQSxJQURBNHVCLEdBQUF0eEIsR0FBQW1TLGNBQUFoRyxNQUNBbk0sR0FBQW1TLGNBQUFpYSxHQUFBLENBS0FvRixHQUFBLElBQUFyeEIsRUFBQWpCLFdBS0FwZixFQUFBNnhDLFVBQUFuaUMsRUFBQW1pQyxTQUFBbmlDLEVBQUFvaUMsVUFBQXBpQyxFQUFBcWlDLFdBSUEsT0FEQU4sRUFBQUUsR0FBQUEsRUFBQS90QixXQUVBNnRCLEVBQUF4dEIsR0FBQUMsSUFBQTdELEVBQUEsWUFHQSxVQURBdUQsRUFBQTFELEdBQUFpRCxJQUFBOUMsRUFBQSxjQUVBb3hCLEVBQ0E3dEIsRUFBQTZ0QixHQUlBM3RCLEdBQUF6RCxJQUFBLEdBQ0FveEIsRUFBQXB4QixFQUFBM1EsTUFBQWtVLFNBQUE2dEIsRUFDQTd0QixFQUFBMUQsR0FBQWlELElBQUE5QyxFQUFBLFdBQ0F5RCxHQUFBekQsT0FLQSxXQUFBdUQsR0FBQSxpQkFBQUEsR0FBQSxNQUFBNnRCLElBQ0EsU0FBQXZ4QixHQUFBaUQsSUFBQTlDLEVBQUEsV0FHQW14QixJQUNBdGpCLEVBQUF0YSxLQUFBLFdBQ0FsRSxFQUFBa1UsUUFBQTZ0QixJQUVBLE1BQUFBLElBQ0E3dEIsRUFBQWxVLEVBQUFrVSxRQUNBNnRCLEVBQUEsU0FBQTd0QixFQUFBLEdBQUFBLElBR0FsVSxFQUFBa1UsUUFBQSxpQkFLQTVqQixFQUFBNnhDLFdBQ0FuaUMsRUFBQW1pQyxTQUFBLFNBQ0EzakIsRUFBQWxCLE9BQUEsV0FDQXRkLEVBQUFtaUMsU0FBQTd4QyxFQUFBNnhDLFNBQUEsR0FDQW5pQyxFQUFBb2lDLFVBQUE5eEMsRUFBQTZ4QyxTQUFBLEdBQ0FuaUMsRUFBQXFpQyxVQUFBL3hDLEVBQUE2eEMsU0FBQSxNQUtBTCxHQUFBLEVBQ0EsSUFBQTV1QixLQUFBMHBCLEVBR0FrRixJQUNBRyxFQUNBLFdBQUFBLElBQ0F6bUIsRUFBQXltQixFQUFBem1CLFFBR0F5bUIsRUFBQTF0QixHQUFBMEQsT0FBQXRILEVBQUEsVUFBQXVELFFBQUE2dEIsSUFJQWxMLElBQ0FvTCxFQUFBem1CLFFBQUFBLEdBSUFBLEdBQ0FwSCxHQUFBekQsSUFBQSxHQUtBNk4sRUFBQXRhLEtBQUEsV0FLQXNYLEdBQ0FwSCxHQUFBekQsSUFFQTRELEdBQUE2RSxPQUFBekksRUFBQSxVQUNBLElBQUF1QyxLQUFBMHBCLEVBQ0Fwc0IsR0FBQXhRLE1BQUEyUSxFQUFBdUMsRUFBQTBwQixFQUFBMXBCLE9BTUE0dUIsRUFBQXhsQixFQUFBZCxFQUFBeW1CLEVBQUEvdUIsR0FBQSxFQUFBQSxFQUFBc0wsR0FDQXRMLEtBQUErdUIsSUFDQUEsRUFBQS91QixHQUFBNHVCLEVBQUFueUMsTUFDQTZyQixJQUNBc21CLEVBQUFseUMsSUFBQWt5QyxFQUFBbnlDLE1BQ0FteUMsRUFBQW55QyxNQUFBLE9BdU1BMnlDLFVBQUEsU0FBQWx6QyxFQUFBa3VDLEdBQ0FBLEVBQ0E5Z0IsRUFBQVcsV0FBQXpWLFFBQUF0WSxHQUVBb3RCLEVBQUFXLFdBQUF0b0IsS0FBQXpGLE1BS0FvaEIsR0FBQSt4QixNQUFBLFNBQUFBLEVBQUFsbkIsRUFBQXBuQixHQUNBLElBQUF1dUMsRUFBQUQsR0FBQSxpQkFBQUEsRUFBQS94QixHQUFBMkgsVUFBQW9xQixJQUNBN2lDLFNBQUF6TCxJQUFBQSxHQUFBb25CLEdBQ0E3SyxHQUFBUSxXQUFBdXhCLElBQUFBLEVBQ0F4eEMsU0FBQXd4QyxFQUNBbG5CLE9BQUFwbkIsR0FBQW9uQixHQUFBQSxJQUFBN0ssR0FBQVEsV0FBQXFLLElBQUFBLEdBb0NBLE9BaENBN0ssR0FBQWtMLEdBQUEzbUIsSUFDQXl0QyxFQUFBenhDLFNBQUEsRUFHQSxpQkFBQXl4QyxFQUFBenhDLFdBQ0F5eEMsRUFBQXp4QyxZQUFBeWYsR0FBQWtMLEdBQUErbUIsT0FDQUQsRUFBQXp4QyxTQUFBeWYsR0FBQWtMLEdBQUErbUIsT0FBQUQsRUFBQXp4QyxVQUdBeXhDLEVBQUF6eEMsU0FBQXlmLEdBQUFrTCxHQUFBK21CLE9BQUExc0IsVUFNQSxNQUFBeXNCLEVBQUFua0IsUUFBQSxJQUFBbWtCLEVBQUFua0IsUUFDQW1rQixFQUFBbmtCLE1BQUEsTUFJQW1rQixFQUFBN0wsSUFBQTZMLEVBQUE5aUMsU0FFQThpQyxFQUFBOWlDLFNBQUEsV0FDQThRLEdBQUFRLFdBQUF3eEIsRUFBQTdMLE1BQ0E2TCxFQUFBN0wsSUFBQTduQyxLQUFBeUIsTUFHQWl5QyxFQUFBbmtCLE9BQ0E3TixHQUFBMmxCLFFBQUE1bEMsS0FBQWl5QyxFQUFBbmtCLFFBSUFta0IsR0FHQWh5QixHQUFBdmMsR0FBQWtrQixRQUNBdXFCLE9BQUEsU0FBQUgsRUFBQTNtQyxFQUFBeWYsRUFBQWpzQixHQUdBLE9BQUFtQixLQUFBNGdCLE9BQUFzRCxJQUFBaEIsSUFBQSxVQUFBLEdBQUFZLE9BR0F6a0IsTUFBQSt5QyxTQUFBdG1CLFFBQUF6Z0IsR0FBQTJtQyxFQUFBbG5CLEVBQUFqc0IsSUFFQXV6QyxRQUFBLFNBQUF6dkIsRUFBQXF2QixFQUFBbG5CLEVBQUFqc0IsR0FDQSxJQUFBMk8sRUFBQXlTLEdBQUFtUyxjQUFBelAsR0FDQTB2QixFQUFBcHlCLEdBQUEreEIsTUFBQUEsRUFBQWxuQixFQUFBanNCLEdBQ0F5ekMsRUFBQSxXQUdBLElBQUFya0IsRUFBQWhDLEVBQUFqc0IsS0FBQWlnQixHQUFBMkgsVUFBQWpGLEdBQUEwdkIsSUFHQTdrQyxHQUFBd1csR0FBQUMsSUFBQWprQixLQUFBLFlBQ0FpdUIsRUFBQVAsTUFBQSxJQUtBLE9BRkE0a0IsRUFBQUMsT0FBQUQsRUFFQTlrQyxJQUFBLElBQUE2a0MsRUFBQXZrQixNQUNBOXRCLEtBQUE4WixLQUFBdzRCLEdBQ0F0eUMsS0FBQTh0QixNQUFBdWtCLEVBQUF2a0IsTUFBQXdrQixJQUVBNWtCLEtBQUEsU0FBQTVxQixFQUFBaWpDLEVBQUFwWSxHQUNBLElBQUE2a0IsRUFBQSxTQUFBbG1CLEdBQ0EsSUFBQW9CLEVBQUFwQixFQUFBb0IsWUFDQXBCLEVBQUFvQixLQUNBQSxFQUFBQyxJQVlBLE1BVEEsaUJBQUE3cUIsSUFDQTZxQixFQUFBb1ksRUFDQUEsRUFBQWpqQyxFQUNBQSxPQUFBNkUsR0FFQW8rQixJQUFBLElBQUFqakMsR0FDQTlDLEtBQUE4dEIsTUFBQWhyQixHQUFBLFNBR0E5QyxLQUFBOFosS0FBQSxXQUNBLElBQUE4ckIsR0FBQSxFQUNBaDlCLEVBQUEsTUFBQTlGLEdBQUFBLEVBQUEsYUFDQTJ2QyxFQUFBeHlCLEdBQUF3eUIsT0FDQWpvQyxFQUFBd1osR0FBQUMsSUFBQWprQixNQUVBLEdBQUE0SSxFQUNBNEIsRUFBQTVCLElBQUE0QixFQUFBNUIsR0FBQThrQixNQUNBOGtCLEVBQUFob0MsRUFBQTVCLFNBR0EsSUFBQUEsS0FBQTRCLEVBQ0FBLEVBQUE1QixJQUFBNEIsRUFBQTVCLEdBQUE4a0IsTUFBQXlqQixHQUFBbmlDLEtBQUFwRyxJQUNBNHBDLEVBQUFob0MsRUFBQTVCLElBS0EsSUFBQUEsRUFBQTZwQyxFQUFBajBDLE9BQUFvSyxLQUNBNnBDLEVBQUE3cEMsR0FBQXdYLE9BQUFwZ0IsTUFDQSxNQUFBOEMsR0FBQTJ2QyxFQUFBN3BDLEdBQUFrbEIsUUFBQWhyQixJQUVBMnZDLEVBQUE3cEMsR0FBQXFsQixLQUFBUCxLQUFBQyxHQUNBaVksR0FBQSxFQUNBNk0sRUFBQTN0QyxPQUFBOEQsRUFBQSxLQU9BZzlCLEdBQUFqWSxHQUNBMU4sR0FBQTJsQixRQUFBNWxDLEtBQUE4QyxNQUlBeXZDLE9BQUEsU0FBQXp2QyxHQUlBLE9BSEEsSUFBQUEsSUFDQUEsRUFBQUEsR0FBQSxNQUVBOUMsS0FBQThaLEtBQUEsV0FDQSxJQUFBbFIsRUFDQTRCLEVBQUF3WixHQUFBQyxJQUFBamtCLE1BQ0E4dEIsRUFBQXRqQixFQUFBMUgsRUFBQSxTQUNBd3BCLEVBQUE5aEIsRUFBQTFILEVBQUEsY0FDQTJ2QyxFQUFBeHlCLEdBQUF3eUIsT0FDQWowQyxFQUFBc3ZCLEVBQUFBLEVBQUF0dkIsT0FBQSxFQWFBLElBVkFnTSxFQUFBK25DLFFBQUEsRUFHQXR5QixHQUFBNk4sTUFBQTl0QixLQUFBOEMsTUFFQXdwQixHQUFBQSxFQUFBb0IsTUFDQXBCLEVBQUFvQixLQUFBbnZCLEtBQUF5QixNQUFBLEdBSUE0SSxFQUFBNnBDLEVBQUFqMEMsT0FBQW9LLEtBQ0E2cEMsRUFBQTdwQyxHQUFBd1gsT0FBQXBnQixNQUFBeXlDLEVBQUE3cEMsR0FBQWtsQixRQUFBaHJCLElBQ0EydkMsRUFBQTdwQyxHQUFBcWxCLEtBQUFQLE1BQUEsR0FDQStrQixFQUFBM3RDLE9BQUE4RCxFQUFBLElBS0EsSUFBQUEsRUFBQSxFQUFBQSxFQUFBcEssRUFBQW9LLElBQ0FrbEIsRUFBQWxsQixJQUFBa2xCLEVBQUFsbEIsR0FBQTJwQyxRQUNBemtCLEVBQUFsbEIsR0FBQTJwQyxPQUFBaDBDLEtBQUF5QixhQUtBd0ssRUFBQStuQyxZQUtBdHlCLEdBQUFuRyxNQUFBLFNBQUEsT0FBQSxRQUFBLFNBQUE3YixFQUFBZ0wsR0FDQSxJQUFBeXBDLEVBQUF6eUIsR0FBQXZjLEdBQUF1RixHQUNBZ1gsR0FBQXZjLEdBQUF1RixHQUFBLFNBQUErb0MsRUFBQWxuQixFQUFBanNCLEdBQ0EsT0FBQSxNQUFBbXpDLEdBQUEsa0JBQUFBLEVBQ0FVLEVBQUE3dUMsTUFBQTdELEtBQUE0RCxXQUNBNUQsS0FBQW95QyxRQUFBM21CLEVBQUF4aUIsR0FBQSxHQUFBK29DLEVBQUFsbkIsRUFBQWpzQixNQUtBb2hCLEdBQUFuRyxNQUNBNjRCLFVBQUFsbkIsRUFBQSxRQUNBbW5CLFFBQUFubkIsRUFBQSxRQUNBb25CLFlBQUFwbkIsRUFBQSxVQUNBcW5CLFFBQUFobkIsUUFBQSxRQUNBaW5CLFNBQUFqbkIsUUFBQSxRQUNBa25CLFlBQUFsbkIsUUFBQSxXQUNBLFNBQUE3aUIsRUFBQW1qQixHQUNBbk0sR0FBQXZjLEdBQUF1RixHQUFBLFNBQUErb0MsRUFBQWxuQixFQUFBanNCLEdBQ0EsT0FBQW1CLEtBQUFveUMsUUFBQWhtQixFQUFBNGxCLEVBQUFsbkIsRUFBQWpzQixNQUlBb2hCLEdBQUF3eUIsVUFDQXh5QixHQUFBa0wsR0FBQUUsS0FBQSxXQUNBLElBQUEyQyxFQUNBL3ZCLEVBQUEsRUFDQXcwQyxFQUFBeHlCLEdBQUF3eUIsT0FJQSxJQUZBbG5CLEdBQUF0TCxHQUFBdUwsTUFFQXZ0QixFQUFBdzBDLEVBQUFqMEMsT0FBQVAsS0FDQSt2QixFQUFBeWtCLEVBQUF4MEMsT0FHQXcwQyxFQUFBeDBDLEtBQUErdkIsR0FDQXlrQixFQUFBM3RDLE9BQUE3RyxJQUFBLEdBSUF3MEMsRUFBQWowQyxRQUNBeWhCLEdBQUFrTCxHQUFBdUMsT0FFQW5DLFFBQUE1akIsR0FHQXNZLEdBQUFrTCxHQUFBNkMsTUFBQSxTQUFBQSxHQUNBL04sR0FBQXd5QixPQUFBbnVDLEtBQUEwcEIsR0FDQS9OLEdBQUFrTCxHQUFBL3JCLFNBR0E2Z0IsR0FBQWtMLEdBQUFDLFNBQUEsR0FDQW5MLEdBQUFrTCxHQUFBL3JCLE1BQUEsV0FDQTRyQixLQUlBQSxJQUFBLEVBQ0FELE1BR0E5SyxHQUFBa0wsR0FBQXVDLEtBQUEsV0FDQTFDLEdBQUEsTUFHQS9LLEdBQUFrTCxHQUFBK21CLFFBQ0FlLEtBQUEsSUFDQUMsS0FBQSxJQUdBMXRCLFNBQUEsS0FNQXZGLEdBQUF2YyxHQUFBeXZDLE1BQUEsU0FBQUMsRUFBQXR3QyxHQUlBLE9BSEFzd0MsRUFBQW56QixHQUFBa0wsR0FBQWxMLEdBQUFrTCxHQUFBK21CLE9BQUFrQixJQUFBQSxFQUFBQSxFQUNBdHdDLEVBQUFBLEdBQUEsS0FFQTlDLEtBQUE4dEIsTUFBQWhyQixFQUFBLFNBQUFpWCxFQUFBdVMsR0FDQSxJQUFBM2dCLEVBQUFzSCxFQUFBdkosV0FBQXFRLEVBQUFxNUIsR0FDQTltQixFQUFBb0IsS0FBQSxXQUNBemEsRUFBQXJILGFBQUFELE9BTUEsV0FDQSxJQUFBd3dCLEVBQUF2dUIsR0FBQVUsY0FBQSxTQUVBMmpDLEVBREFya0MsR0FBQVUsY0FBQSxVQUNBUSxZQUFBbEIsR0FBQVUsY0FBQSxXQUVBNnRCLEVBQUFyNUIsS0FBQSxXQUlBeWxCLEdBQUE4cUIsUUFBQSxLQUFBbFgsRUFBQWxzQixNQUlBc1ksR0FBQStxQixZQUFBckIsRUFBQWhqQixVQUlBa04sRUFBQXZ1QixHQUFBVSxjQUFBLFVBQ0EyQixNQUFBLElBQ0Frc0IsRUFBQXI1QixLQUFBLFFBQ0F5bEIsR0FBQWdyQixXQUFBLE1BQUFwWCxFQUFBbHNCLE1BcEJBLEdBd0JBLElBQUF1akMsR0FDQTNlLEdBQUE1VSxHQUFBaWQsS0FBQXJJLFdBRUE1VSxHQUFBdmMsR0FBQWtrQixRQUNBdVYsS0FBQSxTQUFBbDBCLEVBQUFnSCxHQUNBLE9BQUF5WCxHQUFBMW5CLEtBQUFpZ0IsR0FBQWtkLEtBQUFsMEIsRUFBQWdILEVBQUFyTSxVQUFBcEYsT0FBQSxJQUdBaTFDLFdBQUEsU0FBQXhxQyxHQUNBLE9BQUFqSixLQUFBOFosS0FBQSxXQUNBbUcsR0FBQXd6QixXQUFBenpDLEtBQUFpSixRQUtBZ1gsR0FBQTJILFFBQ0F1VixLQUFBLFNBQUEvYyxFQUFBblgsRUFBQWdILEdBQ0EsSUFBQXFVLEVBQUFnSSxFQUNBb25CLEVBQUF0ekIsRUFBQWpCLFNBR0EsR0FBQSxJQUFBdTBCLEdBQUEsSUFBQUEsR0FBQSxJQUFBQSxFQUtBLFlBQUEsSUFBQXR6QixFQUFBb0MsYUFDQXZDLEdBQUEwQyxLQUFBdkMsRUFBQW5YLEVBQUFnSCxJQUtBLElBQUF5akMsR0FBQXp6QixHQUFBNGdCLFNBQUF6Z0IsS0FDQWtNLEVBQUFyTSxHQUFBMHpCLFVBQUExcUMsRUFBQXdNLGlCQUNBd0ssR0FBQWlkLEtBQUFsb0IsTUFBQThsQixLQUFBOXJCLEtBQUEvRixHQUFBdXFDLFFBQUE3ckMsU0FHQUEsSUFBQXNJLEVBQ0EsT0FBQUEsT0FDQWdRLEdBQUF3ekIsV0FBQXJ6QixFQUFBblgsR0FJQXFqQixHQUFBLFFBQUFBLFFBQ0Eza0IsS0FBQTJjLEVBQUFnSSxFQUFBaHFCLElBQUE4ZCxFQUFBblEsRUFBQWhILElBQ0FxYixHQUdBbEUsRUFBQXJRLGFBQUE5RyxFQUFBZ0gsRUFBQSxJQUNBQSxHQUdBcWMsR0FBQSxRQUFBQSxHQUFBLFFBQUFoSSxFQUFBZ0ksRUFBQXJJLElBQUE3RCxFQUFBblgsSUFDQXFiLEVBTUEsT0FIQUEsRUFBQXJFLEdBQUEyWSxLQUFBdUUsS0FBQS9jLEVBQUFuWCxTQUdBdEIsRUFBQTJjLElBR0FxdkIsV0FDQTd3QyxNQUNBUixJQUFBLFNBQUE4ZCxFQUFBblEsR0FDQSxJQUFBc1ksR0FBQWdyQixZQUFBLFVBQUF0akMsR0FDQWtRLEVBQUFDLEVBQUEsU0FBQSxDQUNBLElBQUE5SSxFQUFBOEksRUFBQW5RLE1BS0EsT0FKQW1RLEVBQUFyUSxhQUFBLE9BQUFFLEdBQ0FxSCxJQUNBOEksRUFBQW5RLE1BQUFxSCxHQUVBckgsTUFNQXdqQyxXQUFBLFNBQUFyekIsRUFBQW5RLEdBQ0EsSUFBQWhILEVBQ0FoTCxFQUFBLEVBSUEyMUMsRUFBQTNqQyxHQUFBQSxFQUFBK0UsTUFBQWtNLElBRUEsR0FBQTB5QixHQUFBLElBQUF4ekIsRUFBQWpCLFNBQ0EsS0FBQWxXLEVBQUEycUMsRUFBQTMxQyxNQUNBbWlCLEVBQUE2RyxnQkFBQWhlLE1BT0F1cUMsSUFDQWx4QyxJQUFBLFNBQUE4ZCxFQUFBblEsRUFBQWhILEdBUUEsT0FQQSxJQUFBZ0gsRUFHQWdRLEdBQUF3ekIsV0FBQXJ6QixFQUFBblgsR0FFQW1YLEVBQUFyUSxhQUFBOUcsRUFBQUEsR0FFQUEsSUFJQWdYLEdBQUFuRyxLQUFBbUcsR0FBQWlkLEtBQUFsb0IsTUFBQThsQixLQUFBb0wsT0FBQWx4QixNQUFBLFFBQUEsU0FBQS9XLEVBQUFnTCxHQUNBLElBQUE0cUMsRUFBQWhmLEdBQUE1ckIsSUFBQWdYLEdBQUEyWSxLQUFBdUUsS0FFQXRJLEdBQUE1ckIsR0FBQSxTQUFBbVgsRUFBQW5YLEVBQUFnd0IsR0FDQSxJQUFBM1UsRUFBQXFELEVBQ0Ftc0IsRUFBQTdxQyxFQUFBd00sY0FZQSxPQVZBd2pCLElBR0F0UixFQUFBa04sR0FBQWlmLEdBQ0FqZixHQUFBaWYsR0FBQXh2QixFQUNBQSxFQUFBLE1BQUF1dkIsRUFBQXp6QixFQUFBblgsRUFBQWd3QixHQUNBNmEsRUFDQSxLQUNBamYsR0FBQWlmLEdBQUFuc0IsR0FFQXJELEtBT0EsSUFBQXl2QixHQUFBLHNDQUNBQyxHQUFBLGdCQUVBL3pCLEdBQUF2YyxHQUFBa2tCLFFBQ0FqRixLQUFBLFNBQUExWixFQUFBZ0gsR0FDQSxPQUFBeVgsR0FBQTFuQixLQUFBaWdCLEdBQUEwQyxLQUFBMVosRUFBQWdILEVBQUFyTSxVQUFBcEYsT0FBQSxJQUdBeTFDLFdBQUEsU0FBQWhyQyxHQUNBLE9BQUFqSixLQUFBOFosS0FBQSxrQkFDQTlaLEtBQUFpZ0IsR0FBQWkwQixRQUFBanJDLElBQUFBLFFBS0FnWCxHQUFBMkgsUUFDQWpGLEtBQUEsU0FBQXZDLEVBQUFuWCxFQUFBZ0gsR0FDQSxJQUFBcVUsRUFBQWdJLEVBQ0FvbkIsRUFBQXR6QixFQUFBakIsU0FHQSxHQUFBLElBQUF1MEIsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBV0EsT0FQQSxJQUFBQSxHQUFBenpCLEdBQUE0Z0IsU0FBQXpnQixLQUdBblgsRUFBQWdYLEdBQUFpMEIsUUFBQWpyQyxJQUFBQSxFQUNBcWpCLEVBQUFyTSxHQUFBdXdCLFVBQUF2bkMsU0FHQXRCLElBQUFzSSxFQUNBcWMsR0FBQSxRQUFBQSxRQUNBM2tCLEtBQUEyYyxFQUFBZ0ksRUFBQWhxQixJQUFBOGQsRUFBQW5RLEVBQUFoSCxJQUNBcWIsRUFHQWxFLEVBQUFuWCxHQUFBZ0gsRUFHQXFjLEdBQUEsUUFBQUEsR0FBQSxRQUFBaEksRUFBQWdJLEVBQUFySSxJQUFBN0QsRUFBQW5YLElBQ0FxYixFQUdBbEUsRUFBQW5YLElBR0F1bkMsV0FDQWxSLFVBQ0FyYixJQUFBLFNBQUE3RCxHQU9BLElBQUErekIsRUFBQWwwQixHQUFBMlksS0FBQXVFLEtBQUEvYyxFQUFBLFlBRUEsT0FBQSt6QixFQUNBeitCLFNBQUF5K0IsRUFBQSxJQUlBSixHQUFBL2tDLEtBQUFvUixFQUFBRCxXQUNBNnpCLEdBQUFobEMsS0FBQW9SLEVBQUFELFdBQ0FDLEVBQUFpZixLQUVBLEdBR0EsS0FLQTZVLFNBQ0FFLElBQUEsVUFDQUMsTUFBQSxlQVlBOXJCLEdBQUErcUIsY0FDQXJ6QixHQUFBdXdCLFVBQUF2aEIsVUFDQWhMLElBQUEsU0FBQTdELEdBSUEsSUFBQXVlLEVBQUF2ZSxFQUFBblMsV0FJQSxPQUhBMHdCLEdBQUFBLEVBQUExd0IsWUFDQTB3QixFQUFBMXdCLFdBQUFzeEIsY0FFQSxNQUVBajlCLElBQUEsU0FBQThkLEdBSUEsSUFBQXVlLEVBQUF2ZSxFQUFBblMsV0FDQTB3QixJQUNBQSxFQUFBWSxjQUVBWixFQUFBMXdCLFlBQ0Ewd0IsRUFBQTF3QixXQUFBc3hCLGtCQU9BdGYsR0FBQW5HLE1BQ0EsV0FDQSxXQUNBLFlBQ0EsY0FDQSxjQUNBLFVBQ0EsVUFDQSxTQUNBLGNBQ0EsbUJBQ0EsV0FDQW1HLEdBQUFpMEIsUUFBQWwwQyxLQUFBeVYsZUFBQXpWLE9Ba0JBaWdCLEdBQUF2YyxHQUFBa2tCLFFBQ0Ewc0IsU0FBQSxTQUFBcmtDLEdBQ0EsSUFBQXNrQyxFQUFBbjBCLEVBQUFVLEVBQUEwekIsRUFBQUMsRUFBQWxvQyxFQUFBbW9DLEVBQ0F6MkMsRUFBQSxFQUVBLEdBQUFnaUIsR0FBQVEsV0FBQXhRLEdBQ0EsT0FBQWpRLEtBQUE4WixLQUFBLFNBQUF2TixHQUNBMFQsR0FBQWpnQixNQUFBczBDLFNBQUFya0MsRUFBQTFSLEtBQUF5QixLQUFBdU0sRUFBQTRoQixFQUFBbnVCLFVBSUEsR0FBQSxpQkFBQWlRLEdBQUFBLEVBR0EsSUFGQXNrQyxFQUFBdGtDLEVBQUErRSxNQUFBa00sUUFFQWQsRUFBQXBnQixLQUFBL0IsTUFJQSxHQUhBdTJDLEVBQUFybUIsRUFBQS9OLEdBQ0FVLEVBQUEsSUFBQVYsRUFBQWpCLFVBQUEsSUFBQStPLEVBQUFzbUIsR0FBQSxJQUVBLENBRUEsSUFEQWpvQyxFQUFBLEVBQ0Frb0MsRUFBQUYsRUFBQWhvQyxNQUNBdVUsRUFBQXRYLFFBQUEsSUFBQWlyQyxFQUFBLEtBQUEsSUFDQTN6QixHQUFBMnpCLEVBQUEsS0FNQUQsS0FEQUUsRUFBQXhtQixFQUFBcE4sS0FFQVYsRUFBQXJRLGFBQUEsUUFBQTJrQyxHQU1BLE9BQUExMEMsTUFHQTIwQyxZQUFBLFNBQUExa0MsR0FDQSxJQUFBc2tDLEVBQUFuMEIsRUFBQVUsRUFBQTB6QixFQUFBQyxFQUFBbG9DLEVBQUFtb0MsRUFDQXoyQyxFQUFBLEVBRUEsR0FBQWdpQixHQUFBUSxXQUFBeFEsR0FDQSxPQUFBalEsS0FBQThaLEtBQUEsU0FBQXZOLEdBQ0EwVCxHQUFBamdCLE1BQUEyMEMsWUFBQTFrQyxFQUFBMVIsS0FBQXlCLEtBQUF1TSxFQUFBNGhCLEVBQUFudUIsVUFJQSxJQUFBNEQsVUFBQXBGLE9BQ0EsT0FBQXdCLEtBQUFtOUIsS0FBQSxRQUFBLElBR0EsR0FBQSxpQkFBQWx0QixHQUFBQSxFQUdBLElBRkFza0MsRUFBQXRrQyxFQUFBK0UsTUFBQWtNLFFBRUFkLEVBQUFwZ0IsS0FBQS9CLE1BTUEsR0FMQXUyQyxFQUFBcm1CLEVBQUEvTixHQUdBVSxFQUFBLElBQUFWLEVBQUFqQixVQUFBLElBQUErTyxFQUFBc21CLEdBQUEsSUFFQSxDQUVBLElBREFqb0MsRUFBQSxFQUNBa29DLEVBQUFGLEVBQUFob0MsTUFHQSxLQUFBdVUsRUFBQXRYLFFBQUEsSUFBQWlyQyxFQUFBLE1BQUEsR0FDQTN6QixFQUFBQSxFQUFBM2EsUUFBQSxJQUFBc3VDLEVBQUEsSUFBQSxLQU1BRCxLQURBRSxFQUFBeG1CLEVBQUFwTixLQUVBVixFQUFBclEsYUFBQSxRQUFBMmtDLEdBTUEsT0FBQTEwQyxNQUdBNDBDLFlBQUEsU0FBQTNrQyxFQUFBNGtDLEdBQ0EsSUFBQS94QyxTQUFBbU4sRUFFQSxNQUFBLGtCQUFBNGtDLEdBQUEsV0FBQS94QyxFQUNBK3hDLEVBQUE3MEMsS0FBQXMwQyxTQUFBcmtDLEdBQUFqUSxLQUFBMjBDLFlBQUExa0MsR0FHQWdRLEdBQUFRLFdBQUF4USxHQUNBalEsS0FBQThaLEtBQUEsU0FBQTdiLEdBQ0FnaUIsR0FBQWpnQixNQUFBNDBDLFlBQ0Eza0MsRUFBQTFSLEtBQUF5QixLQUFBL0IsRUFBQWt3QixFQUFBbnVCLE1BQUE2MEMsR0FDQUEsS0FLQTcwQyxLQUFBOFosS0FBQSxXQUNBLElBQUF0SyxFQUFBdlIsRUFBQXdMLEVBQUFxckMsRUFFQSxHQUFBLFdBQUFoeUMsRUFPQSxJQUpBN0UsRUFBQSxFQUNBd0wsRUFBQXdXLEdBQUFqZ0IsTUFDQTgwQyxFQUFBN2tDLEVBQUErRSxNQUFBa00sUUFFQTFSLEVBQUFzbEMsRUFBQTcyQyxNQUdBd0wsRUFBQXNyQyxTQUFBdmxDLEdBQ0EvRixFQUFBa3JDLFlBQUFubEMsR0FFQS9GLEVBQUE2cUMsU0FBQTlrQyxhQUtBN0gsSUFBQXNJLEdBQUEsWUFBQW5OLEtBQ0EwTSxFQUFBMmUsRUFBQW51QixRQUlBZ2tCLEdBQUExaEIsSUFBQXRDLEtBQUEsZ0JBQUF3UCxHQU9BeFAsS0FBQStQLGNBQ0EvUCxLQUFBK1AsYUFBQSxRQUNBUCxJQUFBLElBQUFTLEVBQ0EsR0FDQStULEdBQUFDLElBQUFqa0IsS0FBQSxrQkFBQSxRQU9BKzBDLFNBQUEsU0FBQXh1QixHQUNBLElBQUEvVyxFQUFBNFEsRUFDQW5pQixFQUFBLEVBR0EsSUFEQXVSLEVBQUEsSUFBQStXLEVBQUEsSUFDQW5HLEVBQUFwZ0IsS0FBQS9CLE1BQ0EsR0FBQSxJQUFBbWlCLEVBQUFqQixXQUNBLElBQUErTyxFQUFBQyxFQUFBL04sSUFBQSxLQUFBNVcsUUFBQWdHLElBQUEsRUFDQSxPQUFBLEVBSUEsT0FBQSxLQU9BLElBQUF3bEMsR0FBQSxNQUVBLzBCLEdBQUF2YyxHQUFBa2tCLFFBQ0F0USxJQUFBLFNBQUFySCxHQUNBLElBQUFxYyxFQUFBaEksRUFBQTdELEVBQ0FMLEVBQUFwZ0IsS0FBQSxHQUVBLENBQUEsR0FBQTRELFVBQUFwRixPQTRCQSxPQUZBaWlCLEVBQUFSLEdBQUFRLFdBQUF4USxHQUVBalEsS0FBQThaLEtBQUEsU0FBQTdiLEdBQ0EsSUFBQXFaLEVBRUEsSUFBQXRYLEtBQUFtZixXQVdBLE9BTkE3SCxFQURBbUosRUFDQXhRLEVBQUExUixLQUFBeUIsS0FBQS9CLEVBQUFnaUIsR0FBQWpnQixNQUFBc1gsT0FFQXJILEdBS0FxSCxFQUFBLEdBRUEsaUJBQUFBLEVBQ0FBLEdBQUEsR0FFQUwsTUFBQW1JLFFBQUE5SCxLQUNBQSxFQUFBMkksR0FBQXBHLElBQUF2QyxFQUFBLFNBQUFySCxHQUNBLE9BQUEsTUFBQUEsRUFBQSxHQUFBQSxFQUFBLE9BSUFxYyxFQUFBck0sR0FBQWcxQixTQUFBajFDLEtBQUE4QyxPQUFBbWQsR0FBQWcxQixTQUFBajFDLEtBQUFtZ0IsU0FBQTFLLGlCQUdBLFFBQUE2VyxRQUFBM2tCLElBQUEya0IsRUFBQWhxQixJQUFBdEMsS0FBQXNYLEVBQUEsV0FDQXRYLEtBQUFpUSxNQUFBcUgsTUF6REEsR0FBQThJLEVBSUEsT0FIQWtNLEVBQUFyTSxHQUFBZzFCLFNBQUE3MEIsRUFBQXRkLE9BQ0FtZCxHQUFBZzFCLFNBQUE3MEIsRUFBQUQsU0FBQTFLLGlCQUdBLFFBQUE2VyxRQUNBM2tCLEtBQUEyYyxFQUFBZ0ksRUFBQXJJLElBQUE3RCxFQUFBLFVBRUFrRSxFQU1BLGlCQUhBQSxFQUFBbEUsRUFBQW5RLE9BSUFxVSxFQUFBbmUsUUFBQTZ1QyxHQUFBLElBSUEsTUFBQTF3QixFQUFBLEdBQUFBLE1BNENBckUsR0FBQTJILFFBQ0FxdEIsVUFDQTFPLFFBQ0F0aUIsSUFBQSxTQUFBN0QsR0FFQSxJQUFBOUksRUFBQTJJLEdBQUEyWSxLQUFBdUUsS0FBQS9jLEVBQUEsU0FDQSxPQUFBLE1BQUE5SSxFQUNBQSxFQU1BNFcsRUFBQWpPLEdBQUFGLEtBQUFLLE1BR0FnVSxRQUNBblEsSUFBQSxTQUFBN0QsR0FDQSxJQUFBblEsRUFBQXMyQixFQUFBdG9DLEVBQ0F3RSxFQUFBMmQsRUFBQTNkLFFBQ0FtRyxFQUFBd1gsRUFBQW1mLGNBQ0EvWSxFQUFBLGVBQUFwRyxFQUFBdGQsS0FDQWloQixFQUFBeUMsRUFBQSxRQUNBcm1CLEVBQUFxbUIsRUFBQTVkLEVBQUEsRUFBQW5HLEVBQUFqRSxPQVVBLElBUEFQLEVBREEySyxFQUFBLEVBQ0F6SSxFQUdBcW1CLEVBQUE1ZCxFQUFBLEVBSUEzSyxFQUFBa0MsRUFBQWxDLElBS0EsS0FKQXNvQyxFQUFBOWpDLEVBQUF4RSxJQUlBZ3hCLFVBQUFoeEIsSUFBQTJLLEtBR0EyOUIsRUFBQXJSLFlBQ0FxUixFQUFBdDRCLFdBQUFpbkIsV0FDQS9VLEVBQUFvbUIsRUFBQXQ0QixXQUFBLGFBQUEsQ0FNQSxHQUhBZ0MsRUFBQWdRLEdBQUFzbUIsR0FBQWp2QixNQUdBa1AsRUFDQSxPQUFBdlcsRUFJQThULEVBQUF6ZixLQUFBMkwsR0FJQSxPQUFBOFQsR0FHQXpoQixJQUFBLFNBQUE4ZCxFQUFBblEsR0FNQSxJQUxBLElBQUFpbEMsRUFBQTNPLEVBQ0E5akMsRUFBQTJkLEVBQUEzZCxRQUNBc2hCLEVBQUE5RCxHQUFBc1MsVUFBQXRpQixHQUNBaFMsRUFBQXdFLEVBQUFqRSxPQUVBUCxPQUNBc29DLEVBQUE5akMsRUFBQXhFLElBSUFneEIsU0FDQWhQLEdBQUErRixRQUFBL0YsR0FBQWcxQixTQUFBMU8sT0FBQXRpQixJQUFBc2lCLEdBQUF4aUIsSUFBQSxLQUVBbXhCLEdBQUEsR0FVQSxPQUhBQSxJQUNBOTBCLEVBQUFtZixlQUFBLEdBRUF4YixPQU9BOUQsR0FBQW5HLE1BQUEsUUFBQSxZQUFBLFdBQ0FtRyxHQUFBZzFCLFNBQUFqMUMsT0FDQXNDLElBQUEsU0FBQThkLEVBQUFuUSxHQUNBLEdBQUFnSCxNQUFBbUksUUFBQW5QLEdBQ0EsT0FBQW1RLEVBQUEySCxRQUFBOUgsR0FBQStGLFFBQUEvRixHQUFBRyxHQUFBOUksTUFBQXJILElBQUEsSUFJQXNZLEdBQUE4cUIsVUFDQXB6QixHQUFBZzFCLFNBQUFqMUMsTUFBQWlrQixJQUFBLFNBQUE3RCxHQUNBLE9BQUEsT0FBQUEsRUFBQW9DLGFBQUEsU0FBQSxLQUFBcEMsRUFBQW5RLFVBV0EsSUFBQWtsQyxHQUFBLGtDQUVBbDFCLEdBQUEySCxPQUFBM0gsR0FBQTdiLE9BRUF3bEMsUUFBQSxTQUFBeGxDLEVBQUFvRyxFQUFBNFYsRUFBQWcxQixHQUVBLElBQUFuM0MsRUFBQTZpQixFQUFBOUIsRUFBQXEyQixFQUFBQyxFQUFBM3RCLEVBQUFnYyxFQUNBNFIsR0FBQW4xQixHQUFBeFMsSUFDQTlLLEVBQUFndUIsR0FBQXZ5QixLQUFBNkYsRUFBQSxRQUFBQSxFQUFBdEIsS0FBQXNCLEVBQ0E4USxFQUFBNGIsR0FBQXZ5QixLQUFBNkYsRUFBQSxhQUFBQSxFQUFBc1EsVUFBQW1ELE1BQUEsUUFLQSxHQUhBaUosRUFBQTlCLEVBQUFvQixFQUFBQSxHQUFBeFMsR0FHQSxJQUFBd1MsRUFBQWpCLFVBQUEsSUFBQWlCLEVBQUFqQixXQUtBZzJCLEdBQUFubUMsS0FBQWxNLEVBQUFtZCxHQUFBN2IsTUFBQTBqQyxhQUlBaGxDLEVBQUEwRyxRQUFBLE1BQUEsSUFJQTFHLEdBREFvUyxFQUFBcFMsRUFBQStVLE1BQUEsTUFDQWxPLFFBQ0F1TCxFQUFBMmMsUUFFQXlqQixFQUFBeHlDLEVBQUEwRyxRQUFBLEtBQUEsR0FBQSxLQUFBMUcsRUFHQXNCLEVBQUFBLEVBQUE2YixHQUFBaUMsU0FDQTlkLEVBQ0EsSUFBQTZiLEdBQUF1cEIsTUFBQTFtQyxFQUFBLGlCQUFBc0IsR0FBQUEsR0FHQUEsRUFBQW94QyxVQUFBSixFQUFBLEVBQUEsRUFDQWh4QyxFQUFBc1EsVUFBQVEsRUFBQW5CLEtBQUEsS0FDQTNQLEVBQUE0a0MsV0FBQTVrQyxFQUFBc1EsVUFDQSxJQUFBaUIsT0FBQSxVQUFBVCxFQUFBbkIsS0FBQSxpQkFBQSxXQUNBLEtBR0EzUCxFQUFBbkYsWUFBQTBJLEVBQ0F2RCxFQUFBeUwsU0FDQXpMLEVBQUF5TCxPQUFBdVEsR0FJQTVWLEVBQUEsTUFBQUEsR0FDQXBHLEdBQ0E2YixHQUFBc1MsVUFBQS9uQixHQUFBcEcsSUFHQXUvQixFQUFBMWpCLEdBQUE3YixNQUFBdS9CLFFBQUE3Z0MsT0FDQXN5QyxJQUFBelIsRUFBQWlHLFVBQUEsSUFBQWpHLEVBQUFpRyxRQUFBL2xDLE1BQUF1YyxFQUFBNVYsSUFBQSxDQU1BLElBQUE0cUMsSUFBQXpSLEVBQUFnRyxXQUFBMXBCLEdBQUFDLFNBQUFFLEdBQUEsQ0FNQSxJQUpBaTFCLEVBQUExUixFQUFBcUUsY0FBQWxsQyxFQUNBcXlDLEdBQUFubUMsS0FBQXFtQyxFQUFBdnlDLEtBQ0FnZSxFQUFBQSxFQUFBN1MsWUFFQTZTLEVBQUFBLEVBQUFBLEVBQUE3UyxXQUNBc25DLEVBQUFqeEMsS0FBQXdjLEdBQ0E5QixFQUFBOEIsRUFJQTlCLEtBQUFvQixFQUFBc0QsZUFBQTlWLEtBQ0EybkMsRUFBQWp4QyxLQUFBMGEsRUFBQTZjLGFBQUE3YyxFQUFBeTJCLGNBQUF4aUMsR0FNQSxJQURBaFYsRUFBQSxHQUNBNmlCLEVBQUF5MEIsRUFBQXQzQyxRQUFBbUcsRUFBQXlrQyx3QkFFQXprQyxFQUFBdEIsS0FBQTdFLEVBQUEsRUFDQW8zQyxFQUNBMVIsRUFBQXNFLFVBQUFubEMsR0FHQTZrQixHQUFBM0QsR0FBQUMsSUFBQW5ELEVBQUEsZUFBQTFjLEVBQUF0QixPQUNBa2hCLEdBQUFDLElBQUFuRCxFQUFBLFlBRUE2RyxFQUFBOWpCLE1BQUFpZCxFQUFBdFcsSUFJQW1kLEVBQUEydEIsR0FBQXgwQixFQUFBdzBCLEtBQ0EzdEIsRUFBQTlqQixPQUFBd2hDLEdBQUF2a0IsS0FDQTFjLEVBQUFuRixPQUFBMG9CLEVBQUE5akIsTUFBQWlkLEVBQUF0VyxJQUNBLElBQUFwRyxFQUFBbkYsUUFDQW1GLEVBQUE2a0Msa0JBb0NBLE9BaENBN2tDLEVBQUF0QixLQUFBQSxFQUdBc3lDLEdBQUFoeEMsRUFBQTZsQyxzQkFFQXRHLEVBQUFuZSxXQUNBLElBQUFtZSxFQUFBbmUsU0FBQTNoQixNQUFBMHhDLEVBQUF6YyxNQUFBdHVCLEtBQ0E2NkIsR0FBQWpsQixJQUlBazFCLEdBQUFyMUIsR0FBQVEsV0FBQUwsRUFBQXRkLE1BQUFtZCxHQUFBQyxTQUFBRSxNQUdBcEIsRUFBQW9CLEVBQUFrMUIsTUFHQWwxQixFQUFBazFCLEdBQUEsTUFJQXIxQixHQUFBN2IsTUFBQTBqQyxVQUFBaGxDLEVBQ0FzZCxFQUFBdGQsS0FDQW1kLEdBQUE3YixNQUFBMGpDLGVBQUFuZ0MsRUFFQXFYLElBQ0FvQixFQUFBazFCLEdBQUF0MkIsSUFNQTVhLEVBQUFuRixTQUtBeTJDLFNBQUEsU0FBQTV5QyxFQUFBc2QsRUFBQWhjLEdBQ0EsSUFBQTVHLEVBQUF5aUIsR0FBQTJILE9BQ0EsSUFBQTNILEdBQUF1cEIsTUFDQXBsQyxHQUVBdEIsS0FBQUEsRUFDQXVuQyxhQUFBLElBSUFwcUIsR0FBQTdiLE1BQUF3bEMsUUFBQXBzQyxFQUFBLEtBQUE0aUIsTUFLQUgsR0FBQXZjLEdBQUFra0IsUUFFQWdpQixRQUFBLFNBQUE5bUMsRUFBQTBILEdBQ0EsT0FBQXhLLEtBQUE4WixLQUFBLFdBQ0FtRyxHQUFBN2IsTUFBQXdsQyxRQUFBOW1DLEVBQUEwSCxFQUFBeEssU0FHQTIxQyxlQUFBLFNBQUE3eUMsRUFBQTBILEdBQ0EsSUFBQTRWLEVBQUFwZ0IsS0FBQSxHQUNBLEdBQUFvZ0IsRUFDQSxPQUFBSCxHQUFBN2IsTUFBQXdsQyxRQUFBOW1DLEVBQUEwSCxFQUFBNFYsR0FBQSxNQU1BSCxHQUFBbkcsS0FBQSx3TEFFQWpDLE1BQUEsS0FDQSxTQUFBNVosRUFBQWdMLEdBR0FnWCxHQUFBdmMsR0FBQXVGLEdBQUEsU0FBQXVCLEVBQUE5RyxHQUNBLE9BQUFFLFVBQUFwRixPQUFBLEVBQ0F3QixLQUFBa0UsR0FBQStFLEVBQUEsS0FBQXVCLEVBQUE5RyxHQUNBMUQsS0FBQTRwQyxRQUFBM2dDLE1BSUFnWCxHQUFBdmMsR0FBQWtrQixRQUNBZ3VCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxPQUFBOTFDLEtBQUFpc0MsV0FBQTRKLEdBQUEzSixXQUFBNEosR0FBQUQsTUFPQXR0QixHQUFBd3RCLFFBQUEsY0FBQTlpQyxFQVdBc1YsR0FBQXd0QixTQUNBOTFCLEdBQUFuRyxNQUFBcWxCLE1BQUEsVUFBQTBLLEtBQUEsWUFBQSxTQUFBd0MsRUFBQTNELEdBR0EsSUFBQTlULEVBQUEsU0FBQXh3QixHQUNBNmIsR0FBQTdiLE1BQUFzeEMsU0FBQWhOLEVBQUF0a0MsRUFBQXlMLE9BQUFvUSxHQUFBN2IsTUFBQXNrQyxJQUFBdGtDLEtBR0E2YixHQUFBN2IsTUFBQXUvQixRQUFBK0UsSUFDQVAsTUFBQSxXQUNBLElBQUFyb0IsRUFBQTlmLEtBQUEwakIsZUFBQTFqQixLQUNBZzJDLEVBQUFoeUIsR0FBQTBELE9BQUE1SCxFQUFBNG9CLEdBRUFzTixHQUNBbDJCLEVBQUEzYixpQkFBQWtvQyxFQUFBelgsR0FBQSxHQUVBNVEsR0FBQTBELE9BQUE1SCxFQUFBNG9CLEdBQUFzTixHQUFBLEdBQUEsSUFFQTFOLFNBQUEsV0FDQSxJQUFBeG9CLEVBQUE5ZixLQUFBMGpCLGVBQUExakIsS0FDQWcyQyxFQUFBaHlCLEdBQUEwRCxPQUFBNUgsRUFBQTRvQixHQUFBLEVBRUFzTixFQUtBaHlCLEdBQUEwRCxPQUFBNUgsRUFBQTRvQixFQUFBc04sSUFKQWwyQixFQUFBbmIsb0JBQUEwbkMsRUFBQXpYLEdBQUEsR0FDQTVRLEdBQUE2RSxPQUFBL0ksRUFBQTRvQixRQVNBLElBQUE1aUMsR0FBQW1OLEVBQUFuTixTQUVBbXdDLEdBQUFoMkIsR0FBQXVMLE1BRUEwcUIsR0FBQSxLQUtBajJCLEdBQUFrMkIsU0FBQSxTQUFBM3JDLEdBQ0EsSUFBQXlyQixFQUNBLElBQUF6ckIsR0FBQSxpQkFBQUEsRUFDQSxPQUFBLEtBS0EsSUFDQXlyQixHQUFBLElBQUFoakIsRUFBQW1qQyxXQUFBQyxnQkFBQTdyQyxFQUFBLFlBQ0EsTUFBQWhOLEdBQ0F5NEIsT0FBQXR1QixFQU1BLE9BSEFzdUIsSUFBQUEsRUFBQXZuQixxQkFBQSxlQUFBbFEsUUFDQXloQixHQUFBaFYsTUFBQSxnQkFBQVQsR0FFQXlyQixHQUlBLElBQ0ExSCxHQUFBLFFBQ0ErbkIsR0FBQSxTQUNBQyxHQUFBLHdDQUNBQyxHQUFBLHFDQTBDQXYyQixHQUFBdzJCLE1BQUEsU0FBQTE0QyxFQUFBdXdCLEdBQ0EsSUFBQUQsRUFDQXp3QixLQUNBK29CLEVBQUEsU0FBQTFpQixFQUFBeXlDLEdBR0EsSUFBQXptQyxFQUFBZ1EsR0FBQVEsV0FBQWkyQixHQUNBQSxJQUNBQSxFQUVBOTRDLEVBQUFBLEVBQUFZLFFBQUFtNEMsbUJBQUExeUMsR0FBQSxJQUNBMHlDLG1CQUFBLE1BQUExbUMsRUFBQSxHQUFBQSxJQUlBLEdBQUFnSCxNQUFBbUksUUFBQXJoQixJQUFBQSxFQUFBd3pCLFNBQUF0UixHQUFBOFIsY0FBQWgwQixHQUdBa2lCLEdBQUFuRyxLQUFBL2IsRUFBQSxXQUNBNG9CLEVBQUEzbUIsS0FBQWlKLEtBQUFqSixLQUFBaVEsY0FPQSxJQUFBb2UsS0FBQXR3QixFQUNBcXdCLEVBQUFDLEVBQUF0d0IsRUFBQXN3QixHQUFBQyxFQUFBM0gsR0FLQSxPQUFBL29CLEVBQUFtVyxLQUFBLE1BR0FrTSxHQUFBdmMsR0FBQWtrQixRQUNBZ3ZCLFVBQUEsV0FDQSxPQUFBMzJCLEdBQUF3MkIsTUFBQXoyQyxLQUFBNjJDLG1CQUVBQSxlQUFBLFdBQ0EsT0FBQTcyQyxLQUFBNlosSUFBQSxXQUdBLElBQUF5RyxFQUFBTCxHQUFBMEMsS0FBQTNpQixLQUFBLFlBQ0EsT0FBQXNnQixFQUFBTCxHQUFBc1MsVUFBQWpTLEdBQUF0Z0IsT0FFQTRnQixPQUFBLFdBQ0EsSUFBQTlkLEVBQUE5QyxLQUFBOEMsS0FHQSxPQUFBOUMsS0FBQWlKLE9BQUFnWCxHQUFBamdCLE1BQUFpaEMsR0FBQSxjQUNBdVYsR0FBQXhuQyxLQUFBaFAsS0FBQW1nQixZQUFBbzJCLEdBQUF2bkMsS0FBQWxNLEtBQ0E5QyxLQUFBK25CLFVBQUFELEdBQUE5WSxLQUFBbE0sTUFFQStXLElBQUEsU0FBQTViLEVBQUFtaUIsR0FDQSxJQUFBOUksRUFBQTJJLEdBQUFqZ0IsTUFBQXNYLE1BRUEsT0FBQSxNQUFBQSxFQUNBLEtBR0FMLE1BQUFtSSxRQUFBOUgsR0FDQTJJLEdBQUFwRyxJQUFBdkMsRUFBQSxTQUFBQSxHQUNBLE9BQUFyTyxLQUFBbVgsRUFBQW5YLEtBQUFnSCxNQUFBcUgsRUFBQW5SLFFBQUFtd0MsR0FBQSxZQUlBcnRDLEtBQUFtWCxFQUFBblgsS0FBQWdILE1BQUFxSCxFQUFBblIsUUFBQW13QyxHQUFBLFdBQ0FyeUIsU0FLQSxJQUNBNnlCLEdBQUEsT0FDQUMsR0FBQSxPQUNBQyxHQUFBLGdCQUNBQyxHQUFBLDZCQUdBQyxHQUFBLDREQUNBQyxHQUFBLGlCQUNBQyxHQUFBLFFBV0F4cUIsTUFPQWxtQixNQUdBMndDLEdBQUEsS0FBQXZ6QyxPQUFBLEtBR0F3ekMsR0FBQTFwQyxHQUFBVSxjQUFBLEtBQ0FncEMsR0FBQWpZLEtBQUF2NUIsR0FBQXU1QixLQWdQQXBmLEdBQUEySCxRQUdBMnZCLE9BQUEsRUFHQUMsZ0JBQ0FDLFFBRUFob0IsY0FDQWlvQixJQUFBNXhDLEdBQUF1NUIsS0FDQXY4QixLQUFBLE1BQ0E2MEMsUUFBQVQsR0FBQWxvQyxLQUFBbEosR0FBQUgsVUFDQTFDLFFBQUEsRUFDQTIwQyxhQUFBLEVBQ0FycEMsT0FBQSxFQUNBZ0QsWUFBQSxtREFjQXNtQyxTQUNBekcsSUFBQWlHLEdBQ0F0M0IsS0FBQSxhQUNBMVEsS0FBQSxZQUNBNG1CLElBQUEsNEJBQ0E2aEIsS0FBQSxxQ0FHQS9uQixVQUNBa0csSUFBQSxVQUNBNW1CLEtBQUEsU0FDQXlvQyxLQUFBLFlBR0F2bkIsZ0JBQ0EwRixJQUFBLGNBQ0FsVyxLQUFBLGVBQ0ErM0IsS0FBQSxnQkFLQTduQixZQUdBOG5CLFNBQUE5L0IsT0FHQSsvQixhQUFBLEVBR0FDLFlBQUE3aEMsS0FBQTJCLE1BR0FtZ0MsV0FBQWo0QixHQUFBazJCLFVBT0EzbUIsYUFDQWtvQixLQUFBLEVBQ0F0ekIsU0FBQSxJQU9BK3pCLFVBQUEsU0FBQXRvQyxFQUFBdW9DLEdBQ0EsT0FBQUEsRUFHQTlvQixFQUFBQSxFQUFBemYsRUFBQW9RLEdBQUF3UCxjQUFBMm9CLEdBR0E5b0IsRUFBQXJQLEdBQUF3UCxhQUFBNWYsSUFHQXdvQyxjQUFBN3BCLEVBQUE1QixJQUNBMHJCLGNBQUE5cEIsRUFBQTluQixJQUdBNnhDLEtBQUEsU0FBQWIsRUFBQWoxQyxHQW1VQSxTQUFBa1IsRUFBQWpDLEVBQUE4bUMsRUFBQTdvQixFQUFBeGMsR0FDQSxJQUFBZ2QsRUFBQXNvQixFQUFBeHRDLEVBQUE2RyxFQUFBNG1DLEVBQ0FDLEVBQUFILEVBR0F6MkIsSUFJQUEsR0FBQSxFQUdBNjJCLEdBQ0EzbEMsRUFBQXJILGFBQUFndEMsR0FLQXp2QyxPQUFBeEIsRUFHQWt4QyxFQUFBMWxDLEdBQUEsR0FHQTRiLEVBQUFub0IsV0FBQThLLEVBQUEsRUFBQSxFQUFBLEVBR0F5ZSxFQUFBemUsR0FBQSxLQUFBQSxFQUFBLEtBQUEsTUFBQUEsRUFHQWllLElBQ0E3ZCxFQUFBNGQsRUFBQTl4QixFQUFBbXhCLEVBQUFZLElBSUE3ZCxFQUFBb2UsRUFBQXR5QixFQUFBa1UsRUFBQWlkLEVBQUFvQixHQUdBQSxHQUdBdnlCLEVBQUFrN0MsY0FDQUosRUFBQTNwQixFQUFBdmQsa0JBQUEsb0JBRUF5TyxHQUFBdTNCLGFBQUF1QixHQUFBTCxJQUVBQSxFQUFBM3BCLEVBQUF2ZCxrQkFBQSxXQUVBeU8sR0FBQXczQixLQUFBc0IsR0FBQUwsSUFLQSxNQUFBaG5DLEdBQUEsU0FBQTlULEVBQUFrRixLQUNBNjFDLEVBQUEsWUFHQSxNQUFBam5DLEVBQ0FpbkMsRUFBQSxlQUlBQSxFQUFBN21DLEVBQUE0ZSxNQUNBK25CLEVBQUEzbUMsRUFBQXRILEtBRUEybEIsSUFEQWxsQixFQUFBNkcsRUFBQTdHLFVBTUFBLEVBQUEwdEMsR0FDQWpuQyxHQUFBaW5DLElBQ0FBLEVBQUEsUUFDQWpuQyxFQUFBLElBQ0FBLEVBQUEsS0FNQXFkLEVBQUFyZCxPQUFBQSxFQUNBcWQsRUFBQTRwQixZQUFBSCxHQUFBRyxHQUFBLEdBR0F4b0IsRUFDQXRELEVBQUFVLFlBQUF5ckIsR0FBQVAsRUFBQUUsRUFBQTVwQixJQUVBbEMsRUFBQWUsV0FBQW9yQixHQUFBanFCLEVBQUE0cEIsRUFBQTF0QyxJQUlBOGpCLEVBQUFrcUIsV0FBQUEsR0FDQUEsT0FBQXR4QyxFQUVBdXhDLEdBQ0FDLEVBQUF2UCxRQUFBelosRUFBQSxjQUFBLGFBQ0FwQixFQUFBbnhCLEVBQUF1eUIsRUFBQXNvQixFQUFBeHRDLElBSUFtdUMsRUFBQXRXLFNBQUFrVyxHQUFBanFCLEVBQUE0cEIsSUFFQU8sSUFDQUMsRUFBQXZQLFFBQUEsZ0JBQUE3YSxFQUFBbnhCLE1BR0FxaUIsR0FBQXMzQixRQUNBdDNCLEdBQUE3YixNQUFBd2xDLFFBQUEsY0EzYUEsaUJBQUE4TixJQUNBajFDLEVBQUFpMUMsRUFDQUEsT0FBQS92QyxHQUlBbEYsRUFBQUEsTUFFQSxJQUFBMEcsRUFHQTR2QyxFQUdBRixFQUNBUSxFQUdBVCxFQUdBVSxFQUdBdjNCLEVBR0FtM0IsRUFHQWo3QyxFQUdBczdDLEVBR0EzN0MsRUFBQXFpQixHQUFBazRCLGFBQUExMUMsR0FHQXUyQyxFQUFBcDdDLEVBQUF3bUIsU0FBQXhtQixFQUdBdTdDLEVBQUF2N0MsRUFBQXdtQixVQUNBNDBCLEVBQUE3NUIsVUFBQTY1QixFQUFBem5CLFFBQ0F0UixHQUFBKzRCLEdBQ0EvNEIsR0FBQTdiLE1BR0F5b0IsRUFBQTVNLEdBQUE2TSxXQUNBc3NCLEVBQUFuNUIsR0FBQW9pQixVQUFBLGVBR0E0VyxFQUFBcjdDLEVBQUFxN0MsZUFHQU8sS0FDQUMsS0FHQUMsRUFBQSxXQUdBM3FCLEdBQ0Fub0IsV0FBQSxFQUdBNEssa0JBQUEsU0FBQXZOLEdBQ0EsSUFBQStRLEVBQ0EsR0FBQStNLEVBQUEsQ0FDQSxJQUFBczNCLEVBRUEsSUFEQUEsS0FDQXJrQyxFQUFBaWlDLEdBQUEvK0IsS0FBQTJnQyxJQUNBUSxFQUFBcmtDLEVBQUEsR0FBQVMsZUFBQVQsRUFBQSxHQUdBQSxFQUFBcWtDLEVBQUFwMUMsRUFBQXdSLGVBRUEsT0FBQSxNQUFBVCxFQUFBLEtBQUFBLEdBSUEya0Msc0JBQUEsV0FDQSxPQUFBNTNCLEVBQUE4MkIsRUFBQSxNQUlBM25DLGlCQUFBLFNBQUFqSSxFQUFBZ0gsR0FNQSxPQUxBLE1BQUE4UixJQUNBOVksRUFBQXd3QyxFQUFBeHdDLEVBQUF3TSxlQUNBZ2tDLEVBQUF4d0MsRUFBQXdNLGdCQUFBeE0sRUFDQXV3QyxFQUFBdndDLEdBQUFnSCxHQUVBalEsTUFJQTQ1QyxpQkFBQSxTQUFBOTJDLEdBSUEsT0FIQSxNQUFBaWYsSUFDQW5rQixFQUFBb3lCLFNBQUFsdEIsR0FFQTlDLE1BSUFpNUMsV0FBQSxTQUFBcC9CLEdBQ0EsSUFBQXpiLEVBQ0EsR0FBQXliLEVBQ0EsR0FBQWtJLEVBR0FnTixFQUFBaEMsT0FBQWxULEVBQUFrVixFQUFBcmQsY0FJQSxJQUFBdFQsS0FBQXliLEVBQ0FvL0IsRUFBQTc2QyxJQUFBNjZDLEVBQUE3NkMsR0FBQXliLEVBQUF6YixJQUlBLE9BQUE0QixNQUlBMlEsTUFBQSxTQUFBZ29DLEdBQ0EsSUFBQWtCLEVBQUFsQixHQUFBZSxFQUtBLE9BSkF2d0MsR0FDQUEsRUFBQXdILE1BQUFrcEMsR0FFQWxtQyxFQUFBLEVBQUFrbUMsR0FDQTc1QyxPQW9CQSxHQWZBNnNCLEVBQUFqTCxRQUFBbU4sR0FLQW54QixFQUFBODVDLE1BQUFBLEdBQUE5NUMsRUFBQTg1QyxLQUFBNXhDLEdBQUF1NUIsTUFBQSxJQUNBbDVCLFFBQUFpeEMsR0FBQXR4QyxHQUFBSCxTQUFBLE1BR0EvSCxFQUFBa0YsS0FBQUwsRUFBQXFOLFFBQUFyTixFQUFBSyxNQUFBbEYsRUFBQWtTLFFBQUFsUyxFQUFBa0YsS0FHQWxGLEVBQUFpeEIsV0FBQWp4QixFQUFBZ3hCLFVBQUEsS0FBQW5aLGNBQUFULE1BQUFrTSxNQUFBLElBR0EsTUFBQXRqQixFQUFBazhDLFlBQUEsQ0FDQVIsRUFBQTFyQyxHQUFBVSxjQUFBLEtBS0EsSUFDQWdyQyxFQUFBamEsS0FBQXpoQyxFQUFBODVDLElBSUE0QixFQUFBamEsS0FBQWlhLEVBQUFqYSxLQUNBemhDLEVBQUFrOEMsWUFBQXhDLEdBQUEzeEMsU0FBQSxLQUFBMnhDLEdBQUE3eEMsTUFDQTZ6QyxFQUFBM3pDLFNBQUEsS0FBQTJ6QyxFQUFBN3pDLEtBQ0EsTUFBQWpJLEdBSUFJLEVBQUFrOEMsYUFBQSxHQWFBLEdBUkFsOEMsRUFBQTRNLE1BQUE1TSxFQUFBZzZDLGFBQUEsaUJBQUFoNkMsRUFBQTRNLE9BQ0E1TSxFQUFBNE0sS0FBQXlWLEdBQUF3MkIsTUFBQTc0QyxFQUFBNE0sS0FBQTVNLEVBQUEwd0IsY0FJQVEsRUFBQWxDLEdBQUFodkIsRUFBQTZFLEVBQUFzc0IsR0FHQWhOLEVBQ0EsT0FBQWdOLEdBS0FtcUIsRUFBQWo1QixHQUFBN2IsT0FBQXhHLEVBQUFxRixTQUdBLEdBQUFnZCxHQUFBczNCLFVBQ0F0M0IsR0FBQTdiLE1BQUF3bEMsUUFBQSxhQUlBaHNDLEVBQUFrRixLQUFBbEYsRUFBQWtGLEtBQUErYSxjQUdBamdCLEVBQUFtOEMsWUFBQTVDLEdBQUFub0MsS0FBQXBSLEVBQUFrRixNQUtBaTJDLEVBQUFuN0MsRUFBQTg1QyxJQUFBdnhDLFFBQUE0d0MsR0FBQSxJQUdBbjVDLEVBQUFtOEMsV0F1QkFuOEMsRUFBQTRNLE1BQUE1TSxFQUFBZzZDLGFBQ0EsS0FBQWg2QyxFQUFBMlQsYUFBQSxJQUFBL0gsUUFBQSx1Q0FDQTVMLEVBQUE0TSxLQUFBNU0sRUFBQTRNLEtBQUFyRSxRQUFBMndDLEdBQUEsT0F0QkF5QyxFQUFBMzdDLEVBQUE4NUMsSUFBQWw0QyxNQUFBdTVDLEVBQUF2NkMsUUFHQVosRUFBQTRNLE9BQ0F1dUMsSUFBQTdDLEdBQUFsbkMsS0FBQStwQyxHQUFBLElBQUEsS0FBQW43QyxFQUFBNE0sWUFHQTVNLEVBQUE0TSxPQUlBLElBQUE1TSxFQUFBMDJCLFFBQ0F5a0IsRUFBQUEsRUFBQTV5QyxRQUFBNndDLEdBQUEsTUFDQXVDLEdBQUFyRCxHQUFBbG5DLEtBQUErcEMsR0FBQSxJQUFBLEtBQUEsS0FBQTlDLEtBQUFzRCxHQUlBMzdDLEVBQUE4NUMsSUFBQXFCLEVBQUFRLEdBU0EzN0MsRUFBQWs3QyxhQUNBNzRCLEdBQUF1M0IsYUFBQXVCLElBQ0FocUIsRUFBQTdkLGlCQUFBLG9CQUFBK08sR0FBQXUzQixhQUFBdUIsSUFFQTk0QixHQUFBdzNCLEtBQUFzQixJQUNBaHFCLEVBQUE3ZCxpQkFBQSxnQkFBQStPLEdBQUF3M0IsS0FBQXNCLE1BS0FuN0MsRUFBQTRNLE1BQUE1TSxFQUFBbThDLGFBQUEsSUFBQW44QyxFQUFBMlQsYUFBQTlPLEVBQUE4TyxjQUNBd2QsRUFBQTdkLGlCQUFBLGVBQUF0VCxFQUFBMlQsYUFJQXdkLEVBQUE3ZCxpQkFDQSxTQUNBdFQsRUFBQWl4QixVQUFBLElBQUFqeEIsRUFBQWk2QyxRQUFBajZDLEVBQUFpeEIsVUFBQSxJQUNBanhCLEVBQUFpNkMsUUFBQWo2QyxFQUFBaXhCLFVBQUEsS0FDQSxNQUFBanhCLEVBQUFpeEIsVUFBQSxHQUFBLEtBQUF3b0IsR0FBQSxXQUFBLElBQ0F6NUMsRUFBQWk2QyxRQUFBLE1BSUEsSUFBQTU1QyxLQUFBTCxFQUFBdVYsUUFDQTRiLEVBQUE3ZCxpQkFBQWpULEVBQUFMLEVBQUF1VixRQUFBbFYsSUFJQSxHQUFBTCxFQUFBbzhDLGNBQ0EsSUFBQXA4QyxFQUFBbzhDLFdBQUF6N0MsS0FBQXk2QyxFQUFBanFCLEVBQUFueEIsSUFBQW1rQixHQUdBLE9BQUFnTixFQUFBcGUsUUFlQSxHQVhBK29DLEVBQUEsUUFHQU4sRUFBQXp5QixJQUFBL29CLEVBQUF1UixVQUNBNGYsRUFBQXBiLEtBQUEvVixFQUFBNjZDLFNBQ0ExcEIsRUFBQWxOLEtBQUFqa0IsRUFBQXFOLE9BR0E5QixFQUFBMmxCLEVBQUFwb0IsR0FBQTlJLEVBQUE2RSxFQUFBc3NCLEdBS0EsQ0FTQSxHQVJBQSxFQUFBbm9CLFdBQUEsRUFHQXN5QyxHQUNBQyxFQUFBdlAsUUFBQSxZQUFBN2EsRUFBQW54QixJQUlBbWtCLEVBQ0EsT0FBQWdOLEVBSUFueEIsRUFBQTJRLE9BQUEzUSxFQUFBK04sUUFBQSxJQUNBaXRDLEVBQUEzbEMsRUFBQXZKLFdBQUEsV0FDQXFsQixFQUFBcGUsTUFBQSxZQUNBL1MsRUFBQStOLFVBR0EsSUFDQW9XLEdBQUEsRUFDQTVZLEVBQUFvQixLQUFBaXZDLEVBQUE3bEMsR0FDQSxNQUFBblcsR0FHQSxHQUFBdWtCLEVBQ0EsTUFBQXZrQixFQUlBbVcsR0FBQSxFQUFBblcsU0FoQ0FtVyxHQUFBLEVBQUEsZ0JBcUpBLE9BQUFvYixHQUdBa3JCLFFBQUEsU0FBQXZDLEVBQUFsdEMsRUFBQTNMLEdBQ0EsT0FBQW9oQixHQUFBZ0UsSUFBQXl6QixFQUFBbHRDLEVBQUEzTCxFQUFBLFNBR0FxN0MsVUFBQSxTQUFBeEMsRUFBQTc0QyxHQUNBLE9BQUFvaEIsR0FBQWdFLElBQUF5ekIsT0FBQS92QyxFQUFBOUksRUFBQSxhQUlBb2hCLEdBQUFuRyxNQUFBLE1BQUEsUUFBQSxTQUFBN2IsRUFBQTZSLEdBQ0FtUSxHQUFBblEsR0FBQSxTQUFBNG5DLEVBQUFsdEMsRUFBQTNMLEVBQUFpRSxHQVVBLE9BUEFtZCxHQUFBUSxXQUFBalcsS0FDQTFILEVBQUFBLEdBQUFqRSxFQUNBQSxFQUFBMkwsRUFDQUEsT0FBQTdDLEdBSUFzWSxHQUFBczRCLEtBQUF0NEIsR0FBQTJILFFBQ0E4dkIsSUFBQUEsRUFDQTUwQyxLQUFBZ04sRUFDQThlLFNBQUE5ckIsRUFDQTBILEtBQUFBLEVBQ0FpdUMsUUFBQTU1QyxHQUNBb2hCLEdBQUE4UixjQUFBMmxCLElBQUFBLE9BS0F6M0IsR0FBQTBJLFNBQUEsU0FBQSt1QixHQUNBLE9BQUF6M0IsR0FBQXM0QixNQUNBYixJQUFBQSxFQUdBNTBDLEtBQUEsTUFDQThyQixTQUFBLFNBQ0EwRixPQUFBLEVBQ0EvbEIsT0FBQSxFQUNBdEwsUUFBQSxFQUNBd3RCLFFBQUEsS0FLQXhRLEdBQUF2YyxHQUFBa2tCLFFBQ0F1eUIsUUFBQSxTQUFBOXFDLEdBQ0EsSUFBQTJWLEVBeUJBLE9BdkJBaGxCLEtBQUEsS0FDQWlnQixHQUFBUSxXQUFBcFIsS0FDQUEsRUFBQUEsRUFBQTlRLEtBQUF5QixLQUFBLEtBSUFnbEIsRUFBQS9FLEdBQUE1USxFQUFBclAsS0FBQSxHQUFBMGpCLGVBQUFnRixHQUFBLEdBQUFqZ0IsT0FBQSxHQUVBekksS0FBQSxHQUFBaU8sWUFDQStXLEVBQUFyVyxhQUFBM08sS0FBQSxJQUdBZ2xCLEVBQUFuTCxJQUFBLFdBR0EsSUFGQSxJQUFBdUcsRUFBQXBnQixLQUVBb2dCLEVBQUFnNkIsbUJBQ0FoNkIsRUFBQUEsRUFBQWc2QixrQkFHQSxPQUFBaDZCLElBQ0F4ZCxPQUFBNUMsT0FHQUEsTUFHQXE2QyxVQUFBLFNBQUFockMsR0FDQSxPQUFBNFEsR0FBQVEsV0FBQXBSLEdBQ0FyUCxLQUFBOFosS0FBQSxTQUFBN2IsR0FDQWdpQixHQUFBamdCLE1BQUFxNkMsVUFBQWhyQyxFQUFBOVEsS0FBQXlCLEtBQUEvQixNQUlBK0IsS0FBQThaLEtBQUEsV0FDQSxJQUFBclEsRUFBQXdXLEdBQUFqZ0IsTUFDQSt2QixFQUFBdG1CLEVBQUFzbUIsV0FFQUEsRUFBQXZ4QixPQUNBdXhCLEVBQUFvcUIsUUFBQTlxQyxHQUdBNUYsRUFBQTdHLE9BQUF5TSxNQUtBMlYsS0FBQSxTQUFBM1YsR0FDQSxJQUFBb1IsRUFBQVIsR0FBQVEsV0FBQXBSLEdBRUEsT0FBQXJQLEtBQUE4WixLQUFBLFNBQUE3YixHQUNBZ2lCLEdBQUFqZ0IsTUFBQW02QyxRQUFBMTVCLEVBQUFwUixFQUFBOVEsS0FBQXlCLEtBQUEvQixHQUFBb1IsTUFJQWlyQyxPQUFBLFNBQUEvekIsR0FJQSxPQUhBdm1CLEtBQUEyK0IsT0FBQXBZLEdBQUEvRixJQUFBLFFBQUExRyxLQUFBLFdBQ0FtRyxHQUFBamdCLE1BQUFpdEMsWUFBQWp0QyxLQUFBNGxCLGNBRUE1bEIsUUFLQWlnQixHQUFBaWQsS0FBQWxELFFBQUEvTyxPQUFBLFNBQUE3SyxHQUNBLE9BQUFILEdBQUFpZCxLQUFBbEQsUUFBQXVnQixRQUFBbjZCLElBRUFILEdBQUFpZCxLQUFBbEQsUUFBQXVnQixRQUFBLFNBQUFuNkIsR0FDQSxTQUFBQSxFQUFBbzZCLGFBQUFwNkIsRUFBQXE2QixjQUFBcjZCLEVBQUE0dkIsaUJBQUF4eEMsU0FNQXloQixHQUFBd1AsYUFBQXplLElBQUEsV0FDQSxJQUNBLE9BQUEsSUFBQWlDLEVBQUFuRyxlQUNBLE1BQUF0UCxNQUdBLElBQUFrOUMsSUFHQUMsRUFBQSxJQUlBQyxLQUFBLEtBRUFDLEdBQUE1NkIsR0FBQXdQLGFBQUF6ZSxNQUVBdVgsR0FBQXV5QixPQUFBRCxJQUFBLG9CQUFBQSxHQUNBdHlCLEdBQUFnd0IsS0FBQXNDLEtBQUFBLEdBRUE1NkIsR0FBQXE0QixjQUFBLFNBQUE3MUMsR0FDQSxJQUFBNUQsRUFBQWs4QyxFQUdBLEdBQUF4eUIsR0FBQXV5QixNQUFBRCxLQUFBcDRDLEVBQUFxM0MsWUFDQSxPQUNBdnZDLEtBQUEsU0FBQTRJLEVBQUFoRSxHQUNBLElBQUFsUixFQUNBK1MsRUFBQXZPLEVBQUF1TyxNQVdBLEdBVEFBLEVBQUF4SSxLQUNBL0YsRUFBQUssS0FDQUwsRUFBQWkxQyxJQUNBajFDLEVBQUE4TCxNQUNBOUwsRUFBQXU0QyxTQUNBdjRDLEVBQUF3OUIsVUFJQXg5QixFQUFBdzRDLFVBQ0EsSUFBQWg5QyxLQUFBd0UsRUFBQXc0QyxVQUNBanFDLEVBQUEvUyxHQUFBd0UsRUFBQXc0QyxVQUFBaDlDLEdBS0F3RSxFQUFBdXRCLFVBQUFoZixFQUFBNG9DLGtCQUNBNW9DLEVBQUE0b0MsaUJBQUFuM0MsRUFBQXV0QixVQVFBdnRCLEVBQUFxM0MsYUFBQTNtQyxFQUFBLHNCQUNBQSxFQUFBLG9CQUFBLGtCQUlBLElBQUFsVixLQUFBa1YsRUFDQW5DLEVBQUFFLGlCQUFBalQsRUFBQWtWLEVBQUFsVixJQUlBWSxFQUFBLFNBQUFpRSxHQUNBLE9BQUEsV0FDQWpFLElBQ0FBLEVBQUFrOEMsRUFBQS9wQyxFQUFBWCxPQUNBVyxFQUFBaEcsUUFBQWdHLEVBQUFrcUMsUUFBQWxxQyxFQUFBWixtQkFBQSxLQUVBLFVBQUF0TixFQUNBa08sRUFBQUwsUUFDQSxVQUFBN04sRUFLQSxpQkFBQWtPLEVBQUFVLE9BQ0F2QyxFQUFBLEVBQUEsU0FFQUEsRUFHQTZCLEVBQUFVLE9BQ0FWLEVBQUEybkMsWUFJQXhwQyxFQUNBdXJDLEdBQUExcEMsRUFBQVUsU0FBQVYsRUFBQVUsT0FDQVYsRUFBQTJuQyxXQUtBLFVBQUEzbkMsRUFBQVMsY0FBQSxTQUNBLGlCQUFBVCxFQUFBTSxjQUNBZ0MsT0FBQXRDLEVBQUFjLFdBQ0FpTyxLQUFBL08sRUFBQU0sY0FDQU4sRUFBQTJvQyw0QkFRQTNvQyxFQUFBWCxPQUFBeFIsSUFDQWs4QyxFQUFBL3BDLEVBQUFoRyxRQUFBbk0sRUFBQSxjQUtBOEksSUFBQXFKLEVBQUFrcUMsUUFDQWxxQyxFQUFBa3FDLFFBQUFILEVBRUEvcEMsRUFBQVosbUJBQUEsV0FHQSxJQUFBWSxFQUFBcEssWUFNQXFNLEVBQUF2SixXQUFBLFdBQ0E3SyxHQUNBazhDLE9BUUFsOEMsRUFBQUEsRUFBQSxTQUVBLElBR0FtUyxFQUFBekcsS0FBQTlILEVBQUFzM0MsWUFBQXQzQyxFQUFBK0gsTUFBQSxNQUNBLE1BQUFoTixHQUdBLEdBQUFxQixFQUNBLE1BQUFyQixJQUtBbVQsTUFBQSxXQUNBOVIsR0FDQUEsUUFXQW9oQixHQUFBbzRCLGNBQUEsU0FBQXo2QyxHQUNBQSxFQUFBazhDLGNBQ0FsOEMsRUFBQW15QixTQUFBbGlCLFFBQUEsS0FLQW9TLEdBQUFrNEIsV0FDQU4sU0FDQWhxQyxPQUFBLDZGQUdBa2lCLFVBQ0FsaUIsT0FBQSwyQkFFQW9pQixZQUNBa3JCLGNBQUEsU0FBQXA3QixHQUVBLE9BREFFLEdBQUFvUyxXQUFBdFMsR0FDQUEsTUFNQUUsR0FBQW80QixjQUFBLFNBQUEsU0FBQXo2QyxRQUNBK0osSUFBQS9KLEVBQUEwMkIsUUFDQTEyQixFQUFBMDJCLE9BQUEsR0FFQTEyQixFQUFBazhDLGNBQ0FsOEMsRUFBQWtGLEtBQUEsU0FLQW1kLEdBQUFxNEIsY0FBQSxTQUFBLFNBQUExNkMsR0FHQSxHQUFBQSxFQUFBazhDLFlBQUEsQ0FDQSxJQUFBanNDLEVBQUFoUCxFQUNBLE9BQ0EwTCxLQUFBLFNBQUE0VyxFQUFBaFMsR0FDQXRCLEVBQUFvUyxHQUFBLFlBQUEwQyxNQUNBeTRCLFFBQUF4OUMsRUFBQXk5QyxjQUNBN3NDLElBQUE1USxFQUFBODVDLE1BQ0F4ekMsR0FDQSxhQUNBckYsRUFBQSxTQUFBeThDLEdBQ0F6dEMsRUFBQWdiLFNBQ0FocUIsRUFBQSxLQUNBeThDLEdBQ0Fuc0MsRUFBQSxVQUFBbXNDLEVBQUF4NEMsS0FBQSxJQUFBLElBQUF3NEMsRUFBQXg0QyxRQU1BOEssR0FBQWdCLEtBQUFFLFlBQUFqQixFQUFBLEtBRUE4QyxNQUFBLFdBQ0E5UixHQUNBQSxTQVVBLElBQUEwOEMsTUFDQUMsR0FBQSxvQkFHQXY3QixHQUFBazRCLFdBQ0E5eEMsTUFBQSxXQUNBbzFDLGNBQUEsV0FDQSxJQUFBNThDLEVBQUEwOEMsR0FBQXppQixPQUFBN1ksR0FBQWlDLFFBQUEsSUFBQSt6QixLQUVBLE9BREFqMkMsS0FBQW5CLElBQUEsRUFDQUEsS0FLQW9oQixHQUFBbzRCLGNBQUEsYUFBQSxTQUFBejZDLEVBQUE4OUMsRUFBQTNzQixHQUVBLElBQUE0c0IsRUFBQUMsRUFBQUMsRUFDQUMsR0FBQSxJQUFBbCtDLEVBQUF5SSxRQUFBbTFDLEdBQUF4c0MsS0FBQXBSLEVBQUE4NUMsS0FDQSxNQUNBLGlCQUFBOTVDLEVBQUE0TSxNQUVBLEtBREE1TSxFQUFBMlQsYUFBQSxJQUNBL0gsUUFBQSxzQ0FDQWd5QyxHQUFBeHNDLEtBQUFwUixFQUFBNE0sT0FBQSxRQUlBLEdBQUFzeEMsR0FBQSxVQUFBbCtDLEVBQUFpeEIsVUFBQSxHQThEQSxPQTNEQThzQixFQUFBLzlDLEVBQUE2OUMsY0FBQXg3QixHQUFBUSxXQUFBN2lCLEVBQUE2OUMsZUFDQTc5QyxFQUFBNjlDLGdCQUNBNzlDLEVBQUE2OUMsY0FHQUssRUFDQWwrQyxFQUFBaytDLEdBQUFsK0MsRUFBQWsrQyxHQUFBMzFDLFFBQUFxMUMsR0FBQSxLQUFBRyxJQUNBLElBQUEvOUMsRUFBQXlJLFFBQ0F6SSxFQUFBODVDLE1BQUF4QixHQUFBbG5DLEtBQUFwUixFQUFBODVDLEtBQUEsSUFBQSxLQUFBOTVDLEVBQUF5SSxNQUFBLElBQUFzMUMsR0FJQS85QyxFQUFBcXlCLFdBQUEsZUFBQSxXQUlBLE9BSEE0ckIsR0FDQTU3QixHQUFBaFYsTUFBQTB3QyxFQUFBLG1CQUVBRSxFQUFBLElBSUFqK0MsRUFBQWl4QixVQUFBLEdBQUEsT0FHQStzQixFQUFBM29DLEVBQUEwb0MsR0FDQTFvQyxFQUFBMG9DLEdBQUEsV0FDQUUsRUFBQWo0QyxXQUlBbXJCLEVBQUFoQyxPQUFBLGdCQUdBcGxCLElBQUFpMEMsRUFDQTM3QixHQUFBaE4sR0FBQWdoQyxXQUFBMEgsR0FJQTFvQyxFQUFBMG9DLEdBQUFDLEVBSUFoK0MsRUFBQSs5QyxLQUdBLzlDLEVBQUE2OUMsY0FBQUMsRUFBQUQsY0FHQUYsR0FBQWozQyxLQUFBcTNDLElBSUFFLEdBQUE1N0IsR0FBQVEsV0FBQW03QixJQUNBQSxFQUFBQyxFQUFBLElBR0FBLEVBQUFELE9BQUFqMEMsSUFJQSxXQVlBNGdCLEdBQUF3ekIsbUJBQUEsV0FDQSxJQUFBbHRDLEVBQUFqQixHQUFBb3VDLGVBQUFELG1CQUFBLElBQUFsdEMsS0FFQSxPQURBQSxFQUFBNFcsVUFBQSw2QkFDQSxJQUFBNVcsRUFBQStXLFdBQUFwbkIsT0FIQSxHQVdBeWhCLEdBQUFxaEIsVUFBQSxTQUFBOTJCLEVBQUE0WixFQUFBNjNCLEdBQ0EsR0FBQSxpQkFBQXp4QyxFQUNBLFNBRUEsa0JBQUE0WixJQUNBNjNCLEVBQUE3M0IsRUFDQUEsR0FBQSxHQUdBLElBQUF5UixFQUFBcW1CLEVBQUFyM0IsRUF3QkEsT0F0QkFULElBSUFtRSxHQUFBd3pCLHFCQU1BbG1CLEdBTEF6UixFQUFBeFcsR0FBQW91QyxlQUFBRCxtQkFBQSxLQUtBenRDLGNBQUEsU0FDQSt3QixLQUFBenhCLEdBQUE5SCxTQUFBdTVCLEtBQ0FqYixFQUFBeFYsS0FBQUUsWUFBQSttQixJQUVBelIsRUFBQXhXLElBSUFzdUMsRUFBQTlhLEdBQUFscEIsS0FBQTFOLEdBQ0FxYSxHQUFBbzNCLE1BR0FDLEdBQ0E5M0IsRUFBQTlWLGNBQUE0dEMsRUFBQSxNQUdBQSxFQUFBdDNCLEdBQUFwYSxHQUFBNFosRUFBQVMsR0FFQUEsR0FBQUEsRUFBQXJtQixRQUNBeWhCLEdBQUE0RSxHQUFBZ0UsU0FHQTVJLEdBQUF1RSxTQUFBMDNCLEVBQUF0MkIsY0FPQTNGLEdBQUF2YyxHQUFBc1EsS0FBQSxTQUFBMGpDLEVBQUF5RSxFQUFBdDlDLEdBQ0EsSUFBQTBuQixFQUFBempCLEVBQUFnUCxFQUNBckksRUFBQXpKLEtBQ0F3RSxFQUFBa3pDLEVBQUFsdUMsUUFBQSxLQXNEQSxPQXBEQWhGLEdBQUEsSUFDQStoQixFQUFBMkgsRUFBQXdwQixFQUFBbDRDLE1BQUFnRixJQUNBa3pDLEVBQUFBLEVBQUFsNEMsTUFBQSxFQUFBZ0YsSUFJQXliLEdBQUFRLFdBQUEwN0IsSUFHQXQ5QyxFQUFBczlDLEVBQ0FBLE9BQUF4MEMsR0FHQXcwQyxHQUFBLGlCQUFBQSxJQUNBcjVDLEVBQUEsUUFJQTJHLEVBQUFqTCxPQUFBLEdBQ0F5aEIsR0FBQXM0QixNQUNBYixJQUFBQSxFQUtBNTBDLEtBQUFBLEdBQUEsTUFDQThyQixTQUFBLE9BQ0Fwa0IsS0FBQTJ4QyxJQUNBeG9DLEtBQUEsU0FBQXJDLEdBR0FRLEVBQUFsTyxVQUVBNkYsRUFBQTRGLEtBQUFrWCxFQUlBdEcsR0FBQSxTQUFBcmQsT0FBQXFkLEdBQUFxaEIsVUFBQWh3QixJQUFBc25CLEtBQUFyUyxHQUdBalYsS0FLQXliLE9BQUFsdUIsR0FBQSxTQUFBa3dCLEVBQUFyZCxHQUNBakksRUFBQXFRLEtBQUEsV0FDQWpiLEVBQUFnRixNQUFBN0QsS0FBQThSLElBQUFpZCxFQUFBemQsYUFBQUksRUFBQXFkLFFBS0EvdUIsTUFPQWlnQixHQUFBbkcsTUFDQSxZQUNBLFdBQ0EsZUFDQSxZQUNBLGNBQ0EsWUFDQSxTQUFBN2IsRUFBQTZFLEdBQ0FtZCxHQUFBdmMsR0FBQVosR0FBQSxTQUFBWSxHQUNBLE9BQUExRCxLQUFBa0UsR0FBQXBCLEVBQUFZLE1BT0F1YyxHQUFBaWQsS0FBQWxELFFBQUFvaUIsU0FBQSxTQUFBaDhCLEdBQ0EsT0FBQUgsR0FBQVMsS0FBQVQsR0FBQXd5QixPQUFBLFNBQUEvdUMsR0FDQSxPQUFBMGMsSUFBQTFjLEVBQUEwYyxPQUNBNWhCLFFBTUF5aEIsR0FBQW84QixRQUNBQyxVQUFBLFNBQUFsOEIsRUFBQTNkLEVBQUF4RSxHQUNBLElBQUFzK0MsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFDQWx0QyxFQUFBdVEsR0FBQWlELElBQUE5QyxFQUFBLFlBQ0F5OEIsRUFBQTU4QixHQUFBRyxHQUNBZ00sS0FHQSxXQUFBMWMsSUFDQTBRLEVBQUEzUSxNQUFBQyxTQUFBLFlBR0FpdEMsRUFBQUUsRUFBQVIsU0FDQUksRUFBQXg4QixHQUFBaUQsSUFBQTlDLEVBQUEsT0FDQXc4QixFQUFBMzhCLEdBQUFpRCxJQUFBOUMsRUFBQSxTQUNBLGFBQUExUSxHQUFBLFVBQUFBLEtBQ0Erc0MsRUFBQUcsR0FBQXB6QyxRQUFBLFNBQUEsR0FNQWt6QyxHQURBSCxFQUFBTSxFQUFBbnRDLFlBQ0FDLElBQ0E2c0MsRUFBQUQsRUFBQTNzQyxPQUdBOHNDLEVBQUF2a0MsV0FBQXNrQyxJQUFBLEVBQ0FELEVBQUFya0MsV0FBQXlrQyxJQUFBLEdBR0EzOEIsR0FBQVEsV0FBQWhlLEtBR0FBLEVBQUFBLEVBQUFsRSxLQUFBNmhCLEVBQUFuaUIsRUFBQWdpQixHQUFBMkgsVUFBQSswQixLQUdBLE1BQUFsNkMsRUFBQWtOLE1BQ0F5YyxFQUFBemMsSUFBQWxOLEVBQUFrTixJQUFBZ3RDLEVBQUFodEMsSUFBQStzQyxHQUVBLE1BQUFqNkMsRUFBQW1OLE9BQ0F3YyxFQUFBeGMsS0FBQW5OLEVBQUFtTixLQUFBK3NDLEVBQUEvc0MsS0FBQTRzQyxHQUdBLFVBQUEvNUMsRUFDQUEsRUFBQXE2QyxNQUFBditDLEtBQUE2aEIsRUFBQWdNLEdBR0F5d0IsRUFBQTM1QixJQUFBa0osS0FLQW5NLEdBQUF2YyxHQUFBa2tCLFFBQ0F5MEIsT0FBQSxTQUFBNTVDLEdBR0EsR0FBQW1CLFVBQUFwRixPQUNBLFlBQUFtSixJQUFBbEYsRUFDQXpDLEtBQ0FBLEtBQUE4WixLQUFBLFNBQUE3YixHQUNBZ2lCLEdBQUFvOEIsT0FBQUMsVUFBQXQ4QyxLQUFBeUMsRUFBQXhFLEtBSUEsSUFBQTZoQixFQUFBdVosRUFBQTBqQixFQUFBQyxFQUNBNThCLEVBQUFwZ0IsS0FBQSxHQUVBLEdBQUFvZ0IsRUFRQSxPQUFBQSxFQUFBNHZCLGlCQUFBeHhDLFFBSUF1K0MsRUFBQTM4QixFQUFBNnZCLHdCQUVBbndCLEVBQUFNLEVBQUFzRCxjQUNBMlYsRUFBQXZaLEVBQUExSyxnQkFDQTRuQyxFQUFBbDlCLEVBQUErYixhQUdBbHNCLElBQUFvdEMsRUFBQXB0QyxJQUFBcXRDLEVBQUFDLFlBQUE1akIsRUFBQTZqQixVQUNBdHRDLEtBQUFtdEMsRUFBQW50QyxLQUFBb3RDLEVBQUFHLFlBQUE5akIsRUFBQStqQixjQVhBenRDLElBQUEsRUFBQUMsS0FBQSxJQWVBRixTQUFBLFdBQ0EsR0FBQTFQLEtBQUEsR0FBQSxDQUlBLElBQUFxOUMsRUFBQWhCLEVBQ0FqOEIsRUFBQXBnQixLQUFBLEdBQ0FzOUMsR0FBQTN0QyxJQUFBLEVBQUFDLEtBQUEsR0E0QkEsTUF4QkEsVUFBQXFRLEdBQUFpRCxJQUFBOUMsRUFBQSxZQUdBaThCLEVBQUFqOEIsRUFBQTZ2Qix5QkFLQW9OLEVBQUFyOUMsS0FBQXE5QyxlQUdBaEIsRUFBQXI4QyxLQUFBcThDLFNBQ0FsOEIsRUFBQWs5QixFQUFBLEdBQUEsVUFDQUMsRUFBQUQsRUFBQWhCLFVBSUFpQixHQUNBM3RDLElBQUEydEMsRUFBQTN0QyxJQUFBc1EsR0FBQWlELElBQUFtNkIsRUFBQSxHQUFBLGtCQUFBLEdBQ0F6dEMsS0FBQTB0QyxFQUFBMXRDLEtBQUFxUSxHQUFBaUQsSUFBQW02QixFQUFBLEdBQUEsbUJBQUEsTUFNQTF0QyxJQUFBMHNDLEVBQUExc0MsSUFBQTJ0QyxFQUFBM3RDLElBQUFzUSxHQUFBaUQsSUFBQTlDLEVBQUEsYUFBQSxHQUNBeFEsS0FBQXlzQyxFQUFBenNDLEtBQUEwdEMsRUFBQTF0QyxLQUFBcVEsR0FBQWlELElBQUE5QyxFQUFBLGNBQUEsTUFjQWk5QixhQUFBLFdBQ0EsT0FBQXI5QyxLQUFBNlosSUFBQSxXQUdBLElBRkEsSUFBQXdqQyxFQUFBcjlDLEtBQUFxOUMsYUFFQUEsR0FBQSxXQUFBcDlCLEdBQUFpRCxJQUFBbTZCLEVBQUEsYUFDQUEsRUFBQUEsRUFBQUEsYUFHQSxPQUFBQSxHQUFBam9DLFFBTUE2SyxHQUFBbkcsTUFBQSsyQixXQUFBLGNBQUFELFVBQUEsZUFBQSxTQUFBOWdDLEVBQUE2UyxHQUNBLElBQUFoVCxFQUFBLGdCQUFBZ1QsRUFFQTFDLEdBQUF2YyxHQUFBb00sR0FBQSxTQUFBd0gsR0FDQSxPQUFBb1EsR0FBQTFuQixLQUFBLFNBQUFvZ0IsRUFBQXRRLEVBQUF3SCxHQUdBLElBQUEwbEMsRUFPQSxHQU5BLzhCLEdBQUFDLFNBQUFFLEdBQ0E0OEIsRUFBQTU4QixFQUNBLElBQUFBLEVBQUFqQixXQUNBNjlCLEVBQUE1OEIsRUFBQXliLGtCQUdBbDBCLElBQUEyUCxFQUNBLE9BQUEwbEMsRUFBQUEsRUFBQXI2QixHQUFBdkMsRUFBQXRRLEdBR0FrdEMsRUFDQUEsRUFBQU8sU0FDQTV0QyxFQUFBcXRDLEVBQUFHLFlBQUE3bEMsRUFDQTNILEVBQUEySCxFQUFBMGxDLEVBQUFDLGFBSUE3OEIsRUFBQXRRLEdBQUF3SCxHQUVBeEgsRUFBQXdILEVBQUExVCxVQUFBcEYsV0FVQXloQixHQUFBbkcsTUFBQSxNQUFBLFFBQUEsU0FBQTdiLEVBQUEwa0IsR0FDQTFDLEdBQUF1TSxTQUFBN0osR0FBQStHLEVBQUFuQixHQUFBZ21CLGNBQ0EsU0FBQW51QixFQUFBNkksR0FDQSxHQUFBQSxFQUlBLE9BSEFBLEVBQUFELEVBQUE1SSxFQUFBdUMsR0FHQTZHLEdBQUF4YSxLQUFBaWEsR0FDQWhKLEdBQUFHLEdBQUExUSxXQUFBaVQsR0FBQSxLQUNBc0csTUFRQWhKLEdBQUFuRyxNQUFBMGpDLE9BQUEsU0FBQUMsTUFBQSxTQUFBLFNBQUF4MEMsRUFBQW5HLEdBQ0FtZCxHQUFBbkcsTUFBQXEyQixRQUFBLFFBQUFsbkMsRUFBQTRkLFFBQUEvakIsRUFBQTQ2QyxHQUFBLFFBQUF6MEMsR0FDQSxTQUFBMDBDLEVBQUFDLEdBR0EzOUIsR0FBQXZjLEdBQUFrNkMsR0FBQSxTQUFBMU4sRUFBQWpnQyxHQUNBLElBQUFnMUIsRUFBQXJoQyxVQUFBcEYsU0FBQW0vQyxHQUFBLGtCQUFBek4sR0FDQTd5QixFQUFBc2dDLEtBQUEsSUFBQXpOLElBQUEsSUFBQWpnQyxFQUFBLFNBQUEsVUFFQSxPQUFBeVgsR0FBQTFuQixLQUFBLFNBQUFvZ0IsRUFBQXRkLEVBQUFtTixHQUNBLElBQUE2UCxFQUVBLE9BQUFHLEdBQUFDLFNBQUFFLEdBR0EsSUFBQXc5QixFQUFBcDBDLFFBQUEsU0FDQTRXLEVBQUEsUUFBQW5YLEdBQ0FtWCxFQUFBeFMsU0FBQXdILGdCQUFBLFNBQUFuTSxHQUlBLElBQUFtWCxFQUFBakIsVUFDQVcsRUFBQU0sRUFBQWhMLGdCQUlBM1UsS0FBQU4sSUFDQWlnQixFQUFBdlIsS0FBQSxTQUFBNUYsR0FBQTZXLEVBQUEsU0FBQTdXLEdBQ0FtWCxFQUFBdlIsS0FBQSxTQUFBNUYsR0FBQTZXLEVBQUEsU0FBQTdXLEdBQ0E2VyxFQUFBLFNBQUE3VyxVQUlBdEIsSUFBQXNJLEVBR0FnUSxHQUFBaUQsSUFBQTlDLEVBQUF0ZCxFQUFBdWEsR0FHQTRDLEdBQUF4USxNQUFBMlEsRUFBQXRkLEVBQUFtTixFQUFBb04sSUFDQXZhLEVBQUFtaUMsRUFBQWlMLE9BQUF2b0MsRUFBQXM5QixRQU1BaGxCLEdBQUF2YyxHQUFBa2tCLFFBRUFyUSxLQUFBLFNBQUErTyxFQUFBOWIsRUFBQTlHLEdBQ0EsT0FBQTFELEtBQUFrRSxHQUFBb2lCLEVBQUEsS0FBQTliLEVBQUE5RyxJQUVBbTZDLE9BQUEsU0FBQXYzQixFQUFBNWlCLEdBQ0EsT0FBQTFELEtBQUF3RSxJQUFBOGhCLEVBQUEsS0FBQTVpQixJQUdBbzZDLFNBQUEsU0FBQXYzQixFQUFBRCxFQUFBOWIsRUFBQTlHLEdBQ0EsT0FBQTFELEtBQUFrRSxHQUFBb2lCLEVBQUFDLEVBQUEvYixFQUFBOUcsSUFFQXE2QyxXQUFBLFNBQUF4M0IsRUFBQUQsRUFBQTVpQixHQUdBLE9BQUEsSUFBQUUsVUFBQXBGLE9BQ0F3QixLQUFBd0UsSUFBQStoQixFQUFBLE1BQ0F2bUIsS0FBQXdFLElBQUE4aEIsRUFBQUMsR0FBQSxLQUFBN2lCLE1BSUF1YyxHQUFBKzlCLFVBQUEsU0FBQUMsR0FDQUEsRUFDQWgrQixHQUFBNmtCLFlBRUE3a0IsR0FBQStCLE9BQUEsSUFHQS9CLEdBQUFiLFFBQUFuSSxNQUFBbUksUUFDQWEsR0FBQWkrQixVQUFBOW5DLEtBQUEyQixNQUNBa0ksR0FBQUUsU0FBQUEsRUFrQkEsbUJBQUFsQixRQUFBQSxPQUFBQyxLQUNBRCxPQUFBLFlBQUEsV0FDQSxPQUFBZ0IsS0FPQSxJQUdBaytCLEdBQUFsckMsRUFBQWdOLE9BR0FtK0IsR0FBQW5yQyxFQUFBb3JDLEVBd0JBLE9BdEJBcCtCLEdBQUFxK0IsV0FBQSxTQUFBL3VCLEdBU0EsT0FSQXRjLEVBQUFvckMsSUFBQXArQixLQUNBaE4sRUFBQW9yQyxFQUFBRCxJQUdBN3VCLEdBQUF0YyxFQUFBZ04sU0FBQUEsS0FDQWhOLEVBQUFnTixPQUFBaytCLElBR0FsK0IsSUFNQUwsSUFDQTNNLEVBQUFnTixPQUFBaE4sRUFBQW9yQyxFQUFBcCtCLElBTUFBLCtCQ25nVUEsU0FBQXRZLEdBR0EsSUFBQXNMLEVBQUFqVCxPQUFBLEVBQUF1K0MsTUFBQSxRQUNBM3dDLEVBQUFxRixFQUFBLFNBQ0FsRSxFQUFBa0UsRUFBQSxVQUNBdXJDLEVBQUF2ckMsRUFBQSxPQUNBbUQsRUFBQW5ELEVBQUEsTUFDQSxTQUFBeU0sR0FFQSxtQkFBQVQsUUFBQUEsT0FBQSxJQUVBQSxRQUFBLFVBQUEsV0FBQVMsR0FHQUEsRUFGQSxpQkFBQXBoQixHQUFBLGlCQUFBSSxFQUVBQSxFQUFBLFNBQUFKLEVBR0EyVSxFQUFBLE9BVkEsQ0FZQSxTQUFBd3JDLEVBQUFDLEdBc3FDQSxTQUFBQyxFQUFBNWdELEVBQUFtSCxHQUVBLFNBREEsT0FBQW5ILFVBQUEsS0FBQTZnRCxJQUNBN2dELElBQUFtSCxFQUdBLFNBQUEyNUMsRUFBQWhnRCxFQUFBOE0sR0FDQSxJQUFBbXpDLEVBQ0EsT0FBQSxXQUNBQSxJQUNBQSxFQUFBQyxFQUFBQyxNQUFBdDFDLFdBQUEsV0FDQW8xQyxFQUFBbjNDLEVBQ0E5SSxLQUNBOE0sS0FLQSxTQUFBc3pDLEVBQUFwZ0QsRUFBQThNLEdBQ0EsSUFBQW16QyxFQUNBLE9BQUEsV0FDQWx6QyxhQUFBa3pDLEdBQ0FBLEVBQUFDLEVBQUFDLE1BQUF0MUMsV0FBQTdLLEVBQUE4TSxJQXVDQSxTQUFBdXpDLEVBQUFqdkMsRUFBQTdMLEdBQ0FBLEdBQUFBLElBQUErNkMsRUFFQSxpQkFBQS82QyxFQUNBcEUsS0FBQW8vQyxtQkFBQW52QyxHQUVBalEsS0FBQXEvQyx1QkFBQXB2QyxFQUFBN0wsR0FKQXBFLEtBQUFzL0MsYUFBQXJ2QyxHQTByQkEsU0FBQXN2QyxFQUFBcjNDLEVBQUFzM0MsR0FDQSxPQUFBQSxHQUFBQSxFQUFBQyxTQUNBRCxFQUFBQyxVQU1BLFNBQUFDLEVBQUFDLEVBQUF6M0MsR0FDQSxJQUFBMDNDLEVBQUE1L0MsS0FBQTQvQyxtQkFDQWx2QixFQUFBa3ZCLEVBQUFDLEdBQ0FudkIsRUFBQW92QixhQUNBOS9DLEtBQUErL0MsZUFBQS8vQyxLQUFBZ2dELG1CQUFBOTNDLElBRUEwM0MsRUFBQUssc0JBQUEvM0MsRUFBQXkzQyxFQUFBMy9DLEtBQUFnZ0QsbUJBQUE5M0MsSUFDQWxJLEtBQUFnZ0QsbUJBQUE5M0MsR0FBQSxPQUNBbEksS0FBQSsvQyxlQUNBcnZCLEVBQUF3dkIsbUJBQUFoNEMsSUFFQTAzQyxFQUFBSyxzQkFBQS8zQyxFQUFBeTNDLEVBQUFqdkIsRUFBQXl2QixZQUFBQyxRQUFBVCxHQUFBQyxFQUFBUyxzQkFBQVYsSUFHQUEsRUFBQVcsd0JBQ0FYLEVBQUFZLHVDQSswRUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQTdCLEVBQUE4QixnQkFBQUosSUFDQWpwQyxLQUFBLFNBQUFzcEMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUNBQyxFQTBCQSxPQXpCQXJDLEVBQUE5MUIsU0FBQSxXQUNBLElBQUFvNEIsRUFBQU4sSUFDQU8sRUFBQXZDLEVBQUFDLE1BQUF1QyxpQkFBQUYsR0FDQUcsR0FBQWIsSUFBQVcsRUFDQUcsR0FBQUwsR0FDQUssR0FBQWYsR0FBQWMsSUFBQUwsS0FJQU0sR0FBQTFDLEVBQUEyQyxnQkFBQUMseUJBQ0FQLEVBQUFyQyxFQUFBQyxNQUFBNEMsV0FBQTdDLEVBQUE4QyxnQkFBQWo4QixXQUFBazdCLElBQUEsSUFHQVUsR0FDQUMsR0FDQTFDLEVBQUE4QyxnQkFBQUMsbUJBQUFoQixFQUFBL0IsRUFBQUMsTUFBQTRDLFdBQUFSLElBRUFyQyxFQUFBZ0QsMkJBQUFuQixFQUFBQSxFQUFBTSxFQUFBRyxHQUFBSCxFQUFBSixJQUVBL0IsRUFBQThDLGdCQUFBRyxVQUFBbEIsR0FHQUssRUFBQUssSUFFQSxNQUFBUyx5QkFBQW5CLEtBQ0FvQiw0QkFBQSxLQUdBbkQsRUFBQW9ELG9CQUFBQyx5QkFBQTNCLElBQUEsRUFDQTFCLEVBQUE4QyxnQkFBQVEsZ0JBQUE1QixJQUFBLEVBbnlJQSxJQUFBMUIsT0FBQSxJQUFBTixFQUFBQSxLQUVBTSxFQUFBdUQsYUFBQSxTQUFBQyxFQUFBdGhDLEdBT0EsSUFBQSxJQU5Bd1UsRUFBQThzQixFQUFBMXFDLE1BQUEsS0FJQWhJLEVBQUFrdkMsRUFFQTlnRCxFQUFBLEVBQUFBLEVBQUF3M0IsRUFBQWozQixPQUFBLEVBQUFQLElBQ0E0UixFQUFBQSxFQUFBNGxCLEVBQUF4M0IsSUFDQTRSLEVBQUE0bEIsRUFBQUEsRUFBQWozQixPQUFBLElBQUF5aUIsR0FFQTg5QixFQUFBeUQsZUFBQSxTQUFBbGQsRUFBQW1kLEVBQUF4aEMsR0FDQXFrQixFQUFBbWQsR0FBQXhoQyxHQUVBODlCLEVBQUFsZ0MsUUFBQSxRQUVBa2dDLEVBQUF1RCxhQUFBLFVBQUF2RCxFQUFBbGdDLFNBRUFrZ0MsRUFBQXQ4QyxTQUNBaWdELGNBQUEsRUFDQUMscUJBQUEsR0FJQTVELEVBQUFDLE1BQUEsV0FDQSxTQUFBNEQsRUFBQW4vQyxFQUFBdU0sR0FDQSxJQUFBLElBQUEyUyxLQUFBbGYsRUFDQUEsRUFBQWlGLGVBQUFpYSxJQUNBM1MsRUFBQTJTLEVBQUFsZixFQUFBa2YsSUFLQSxTQUFBaUYsRUFBQS9YLEVBQUFxMkIsR0FDQSxHQUFBQSxFQUNBLElBQUEsSUFBQXZqQixLQUFBdWpCLEVBQ0FBLEVBQUF4OUIsZUFBQWlhLEtBQ0E5UyxFQUFBOFMsR0FBQXVqQixFQUFBdmpCLElBSUEsT0FBQTlTLEVBR0EsU0FBQWd6QyxFQUFBcC9DLEVBQUF5dUIsR0FFQSxPQURBenVCLEVBQUFxL0MsVUFBQTV3QixFQUNBenVCLEVBb0NBLFNBQUFzL0MsRUFBQWpDLEVBQUFrQyxHQUNBLEdBQUEsVUFBQWpFLEVBQUFDLE1BQUFpRSxhQUFBbkMsS0FBQUEsRUFBQWgrQyxLQUFBLE9BQUEsRUFDQSxHQUFBLFNBQUFrZ0QsRUFBQXZ0QyxjQUFBLE9BQUEsRUFDQSxJQUFBeXRDLEVBQUFwQyxFQUFBaCtDLEtBQ0EsTUFBQSxZQUFBb2dELEdBQUEsU0FBQUEsRUF5QkEsU0FBQUMsRUFBQTEvQyxFQUFBa2YsRUFBQW15QixFQUFBc08sR0FFQSxJQUFBQyxFQUFBNS9DLEVBQUFrZixHQUFBM04sTUFBQXN1QyxPQUNBdkUsRUFBQUMsTUFBQXVFLGFBQUF6TyxFQUFBOS9CLE1BQUFzdUMsR0FBQSxTQUFBOXpDLEdBQ0F1dkMsRUFBQUMsTUFBQXdFLGdCQUFBSCxFQUFBN3pDLEVBQUE0ekMsS0FFQTMvQyxFQUFBa2YsR0FBQTBnQyxFQUFBdHZDLEtBQUEsS0FwRUEsSUFBQTB2QyxHQUFBWCx3QkFBQTdyQyxNQUlBeXNDLEtBQUFDLEtBRUFELEVBREEzMEMsR0FBQSxjQUFBQyxLQUFBRCxFQUFBRSxXQUFBLGdCQUFBLGFBQ0EsUUFBQSxVQUFBLFlBQ0F5MEMsRUFBQSxhQUFBLFFBQUEsV0FBQSxZQUFBLFVBQUEsWUFBQSxZQUFBLFdBQUEsYUFBQSxjQUNBZCxFQUFBYyxFQUFBLFNBQUFWLEVBQUFZLEdBQ0EsR0FBQUEsRUFBQXBsRCxPQUNBLElBQUEsSUFBQVAsRUFBQSxFQUFBc08sRUFBQXEzQyxFQUFBcGxELE9BQUFQLEVBQUFzTyxFQUFBdE8sSUFDQTBsRCxFQUFBQyxFQUFBM2xELElBQUEra0QsSUFHQSxJQUFBYSxHQUFBQyxnQkFBQSxHQU1BQyxFQUFBbjJDLEdBQUEsV0FJQSxJQUhBLElBQUFpUixFQUFBLEVBQUFxb0IsRUFBQXQ1QixFQUFBVSxjQUFBLE9BQUEwMUMsRUFBQTljLEVBQUF4NEIscUJBQUEsS0FJQXc0QixFQUFBemhCLFVBQUEsdUJBQUE1RyxFQUFBLDJCQUNBbWxDLEVBQUEsS0FFQSxPQUFBbmxDLEVBQUEsRUFBQUEsRUFBQWxYLEVBUkEsR0FVQXM4QyxFQUFBLElBQUFGLEVBQ0FHLEVBQUEsSUFBQUgsRUFXQVQsRUFBQSxPQTZCQSxPQUNBYSw0QkFBQSxxQkFBQSxzQ0FFQVosYUFBQSxTQUFBOWxDLEVBQUF6TixHQUNBLElBQUEsSUFBQS9SLEVBQUEsRUFBQXNPLEVBQUFrUixFQUFBamYsT0FBQVAsRUFBQXNPLEVBQUF0TyxJQUNBK1IsRUFBQXlOLEVBQUF4ZixHQUFBQSxJQUdBbW1ELGFBQUEsU0FBQTNtQyxFQUFBNG1DLEdBQ0EsR0FBQSxtQkFBQXB0QyxNQUFBMVcsVUFBQWlKLFFBQ0EsT0FBQXlOLE1BQUExVyxVQUFBaUosUUFBQWpMLEtBQUFrZixFQUFBNG1DLEdBQ0EsSUFBQSxJQUFBcG1ELEVBQUEsRUFBQXNPLEVBQUFrUixFQUFBamYsT0FBQVAsRUFBQXNPLEVBQUF0TyxJQUNBLEdBQUF3ZixFQUFBeGYsS0FBQW9tRCxFQUNBLE9BQUFwbUQsRUFDQSxPQUFBLEdBR0FxbUQsV0FBQSxTQUFBN21DLEVBQUE4bUMsRUFBQUMsR0FDQSxJQUFBLElBQUF2bUQsRUFBQSxFQUFBc08sRUFBQWtSLEVBQUFqZixPQUFBUCxFQUFBc08sRUFBQXRPLElBQ0EsR0FBQXNtRCxFQUFBaG1ELEtBQUFpbUQsRUFBQS9tQyxFQUFBeGYsR0FBQUEsR0FDQSxPQUFBd2YsRUFBQXhmLEdBQ0EsT0FBQSxNQUdBd21ELGdCQUFBLFNBQUFobkMsRUFBQWluQyxHQUNBLElBQUE5N0MsRUFBQW0yQyxFQUFBQyxNQUFBb0YsYUFBQTNtQyxFQUFBaW5DLEdBQ0E5N0MsRUFBQSxFQUNBNlUsRUFBQTNZLE9BQUE4RCxFQUFBLEdBRUEsSUFBQUEsR0FDQTZVLEVBQUE5VCxTQUlBZzdDLHVCQUFBLFNBQUFsbkMsR0FHQSxJQUFBLElBREF4ZSxLQUNBaEIsRUFBQSxFQUFBc08sR0FGQWtSLEVBQUFBLE9BRUFqZixPQUFBUCxFQUFBc08sRUFBQXRPLElBQ0E4Z0QsRUFBQUMsTUFBQW9GLGFBQUFubEQsRUFBQXdlLEVBQUF4ZixJQUFBLEdBQ0FnQixFQUFBcUYsS0FBQW1aLEVBQUF4ZixJQUVBLE9BQUFnQixHQUdBMmxELFNBQUEsU0FBQW5uQyxFQUFBb25DLEdBR0EsSUFBQSxJQURBNWxELEtBQ0FoQixFQUFBLEVBQUFzTyxHQUZBa1IsRUFBQUEsT0FFQWpmLE9BQUFQLEVBQUFzTyxFQUFBdE8sSUFDQWdCLEVBQUFxRixLQUFBdWdELEVBQUFwbkMsRUFBQXhmLEdBQUFBLElBQ0EsT0FBQWdCLEdBR0E2bEQsWUFBQSxTQUFBcm5DLEVBQUE4bUMsR0FHQSxJQUFBLElBREF0bEQsS0FDQWhCLEVBQUEsRUFBQXNPLEdBRkFrUixFQUFBQSxPQUVBamYsT0FBQVAsRUFBQXNPLEVBQUF0TyxJQUNBc21ELEVBQUE5bUMsRUFBQXhmLEdBQUFBLElBQ0FnQixFQUFBcUYsS0FBQW1aLEVBQUF4ZixJQUNBLE9BQUFnQixHQUdBOGxELGFBQUEsU0FBQXRuQyxFQUFBdW5DLEdBQ0EsR0FBQUEsYUFBQS90QyxNQUNBd0csRUFBQW5aLEtBQUFULE1BQUE0WixFQUFBdW5DLFFBRUEsSUFBQSxJQUFBL21ELEVBQUEsRUFBQXNPLEVBQUF5NEMsRUFBQXhtRCxPQUFBUCxFQUFBc08sRUFBQXRPLElBQ0F3ZixFQUFBblosS0FBQTBnRCxFQUFBL21ELElBQ0EsT0FBQXdmLEdBR0ErbEMsZ0JBQUEsU0FBQS9sQyxFQUFBeE4sRUFBQWcxQyxHQUNBLElBQUFDLEVBQUFuRyxFQUFBQyxNQUFBb0YsYUFBQXJGLEVBQUFDLE1BQUFtRyxlQUFBMW5DLEdBQUF4TixHQUNBaTFDLEVBQUEsRUFDQUQsR0FDQXhuQyxFQUFBblosS0FBQTJMLEdBRUFnMUMsR0FDQXhuQyxFQUFBM1ksT0FBQW9nRCxFQUFBLElBSUF6QixnQkFBQUEsRUFFQTc3QixPQUFBQSxFQUVBaTdCLGVBQUFBLEVBRUF1Qyx1QkFBQTNCLEVBQUFaLEVBQUFqN0IsRUFFQWc3QixjQUFBQSxFQUVBeUMsVUFBQSxTQUFBbmYsRUFBQTJlLEdBQ0EsSUFBQTNlLEVBQ0EsT0FBQUEsRUFDQSxJQUFBcjJCLEtBQ0EsSUFBQSxJQUFBOFMsS0FBQXVqQixFQUNBQSxFQUFBeDlCLGVBQUFpYSxLQUNBOVMsRUFBQThTLEdBQUFraUMsRUFBQTNlLEVBQUF2akIsR0FBQUEsRUFBQXVqQixJQUdBLE9BQUFyMkIsR0FHQXkxQyxhQUFBLFNBQUFDLEdBQ0EsS0FBQUEsRUFBQTEvQixZQUNBazVCLEVBQUF5RyxXQUFBRCxFQUFBMS9CLGFBSUE0L0IsbUNBQUEsU0FBQXJnQyxHQU9BLElBQUEsSUFKQXNnQyxFQUFBM0csRUFBQUMsTUFBQXpzQixVQUFBbk4sR0FHQXlvQixHQUZBNlgsRUFBQSxJQUFBQSxFQUFBLEdBQUFoaUMsZUFBQTlWLEdBRUFVLGNBQUEsT0FDQXJRLEVBQUEsRUFBQXNPLEVBQUFtNUMsRUFBQWxuRCxPQUFBUCxFQUFBc08sRUFBQXRPLElBQ0E0dkMsRUFBQS8rQixZQUFBaXdDLEVBQUE0RyxVQUFBRCxFQUFBem5ELEtBRUEsT0FBQTR2QyxHQUdBK1QsV0FBQSxTQUFBOEQsRUFBQUUsR0FDQSxJQUFBLElBQUEzbkQsRUFBQSxFQUFBc08sRUFBQW01QyxFQUFBbG5ELE9BQUFxbkQsS0FBQTVuRCxFQUFBc08sRUFBQXRPLElBQUEsQ0FDQSxJQUFBNm5ELEVBQUFKLEVBQUF6bkQsR0FBQWtwQyxXQUFBLEdBQ0EwZSxFQUFBdmhELEtBQUFzaEQsRUFBQTdHLEVBQUE0RyxVQUFBRyxHQUFBQSxHQUVBLE9BQUFELEdBR0EvRCxtQkFBQSxTQUFBeUQsRUFBQTMvQixHQUVBLEdBREFtNUIsRUFBQUMsTUFBQXNHLGFBQUFDLEdBQ0EzL0IsRUFDQSxJQUFBLElBQUEzbkIsRUFBQSxFQUFBc08sRUFBQXFaLEVBQUFwbkIsT0FBQVAsRUFBQXNPLEVBQUF0TyxJQUNBc25ELEVBQUF6MkMsWUFBQThXLEVBQUEzbkIsS0FJQThuRCxnQkFBQSxTQUFBQyxFQUFBSCxHQUNBLElBQUFJLEVBQUFELEVBQUE3bUMsVUFBQTZtQyxHQUFBQSxFQUNBLEdBQUFDLEVBQUF6bkQsT0FBQSxFQUFBLENBR0EsSUFBQSxJQUZBMG5ELEVBQUFELEVBQUEsR0FDQXRuQixFQUFBdW5CLEVBQUFqNEMsV0FDQWhRLEVBQUEsRUFBQXNPLEVBQUFzNUMsRUFBQXJuRCxPQUFBUCxFQUFBc08sRUFBQXRPLElBQ0EwZ0MsRUFBQWh3QixhQUFBazNDLEVBQUE1bkQsR0FBQWlvRCxHQUNBLElBQUEsSUFBQWpvRCxFQUFBLEVBQUFzTyxFQUFBMDVDLEVBQUF6bkQsT0FBQVAsRUFBQXNPLEVBQUF0TyxJQUNBOGdELEVBQUF5RyxXQUFBUyxFQUFBaG9ELE1BS0Frb0QseUJBQUEsU0FBQUMsRUFBQW40QyxHQWlCQSxHQUFBbTRDLEVBQUE1bkQsT0FBQSxDQUtBLElBSEF5UCxFQUFBLElBQUFBLEVBQUFrUixVQUFBbFIsRUFBQUEsWUFBQUEsRUFHQW00QyxFQUFBNW5ELFFBQUE0bkQsRUFBQSxHQUFBbjRDLGFBQUFBLEdBQ0FtNEMsRUFBQXRoRCxPQUFBLEVBQUEsR0FHQSxLQUFBc2hELEVBQUE1bkQsT0FBQSxHQUFBNG5ELEVBQUFBLEVBQUE1bkQsT0FBQSxHQUFBeVAsYUFBQUEsR0FDQW00QyxFQUFBNW5ELFNBR0EsR0FBQTRuRCxFQUFBNW5ELE9BQUEsRUFBQSxDQUNBLElBQUE2eEIsRUFBQSsxQixFQUFBLEdBQUF4MEIsRUFBQXcwQixFQUFBQSxFQUFBNW5ELE9BQUEsR0FHQSxJQURBNG5ELEVBQUE1bkQsT0FBQSxFQUNBNnhCLElBQUF1QixHQUNBdzBCLEVBQUE5aEQsS0FBQStyQixHQUNBQSxFQUFBQSxFQUFBMkUsWUFFQW94QixFQUFBOWhELEtBQUFzdEIsSUFHQSxPQUFBdzBCLEdBR0FDLDRCQUFBLFNBQUFDLEVBQUFDLEdBRUF4QyxFQUFBLEVBQ0F1QyxFQUFBdjJDLGFBQUEsV0FBQXcyQyxHQUVBRCxFQUFBcjNCLFNBQUFzM0IsR0FHQUMsV0FBQSxTQUFBcHBDLEdBQ0EsT0FBQSxPQUFBQSxHQUFBQSxJQUFBelYsRUFBQSxHQUNBeVYsRUFBQWtWLEtBQ0FsVixFQUFBa1YsT0FDQWxWLEVBQUFuQixXQUFBOVYsUUFBQSx5QkFBQSxLQUdBc2dELGlCQUFBLFNBQUFycEMsRUFBQXNwQyxHQUVBLE9BREF0cEMsRUFBQUEsR0FBQSxLQUNBc3BDLEVBQUFsb0QsT0FBQTRlLEVBQUE1ZSxTQUVBNGUsRUFBQTNiLFVBQUEsRUFBQWlsRCxFQUFBbG9ELFVBQUFrb0QsR0FHQUMscUJBQUEsU0FBQXQrQixFQUFBdStCLEdBQ0EsR0FBQXYrQixJQUFBdStCLEVBQ0EsT0FBQSxFQUNBLEdBQUEsS0FBQXYrQixFQUFBbEosU0FDQSxPQUFBLEVBQ0EsR0FBQXluQyxFQUFBM2hDLFNBQ0EsT0FBQTJoQyxFQUFBM2hDLFNBQUEsSUFBQW9ELEVBQUFsSixTQUFBa0osRUFBQXBhLFdBQUFvYSxHQUNBLEdBQUF1K0IsRUFBQWxxQix3QkFDQSxPQUFBLEtBQUEsR0FBQWtxQixFQUFBbHFCLHdCQUFBclUsSUFDQSxLQUFBQSxHQUFBQSxHQUFBdStCLEdBQ0F2K0IsRUFBQUEsRUFBQXBhLFdBRUEsUUFBQW9hLEdBR0F3K0IsNEJBQUEsU0FBQXgrQixHQUNBLE9BQUEwMkIsRUFBQUMsTUFBQTJILHFCQUFBdCtCLEVBQUFBLEVBQUEzRSxjQUFBdE8sa0JBR0EweEMsK0JBQUEsU0FBQTFoQyxHQUNBLFFBQUEyNUIsRUFBQUMsTUFBQXNGLFdBQUFsL0IsRUFBQTI1QixFQUFBQyxNQUFBNkgsOEJBR0E1RCxhQUFBLFNBQUFuQyxHQUlBLE9BQUFBLEdBQUFBLEVBQUFpRyxTQUFBakcsRUFBQWlHLFFBQUF0eEMsZUFHQXV4QyxvQkFBQSxTQUFBbEosR0FDQSxPQUFBaUIsRUFBQSxRQUFBLFdBQ0EsSUFDQSxPQUFBakIsRUFBQWo2QyxNQUFBN0QsS0FBQTRELFdBQ0EsTUFBQXBHLEdBRUEsTUFEQXVoRCxFQUFBLFNBQUFBLEVBQUEsUUFBQXZoRCxHQUNBQSxJQUVBc2dELEdBR0FwMEMsV0FBQSxTQUFBa3JCLEVBQUFqcEIsR0FDQSxPQUFBakMsV0FBQXExQyxFQUFBQyxNQUFBZ0ksb0JBQUFweUIsR0FBQWpwQixJQUdBczdDLFdBQUEsU0FBQWg4QyxHQUNBdkIsV0FBQSxXQUVBLE1BREFxMUMsRUFBQSxTQUFBQSxFQUFBLFFBQUE5ekMsR0FDQUEsR0FDQSxJQUdBaThDLHFCQUFBLFNBQUFwRyxFQUFBa0MsRUFBQXB1QixHQUNBLElBQUF1eUIsRUFBQXBJLEVBQUFDLE1BQUFnSSxvQkFBQXB5QixHQUVBd3lCLEVBQUFyRCxHQUFBRixFQUFBYixHQUNBLEdBQUFqRSxFQUFBdDhDLFFBQUEscUJBQUEya0QsSUFBQTVJLEVBRUEsR0FBQTRJLEdBQUEsbUJBQUF0RyxFQUFBMzhDLGlCQUVBLENBQUEsUUFBQSxJQUFBMjhDLEVBQUEzd0MsWUFXQSxNQUFBLElBQUFoUyxNQUFBLDJEQVZBLElBQUFrcEQsRUFBQSxTQUFBampELEdBQUEraUQsRUFBQTVvRCxLQUFBdWlELEVBQUExOEMsSUFDQWtqRCxFQUFBLEtBQUF0RSxFQUNBbEMsRUFBQTN3QyxZQUFBbTNDLEVBQUFELEdBSUF0SSxFQUFBQyxNQUFBdUksZ0JBQUFDLG1CQUFBMUcsRUFBQSxXQUNBQSxFQUFBMkcsWUFBQUgsRUFBQUQsVUFUQXZHLEVBQUEzOEMsaUJBQUE2K0MsRUFBQW1FLEdBQUEsUUFGQTNJLEVBQUFzQyxHQUFBLEtBQUFrQyxFQUFBbUUsSUFpQkFPLGFBQUEsU0FBQTVHLEVBQUFrQyxHQUNBLElBQUFsQyxJQUFBQSxFQUFBM2hDLFNBQ0EsTUFBQSxJQUFBaGhCLE1BQUEsd0RBTUEsSUFBQXdwRCxFQUFBNUUsRUFBQWpDLEVBQUFrQyxHQUVBLEdBQUFqRSxFQUFBdDhDLFFBQUEsc0JBQUErN0MsR0FBQW1KLEVBRUEsR0FBQSxtQkFBQS81QyxFQUFBZzZDLFlBQUEsQ0FDQSxHQUFBLG1CQUFBOUcsRUFBQStHLGNBT0EsTUFBQSxJQUFBMXBELE1BQUEsc0RBTkEsSUFBQTJwRCxFQUFBbkUsRUFBQVgsSUFBQSxhQUNBNStDLEVBQUF3SixFQUFBZzZDLFlBQUFFLEdBQ0ExakQsRUFBQTJqRCxVQUFBL0UsR0FBQSxHQUFBLEVBQUEvdkMsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsRUFBQSxFQUFBNnRDLEdBQ0FBLEVBQUErRyxjQUFBempELFFBSUEsR0FBQXVqRCxHQUFBN0csRUFBQWhYLE1BQ0FnWCxFQUFBaFgsWUFDQSxDQUFBLFFBQUEsSUFBQWdYLEVBQUFrSCxVQUdBLE1BQUEsSUFBQTdwRCxNQUFBLDZDQUZBMmlELEVBQUFrSCxVQUFBLEtBQUFoRixRQWJBeEUsRUFBQXNDLEdBQUEsUUFBQWtDLElBbUJBekIsaUJBQUEsU0FBQXR4QyxHQUNBLE9BQUE4dUMsRUFBQWtKLGFBQUFoNEMsR0FBQUEsSUFBQUEsR0FHQWsxQyxlQUFBLFNBQUFsMUMsR0FDQSxPQUFBOHVDLEVBQUFrSixhQUFBaDRDLEdBQUFBLEVBQUFpNEMsT0FBQWo0QyxHQUdBazRDLHNCQXBXQSxTQUFBOS9CLEVBQUF5c0IsRUFBQXNPLEdBQ0EsSUFBQWdGLEVBQ0F0VCxJQUNBLGlCQUFBenNCLEVBQUFnZ0MsV0FDQUQsRUFBQS8vQixFQUFBZ2dDLFVBQUFqRixFQUFBLE1BQUEsVUFDQXJFLEVBQUFDLE1BQUF1RSxhQUFBek8sRUFBQTkvQixNQUFBc3VDLEdBQUEsU0FBQTl6QyxHQUNBNDRDLEVBQUE3cEQsS0FBQThwQixFQUFBZ2dDLFVBQUE3NEMsTUFFQSxpQkFBQTZZLEVBQUE3WSxVQUFBLFFBRUEyekMsRUFBQTk2QixFQUFBN1ksVUFBQSxVQUFBc2xDLEVBQUFzTyxHQUdBRCxFQUFBOTZCLEVBQUEsWUFBQXlzQixFQUFBc08sS0F5VkFrRixlQUFBLFNBQUF4SCxFQUFBaDdCLEdBQ0EsSUFBQTdWLEVBQUE4dUMsRUFBQUMsTUFBQXVDLGlCQUFBejdCLEdBQ0EsT0FBQTdWLEdBQUFBLElBQUF0SSxJQUNBc0ksRUFBQSxJQUtBLElBQUFzNEMsRUFBQXhKLEVBQUE4QyxnQkFBQWg4QixXQUFBaTdCLElBQ0F5SCxHQUFBLEdBQUFBLEVBQUFwcEMsVUFBQTQvQixFQUFBOEMsZ0JBQUE3c0IsWUFBQXV6QixHQUNBeEosRUFBQThDLGdCQUFBQyxtQkFBQWhCLEdBQUFBLEVBQUFwOUIsY0FBQXFDLGVBQUE5VixLQUVBczRDLEVBQUEvOUMsS0FBQXlGLEVBR0E4dUMsRUFBQUMsTUFBQXdKLGFBQUExSCxJQUdBMkgsZUFBQSxTQUFBM0gsRUFBQTczQyxHQU1BLEdBTEE2M0MsRUFBQTczQyxLQUFBQSxFQUtBODZDLEdBQUEsRUFDQSxJQUNBakQsRUFBQTRILGdCQUFBOTZDLEVBQUFVLGNBQUEsZ0JBQUF3eUMsRUFBQTczQyxLQUFBLFFBQUEsR0FFQSxNQUFBekwsTUFJQWdyRCxhQUFBLFNBQUFuZ0MsR0FFQSxHQUFBMDdCLEdBQUEsRUFBQSxDQUVBLElBQUEzakMsRUFBQSxHQUFBaUksRUFBQWxKLFNBQUFrSixFQUFBQSxFQUFBcGEsV0FDQW1TLEVBQUEzUSxRQUNBMlEsRUFBQTNRLE1BQUFpZ0MsS0FBQXR2QixFQUFBM1EsTUFBQWlnQyxRQUlBaVosdUNBQUEsU0FBQUMsR0FJQSxHQUFBN0UsRUFBQSxDQUNBLElBQUE4RSxFQUFBRCxFQUFBbjVDLE1BQUF5WixNQUNBMC9CLEVBQUFuNUMsTUFBQXlaLE1BQUEsRUFDQTAvQixFQUFBbjVDLE1BQUF5WixNQUFBMi9CLElBSUFDLE1BQUEsU0FBQTVvRCxFQUFBQyxHQUNBRCxFQUFBNitDLEVBQUFDLE1BQUF1QyxpQkFBQXJoRCxHQUNBQyxFQUFBNCtDLEVBQUFDLE1BQUF1QyxpQkFBQXBoRCxHQUVBLElBQUEsSUFEQWxCLEtBQ0FoQixFQUFBaUMsRUFBQWpDLEdBQUFrQyxFQUFBbEMsSUFDQWdCLEVBQUFxRixLQUFBckcsR0FDQSxPQUFBZ0IsR0FHQXN6QixVQUFBLFNBQUF3MkIsR0FFQSxJQUFBLElBREE5cEQsS0FDQWhCLEVBQUEsRUFBQXNPLEVBQUF3OEMsRUFBQXZxRCxPQUFBUCxFQUFBc08sRUFBQXRPLElBQ0FnQixFQUFBcUYsS0FBQXlrRCxFQUFBOXFELElBRUEsT0FBQWdCLEdBR0ErcEQscUJBQUEsU0FBQWx2QixHQUNBLE9BQUFBLEdBR0FtcUIsTUFBQUEsRUFDQUMsTUFBQUEsRUFDQUgsVUFBQUEsRUFFQWtGLGNBQUEsU0FBQTk2QyxFQUFBKzZDLEdBTUEsSUFBQSxJQUxBQyxFQUFBcEssRUFBQUMsTUFBQXpzQixVQUFBcGtCLEVBQUFPLHFCQUFBLFVBQUE1SyxPQUFBaTdDLEVBQUFDLE1BQUF6c0IsVUFBQXBrQixFQUFBTyxxQkFBQSxjQUNBMDZDLEVBQUEsaUJBQUFGLEVBQ0EsU0FBQUcsR0FBQSxPQUFBQSxFQUFBcGdELE9BQUFpZ0QsR0FDQSxTQUFBRyxHQUFBLE9BQUFILEVBQUFsNkMsS0FBQXE2QyxFQUFBcGdELE9BQ0FvaEIsS0FDQXBzQixFQUFBa3JELEVBQUEzcUQsT0FBQSxFQUFBUCxHQUFBLEVBQUFBLElBQ0FtckQsRUFBQUQsRUFBQWxyRCxLQUNBb3NCLEVBQUEvbEIsS0FBQTZrRCxFQUFBbHJELElBRUEsT0FBQW9zQixHQUdBaS9CLFVBQUEsU0FBQUMsR0FDQSxNQUFBLGlCQUFBQSxJQUNBQSxFQUFBeEssRUFBQUMsTUFBQXdILFdBQUErQyxJQUVBbnpDLEdBQUFBLEVBQUEyQixNQUNBM0IsRUFBQTJCLE1BQUF3eEMsR0FDQSxJQUFBaDFDLFNBQUEsVUFBQWcxQyxLQUdBLE1BR0FDLGNBQUEsU0FBQWgvQyxFQUFBaS9DLEVBQUFDLEdBQ0EsSUFBQXR6QyxJQUFBQSxFQUFBQyxVQUNBLE1BQUEsSUFBQWxZLE1BQUEsNE1BQ0EsT0FBQWlZLEVBQUFDLFVBQUEwb0MsRUFBQUMsTUFBQXVDLGlCQUFBLzJDLEdBQUFpL0MsRUFBQUMsSUFHQUMsU0FBQSxTQUFBQyxFQUFBcC9DLEVBQUEvSCxHQUVBLElBQUEwNUMsR0FEQTE1QyxFQUFBQSxPQUNBLFdBQ0FvbkQsRUFBQXBuRCxFQUFBLGVBQUF6QyxLQUFBbWtELDJCQUNBek0sRUFBQWtTLEVBR0EsR0FBQSxpQkFBQUEsR0FBQSxTQUFBN0ssRUFBQUMsTUFBQWlFLGFBQUEyRyxHQUFBLENBQ0EsSUFBQUUsRUFBQUYsRUFDQWxTLEVBQUFvUyxFQUFBOTVDLE9BQ0EsSUFBQSxJQUFBL1IsRUFBQTRyRCxFQUFBcnJELE9BQUEsRUFBQVAsR0FBQSxFQUFBQSxJQUVBLElBQUEsSUFEQWtyRCxFQUFBcEssRUFBQUMsTUFBQWlLLGNBQUFhLEVBQUFELEVBQUE1ckQsSUFDQXNPLEVBQUE0OEMsRUFBQTNxRCxPQUFBLEVBQUErTixHQUFBLEVBQUFBLElBQ0E0dkMsRUFBQWdOLEVBQUE1OEMsR0FBQXRELE1BQUFrZ0QsRUFBQTU4QyxHQUFBMEQsTUFJQXpGLEVBQUF1MEMsRUFBQUMsTUFBQXVDLGlCQUFBLzJDLEdBQ0EsSUFBQTJELEVBQUFQLEVBQUFVLGNBQUEsUUFDQUgsRUFBQXNCLE1BQUFrVSxRQUFBLE9BQ0F4VixFQUFBNkIsT0FBQTBuQyxFQUNBdnBDLEVBQUEyQixPQUFBLE9BQ0EsSUFBQSxJQUFBN0wsS0FBQXVHLEVBQUEsQ0FFQSxJQUFBMnhCLEVBQUF2dUIsRUFBQVUsY0FBQSxTQUNBNnRCLEVBQUFyNUIsS0FBQSxTQUNBcTVCLEVBQUFsekIsS0FBQWhGLEVBQ0FrNEIsRUFBQWxzQixNQUFBOHVDLEVBQUFDLE1BQUF3SyxjQUFBekssRUFBQUMsTUFBQXVDLGlCQUFBLzJDLEVBQUF2RyxLQUNBa0ssRUFBQVcsWUFBQXF0QixHQUVBeW1CLEVBQUF6RyxFQUFBLFNBQUFsNEMsRUFBQWdNLEdBQ0EsSUFBQWtzQixFQUFBdnVCLEVBQUFVLGNBQUEsU0FDQTZ0QixFQUFBcjVCLEtBQUEsU0FDQXE1QixFQUFBbHpCLEtBQUFoRixFQUNBazRCLEVBQUFsc0IsTUFBQUEsRUFDQTlCLEVBQUFXLFlBQUFxdEIsS0FFQXZ1QixFQUFBaUIsS0FBQUMsWUFBQVgsR0FDQTFMLEVBQUEsVUFBQUEsRUFBQSxVQUFBMEwsR0FBQUEsRUFBQStCLFNBQ0F4RyxXQUFBLFdBQUF5RSxFQUFBRixXQUFBQyxZQUFBQyxJQUFBLEtBL2pCQSxHQW9rQkE0d0MsRUFBQXVELGFBQUEsUUFBQXZELEVBQUFDLE9BQ0FELEVBQUF1RCxhQUFBLHFCQUFBdkQsRUFBQUMsTUFBQXVFLGNBQ0F4RSxFQUFBdUQsYUFBQSxtQkFBQXZELEVBQUFDLE1BQUFzRixZQUNBdkYsRUFBQXVELGFBQUEsb0JBQUF2RCxFQUFBQyxNQUFBOEYsYUFDQS9GLEVBQUF1RCxhQUFBLCtCQUFBdkQsRUFBQUMsTUFBQTJGLHdCQUNBNUYsRUFBQXVELGFBQUEscUJBQUF2RCxFQUFBQyxNQUFBb0YsY0FDQXJGLEVBQUF1RCxhQUFBLGlCQUFBdkQsRUFBQUMsTUFBQTRGLFVBQ0E3RixFQUFBdUQsYUFBQSxxQkFBQXZELEVBQUFDLE1BQUErRixjQUNBaEcsRUFBQXVELGFBQUEsd0JBQUF2RCxFQUFBQyxNQUFBeUYsaUJBQ0ExRixFQUFBdUQsYUFBQSxlQUFBdkQsRUFBQUMsTUFBQXAzQixRQUNBbTNCLEVBQUF1RCxhQUFBLG1DQUFBdkQsRUFBQUMsTUFBQW1GLDRCQUNBcEYsRUFBQXVELGFBQUEsc0JBQUF2RCxFQUFBQyxNQUFBaUssZUFDQWxLLEVBQUF1RCxhQUFBLHVCQUFBdkQsRUFBQUMsTUFBQW1HLGdCQUNBcEcsRUFBQXVELGFBQUEsaUJBQUF2RCxFQUFBQyxNQUFBMkssVUFDQTVLLEVBQUF1RCxhQUFBLGtCQUFBdkQsRUFBQUMsTUFBQXNLLFdBQ0F2SyxFQUFBdUQsYUFBQSw2QkFBQXZELEVBQUFDLE1BQUFrSSxzQkFDQW5JLEVBQUF1RCxhQUFBLHNCQUFBdkQsRUFBQUMsTUFBQXdLLGVBQ0F6SyxFQUFBdUQsYUFBQSxjQUFBdkQsRUFBQUMsTUFBQThKLE9BQ0EvSixFQUFBdUQsYUFBQSw4QkFBQXZELEVBQUFDLE1BQUFtSix1QkFDQXBKLEVBQUF1RCxhQUFBLHFCQUFBdkQsRUFBQUMsTUFBQTBJLGNBQ0EzSSxFQUFBdUQsYUFBQSx5QkFBQXZELEVBQUFDLE1BQUF1QyxrQkFDQXhDLEVBQUF1RCxhQUFBLHNCQUFBdkQsRUFBQUMsTUFBQTRELGVBQ0E3RCxFQUFBdUQsYUFBQSx3QkFBQXZELEVBQUFDLE1BQUF3RSxpQkFDQXpFLEVBQUF1RCxhQUFBLHVCQUFBdkQsRUFBQUMsTUFBQXNKLGdCQUNBdkosRUFBQXVELGFBQUEsU0FBQXZELEVBQUFDLE1BQUF1QyxrQkFFQWh0QyxTQUFBaFUsVUFBQSxPQUdBZ1UsU0FBQWhVLFVBQUEsS0FBQSxTQUFBMGdCLEdBQ0EsSUFBQThvQyxFQUFBL3BELEtBQ0EsR0FBQSxJQUFBNEQsVUFBQXBGLE9BQ0EsT0FBQSxXQUNBLE9BQUF1ckQsRUFBQWxtRCxNQUFBb2QsRUFBQXJkLFlBR0EsSUFBQW9tRCxFQUFBL3lDLE1BQUExVyxVQUFBZixNQUFBakIsS0FBQXFGLFVBQUEsR0FDQSxPQUFBLFdBQ0EsSUFBQUQsRUFBQXFtRCxFQUFBeHFELE1BQUEsR0FFQSxPQURBbUUsRUFBQVcsS0FBQVQsTUFBQUYsRUFBQUMsV0FDQW1tRCxFQUFBbG1ELE1BQUFvZCxFQUFBdGQsTUFNQW83QyxFQUFBQyxNQUFBaUwsUUFBQSxJQUFBLFdBS0EsU0FBQTlsQyxFQUFBa0UsRUFBQTZoQyxHQUNBLElBQUFDLEVBQUE5aEMsRUFBQStoQyxHQUVBLEtBREFELEdBQUEsU0FBQUEsR0FBQUUsRUFBQUYsSUFDQSxDQUNBLElBQUFELEVBQ0EsT0FBQXZpRCxFQUNBd2lELEVBQUE5aEMsRUFBQStoQyxHQUFBLEtBQUFFLElBQ0FELEVBQUFGLE1BRUEsT0FBQUUsRUFBQUYsR0FiQSxJQUFBRyxFQUFBLEVBQ0FGLEVBQUEsVUFBQSxJQUFBdHpDLE1BQUF5ekMsVUFDQUYsS0FjQSxPQUNBcG1DLElBQUEsU0FBQW9FLEVBQUFwa0IsR0FDQSxJQUFBdW1ELEVBQUFybUMsRUFBQWtFLEdBQUEsR0FDQSxPQUFBbWlDLElBQUE3aUQsRUFBQUEsRUFBQTZpRCxFQUFBdm1ELElBRUEzQixJQUFBLFNBQUErbEIsRUFBQXBrQixFQUFBZ00sR0FDQUEsSUFBQXRJLEdBRUF3YyxFQUFBa0UsR0FBQSxLQUFBMWdCLElBR0F3YyxFQUFBa0UsR0FBQSxHQUNBcGtCLEdBQUFnTSxJQUVBdzZDLE1BQUEsU0FBQXBpQyxHQUNBLElBQUE4aEMsRUFBQTloQyxFQUFBK2hDLEdBQ0EsUUFBQUQsV0FDQUUsRUFBQUYsR0FDQTloQyxFQUFBK2hDLEdBQUEsTUFDQSxJQUtBTSxRQUFBLFdBQ0EsT0FBQUosSUFBQUYsS0FLQXJMLEVBQUF1RCxhQUFBLGdCQUFBdkQsRUFBQUMsTUFBQWlMLFNBQ0FsTCxFQUFBdUQsYUFBQSxzQkFBQXZELEVBQUFDLE1BQUFpTCxRQUFBUSxPQUVBMUwsRUFBQUMsTUFBQXVJLGdCQUFBLElBQUEsV0FLQSxTQUFBb0QsRUFBQXRpQyxFQUFBNmhDLEdBQ0EsSUFBQVUsRUFBQTdMLEVBQUFDLE1BQUFpTCxRQUFBaG1DLElBQUFvRSxFQUFBd2lDLEdBS0EsT0FKQUQsSUFBQWpqRCxHQUFBdWlELElBQ0FVLEtBQ0E3TCxFQUFBQyxNQUFBaUwsUUFBQTNuRCxJQUFBK2xCLEVBQUF3aUMsRUFBQUQsSUFFQUEsRUFFQSxTQUFBRSxFQUFBemlDLEdBQ0EwMkIsRUFBQUMsTUFBQWlMLFFBQUEzbkQsSUFBQStsQixFQUFBd2lDLEVBQUFsakQsR0FHQSxTQUFBb2pELEVBQUExaUMsR0FFQSxJQUFBempCLEVBQUErbEQsRUFBQXRpQyxHQUFBLEdBQ0EsR0FBQXpqQixFQUFBLENBQ0FBLEVBQUFBLEVBQUFwRixNQUFBLEdBQ0EsSUFBQSxJQUFBdkIsRUFBQSxFQUFBQSxFQUFBMkcsRUFBQXBHLE9BQUFQLElBQ0EyRyxFQUFBM0csR0FBQW9xQixHQUlBMDJCLEVBQUFDLE1BQUFpTCxRQUFBUSxNQUFBcGlDLEdBR0EwMkIsRUFBQUMsTUFBQXVJLGdCQUFBLGtCQUFBbC9CLEdBSUEyaUMsRUFBQTNpQyxFQUFBbEosV0FDQThyQyxFQUFBNWlDLEdBR0EsU0FBQTRpQyxFQUFBQyxHQUVBLElBREEsSUFBQUMsRUFBQUMsRUFBQUYsRUFBQXJsQyxXQUNBc2xDLEVBQUFDLEdBQ0FBLEVBQUFELEVBQUFuMkIsWUFDQSxJQUFBbTJCLEVBQUFoc0MsVUFDQTRyQyxFQUFBSSxHQTFDQSxJQUFBTixFQUFBOUwsRUFBQUMsTUFBQWlMLFFBQUFTLFVBQ0FXLEdBQUE1c0QsR0FBQSxFQUFBNnNELEdBQUEsRUFBQUMsR0FBQSxHQUNBUCxHQUFBdnNELEdBQUEsRUFBQThzRCxHQUFBLEdBNENBLE9BQ0EvRCxtQkFBQSxTQUFBbi9CLEVBQUF4cEIsR0FDQSxHQUFBLG1CQUFBQSxFQUNBLE1BQUEsSUFBQVYsTUFBQSwrQkFDQXdzRCxFQUFBdGlDLEdBQUEsR0FBQS9qQixLQUFBekYsSUFHQTJzRCxzQkFBQSxTQUFBbmpDLEVBQUF4cEIsR0FDQSxJQUFBNHNELEVBQUFkLEVBQUF0aUMsR0FBQSxHQUNBb2pDLElBQ0ExTSxFQUFBQyxNQUFBeUYsZ0JBQUFnSCxFQUFBNXNELEdBQ0EsR0FBQTRzRCxFQUFBanRELFFBQ0Fzc0QsRUFBQXppQyxLQUlBczlCLFVBQUEsU0FBQXQ5QixHQUVBLEdBQUFnakMsRUFBQWhqQyxFQUFBbEosWUFDQTRyQyxFQUFBMWlDLEdBR0EyaUMsRUFBQTNpQyxFQUFBbEosV0FBQSxDQUVBLElBQUF1c0MsS0FDQTNNLEVBQUFDLE1BQUErRixhQUFBMkcsRUFBQXJqQyxFQUFBM1oscUJBQUEsTUFDQSxJQUFBLElBQUF6USxFQUFBLEVBQUFzTyxFQUFBbS9DLEVBQUFsdEQsT0FBQVAsRUFBQXNPLEVBQUF0TyxJQUNBOHNELEVBQUFXLEVBQUF6dEQsSUFHQSxPQUFBb3FCLEdBR0FtOUIsV0FBQSxTQUFBbjlCLEdBQ0EwMkIsRUFBQTRHLFVBQUF0OUIsR0FDQUEsRUFBQXBhLFlBQ0FvYSxFQUFBcGEsV0FBQUMsWUFBQW1hLElBR0FzakMsa0JBQUEsU0FBQXRqQyxHQUlBbTJCLEdBQUEsbUJBQUFBLEVBQUEsV0FDQUEsRUFBQSxXQUFBbjJCLE9BSUEwMkIsRUFBQTRHLFVBQUE1RyxFQUFBQyxNQUFBdUksZ0JBQUE1QixVQUNBNUcsRUFBQXlHLFdBQUF6RyxFQUFBQyxNQUFBdUksZ0JBQUEvQixXQUNBekcsRUFBQXVELGFBQUEsWUFBQXZELEVBQUE0RyxXQUNBNUcsRUFBQXVELGFBQUEsYUFBQXZELEVBQUF5RyxZQUNBekcsRUFBQXVELGFBQUEsd0JBQUF2RCxFQUFBQyxNQUFBdUksaUJBQ0F4SSxFQUFBdUQsYUFBQSwyQ0FBQXZELEVBQUFDLE1BQUF1SSxnQkFBQUMsb0JBQ0F6SSxFQUFBdUQsYUFBQSw4Q0FBQXZELEVBQUFDLE1BQUF1SSxnQkFBQWlFLHVCQUNBLFdBb0JBLFNBQUFJLEVBQUFDLEdBQ0EsSUFBQXR6QyxFQUFBc3pDLEVBQUE3MkMsTUFBQSxrQkFDQSxPQUFBdUQsR0FBQW5YLEVBQUFtWCxFQUFBLEtBQUF1ekMsRUFHQSxTQUFBQyxFQUFBMThDLEVBQUEyOEMsR0FDQUEsSUFBQUEsRUFBQXArQyxHQUNBLElBQUFxK0MsRUFBQUQsRUFBQSxjQUFBQSxFQUFBLGFBQUEvNEMsRUFXQTQ0QyxFQUFBOU0sRUFBQUMsTUFBQXdILFdBQUFuM0MsR0FBQW9HLGNBQUF5eEIsRUFBQThrQixFQUFBMTlDLGNBQUEsT0FDQTBXLEVBQUE0bUMsRUFBQUMsR0FDQW5vQixFQUFBMWUsRUFBQSxHQUlBa25DLEVBQUEsZUFBQWxuQyxFQUFBLEdBQUEzVixFQUFBMlYsRUFBQSxHQUFBLFNBcUJBLElBcEJBLG1CQUFBaW5DLEVBQUEsVUFJQS9rQixFQUFBcDRCLFlBQUFtOUMsRUFBQSxVQUFBQyxLQUVBQyxHQUdBSCxFQUFBbDlDLFlBQUFvNEIsR0FHQUEsRUFBQXpoQixVQUFBeW1DLEVBRUFDLEdBQ0FqbEIsRUFBQWo1QixXQUFBQyxZQUFBZzVCLElBS0F4RCxLQUNBd0QsRUFBQUEsRUFBQXZoQixVQUVBLE9BQUFvNUIsRUFBQUMsTUFBQXpzQixVQUFBMlUsRUFBQXZoQixVQUFBQyxZQUdBLFNBQUF3bUMsRUFBQS84QyxFQUFBMjhDLEdBRUEsR0FBQXhOLEVBQUEsVUFDQSxPQUFBQSxFQUFBLFVBQUFudkMsRUFBQTI4QyxPQUdBLElBQUF0bkMsRUFBQTg1QixFQUFBLE9BQUFudkMsR0FBQTI4QyxHQUtBLEdBQUF0bkMsR0FBQUEsRUFBQSxHQUFBLENBR0EsSUFEQSxJQUFBdEUsRUFBQXNFLEVBQUEsR0FDQXRFLEVBQUFuUyxZQUFBLEtBQUFtUyxFQUFBblMsV0FBQWtSLFVBQ0FpQixFQUFBQSxFQUFBblMsV0FFQW1TLEVBQUFuUyxZQUNBbVMsRUFBQW5TLFdBQUFDLFlBQUFrUyxHQUdBLE9BQUFzRSxFQTNGQSxJQUFBb25DLEdBQUEsRUFBQSxHQUFBLElBQ0F0MkMsR0FBQSxFQUFBLFVBQUEsWUFFQWt4QixHQUFBLEVBQUEscUJBQUEseUJBQ0F0UyxHQUFBLEVBQUEsK0JBQUEsYUFDQWh6QixHQUNBb2xDLE1BQUFoeEIsRUFDQXF4QixNQUFBcnhCLEVBQ0FzeEIsTUFBQXR4QixFQUNBa3hCLElBUEEsRUFBQSxpQkFBQSxvQkFRQUMsR0FBQUQsRUFDQU8sR0FBQVAsRUFDQUgsT0FBQW5TLEVBQ0F3UyxTQUFBeFMsR0FJQSszQixFQUFBcE4sRUFBQUMsTUFBQStFLFdBQUEsRUE4RUFoRixFQUFBQyxNQUFBcU4sa0JBQUEsU0FBQWg5QyxFQUFBMjhDLEdBQ0EsT0FBQXhOLEVBQ0E0TixFQUFBLzhDLEVBQUEyOEMsR0FDQUQsRUFBQTE4QyxFQUFBMjhDLElBR0FqTixFQUFBQyxNQUFBc04sUUFBQSxTQUFBamtDLEVBQUFoWixHQU1BLEdBTEEwdkMsRUFBQUMsTUFBQXNHLGFBQUFqOUIsR0FLQSxRQUZBaFosRUFBQTB2QyxFQUFBQyxNQUFBdUMsaUJBQUFseUMsS0FFQUEsSUFBQTFILEVBT0EsR0FOQSxpQkFBQTBILElBQ0FBLEVBQUFBLEVBQUE0TSxZQUtBdWlDLEVBQ0FBLEVBQUFuMkIsR0FBQSxLQUFBaFosUUFJQSxJQUFBLElBREFrOUMsRUFBQXhOLEVBQUFDLE1BQUFxTixrQkFBQWg5QyxFQUFBZ1osRUFBQTNFLGVBQ0F6bEIsRUFBQSxFQUFBQSxFQUFBc3VELEVBQUEvdEQsT0FBQVAsSUFDQW9xQixFQUFBdlosWUFBQXk5QyxFQUFBdHVELEtBekhBLEdBK0hBOGdELEVBQUF1RCxhQUFBLDBCQUFBdkQsRUFBQUMsTUFBQXFOLG1CQUNBdE4sRUFBQXVELGFBQUEsZ0JBQUF2RCxFQUFBQyxNQUFBc04sU0FFQXZOLEVBQUF5TixZQUFBLFdBR0EsU0FBQUMsSUFDQSxPQUFBLFlBQUEsRUFBQWhzRCxLQUFBRyxVQUFBLEdBQUFxYixTQUFBLElBQUF4YSxVQUFBLEdBRUEsU0FBQWlyRCxJQUNBLE9BQUFELElBQUFBLElBRUEsU0FBQUUsRUFBQUMsRUFBQUMsR0FDQSxHQUFBRCxFQUVBLEdBQUEsR0FBQUEsRUFBQXp0QyxTQUFBLENBQ0EsSUFBQTJ0QyxFQUFBL04sRUFBQXlOLFlBQUFPLGNBQUFILEVBQUFsdkIsV0FDQSxNQUFBb3ZCLEdBQ0FELEVBQUF2b0QsTUFBQWloRCxRQUFBcUgsRUFBQUUsT0FBQUEsU0FDQSxHQUFBLEdBQUFGLEVBQUF6dEMsU0FDQSxJQUFBLElBQUFsaEIsRUFBQSxFQUFBMm5CLEVBQUFnbkMsRUFBQWhuQyxXQUFBclosRUFBQXFaLEVBQUFwbkIsT0FBQVAsRUFBQXNPLEVBQUF0TyxJQUNBMHVELEVBQUEvbUMsRUFBQTNuQixHQUFBNHVELEdBakJBLElBQUFHLEtBcUJBLE9BQ0FDLFFBQUEsU0FBQXB1RCxHQUNBLEdBQUEsbUJBQUFBLEVBQ0EsTUFBQSxJQUFBVixNQUFBLDREQUNBLElBQUEydUQsRUFBQUosSUFFQSxPQURBTSxFQUFBRixHQUFBanVELEVBQ0EsbUJBQUFpdUQsRUFBQSxXQUdBSSxVQUFBLFNBQUFKLEVBQUFLLEdBQ0EsSUFBQXR1RCxFQUFBbXVELEVBQUFGLEdBQ0EsR0FBQWp1RCxJQUFBOEksRUFDQSxNQUFBLElBQUF4SixNQUFBLGtDQUFBMnVELEVBQUEsMkNBQ0EsSUFFQSxPQURBanVELEVBQUFnRixNQUFBLEtBQUFzcEQsUUFDQSxFQUVBLGVBQUFILEVBQUFGLEtBR0FNLCtCQUFBLFNBQUE3SCxFQUFBOEgsR0FDQSxJQUFBTCxLQUNBTCxFQUFBcEgsRUFBQXlILEdBQ0EsSUFBQSxJQUFBL3VELEVBQUEsRUFBQXNPLEVBQUF5Z0QsRUFBQXh1RCxPQUFBUCxFQUFBc08sRUFBQXRPLElBQUEsQ0FDQSxJQUFBb3FCLEVBQUEya0MsRUFBQS91RCxHQUFBc25ELFFBQ0ErSCxHQUFBamxDLEdBQ0FnbEMsR0FDQXRPLEVBQUFDLE1BQUErRixhQUFBdUksRUFBQUQsR0FDQXRPLEVBQUF5TixZQUFBVSxVQUFBRixFQUFBL3VELEdBQUE2dUQsT0FBQVEsR0FDQWpsQyxFQUFBcVYsVUFBQSxHQUNBclYsRUFBQXBhLFlBQ0FvYSxFQUFBcGEsV0FBQUMsWUFBQW1hLEtBSUEwa0MsY0FBQSxTQUFBUSxHQUNBLElBQUF2NEMsRUFBQXU0QyxFQUFBdjRDLE1BQUEsd0JBQ0EsT0FBQUEsRUFBQUEsRUFBQSxHQUFBLE9BM0RBLEdBZ0VBK3BDLEVBQUF1RCxhQUFBLGNBQUF2RCxFQUFBeU4sYUFDQXpOLEVBQUF1RCxhQUFBLHNCQUFBdkQsRUFBQXlOLFlBQUFTLFNBQ0FsTyxFQUFBdUQsYUFBQSx3QkFBQXZELEVBQUF5TixZQUFBVSxXQUNBbk8sRUFBQXVELGFBQUEsNEJBQUF2RCxFQUFBeU4sWUFBQU8sZUFDQWhPLEVBQUF1RCxhQUFBLDZDQUFBdkQsRUFBQXlOLFlBQUFZLGdDQUNBck8sRUFBQXlPLE1BQUEsV0FrQ0EsU0FBQUMsSUFDQSxHQUFBQyxFQU1BLElBQUEsSUFBQUMsRUFIQUMsRUFBQUYsRUFBQUcsRUFBQSxFQUdBQyxFQUFBSixHQUNBLEdBQUFDLEVBQUFJLEVBQUFELEtBQUEsQ0FDQSxHQUFBQSxFQUFBRixFQUFBLENBQ0EsS0FBQUMsR0FBQSxJQUFBLENBQ0FDLEVBQUFKLEVBQ0EzTyxFQUFBQyxNQUFBaUksV0FBQTlvRCxNQUFBLHlDQUFBMHZELEVBQUEsa0JBQ0EsTUFFQUQsRUFBQUYsRUFFQSxJQUNBQyxJQUNBLE1BQUFwc0MsR0FDQXc5QixFQUFBQyxNQUFBaUksV0FBQTFsQyxLQU9BLFNBQUF5c0MsSUFDQVAsSUFHQUssRUFBQUosRUFBQUssRUFBQXZ2RCxPQUFBLEVBR0EsU0FBQXl2RCxJQUNBbFAsRUFBQXlPLE1BQUEsVUFBQVEsR0FwRUEsSUFDQUQsS0FDQUwsRUFBQSxFQUNBUSxFQUFBLEVBQ0FKLEVBQUEsRUFnR0EsT0E1QkFLLFVBbEVBbDdDLEVBQUEsaUJBR0EsU0FBQXBVLEdBQ0EsSUFBQXFvQyxFQUFBdDVCLEVBQUFVLGNBQUEsT0FFQSxPQURBLElBQUE4L0MsaUJBQUF2dkQsR0FBQXd2RCxRQUFBbm5CLEdBQUFuTixZQUFBLElBQ0EsV0FBQW1OLEVBQUFtaEIsVUFBQS9oQixPQUFBLFFBSEEsQ0FJQTBuQixHQUNBcGdELEdBQUEsdUJBQUFBLEVBQUFVLGNBQUEsVUFHQSxTQUFBelAsR0FDQSxJQUFBZ1AsRUFBQUQsRUFBQVUsY0FBQSxVQUNBVCxFQUFBdUMsbUJBQUEsV0FDQXZDLEVBQUF1QyxtQkFBQSxLQUNBeEMsRUFBQXdILGdCQUFBbEgsWUFBQUwsR0FDQUEsRUFBQSxLQUNBaFAsS0FFQStPLEVBQUF3SCxnQkFBQXRHLFlBQUFqQixJQUdBLFNBQUFoUCxHQUNBNkssV0FBQTdLLEVBQUEsSUE2Q0Frc0IsU0FBQSxTQUFBNEQsR0FNQSxPQUxBKytCLEdBQ0FPLElBR0FGLEVBQUFMLEtBQUEvK0IsRUFDQXUvQixLQUdBSSxPQUFBLFNBQUEzbUMsR0FDQSxJQUFBL2UsRUFBQStlLEdBQUF1bUMsRUFBQVIsR0FDQTlrRCxHQUFBa2xELEdBQUFsbEQsRUFBQThrRCxJQUNBSyxFQUFBbmxELEdBQUEsT0FLQTJsRCxnQkFBQSxXQUNBLElBQUEvdkQsRUFBQWt2RCxFQUFBSSxFQUVBLE9BREFBLEVBQUFKLEVBQUFLLEVBQUF2dkQsT0FBQSxFQUNBQSxHQUdBZ3dELFNBQUFmLEdBbEdBLEdBd0dBMU8sRUFBQXVELGFBQUEsUUFBQXZELEVBQUF5TyxPQUNBek8sRUFBQXVELGFBQUEsaUJBQUF2RCxFQUFBeU8sTUFBQXppQyxVQUVBZzBCLEVBQUF1RCxhQUFBLGlCQUFBdkQsRUFBQXlPLE1BQUFnQixVQUNBelAsRUFBQTBQLFdBQ0E1UCxTQUFBLFNBQUFodkMsRUFBQWxFLEdBS0FrRSxFQUFBLG1CQUFBbEUsRUFJQSxJQUFBK2lELEVBQUEsS0FDQSxPQUFBM1AsRUFBQTRQLHFCQUNBQyxLQUFBLytDLEVBQ0E3RCxNQUFBLFNBQUFpRSxHQUNBckUsYUFBQThpRCxHQUNBQSxFQUFBM1AsRUFBQUMsTUFBQXQxQyxXQUFBLFdBQ0FtRyxFQUFBSSxJQUNBdEUsT0FLQWtqRCxVQUFBLFNBQUFoL0MsRUFBQXBOLEdBQ0EsSUFBQWtKLEVBQUFtRSxFQUFBZy9DLEVBRUEsaUJBQUFyc0QsRUFDQWtKLEVBQUFsSixHQUVBa0osRUFBQWxKLEVBQUEsUUFDQXFOLEVBQUFyTixFQUFBLFFBSUFvTixFQUFBay9DLGVBQUEsRUFFQUQsRUFBQSx5QkFBQWgvQyxFQUFBbXZDLEVBQUFKLEVBQ0FodkMsRUFBQW0vQyxNQUFBLFNBQUFud0QsR0FDQSxPQUFBaXdELEVBQUFqd0QsRUFBQThNLE1BSUFraEIsU0FBQSxTQUFBaGQsRUFBQXBOLEdBQ0EsSUFBQSxJQUFBQSxFQUNBLE1BQUEsSUFBQXRFLE1BQUEseUhBR0EwUixFQUFBay9DLGdCQUNBbC9DLEVBQUFrL0MsZUFBQSxFQUNBbC9DLEVBQUFtL0MsTUFBQSxTQUFBbndELEdBQ0EsSUFBQThvQixFQUNBc25DLEdBQUEsRUFDQSxPQUFBLFdBQ0EsSUFBQUEsRUFBQSxDQUNBbFEsRUFBQXlPLE1BQUFjLE9BQUEzbUMsR0FDQUEsRUFBQW8zQixFQUFBeU8sTUFBQXppQyxTQUFBbHNCLEdBRUEsSUFDQW93RCxHQUFBLEVBQ0FwL0MsRUFBQSxrQkFBQWxJLEVBQUEsU0FDQSxRQUNBc25ELEdBQUEsU0FRQTNyQixPQUFBLFNBQUF6ekIsRUFBQXEvQyxHQUNBci9DLEVBQUEsaUJBQUEsVUFBQXEvQyxFQUNBLEtBQ0F2USxJQUlBLElBQUFDLEdBQUFqM0MsVUFBQSxFQUFBd25ELFFBQUEsRUFBQUMsT0FBQSxFQUFBaHlDLE9BQUEsR0F1Q0EyaEMsRUFBQXVELGFBQUEsWUFBQXZELEVBQUEwUCxXQUVBMVAsRUFBQXNRLGFBQUEsU0FBQXgvQyxFQUFBaFIsRUFBQXl3RCxHQUNBdHZELEtBQUFvZ0QsUUFBQXZ3QyxFQUNBN1AsS0FBQW5CLFNBQUFBLEVBQ0FtQixLQUFBc3ZELGdCQUFBQSxFQUNBdHZELEtBQUE4L0MsWUFBQSxFQUNBZixFQUFBeUQsZUFBQXhpRCxLQUFBLFVBQUFBLEtBQUF5L0MsVUFFQVYsRUFBQXNRLGFBQUE5dUQsVUFBQWsvQyxRQUFBLFdBQ0F6L0MsS0FBQTgvQyxZQUFBLEVBQ0E5L0MsS0FBQXN2RCxtQkFHQXZRLEVBQUFZLGFBQUEsV0FDQVosRUFBQUMsTUFBQW9HLHVCQUFBcGxELEtBQUF1dkQsR0FDQUEsRUFBQS8zQyxLQUFBeFgsT0FHQSxJQUFBbS9DLEVBQUEsU0FhQW9RLEdBQ0EvM0MsS0FBQSxTQUFBZzRDLEdBQ0FBLEVBQUFDLGdCQUFBQyxXQUNBRixFQUFBRyxlQUFBLEdBR0FDLFVBQUEsU0FBQS93RCxFQUFBZ3hELEVBQUF6ckQsR0FDQSxJQUFBcUYsRUFBQXpKLEtBRUFvRSxFQUFBQSxHQUFBKzZDLEVBQ0EsSUFBQTJRLEVBQUFELEVBQUFoeEQsRUFBQTBZLEtBQUFzNEMsR0FBQWh4RCxFQUVBd3dELEVBQUEsSUFBQXRRLEVBQUFzUSxhQUFBNWxELEVBQUFxbUQsRUFBQSxXQUNBL1EsRUFBQUMsTUFBQXlGLGdCQUFBaDdDLEVBQUFnbUQsZUFBQXJyRCxHQUFBaXJELEdBQ0E1bEQsRUFBQXNtRCx5QkFDQXRtRCxFQUFBc21ELHdCQUFBM3JELEtBVUEsT0FQQXFGLEVBQUF1bUQsdUJBQ0F2bUQsRUFBQXVtRCxzQkFBQTVyRCxHQUVBcUYsRUFBQWdtRCxlQUFBcnJELEtBQ0FxRixFQUFBZ21ELGVBQUFyckQsT0FDQXFGLEVBQUFnbUQsZUFBQXJyRCxHQUFBRSxLQUFBK3FELEdBRUFBLEdBR0FZLGtCQUFBLFNBQUFDLEVBQUE5ckQsR0FLQSxJQUpBQSxFQUFBQSxHQUFBKzZDLEtBQ0FBLEdBQ0FuL0MsS0FBQW13RCxnQkFFQW53RCxLQUFBb3dELHlCQUFBaHNELEdBQUEsQ0FDQSxJQUFBaXNELEVBQUFqc0QsSUFBQSs2QyxHQUFBbi9DLEtBQUFzd0Qsc0JBQUF0d0QsS0FBQXl2RCxlQUFBcnJELEdBQUE1RSxNQUFBLEdBQ0EsSUFDQXUvQyxFQUFBd1Isb0JBQUFDLFFBQ0EsSUFBQSxJQUFBbkIsRUFBQXB4RCxFQUFBLEVBQUFveEQsRUFBQWdCLEVBQUFweUQsS0FBQUEsRUFHQW94RCxFQUFBdlAsWUFDQXVQLEVBQUF4d0QsU0FBQXF4RCxHQUVBLFFBQ0FuUixFQUFBd1Isb0JBQUFseEQsU0FLQW94RCxXQUFBLFdBQ0EsT0FBQXp3RCxLQUFBMnZELGdCQUdBZSxXQUFBLFNBQUFDLEdBQ0EsT0FBQTN3RCxLQUFBeXdELGVBQUFFLEdBR0FSLGNBQUEsYUFDQW53RCxLQUFBMnZELGdCQUdBWCxNQUFBLFNBQUFGLEdBQ0EsSUFDQThCLEVBQUFDLEVBQUFDLEVBQUFDLEVBREF0bkQsRUFBQXpKLEtBQUFneEQsRUFBQWpTLEVBQUFrSixhQUFBeCtDLEdBR0FBLEVBQUE0MUMseUJBQ0E1MUMsRUFBQTQxQyx1QkFBQTUxQyxFQUFBLGtCQUNBQSxFQUFBLGtCQUFBeTFDLEdBR0EsSUFBQTNNLEVBQUF1YyxFQUFBLFdBQ0FybEQsRUFBQTYyQyx3QkFBQSxFQUlBMFEsR0FBQUQsSUFBQXRuRCxJQUNBc25ELEVBQUF0bkQsRUFBQXduRCxlQUFBeG5ELEVBQUF3bkQsaUJBQUF4bkQsS0FFQSxJQUFBeW5ELEVBQUFMLEdBQUFwbkQsRUFBQTBuRCxZQUFBTCxFQUFBQyxHQUVBRixFQUFBRCxHQUFBLEVBRUFNLEdBQ0F6bkQsRUFBQTQxQyx1QkFBQXlSLEVBQUFDLEtBSUF0bkQsRUFBQTYxQyxhQUFBLFNBQUFydkMsR0FDQXhHLEVBQUE2bUQscUJBQUE3bUQsRUFBQWdtRCxlQUFBdFEsR0FBQTMvQyxNQUFBLEdBQ0FpSyxFQUFBNjJDLHVCQUFBc1EsR0FBQSxFQUNBRyxFQUFBOWdELEVBQ0FzaUMsS0FFQTlvQyxFQUFBMjFDLG1CQUFBLFNBQUFudkMsR0FDQTJnRCxJQUNBRSxFQUFBN2dELEVBQ0F4RyxFQUFBNDFDLHVCQUFBcHZDLEVBakNBLGtCQW9DQXhHLEVBQUE4MkMsb0NBQUEsV0FDQTkyQyxFQUFBMG5ELFlBQUFMLEVBQUFybkQsRUFBQXkrQyxNQUFBLE1BQ0EySSxHQUFBLEtBS0FULHlCQUFBLFNBQUFoc0QsR0FDQSxPQUFBcEUsS0FBQXl2RCxlQUFBcnJELElBQUFwRSxLQUFBeXZELGVBQUFyckQsR0FBQTVGLFFBR0E0eUQsc0JBQUEsU0FBQWh0RCxHQUNBLEdBQUFBLEVBQ0EsT0FBQXBFLEtBQUF5dkQsZUFBQXJyRCxJQUFBcEUsS0FBQXl2RCxlQUFBcnJELEdBQUE1RixRQUFBLEVBRUEsSUFBQTRULEVBQUEsRUFLQSxPQUpBMnNDLEVBQUFDLE1BQUE0RCxjQUFBNWlELEtBQUF5dkQsZUFBQSxTQUFBNEIsRUFBQUMsR0FDQSxVQUFBRCxJQUNBai9DLEdBQUFrL0MsRUFBQTl5RCxVQUVBNFQsR0FJQSsrQyxZQUFBLFNBQUFJLEVBQUFDLEdBQ0EsT0FBQXh4RCxLQUFBLG1CQUFBQSxLQUFBLGlCQUFBdXhELEVBQUFDLElBR0E1cEMsT0E1S0EsU0FBQTZwQyxHQUNBLElBQUE1aEQsRUFBQTdQLEtBU0EsT0FSQXl4RCxHQUNBMVMsRUFBQUMsTUFBQTRELGNBQUE2TyxFQUFBLFNBQUF4dEQsRUFBQWdNLEdBQ0EsSUFBQXloRCxFQUFBM1MsRUFBQTBQLFVBQUF4cUQsR0FDQSxtQkFBQXl0RCxJQUNBN2hELEVBQUE2aEQsRUFBQTdoRCxFQUFBSSxJQUFBSixLQUlBQSxJQXFLQWt2QyxFQUFBeUQsZUFBQStNLEVBQUEsWUFBQUEsRUFBQUssV0FDQTdRLEVBQUF5RCxlQUFBK00sRUFBQSxTQUFBQSxFQUFBM25DLFFBQ0FtM0IsRUFBQXlELGVBQUErTSxFQUFBLHdCQUFBQSxFQUFBNkIsdUJBS0FyUyxFQUFBQyxNQUFBeUUsaUJBQ0ExRSxFQUFBQyxNQUFBNkQsZUFBQTBNLEVBQUFoN0MsU0FBQWhVLFdBR0F3K0MsRUFBQVksYUFBQSxHQUFBNFAsRUFHQXhRLEVBQUE0UyxlQUFBLFNBQUFuQyxHQUNBLE9BQUEsTUFBQUEsR0FBQSxtQkFBQUEsRUFBQUksV0FBQSxtQkFBQUosRUFBQSxtQkFHQXpRLEVBQUF1RCxhQUFBLGVBQUF2RCxFQUFBWSxjQUNBWixFQUFBdUQsYUFBQSxpQkFBQXZELEVBQUE0UyxnQkFFQTVTLEVBQUEyQyxnQkFBQTNDLEVBQUF3UixvQkFBQSxXQVdBLFNBQUFxQixJQUNBLFFBQUFDLEVBR0EsU0FBQXJCLEVBQUEvdEQsR0FDQXF2RCxFQUFBeHRELEtBQUF5dEQsR0FDQUEsRUFBQXR2RCxFQUdBLFNBQUFwRCxJQUNBMHlELEVBQUFELEVBQUFoNUIsTUFwQkEsSUFDQWk1QixFQURBRCxLQUVBRCxFQUFBLEVBcUJBLE9BQ0FyQixNQUFBQSxFQUVBbnhELElBQUFBLEVBRUEyeUQsbUJBQUEsU0FBQXJTLEdBQ0EsR0FBQW9TLEVBQUEsQ0FDQSxJQUFBaFQsRUFBQTRTLGVBQUFoUyxHQUNBLE1BQUEsSUFBQXhoRCxNQUFBLG9EQUNBNHpELEVBQUFsekQsU0FBQU4sS0FBQXd6RCxFQUFBbEMsZUFBQWxRLEVBQUFBLEVBQUFzUyxNQUFBdFMsRUFBQXNTLElBQUFMLFFBSUFNLE9BQUEsU0FBQXJ6RCxFQUFBZ3hELEVBQUFzQyxHQUNBLElBRUEsT0FEQTNCLElBQ0EzeEQsRUFBQWdGLE1BQUFnc0QsRUFBQXNDLE9BQ0EsUUFDQTl5RCxNQUlBc2lELHFCQUFBLFdBQ0EsR0FBQW9RLEVBQ0EsT0FBQUEsRUFBQTlvQyxTQUFBMDRCLHdCQUdBeVEsVUFBQSxXQUNBLEdBQUFMLEVBQ0EsT0FBQUEsRUFBQUssWUFyREEsR0EwREFyVCxFQUFBdUQsYUFBQSxrQkFBQXZELEVBQUEyQyxpQkFDQTNDLEVBQUF1RCxhQUFBLHVDQUFBdkQsRUFBQTJDLGdCQUFBQyxzQkFDQTVDLEVBQUF1RCxhQUFBLDRCQUFBdkQsRUFBQTJDLGdCQUFBMFEsV0FFQXJULEVBQUF1RCxhQUFBLHFCQUFBdkQsRUFBQXNULG1CQUFBdFQsRUFBQXdSLG9CQUFBMkIsUUFDQSxJQUFBSSxFQUFBdlQsRUFBQUMsTUFBQWdLLHFCQUFBLGdCQUVBakssRUFBQXdULFdBQUEsU0FBQUMsR0FDQSxTQUFBRCxJQUNBLE9BQUEzdUQsVUFBQXBGLE9BQUEsR0FJQSt6RCxFQUFBcEIsWUFBQW9CLEVBQUFELEdBQUExdUQsVUFBQSxNQUNBMnVELEVBQUFFLGtCQUNBRixFQUFBRCxHQUFBMXVELFVBQUEsR0FDQTJ1RCxFQUFBRyxtQkFFQTF5RCxPQUlBKytDLEVBQUF3UixvQkFBQXlCLG1CQUFBTyxHQUNBQSxFQUFBRCxJQW9CQSxPQWhCQUMsRUFBQUQsR0FBQUUsRUFHQXpULEVBQUFDLE1BQUF5RSxpQkFFQTFFLEVBQUFDLE1BQUFwM0IsT0FBQTJxQyxFQUFBeFQsRUFBQVksYUFBQSxJQUVBWixFQUFBWSxhQUFBLEdBQUFub0MsS0FBQSs2QyxHQUdBeFQsRUFBQUMsTUFBQW9HLHVCQUFBbU4sRUFBQUksR0FFQTVULEVBQUF0OEMsUUFBQSxjQUNBczhDLEVBQUEwUCxVQUFBLFNBQUE4RCxHQUFBLEdBR0FBLEdBSUEsSUFBQUksR0FDQUMsaUJBQUFqVSxFQUNBdUosS0FBQSxXQUFBLE9BQUFsb0QsS0FBQXN5RCxJQUNBSSxnQkFBQSxXQUFBMXlELEtBQUEsa0JBQUFBLEtBQUFzeUQsS0FDQUcsZ0JBQUEsV0FBQXp5RCxLQUFBLGtCQUFBQSxLQUFBc3lELEdBQUEsa0JBS0F2VCxFQUFBQyxNQUFBeUUsaUJBQ0ExRSxFQUFBQyxNQUFBNkQsZUFBQThQLEVBQUE1VCxFQUFBWSxhQUFBLElBR0EsSUFBQWtULEVBQUE5VCxFQUFBd1QsV0FBQU0sY0FBQSxlQUNBRixFQUFBRSxHQUFBOVQsRUFBQXdULFdBRUF4VCxFQUFBK1QsYUFBQSxTQUFBdEQsRUFBQWp2RCxHQUNBLE9BQUEsT0FBQWl2RCxHQUFBQSxJQUFBN25ELEdBQUE2bkQsRUFBQXFELEtBQUFsckQsSUFDQTZuRCxFQUFBcUQsS0FBQXR5RCxHQUNBdytDLEVBQUErVCxhQUFBdEQsRUFBQXFELEdBQUF0eUQsS0FHQXcrQyxFQUFBa0osYUFBQSxTQUFBdUgsR0FDQSxPQUFBelEsRUFBQStULGFBQUF0RCxFQUFBelEsRUFBQXdULGFBRUF4VCxFQUFBZ1Usc0JBQUEsU0FBQXZELEdBRUEsTUFBQSxtQkFBQUEsR0FBQUEsRUFBQXFELEtBQUE5VCxFQUFBd1QsY0FHQSxtQkFBQS9DLEdBQUFBLEVBQUFxRCxLQUFBOVQsRUFBQTRQLHNCQUFBYSxFQUFBLG1CQU1BelEsRUFBQXVELGFBQUEsYUFBQXZELEVBQUF3VCxZQUNBeFQsRUFBQXVELGFBQUEsZUFBQXZELEVBQUFrSixjQUNBbEosRUFBQXVELGFBQUEsd0JBQUF2RCxFQUFBZ1UsdUJBQ0FoVSxFQUFBdUQsYUFBQSx1QkFBQXZELEVBQUFnVSx1QkFDQWhVLEVBQUF1RCxhQUFBLGdCQUFBcVEsR0FDQTVULEVBQUF5RCxlQUFBbVEsRUFBQSxPQUFBQSxFQUFBekssTUFDQW5KLEVBQUF5RCxlQUFBbVEsRUFBQSxrQkFBQUEsRUFBQUQsaUJBQ0EzVCxFQUFBeUQsZUFBQW1RLEVBQUEsa0JBQUFBLEVBQUFGLGlCQUNBMVQsRUFBQWlVLGdCQUFBLFNBQUFDLEdBR0EsR0FBQSxpQkFGQUEsRUFBQUEsVUFFQSxXQUFBQSxHQUNBLE1BQUEsSUFBQTkwRCxNQUFBLHNHQUVBLElBQUFjLEVBQUE4L0MsRUFBQXdULFdBQUFVLEdBRUEsT0FEQWxVLEVBQUFDLE1BQUFvRyx1QkFBQW5tRCxFQUFBOC9DLEVBQUFpVSxnQkFBQSxJQUNBL3pELEVBQUEyb0IsUUFBQXNyQyxtQkFBQSxLQUdBblUsRUFBQWlVLGdCQUFBLElBQ0FucUMsT0FBQSxTQUFBc3FDLEdBSUEsSUFBQSxJQUhBQyxFQUFBcHpELEtBQUFrb0QsT0FDQW1MLEtBQ0E5TyxFQUFBLG1CQUFBNE8sR0FBQXBVLEVBQUFrSixhQUFBa0wsR0FBQSxTQUFBbGpELEdBQUEsT0FBQUEsSUFBQWtqRCxHQUFBQSxFQUNBbDFELEVBQUEsRUFBQUEsRUFBQW0xRCxFQUFBNTBELE9BQUFQLElBQUEsQ0FDQSxJQUFBZ1MsRUFBQW1qRCxFQUFBbjFELEdBQ0FzbUQsRUFBQXQwQyxLQUNBLElBQUFvakQsRUFBQTcwRCxRQUNBd0IsS0FBQXl5RCxrQkFFQVksRUFBQS91RCxLQUFBMkwsR0FDQW1qRCxFQUFBdHVELE9BQUE3RyxFQUFBLEdBQ0FBLEtBTUEsT0FIQW8xRCxFQUFBNzBELFFBQ0F3QixLQUFBMHlELGtCQUVBVyxHQUdBQyxVQUFBLFNBQUFDLEdBRUEsR0FBQUEsSUFBQTVyRCxFQUFBLENBQ0EsSUFBQXlyRCxFQUFBcHpELEtBQUFrb0QsT0FDQXNMLEVBQUFKLEVBQUE1ekQsTUFBQSxHQUlBLE9BSEFRLEtBQUF5eUQsa0JBQ0FXLEVBQUF0dUQsT0FBQSxFQUFBc3VELEVBQUE1MEQsUUFDQXdCLEtBQUEweUQsa0JBQ0FjLEVBR0EsT0FBQUQsRUFFQXZ6RCxLQUFBLE9BQUEsU0FBQWlRLEdBQ0EsT0FBQTh1QyxFQUFBQyxNQUFBb0YsYUFBQW1QLEVBQUF0akQsSUFBQSxRQUlBd2pELFFBQUEsU0FBQU4sR0FDQSxJQUFBQyxFQUFBcHpELEtBQUFrb0QsT0FDQTNELEVBQUEsbUJBQUE0TyxHQUFBcFUsRUFBQWtKLGFBQUFrTCxHQUFBLFNBQUFsakQsR0FBQSxPQUFBQSxJQUFBa2pELEdBQUFBLEVBQ0FuekQsS0FBQXl5RCxrQkFDQSxJQUFBLElBQUF4MEQsRUFBQW0xRCxFQUFBNTBELE9BQUEsRUFBQVAsR0FBQSxFQUFBQSxJQUVBc21ELEVBREE2TyxFQUFBbjFELE1BRUFtMUQsRUFBQW4xRCxHQUFBLFVBQUEsR0FFQStCLEtBQUEweUQsbUJBR0FnQixXQUFBLFNBQUFILEdBRUEsT0FBQUEsSUFBQTVyRCxFQUNBM0gsS0FBQSxRQUFBLFdBQUEsT0FBQSxJQUdBdXpELEVBRUF2ekQsS0FBQSxRQUFBLFNBQUFpUSxHQUNBLE9BQUE4dUMsRUFBQUMsTUFBQW9GLGFBQUFtUCxFQUFBdGpELElBQUEsUUFJQXpHLFFBQUEsU0FBQTY2QyxHQUNBLElBQUErTyxFQUFBcHpELE9BQ0EsT0FBQSsrQyxFQUFBQyxNQUFBb0YsYUFBQWdQLEVBQUEvTyxJQUdBbCtDLFFBQUEsU0FBQXd0RCxFQUFBQyxHQUNBLElBQUFockQsRUFBQTVJLEtBQUEsUUFBQTJ6RCxHQUNBL3FELEdBQUEsSUFDQTVJLEtBQUF5eUQsa0JBQ0F6eUQsS0FBQWtvRCxPQUFBdC9DLEdBQUFnckQsRUFDQTV6RCxLQUFBMHlELHFCQU9BM1QsRUFBQUMsTUFBQXlFLGlCQUNBMUUsRUFBQUMsTUFBQTZELGVBQUE5RCxFQUFBaVUsZ0JBQUEsR0FBQWpVLEVBQUF3VCxXQUFBLElBTUF4VCxFQUFBQyxNQUFBdUUsY0FBQSxNQUFBLE9BQUEsVUFBQSxRQUFBLE9BQUEsU0FBQSxXQUFBLFNBQUFzUSxHQUNBOVUsRUFBQWlVLGdCQUFBLEdBQUFhLEdBQUEsV0FHQSxJQUFBVCxFQUFBcHpELEtBQUFrb0QsT0FDQWxvRCxLQUFBeXlELGtCQUNBenlELEtBQUE4ekQsMkJBQUFWLEVBQUFTLEVBQUFqd0QsV0FDQSxJQUFBbXdELEVBQUFYLEVBQUFTLEdBQUFod0QsTUFBQXV2RCxFQUFBeHZELFdBR0EsT0FGQTVELEtBQUEweUQsa0JBRUFxQixJQUFBWCxFQUFBcHpELEtBQUErekQsS0FLQWhWLEVBQUFDLE1BQUF1RSxjQUFBLFNBQUEsU0FBQXNRLEdBQ0E5VSxFQUFBaVUsZ0JBQUEsR0FBQWEsR0FBQSxXQUNBLElBQUFULEVBQUFwekQsT0FDQSxPQUFBb3pELEVBQUFTLEdBQUFod0QsTUFBQXV2RCxFQUFBeHZELGNBSUFtN0MsRUFBQXVELGFBQUEsa0JBQUF2RCxFQUFBaVUsaUJBQ0EsSUFBQWdCLEVBQUEsY0FDQWpWLEVBQUEwUCxVQUFBLGtCQUFBLFNBQUE1K0MsRUFBQXBOLEdBMENBLFNBQUF3eEQsSUFFQSxJQUFBQyxFQUFBLENBSUFBLEdBQUEsRUFHQUMsRUFBQXRrRCxFQUFBLGtCQUNBQSxFQUFBLGtCQUFBLFNBQUFxZ0QsRUFBQTlyRCxHQUlBLE9BSEFBLEdBQUFBLElBQUErNkMsS0FDQWlWLEVBRUFELEVBQUF0d0QsTUFBQTdELEtBQUE0RCxZQUtBLElBQUF5d0QsS0FBQXZ3RCxPQUFBK0wsRUFBQXE0QyxZQUNBb00sRUFBQSxLQUNBQyxFQUFBMWtELEVBQUErL0MsVUFBQSxTQUFBNEUsR0FLQSxHQUhBQSxLQUFBMXdELE9BQUEwd0QsT0FHQTNrRCxFQUFBdWdELHlCQUFBNEQsR0FDQSxJQUFBUyxFQUFBQyxFQUFBTCxFQUFBRyxHQUlBSCxFQUFBRyxFQUNBRixFQUFBLEtBQ0FGLEVBQUEsRUFFQUssR0FBQUEsRUFBQWoyRCxRQUNBcVIsRUFBQSxrQkFBQTRrRCxFQUFBVCxNQUtBLFNBQUFVLEVBQUFMLEVBQUFHLEdBU0EsUUFKQUYsR0FBQUYsRUFBQSxLQUNBRSxFQUFBdlYsRUFBQUMsTUFBQTJWLGNBQUFOLEVBQUFHLEVBQUEza0QsRUFBQStrRCxzQkFHQU4sRUFuRkEsR0FQQXprRCxFQUFBK2tELHVCQUNBbnlELEdBQUEsaUJBQUFBLEdBQ0FzOEMsRUFBQUMsTUFBQXAzQixPQUFBL1gsRUFBQStrRCxvQkFBQW55RCxHQUVBb04sRUFBQStrRCxvQkFBQSxRQUFBLEdBR0Eva0QsRUFBQWlrRCwyQkFBQSxDQUdBLElBRUFTLEVBRUFKLEVBSkFELEdBQUEsRUFDQUksRUFBQSxLQUVBRixFQUFBLEVBRUFTLEVBQUFobEQsRUFBQW1nRCxzQkFDQThFLEVBQUFqbEQsRUFBQWtnRCx3QkFHQWxnRCxFQUFBbWdELHNCQUFBLFNBQUE1ckQsR0FDQXl3RCxHQUNBQSxFQUFBdDJELEtBQUFzUixFQUFBekwsR0FDQUEsSUFBQTR2RCxHQUNBQyxLQUlBcGtELEVBQUFrZ0Qsd0JBQUEsU0FBQTNyRCxHQUNBMHdELEdBQ0FBLEVBQUF2MkQsS0FBQXNSLEVBQUF6TCxHQUNBQSxJQUFBNHZELEdBQUFua0QsRUFBQXVnRCx5QkFBQTRELEtBQ0FHLElBQ0F0a0QsRUFBQSxrQkFBQXNrRCxFQUNBQSxFQUFBeHNELEdBRUE0c0QsRUFBQTlVLFVBQ0F5VSxHQUFBLElBeURBcmtELEVBQUFpa0QsMkJBQUEsU0FBQWlCLEVBQUFDLEVBQUFyeEQsR0FXQSxTQUFBc3hELEVBQUF2akQsRUFBQXpCLEVBQUFySCxHQUNBLE9BQUFnTSxFQUFBQSxFQUFBcFcsU0FBQWtULE9BQUFBLEVBQUF6QixNQUFBQSxFQUFBckgsTUFBQUEsR0FUQSxHQUFBc3JELElBQUFFLEVBQUEsQ0FHQSxJQUFBeC9DLEtBQ0FzZ0QsRUFBQUgsRUFBQXYyRCxPQUNBMjJELEVBQUF4eEQsRUFBQW5GLE9BQ0E2OUMsRUFBQSxFQUtBLE9BQUEyWSxHQUNBLElBQUEsT0FDQTNZLEVBQUE2WSxFQUNBLElBQUEsVUFDQSxJQUFBdHNELEVBQUEsRUFBQUEsRUFBQXVzRCxFQUFBdnNELElBQ0Fxc0QsRUFBQSxRQUFBdHhELEVBQUFpRixHQUFBeXpDLEVBQUF6ekMsR0FFQSxNQUVBLElBQUEsTUFDQXl6QyxFQUFBNlksRUFBQSxFQUNBLElBQUEsUUFDQUEsR0FDQUQsRUFBQSxVQUFBRixFQUFBMVksR0FBQUEsR0FFQSxNQUVBLElBQUEsU0FRQSxJQUFBLElBTEErWSxFQUFBMzBELEtBQUFQLElBQUFPLEtBQUFOLElBQUEsRUFBQXdELEVBQUEsR0FBQSxFQUFBdXhELEVBQUF2eEQsRUFBQSxHQUFBQSxFQUFBLElBQUF1eEQsR0FDQUcsRUFBQSxJQUFBRixFQUFBRCxFQUFBejBELEtBQUFQLElBQUFrMUQsR0FBQXp4RCxFQUFBLElBQUEsR0FBQXV4RCxHQUNBSSxFQUFBRixFQUFBRCxFQUFBLEVBQ0FJLEVBQUE5MEQsS0FBQU4sSUFBQWsxRCxFQUFBQyxHQUNBRSxLQUFBQyxLQUNBN3NELEVBQUF3c0QsRUFBQU0sRUFBQSxFQUFBOXNELEVBQUEyc0QsSUFBQTNzRCxJQUFBOHNELEVBQ0E5c0QsRUFBQXlzRCxHQUNBSSxFQUFBbnhELEtBQUEyd0QsRUFBQSxVQUFBRixFQUFBbnNELEdBQUFBLElBQ0FBLEVBQUEwc0QsR0FDQUUsRUFBQWx4RCxLQUFBMndELEVBQUEsUUFBQXR4RCxFQUFBK3hELEdBQUE5c0QsSUFFQW0yQyxFQUFBQyxNQUFBMlcsMkJBQUFGLEVBQUFELEdBQ0EsTUFFQSxRQUNBLE9BRUFsQixFQUFBMS9DLE1BR0EsSUFBQWlyQyxFQUFBZCxFQUFBQyxNQUFBZ0sscUJBQUEsVUFFQWpLLEVBQUE5MUIsU0FBQTgxQixFQUFBNFAsb0JBQUEsU0FBQWlILEVBQUFDLEVBQUFwekQsR0FrQ0EsU0FBQW05QyxJQUNBLEdBQUFoOEMsVUFBQXBGLE9BQUEsRUFBQSxDQUNBLEdBQUEsbUJBQUFzM0QsRUFJQSxNQUFBLElBQUEzM0QsTUFBQSxnSkFFQSxPQUpBMjNELEVBQUFqeUQsTUFBQTZzQixFQUFBbWxDLHdCQUFBanlELFdBSUE1RCxLQU9BLE9BSkErK0MsRUFBQXdSLG9CQUFBeUIsbUJBQUFwUyxJQUNBbHZCLEVBQUFxbEMsU0FBQXJsQyxFQUFBeXZCLFlBQUFQLEVBQUFvVyw0QkFDQXBXLEVBQUFxVyxvQkFFQXZsQyxFQUFBd2xDLFlBdENBLEdBVkEsaUJBQUFOLEVBRUFuekQsRUFBQW16RCxHQUdBbnpELEVBQUFBLE1BQ0FtekQsSUFDQW56RCxFQUFBLEtBQUFtekQsSUFHQSxtQkFBQW56RCxFQUFBLEtBQ0EsTUFBQXRFLE1BQUEsNkRBRUEsSUFBQTIzRCxFQUFBcnpELEVBQUEsTUFDQWl1QixHQUNBd2xDLFlBQUF2dUQsRUFDQXd1RCxTQUFBLEVBQ0FKLFNBQUEsRUFDQUssa0JBQUEsRUFDQUMsOENBQUEsRUFDQXZXLFlBQUEsRUFDQXdXLE1BQUEsRUFDQW5XLFlBQUEsRUFDQW9XLGFBQUE5ekQsRUFBQSxLQUNBb3pELHdCQUFBQSxHQUFBcHpELEVBQUEsTUFDQXcvQyx5QkFBQXgvQyxFQUFBLDBCQUFBQSxFQUFBdy9DLDBCQUFBLEtBQ0F1VSxZQUFBL3pELEVBQUEsYUFBQUEsRUFBQSt6RCxZQUNBQyx3QkFBQSxLQUNBdlcsc0JBQ0F3VyxrQkFBQSxFQUNBQywwQkFBQSxNQWdGQSxPQTFEQS9XLEVBQUFDLEdBQUFudkIsRUFDQWt2QixFQUFBZ1gsaUJBQUEsbUJBQUFkLEVBR0EvVyxFQUFBQyxNQUFBeUUsaUJBRUExRSxFQUFBQyxNQUFBcDNCLE9BQUFnNEIsRUFBQWIsRUFBQVksYUFBQSxJQUVBWixFQUFBWSxhQUFBLEdBQUFub0MsS0FBQW9vQyxHQUdBYixFQUFBQyxNQUFBb0csdUJBQUF4RixFQUFBaVgsR0FFQXAwRCxFQUFBLE1BQ0FpdUIsRUFBQTRsQyxNQUFBLEVBQ0E1bEMsRUFBQXl2QixZQUFBLEVBQ0FwQixFQUFBQyxNQUFBcDNCLE9BQUFnNEIsRUFBQWtYLElBQ0FyMEQsRUFBQSxpQkFDQXM4QyxFQUFBQyxNQUFBcDNCLE9BQUFnNEIsRUFBQW1YLEdBR0FoWSxFQUFBdDhDLFFBQUEsY0FDQXM4QyxFQUFBMFAsVUFBQSxTQUFBN08sR0FBQSxHQUtBQSxFQUFBLFNBQUFuOUMsRUFHQWl1QixFQUFBdXhCLDJCQUlBdnhCLEVBQUEybEMsOENBQUEsRUFNQTNsQyxFQUFBdXhCLHlCQUFBOWlDLFdBQ0F1UixFQUFBdXhCLHlCQUFBLE9BS0F2eEIsRUFBQXl2QixZQUFBMTlDLEVBQUEsaUJBQ0FtOUMsRUFBQXFXLG9CQUtBdmxDLEVBQUF1eEIsMEJBQUFyQyxFQUFBb1gsWUFDQWpZLEVBQUFDLE1BQUF1SSxnQkFBQUMsbUJBQUE5MkIsRUFBQXV4Qix5QkFBQXZ4QixFQUFBK2xDLHdCQUFBLFdBQ0E3VyxFQUFBSCxZQUlBRyxHQWdDQSxJQUFBaVgsR0FDQWpFLGlCQUFBalUsRUFDQWdELHFCQUFBLFdBQ0EsT0FBQTNoRCxLQUFBNi9DLEdBQUE2VyxtQkFFQXpXLHNCQUFBLFNBQUEvM0MsRUFBQTJILEVBQUFvbkQsR0FDQSxHQUFBajNELEtBQUE2L0MsR0FBQXlXLE1BQUF6bUQsSUFBQTdQLEtBQ0EsTUFBQTdCLE1BQUEsb0RBR0E2QixLQUFBNi9DLEdBQUFLLG1CQUFBaDRDLEdBQUErdUQsRUFDQUEsRUFBQUMsT0FBQWwzRCxLQUFBNi9DLEdBQUE2VyxvQkFDQU8sRUFBQUUsU0FBQXRuRCxFQUFBNGdELGNBRUF1Rix3QkFBQSxXQUNBLElBQUE5dEQsRUFBQWt2RCxFQUFBbFgsRUFBQWxnRCxLQUFBNi9DLEdBQUFLLG1CQUNBLElBQUFoNEMsS0FBQWc0QyxFQUNBLEdBQUFBLEVBQUF4M0MsZUFBQVIsS0FDQWt2RCxFQUFBbFgsRUFBQWg0QyxHQUNBbEksS0FBQXEzRCxjQUFBRCxFQUFBaFgsUUFBQUUsd0JBQUE4VyxFQUFBaFgsUUFBQXNRLFdBQUEwRyxFQUFBRCxXQUNBLE9BQUEsR0FLQUcsVUFBQSxXQUVBdDNELEtBQUFxM0QsZUFBQXIzRCxLQUFBNi9DLEdBQUF1VyxrQkFDQXAyRCxLQUFBcTNELGNBQUEsSUFHQUwsU0FBQSxXQUNBLElBQUF0bUMsRUFBQTF3QixLQUFBNi9DLEdBQ0EsT0FBQW52QixFQUFBcWxDLFNBQUFybEMsRUFBQWdtQyxrQkFBQSxHQUVBYSxnQkFBQSxXQUVBdjNELEtBQUFzZ0QsdUJBRUF0Z0QsS0FBQTYvQyxHQUFBa1csVUFDQS8xRCxLQUFBNi9DLEdBQUFzVyxTQUFBLEdBRkFuMkQsS0FBQXczRCx5QkFLQW5YLHNCQUFBLFNBQUF4d0MsR0FDQSxHQUFBQSxFQUFBay9DLGdCQUFBL3VELEtBQUE2L0MsR0FBQW9DLHlCQUFBLENBQ0EsSUFBQXdWLEVBQUE1bkQsRUFBQSsvQyxVQUFBNXZELEtBQUFzM0QsVUFBQXQzRCxLQUFBLFNBQ0EwM0QsRUFBQTduRCxFQUFBKy9DLFVBQUE1dkQsS0FBQXUzRCxnQkFBQXYzRCxNQUNBLE9BQ0FvZ0QsUUFBQXZ3QyxFQUNBNHZDLFFBQUEsV0FDQWdZLEVBQUFoWSxVQUNBaVksRUFBQWpZLFlBSUEsT0FBQTV2QyxFQUFBKy9DLFVBQUE1dkQsS0FBQXczRCxzQkFBQXgzRCxPQUdBdzNELHNCQUFBLFdBQ0EsSUFBQTVYLEVBQUE1L0MsS0FDQTIzRCxFQUFBL1gsRUFBQSxtQkFDQStYLEdBQUFBLEdBQUEsR0FDQS9yRCxhQUFBNUwsS0FBQTYvQyxHQUFBOFcsMkJBQ0EzMkQsS0FBQTYvQyxHQUFBOFcsMEJBQUE1WCxFQUFBQyxNQUFBdDFDLFdBQUEsV0FDQWsyQyxFQUFBcVcsbUJBQUEsSUFDQTBCLElBQ0EvWCxFQUFBeVgsYUFDQXpYLEVBQUF5WCxjQUFBLEdBRUF6WCxFQUFBcVcsbUJBQUEsSUFHQUEsa0JBQUEsU0FBQTJCLEdBQ0EsSUFBQWhZLEVBQUE1L0MsS0FDQTB3QixFQUFBa3ZCLEVBQUFDLEdBQ0EyVyxFQUFBOWxDLEVBQUE4bEMsWUFDQXFCLEdBQUEsRUFFQSxJQUFBbm5DLEVBQUEwbEMsbUJBU0ExbEMsRUFBQW92QixXQUFBLENBSUEsR0FBQXB2QixFQUFBdXhCLDJCQUFBbEQsRUFBQUMsTUFBQTZILDRCQUFBbjJCLEVBQUF1eEIsMkJBQUF1VSxHQUFBQSxLQUVBLElBQUE5bEMsRUFBQTJsQyw2Q0FFQSxZQURBelcsRUFBQUgsZUFLQS91QixFQUFBMmxDLDhDQUFBLEVBR0EzbEMsRUFBQTBsQyxrQkFBQSxFQUNBLElBQ0F5QixFQUFBNzNELEtBQUE4M0Qsa0RBQUFGLEdBQ0EsUUFDQWxuQyxFQUFBMGxDLGtCQUFBLEVBT0EsT0FKQTFsQyxFQUFBZ21DLG1CQUNBOVcsRUFBQUgsVUFHQW9ZLElBRUFDLGtEQUFBLFNBQUFGLEdBS0EsSUFBQWhZLEVBQUE1L0MsS0FDQTB3QixFQUFBa3ZCLEVBQUFDLEdBQ0FnWSxHQUFBLEVBSUF6RixFQUFBMWhDLEVBQUE0bEMsS0FBQTN1RCxHQUFBK29CLEVBQUFnbUMsa0JBQ0FxQixHQUNBblksbUJBQUFBLEVBQ0FJLG1CQUFBdHZCLEVBQUF3dkIsbUJBQ0FILGNBQUFydkIsRUFBQWdtQyxtQkFHQTNYLEVBQUF3UixvQkFBQUMsT0FDQVgsZUFBQWtJLEVBQ0FsNUQsU0FBQTZnRCxFQUNBejJCLFNBQUEyMkIsRUFDQXdTLFVBQUFBLElBR0ExaEMsRUFBQXd2QixzQkFDQXh2QixFQUFBZ21DLGtCQUFBLEVBRUEsSUFBQWxGLEVBQUF4eEQsS0FBQWc0RCxxREFBQXRuQyxFQUFBcW5DLEdBdUJBLE9BckJBblksRUFBQXVSLFlBQUF6Z0MsRUFBQXdsQyxZQUFBMUUsS0FDQTlnQyxFQUFBeXZCLFlBQ0FQLEVBQUEsa0JBQUFsdkIsRUFBQXdsQyxZQUFBLGdCQUdBeGxDLEVBQUF3bEMsWUFBQTFFLEVBQ0E1UixFQUFBcVksYUFBQXpHLEVBRUE5Z0MsRUFBQXl2QixXQUNBUCxFQUFBdVEsZ0JBQ0F5SCxHQUNBaFksRUFBQSxrQkFBQWx2QixFQUFBd2xDLGFBR0EyQixHQUFBLEdBR0F6RixHQUNBeFMsRUFBQSxrQkFBQWx2QixFQUFBd2xDLFlBQUEsU0FHQTJCLEdBRUFHLHFEQUFBLFNBQUF0bkMsRUFBQXFuQyxHQU1BLElBQ0EsSUFBQXhCLEVBQUE3bEMsRUFBQTZsQyxhQUNBLE9BQUE3bEMsRUFBQW1sQyx3QkFBQVUsRUFBQWg0RCxLQUFBbXlCLEVBQUFtbEMseUJBQUFVLElBQ0EsUUFDQXhYLEVBQUF3UixvQkFBQWx4RCxNQUdBMDRELEVBQUFoWSxnQkFBQXJ2QixFQUFBeXZCLFlBQ0FwQixFQUFBQyxNQUFBNEQsY0FBQW1WLEVBQUEvWCxtQkFBQVQsR0FHQTd1QixFQUFBeWxDLFFBQUF6bEMsRUFBQXFsQyxTQUFBLElBR0E3TixLQUFBLFNBQUFnUSxHQUdBLElBQUF4bkMsRUFBQTF3QixLQUFBNi9DLEdBSUEsT0FIQW52QixFQUFBcWxDLFVBQUFtQyxJQUFBeG5DLEVBQUFnbUMsb0JBQUFobUMsRUFBQXl2QixZQUFBbmdELEtBQUFnMkQsNEJBQ0FoMkQsS0FBQWkyRCxvQkFFQXZsQyxFQUFBd2xDLGFBRUFsSCxNQUFBLFNBQUFGLEdBRUEvUCxFQUFBWSxhQUFBLEdBQUFxUCxNQUFBendELEtBQUF5QixLQUFBOHVELEdBQ0E5dUQsS0FBQWl4RCxlQUFBLFdBTUEsT0FMQWp4RCxLQUFBNi9DLEdBQUFzVyxRQUNBbjJELEtBQUFpMkQsb0JBRUFqMkQsS0FBQTYvQyxHQUFBa1csU0FBQSxFQUVBLzFELEtBQUE2L0MsR0FBQXFXLGFBRUFsMkQsS0FBQXEzRCxhQUFBLFNBQUFjLEdBQ0FuNEQsS0FBQW8vQyxtQkFBQXAvQyxLQUFBNi9DLEdBQUFxVyxhQUdBbDJELEtBQUE2L0MsR0FBQWtXLFNBQUEsRUFDQW9DLElBQ0FuNEQsS0FBQTYvQyxHQUFBc1csU0FBQSxHQUtBbjJELEtBQUFzL0MsYUFBQXQvQyxRQUdBeS9DLFFBQUEsV0FDQSxJQUFBL3VCLEVBQUExd0IsS0FBQTYvQyxJQUNBbnZCLEVBQUF5dkIsWUFBQXp2QixFQUFBd3ZCLG9CQUNBbkIsRUFBQUMsTUFBQTRELGNBQUFseUIsRUFBQXd2QixtQkFBQSxTQUFBaDRDLEVBQUFrdkQsR0FDQUEsRUFBQTNYLFNBQ0EyWCxFQUFBM1gsWUFHQS91QixFQUFBdXhCLDBCQUFBdnhCLEVBQUErbEMseUJBQ0ExWCxFQUFBQyxNQUFBdUksZ0JBQUFpRSxzQkFBQTk2QixFQUFBdXhCLHlCQUFBdnhCLEVBQUErbEMseUJBRUEvbEMsRUFBQXd2QixtQkFBQSxLQUNBeHZCLEVBQUFnbUMsa0JBQUEsRUFDQWhtQyxFQUFBb3ZCLFlBQUEsRUFDQXB2QixFQUFBeWxDLFNBQUEsRUFDQXpsQyxFQUFBcWxDLFNBQUEsRUFDQXJsQyxFQUFBeXZCLFlBQUEsRUFDQXp2QixFQUFBdXhCLHlCQUFBLE9BSUE2VSxHQUNBOUcsc0JBQUEsU0FBQTVyRCxHQUVBLElBQUF3N0MsRUFBQTUvQyxLQUNBMHdCLEVBQUFrdkIsRUFBQUMsR0FDQSxJQUFBbnZCLEVBQUFvdkIsWUFBQXB2QixFQUFBeXZCLFlBQUEsVUFBQS83QyxFQUFBLENBRUEsR0FEQXNzQixFQUFBeXZCLFlBQUEsRUFDQXp2QixFQUFBeWxDLFNBQUF2VyxFQUFBb1csMEJBQ0F0bEMsRUFBQXd2QixtQkFBQSxLQUNBeHZCLEVBQUFnbUMsa0JBQUEsRUFDQTlXLEVBQUFxVyxxQkFDQXJXLEVBQUF1USxvQkFFQSxDQUVBLElBQUFpSSxLQUNBclosRUFBQUMsTUFBQTRELGNBQUFseUIsRUFBQXd2QixtQkFBQSxTQUFBaDRDLEVBQUFrdkQsR0FDQWdCLEVBQUFoQixFQUFBRixRQUFBaHZELElBR0E2MkMsRUFBQUMsTUFBQXVFLGFBQUE2VSxFQUFBLFNBQUFsd0QsRUFBQW9uQyxHQUNBLElBQUE4bkIsRUFBQTFtQyxFQUFBd3ZCLG1CQUFBaDRDLEdBQ0FtbkQsRUFBQXpQLEVBQUFTLHNCQUFBK1csRUFBQWhYLFNBQ0FpUCxFQUFBNkgsT0FBQTVuQixFQUNBK2YsRUFBQThILFNBQUFDLEVBQUFELFNBQ0F6bUMsRUFBQXd2QixtQkFBQWg0QyxHQUFBbW5ELElBR0EzK0IsRUFBQW92QixZQUNBRixFQUFBLGtCQUFBbHZCLEVBQUF3bEMsWUFBQSxXQUlBbkcsd0JBQUEsU0FBQTNyRCxHQUNBLElBQUFzc0IsRUFBQTF3QixLQUFBNi9DLEdBQ0FudkIsRUFBQW92QixZQUFBLFVBQUExN0MsR0FBQXBFLEtBQUFvd0QseUJBQUEsWUFDQXJSLEVBQUFDLE1BQUE0RCxjQUFBbHlCLEVBQUF3dkIsbUJBQUEsU0FBQWg0QyxFQUFBa3ZELEdBQ0FBLEVBQUEzWCxVQUNBL3VCLEVBQUF3dkIsbUJBQUFoNEMsSUFDQWs0QyxRQUFBZ1gsRUFBQWhYLFFBQ0E4VyxPQUFBRSxFQUFBRixPQUNBQyxTQUFBQyxFQUFBRCxVQUVBQyxFQUFBM1gsYUFHQS91QixFQUFBeXZCLFlBQUEsRUFDQW5nRCxLQUFBLGtCQUFBMkgsRUFBQSxZQUdBOG9ELFdBQUEsV0FJQSxJQUFBLy9CLEVBQUExd0IsS0FBQTYvQyxHQUlBLE9BSEFudkIsRUFBQXl2QixhQUFBenZCLEVBQUF5bEMsU0FBQW4yRCxLQUFBZzJELDRCQUNBaDJELEtBQUFpMkQsb0JBRUFsWCxFQUFBWSxhQUFBLEdBQUE4USxXQUFBbHlELEtBQUF5QixRQUlBKzJELEdBQ0EvRyxzQkFBQSxTQUFBNXJELEdBRUEsVUFBQUEsR0FBQSxnQkFBQUEsR0FDQXBFLEtBQUFrb0QsU0FPQW5KLEVBQUFDLE1BQUF5RSxpQkFDQTFFLEVBQUFDLE1BQUE2RCxlQUFBZ1UsRUFBQTlYLEVBQUFZLGFBQUEsSUFJQSxJQUFBMFksRUFBQXRaLEVBQUF3VCxXQUFBTSxjQUNBOVQsRUFBQTkxQixTQUFBb3ZDLEdBQUF0WixFQUFBd1QsV0FDQXNFLEVBQUF3QixHQUFBdFosRUFBQTkxQixTQUVBODFCLEVBQUF1WixXQUFBLFNBQUE5SSxHQUNBLE9BQUF6USxFQUFBK1QsYUFBQXRELEVBQUF6USxFQUFBOTFCLFdBR0E4MUIsRUFBQXdaLGVBQUEsU0FBQS9JLEdBQ0EsT0FBQXpRLEVBQUErVCxhQUFBdEQsRUFBQXpRLEVBQUE5MUIsV0FDQXVtQyxFQUFBM1AsSUFBQTJQLEVBQUEzUCxHQUFBeVcsTUFHQXZYLEVBQUF1RCxhQUFBLFdBQUF2RCxFQUFBOTFCLFVBQ0E4MUIsRUFBQXVELGFBQUEsc0JBQUF2RCxFQUFBOTFCLFVBQ0E4MUIsRUFBQXVELGFBQUEsYUFBQXZELEVBQUF1WixZQUNBdlosRUFBQXVELGFBQUEsaUJBQUF2RCxFQUFBd1osZ0JBQ0F4WixFQUFBdUQsYUFBQSxjQUFBdVUsR0FDQTlYLEVBQUF5RCxlQUFBcVUsRUFBQSxPQUFBQSxFQUFBM08sTUFDQW5KLEVBQUF5RCxlQUFBcVUsRUFBQSxVQUFBQSxFQUFBcFgsU0FDQVYsRUFBQXlELGVBQUFxVSxFQUFBLFdBQUFBLEVBQUFHLFVBQ0FqWSxFQUFBeUQsZUFBQXFVLEVBQUEsdUJBQUFBLEVBQUFsVixzQkFFQTVDLEVBQUF5WixhQUFBLFNBQUE1QyxFQUFBQyxHQUNBLE1BQUEsbUJBQUFELEVBQ0E3VyxFQUFBOTFCLFNBQUEyc0MsRUFBQUMsR0FBQVMsTUFBQSxLQUVBVixFQUFBN1csRUFBQUMsTUFBQXAzQixVQUFBZ3VDLEdBQ0FBLEVBQUEsTUFBQSxFQUNBN1csRUFBQTkxQixTQUFBMnNDLEVBQUFDLEtBR0E5VyxFQUFBdUQsYUFBQSxlQUFBdkQsRUFBQXlaLGNBRUEsV0FxQkEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FLQSxHQUpBQSxFQUFBQSxHQUFBLElBQUFDLEtBR0EsaUJBREFILEVBQUFDLEVBQUFELEtBQ0EsT0FBQUEsR0FBQUEsSUFBQS93RCxHQUFBK3dELGFBQUEvaUQsUUFBQStpRCxhQUFBNWhELE1BQUE0aEQsYUFBQXpnRCxRQUFBeWdELGFBQUFobUQsUUFBQWdtRCxhQUFBSSxTQUVBLE9BQUFKLEVBRUEsSUFBQUssRUFBQUwsYUFBQXpoRCxZQXVCQSxPQXRCQTJoRCxFQUFBM2pELEtBQUF5akQsRUFBQUssR0FFQUMsRUFBQU4sRUFBQSxTQUFBTyxHQUNBLElBQUFDLEVBQUFQLEVBQUFELEVBQUFPLElBRUEsY0FBQUMsR0FDQSxJQUFBLFVBQ0EsSUFBQSxTQUNBLElBQUEsU0FDQSxJQUFBLFdBQ0FILEVBQUFFLEdBQUFDLEVBQ0EsTUFDQSxJQUFBLFNBQ0EsSUFBQSxZQUNBLElBQUFDLEVBQUFQLEVBQUEzMEMsSUFBQWkxQyxHQUNBSCxFQUFBRSxHQUFBRSxJQUFBeHhELEVBQ0F3eEQsRUFDQVYsRUFBQVMsRUFBQVAsRUFBQUMsTUFLQUcsRUFHQSxTQUFBQyxFQUFBTixFQUFBVSxHQUNBLEdBQUFWLGFBQUF6aEQsTUFBQSxDQUNBLElBQUEsSUFBQWhaLEVBQUEsRUFBQUEsRUFBQXk2RCxFQUFBbDZELE9BQUFQLElBQ0FtN0QsRUFBQW43RCxHQUdBLG1CQUFBeTZELEVBQUEsUUFDQVUsRUFBQSxlQUVBLElBQUEsSUFBQUMsS0FBQVgsRUFDQVUsRUFBQUMsR0FLQSxTQUFBUixJQUNBNzRELEtBQUFnSSxRQUNBaEksS0FBQStqQixVQXJFQWc3QixFQUFBdWEsS0FBQSxTQUFBWixHQUNBLEdBQUEsR0FBQTkwRCxVQUFBcEYsT0FDQSxNQUFBLElBQUFMLE1BQUEsOERBR0EsT0FBQXM2RCxFQUFBQyxFQUFBLFNBQUFhLEdBRUEsSUFBQSxJQUFBdDdELEVBQUEsRUFBQThnRCxFQUFBa0osYUFBQXNSLElBQUF0N0QsRUFUQSxHQVNBQSxJQUNBczdELEVBQUFBLElBQ0EsT0FBQUEsS0FJQXhhLEVBQUF0L0IsT0FBQSxTQUFBaTVDLEVBQUFqUCxFQUFBQyxHQUNBLElBQUE4UCxFQUFBemEsRUFBQXVhLEtBQUFaLEdBQ0EsT0FBQTNaLEVBQUFDLE1BQUF3SyxjQUFBZ1EsRUFBQS9QLEVBQUFDLElBeURBbVAsRUFBQXQ0RCxXQUNBNEUsWUFBQTB6RCxFQUNBNWpELEtBQUEsU0FBQWhSLEVBQUFnTSxHQUNBLElBQUF3cEQsRUFBQTFhLEVBQUFDLE1BQUFvRixhQUFBcGtELEtBQUFnSSxLQUFBL0QsR0FDQXcxRCxHQUFBLEVBQ0F6NUQsS0FBQStqQixPQUFBMDFDLEdBQUF4cEQsR0FFQWpRLEtBQUFnSSxLQUFBMUQsS0FBQUwsR0FDQWpFLEtBQUErakIsT0FBQXpmLEtBQUEyTCxLQUdBZ1UsSUFBQSxTQUFBaGdCLEdBQ0EsSUFBQXcxRCxFQUFBMWEsRUFBQUMsTUFBQW9GLGFBQUFwa0QsS0FBQWdJLEtBQUEvRCxHQUNBLE9BQUF3MUQsR0FBQSxFQUFBejVELEtBQUErakIsT0FBQTAxQyxHQUFBOXhELElBeEZBLEdBNkZBbzNDLEVBQUF1RCxhQUFBLE9BQUF2RCxFQUFBdWEsTUFDQXZhLEVBQUF1RCxhQUFBLFNBQUF2RCxFQUFBdC9CLFFBT0FzL0IsRUFBQTJhLGtCQUNBQyxVQUFBLFNBQUE3WSxHQUNBLE9BQUEvQixFQUFBQyxNQUFBaUUsYUFBQW5DLElBQ0EsSUFBQSxTQUNBLE9BQUEsSUFBQUEsRUFBQSw4QkFDQS9CLEVBQUFDLE1BQUFpTCxRQUFBaG1DLElBQUE2OEIsRUFBQS9CLEVBQUE4QixnQkFBQXArQyxRQUFBbTNELHVCQUNBN2EsRUFBQUMsTUFBQStFLFdBQUEsRUFDQWpELEVBQUE1a0IsaUJBQUEsVUFBQTRrQixFQUFBNWtCLGlCQUFBLFNBQUFrQixVQUFBMGpCLEVBQUE3d0MsTUFBQTZ3QyxFQUFBL2dDLEtBQ0ErZ0MsRUFBQTd3QyxNQUNBLElBQUEsU0FDQSxPQUFBNndDLEVBQUF2aEIsZUFBQSxFQUFBd2YsRUFBQTJhLGlCQUFBQyxVQUFBN1ksRUFBQXIrQyxRQUFBcStDLEVBQUF2aEIsZ0JBQUE1M0IsRUFDQSxRQUNBLE9BQUFtNUMsRUFBQTd3QyxRQUlBNHBELFdBQUEsU0FBQS9ZLEVBQUE3d0MsRUFBQTZwRCxHQUNBLE9BQUEvYSxFQUFBQyxNQUFBaUUsYUFBQW5DLElBQ0EsSUFBQSxTQUNBLGNBQUE3d0MsR0FDQSxJQUFBLFNBQ0E4dUMsRUFBQUMsTUFBQWlMLFFBQUEzbkQsSUFBQXcrQyxFQUFBL0IsRUFBQThCLGdCQUFBcCtDLFFBQUFtM0Qsc0JBQUFqeUQsR0ExQkEsa0NBMkJBbTVDLFVBQ0FBLEVBQUEsOEJBRUFBLEVBQUE3d0MsTUFBQUEsRUFDQSxNQUNBLFFBRUE4dUMsRUFBQUMsTUFBQWlMLFFBQUEzbkQsSUFBQXcrQyxFQUFBL0IsRUFBQThCLGdCQUFBcCtDLFFBQUFtM0Qsc0JBQUEzcEQsR0FDQTZ3QyxFQUFBLCtCQUFBLEVBR0FBLEVBQUE3d0MsTUFBQSxpQkFBQUEsRUFBQUEsRUFBQSxHQUdBLE1BQ0EsSUFBQSxTQUNBLEtBQUFBLEdBQUEsT0FBQUEsSUFDQUEsRUFBQXRJLEdBRUEsSUFBQSxJQUFBb3lELEVBREFqMUMsR0FBQSxFQUNBN21CLEVBQUEsRUFBQVAsRUFBQW9qRCxFQUFBcitDLFFBQUFqRSxPQUFBUCxFQUFBUCxJQUFBTyxFQUdBLElBRkE4N0QsRUFBQWhiLEVBQUEyYSxpQkFBQUMsVUFBQTdZLEVBQUFyK0MsUUFBQXhFLE1BRUFnUyxHQUFBLElBQUE4cEQsR0FBQTlwRCxJQUFBdEksRUFBQSxDQUNBbWQsRUFBQTdtQixFQUNBLE9BR0E2N0QsR0FBQWgxQyxHQUFBLEdBQUE3VSxJQUFBdEksR0FBQW01QyxFQUFBeDlDLEtBQUEsS0FDQXc5QyxFQUFBdmhCLGNBQUF6YSxHQUVBLE1BQ0EsUUFDQSxPQUFBN1UsR0FBQUEsSUFBQXRJLElBQ0FzSSxFQUFBLElBQ0E2d0MsRUFBQTd3QyxNQUFBQSxLQU9BOHVDLEVBQUF1RCxhQUFBLG1CQUFBdkQsRUFBQTJhLGtCQUNBM2EsRUFBQXVELGFBQUEsNkJBQUF2RCxFQUFBMmEsaUJBQUFDLFdBQ0E1YSxFQUFBdUQsYUFBQSw4QkFBQXZELEVBQUEyYSxpQkFBQUcsWUFDQTlhLEVBQUFvRCxvQkFBQSxXQVFBLFNBQUE2WCxFQUFBQyxHQUNBLEdBQUFsYixFQUFBQyxNQUFBb0YsYUFBQThWLEVBQUFELElBQUEsRUFDQSxPQUFBLEVBQ0EsSUFBQWpsRCxFQUFBaWxELEVBQUFqbEQsTUFBQW1sRCxHQUNBLE9BQUEsT0FBQW5sRCxJQUFBQSxFQUFBLEdBQUEsVUFBQUEsRUFBQSxHQUFBLElBQUFBLEVBQUEsR0FBQWlsRCxHQThCQSxTQUFBRyxFQUFBQyxHQUVBLElBQUFyaUQsRUFBQSttQyxFQUFBQyxNQUFBd0gsV0FBQTZULEdBR0EsTUFBQXJpRCxFQUFBM1csV0FBQSxLQUFBMlcsRUFBQUEsRUFBQXhZLE1BQUEsR0FBQSxJQUdBLElBQUF5RSxFQUFBaEYsS0FBQXE3RCxFQUFBdGlELEVBQUFoRCxNQUFBdWxELEdBQUF4MkMsS0FBQTJmLEVBQUEsRUFFQSxHQUFBNDJCLEVBQUEsQ0FFQUEsRUFBQWgyRCxLQUFBLEtBRUEsSUFBQSxJQUFBazJELEVBQUF2OEQsRUFBQSxFQUFBdThELEVBQUFGLEVBQUFyOEQsS0FBQUEsRUFBQSxDQUNBLElBQUE0VyxFQUFBMmxELEVBQUFuNUQsV0FBQSxHQUVBLEdBQUEsS0FBQXdULEdBQ0EsR0FBQTZ1QixHQUFBLEVBQUEsQ0FDQXprQyxFQUFBcUYsS0FBQUwsR0FBQThmLEVBQUF2bEIsUUFBQXlGLElBQUFBLEVBQUFnTSxNQUFBOFQsRUFBQWhRLEtBQUEsTUFBQTBtRCxRQUFBeDJELEdBQUE4ZixFQUFBaFEsS0FBQSxNQUNBOVAsRUFBQXkvQixFQUFBLEVBQ0EzZixLQUNBLGVBR0EsR0FBQSxLQUFBbFAsR0FDQSxJQUFBNnVCLElBQUF6L0IsR0FBQSxJQUFBOGYsRUFBQXZsQixPQUFBLENBQ0F5RixFQUFBOGYsRUFBQStVLE1BQ0EsZUFHQSxHQUFBLEtBQUFqa0IsR0FBQTVXLEdBQUF1OEQsRUFBQWg4RCxPQUFBLEVBQUEsQ0FFQSxJQUFBd1csRUFBQXNsRCxFQUFBcjhELEVBQUEsR0FBQStXLE1BQUEwbEQsR0FDQTFsRCxJQUFBMmxELEVBQUEzbEQsRUFBQSxPQUdBc2xELEdBREF0aUQsRUFBQUEsRUFBQUYsT0FBQUUsRUFBQXhPLFFBQUFneEQsR0FBQSxJQUNBeGxELE1BQUF1bEQsSUFDQWoyRCxLQUFBLEtBQ0FyRyxHQUFBLEVBRUF1OEQsRUFBQSxVQUdBLEtBQUEzbEQsR0FBQSxNQUFBQSxHQUFBLEtBQUFBLElBQ0E2dUIsRUFDQSxLQUFBN3VCLEdBQUEsTUFBQUEsR0FBQSxLQUFBQSxJQUNBNnVCLEVBRUF6L0IsR0FBQThmLEVBQUF2bEIsUUFBQSxLQUFBcVcsR0FBQSxLQUFBQSxJQUNBMmxELEVBQUFBLEVBQUFoN0QsTUFBQSxHQUFBLElBRUF1a0IsRUFBQXpmLEtBQUFrMkQsSUFHQSxPQUFBdjdELEVBaEdBLElBQUFpN0QsR0FBQSxPQUFBLFFBQUEsT0FBQSxhQUtBQyxFQUFBLHVEQThCQUksRUFBQTVrRCxPQUFBaWxELGdJQUFBLEtBR0FGLEVBQUEsdUJBQ0FDLEdBQUFFLEdBQUEsRUFBQUMsT0FBQSxFQUFBQyxPQUFBLEdBNkRBQyxLQTRDQSxPQUNBNVksNEJBRUE0WSxlQUFBQSxFQUVBWixtQkFBQUEsRUFFQWEsbUJBakRBLFNBQUFDLEVBQUFDLEdBR0EsU0FBQUMsRUFBQW4zRCxFQUFBcVQsR0FDQSxJQUFBK2pELEVBSUEsSUFBQUMsRUFBQSxDQUNBLElBSkEsU0FBQTczRCxHQUNBLE9BQUFBLElBQUFBLEVBQUEsYUFBQTZULEVBQUE3VCxFQUFBLFdBQUE2VCxFQUFBclQsRUFBQW0zRCxJQUdBRyxDQUFBeGMsRUFBQSxrQkFBQTk2QyxJQUNBLE9BRUErMkQsRUFBQS8yRCxLQUFBbzNELEVBQUFyQixFQUFBMWlELEtBR0Fra0QsRUFBQWwzRCxLQUFBLElBQUFMLEVBQUEsa0JBQUFvM0QsRUFBQSxRQUlBSSxJQUNBbmtELEVBQUEscUJBQUFBLEVBQUEsTUFFQW9rRCxFQUFBcDNELEtBQUEsSUFBQUwsRUFBQSxLQUFBcVQsR0FHQSxJQUFBb2tELEtBQ0FGLEtBQ0FDLEdBMUJBTixFQUFBQSxPQTBCQSxlQUNBRyxFQUFBSCxFQUFBLGNBQ0FRLEVBQUEsaUJBQUFULEVBQ0FkLEVBQUFjLEdBQUFBLEVBU0EsT0FQQW5jLEVBQUFDLE1BQUF1RSxhQUFBb1ksRUFBQSxTQUFBQyxHQUNBUixFQUFBUSxFQUFBMzNELEtBQUEyM0QsRUFBQSxRQUFBQSxFQUFBM3JELFNBR0F1ckQsRUFBQWg5RCxRQUNBNDhELEVBQUEsdUJBQUEsSUFBQUksRUFBQXpuRCxLQUFBLEtBQUEsTUFFQTJuRCxFQUFBM25ELEtBQUEsTUFZQThuRCx5QkFBQSxTQUFBRixFQUFBMTNELEdBQ0EsSUFBQSxJQUFBaEcsRUFBQSxFQUFBQSxFQUFBMDlELEVBQUFuOUQsT0FBQVAsSUFDQSxHQUFBMDlELEVBQUExOUQsR0FBQSxLQUFBZ0csRUFDQSxPQUFBLEVBQ0EsT0FBQSxHQVlBNjNELHFCQUFBLFNBQUFDLEVBQUEvYSxFQUFBLzhDLEVBQUFnTSxFQUFBK3JELEdBQ0EsR0FBQUQsR0FBQWhkLEVBQUFrSixhQUFBOFQsSUFJQWhkLEVBQUFnVSxzQkFBQWdKLElBQUFDLEdBQUFELEVBQUE3VCxTQUFBajRDLEdBQ0E4ckQsRUFBQTlyRCxPQUxBLENBQ0EsSUFBQWdzRCxFQUFBamIsRUFBQS84QixJQUFBLHdCQUNBZzRDLEdBQUFBLEVBQUFoNEQsSUFDQWc0RCxFQUFBaDRELEdBQUFnTSxNQTlLQSxHQXNMQTh1QyxFQUFBdUQsYUFBQSxzQkFBQXZELEVBQUFvRCxxQkFDQXBELEVBQUF1RCxhQUFBLCtDQUFBdkQsRUFBQW9ELG9CQUFBQywwQkFDQXJELEVBQUF1RCxhQUFBLHlDQUFBdkQsRUFBQW9ELG9CQUFBaVksb0JBQ0FyYixFQUFBdUQsYUFBQSx5Q0FBQXZELEVBQUFvRCxvQkFBQThZLG9CQVNBbGMsRUFBQXVELGFBQUEsc0NBQUF2RCxFQUFBb0Qsb0JBQUE2WSxnQkFJQWpjLEVBQUF1RCxhQUFBLDBCQUFBdkQsRUFBQW9ELHFCQUNBcEQsRUFBQXVELGFBQUEsMERBQUF2RCxFQUFBb0Qsb0JBQUE4WSxvQkFDQSxXQWtCQSxTQUFBaUIsRUFBQTd6QyxHQUNBLE9BQUEsR0FBQUEsRUFBQWxKLFVBQUFnOUMsRUFBQW50RCxLQUFBb3RELEVBQUEvekMsRUFBQXRJLEtBQUFzSSxFQUFBcVYsV0FHQSxTQUFBMitCLEVBQUFoMEMsR0FDQSxPQUFBLEdBQUFBLEVBQUFsSixVQUFBbTlDLEVBQUF0dEQsS0FBQW90RCxFQUFBL3pDLEVBQUF0SSxLQUFBc0ksRUFBQXFWLFdBR0EsU0FBQTYrQixFQUFBQyxFQUFBQyxHQUlBLElBSEEsSUFBQUMsRUFBQUYsRUFDQTk0QixFQUFBLEVBQ0FqQyxLQUNBaTdCLEVBQUFBLEVBQUExbkMsYUFBQSxDQUNBLEdBQUFxbkMsRUFBQUssSUFFQSxLQURBaDVCLEVBRUEsT0FBQWpDLEVBR0FBLEVBQUFuOUIsS0FBQW80RCxHQUVBUixFQUFBUSxJQUNBaDVCLElBRUEsSUFBQSs0QixFQUNBLE1BQUEsSUFBQXQrRCxNQUFBLDZDQUFBcStELEVBQUE5K0IsV0FDQSxPQUFBLEtBR0EsU0FBQWkvQixFQUFBSCxFQUFBQyxHQUNBLElBQUFHLEVBQUFMLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQUcsRUFDQUEsRUFBQXArRCxPQUFBLEVBQ0FvK0QsRUFBQUEsRUFBQXArRCxPQUFBLEdBQUF3MkIsWUFDQXduQyxFQUFBeG5DLFlBRUEsS0FHQSxTQUFBNm5DLEVBQUF4MEMsR0FHQSxJQUFBeTBDLEVBQUF6MEMsRUFBQXhDLFdBQUFrM0MsRUFBQSxLQUNBLEdBQUFELEVBQ0EsR0FDQSxHQUFBQyxFQUNBQSxFQUFBejRELEtBQUF3NEQsUUFDQSxHQUFBWixFQUFBWSxHQUFBLENBQ0EsSUFBQUUsRUFBQUwsRUFBQUcsR0FBQSxHQUNBRSxFQUNBRixFQUFBRSxFQUVBRCxHQUFBRCxRQUNBVCxFQUFBUyxLQUNBQyxHQUFBRCxVQUVBQSxFQUFBQSxFQUFBOW5DLGFBRUEsT0FBQStuQyxFQWhFQSxJQUFBWCxFQUFBeHVELEdBQUEsc0JBQUFBLEVBQUFrdUIsY0FBQSxRQUFBL2IsS0FFQW84QyxFQUFBQyxFQUFBLHFDQUFBLDhCQUNBRSxFQUFBRixFQUFBLHNCQUFBLGVBQ0FhLEdBQUFDLElBQUEsRUFBQUMsSUFBQSxHQStEQXBlLEVBQUE4QyxpQkFDQVEsbUJBRUF6OEIsV0FBQSxTQUFBeUMsR0FDQSxPQUFBNnpDLEVBQUE3ekMsR0FBQWswQyxFQUFBbDBDLEdBQUFBLEVBQUF6QyxZQUdBbzhCLFVBQUEsU0FBQTM1QixHQUNBLEdBQUE2ekMsRUFBQTd6QyxHQUlBLElBQUEsSUFEQSswQyxFQUFBcmUsRUFBQThDLGdCQUFBajhCLFdBQUF5QyxHQUNBcHFCLEVBQUEsRUFBQXNPLEVBQUE2d0QsRUFBQTUrRCxPQUFBUCxFQUFBc08sRUFBQXRPLElBQ0E4Z0QsRUFBQXlHLFdBQUE0WCxFQUFBbi9ELFNBSkE4Z0QsRUFBQUMsTUFBQXNHLGFBQUFqOUIsSUFRQXk1QixtQkFBQSxTQUFBejVCLEVBQUF6QyxHQUNBLEdBQUFzMkMsRUFBQTd6QyxHQUVBLENBQ0EwMkIsRUFBQThDLGdCQUFBRyxVQUFBMzVCLEdBRUEsSUFBQSxJQURBZzFDLEVBQUFoMUMsRUFBQTJNLFlBQ0EvMkIsRUFBQSxFQUFBc08sRUFBQXFaLEVBQUFwbkIsT0FBQVAsRUFBQXNPLEVBQUF0TyxJQUNBby9ELEVBQUFwdkQsV0FBQVUsYUFBQWlYLEVBQUEzbkIsR0FBQW8vRCxRQUxBdGUsRUFBQUMsTUFBQThDLG1CQUFBejVCLEVBQUF6QyxJQVNBbW5CLFFBQUEsU0FBQXV3QixFQUFBQyxHQUNBckIsRUFBQW9CLEdBT0FBLEVBQUFydkQsV0FBQVUsYUFBQTR1RCxFQUFBRCxFQUFBdG9DLGFBTkFzb0MsRUFBQXozQyxXQUNBeTNDLEVBQUEzdUQsYUFBQTR1RCxFQUFBRCxFQUFBejNDLFlBRUF5M0MsRUFBQXh1RCxZQUFBeXVELElBT0Fsd0IsWUFBQSxTQUFBaXdCLEVBQUFFLEVBQUFDLEdBQ0FBLEVBRUF2QixFQUFBb0IsR0FRQUEsRUFBQXJ2RCxXQUFBVSxhQUFBNnVELEVBQUFDLEVBQUF6b0MsYUFOQXlvQyxFQUFBem9DLFlBQ0Fzb0MsRUFBQTN1RCxhQUFBNnVELEVBQUFDLEVBQUF6b0MsYUFFQXNvQyxFQUFBeHVELFlBQUEwdUQsR0FOQXplLEVBQUE4QyxnQkFBQTlVLFFBQUF1d0IsRUFBQUUsSUFhQTMzQyxXQUFBLFNBQUF3QyxHQUNBLE9BQUE2ekMsRUFBQTd6QyxJQUVBQSxFQUFBMk0sYUFBQXFuQyxFQUFBaDBDLEVBQUEyTSxhQUNBLEtBQ0EzTSxFQUFBMk0sWUFIQTNNLEVBQUF4QyxZQU1BbVAsWUFBQSxTQUFBM00sR0FHQSxPQUZBNnpDLEVBQUE3ekMsS0FDQUEsRUFBQXMwQyxFQUFBdDBDLElBQ0FBLEVBQUEyTSxhQUFBcW5DLEVBQUFoMEMsRUFBQTJNLGFBQ0EsS0FDQTNNLEVBQUEyTSxhQUdBMG9DLGdCQUFBeEIsRUFFQXlCLHdCQUFBLFNBQUF0MUMsR0FDQSxJQUFBdTFDLEdBQUF4QixFQUFBL3pDLEVBQUF0SSxLQUFBc0ksRUFBQXFWLFdBQUExb0IsTUFBQW1uRCxHQUNBLE9BQUF5QixFQUFBQSxFQUFBLEdBQUEsTUFHQUMsb0NBQUEsU0FBQUMsR0FJQSxHQUFBYixFQUFBbGUsRUFBQUMsTUFBQWlFLGFBQUE2YSxJQUFBLENBS0EsSUFBQWhCLEVBQUFnQixFQUFBajRDLFdBQ0EsR0FBQWkzQyxFQUNBLEdBQ0EsR0FBQSxJQUFBQSxFQUFBMzlDLFNBQUEsQ0FDQSxJQUFBNCtDLEVBQUFsQixFQUFBQyxHQUNBLEdBQUFpQixFQUdBLElBQUEsSUFEQUMsRUFBQWxCLEVBQUE5bkMsWUFDQS8yQixFQUFBLEVBQUFBLEVBQUE4L0QsRUFBQXYvRCxPQUFBUCxJQUNBKy9ELEVBQ0FGLEVBQUFudkQsYUFBQW92RCxFQUFBOS9ELEdBQUErL0QsR0FFQUYsRUFBQWh2RCxZQUFBaXZELEVBQUE5L0QsV0FJQTYrRCxFQUFBQSxFQUFBOW5DLGdCQXRMQSxHQTJMQStwQixFQUFBdUQsYUFBQSxrQkFBQXZELEVBQUE4QyxpQkFDQTlDLEVBQUF1RCxhQUFBLGtDQUFBdkQsRUFBQThDLGdCQUFBUSxpQkFDQXRELEVBQUF1RCxhQUFBLDRCQUFBdkQsRUFBQThDLGdCQUFBRyxXQUVBakQsRUFBQXVELGFBQUEsOEJBQUF2RCxFQUFBOEMsZ0JBQUF4VSxhQUVBMFIsRUFBQXVELGFBQUEsMEJBQUF2RCxFQUFBOEMsZ0JBQUE5VSxTQUNBZ1MsRUFBQXVELGFBQUEscUNBQUF2RCxFQUFBOEMsZ0JBQUFDLG9CQUNBLFdBd0RBLFNBQUFtYyxFQUFBQyxFQUFBNXBDLEVBQUE3eEIsR0FDQSxJQUFBMDdELEVBQUFELEdBQUF6N0QsR0FBQUEsRUFBQSxnQkFBQSxJQUNBLE9BQUE2eEIsRUFBQTZwQyxLQUNBN3BDLEVBQUE2cEMsR0FBQUMsRUFBQUYsRUFBQXo3RCxJQUdBLFNBQUEyN0QsRUFBQUYsRUFBQXo3RCxHQUlBLElBQ0E0N0QsRUFBQSx5Q0FEQXRmLEVBQUFvRCxvQkFBQThZLG1CQUFBaUQsRUFBQXo3RCxHQUNBLE1BQ0EsT0FBQSxJQUFBOFIsU0FBQSxXQUFBLFdBQUE4cEQsR0FqRUF0ZixFQUFBdWYsZ0JBQUEsV0FDQXQrRCxLQUFBdStELGlCQUdBeGYsRUFBQUMsTUFBQXAzQixPQUFBbTNCLEVBQUF1ZixnQkFBQS85RCxXQUNBaStELGdCQUFBLFNBQUFuMkMsR0FDQSxPQUFBQSxFQUFBbEosVUFDQSxLQUFBLEVBQ0EsT0FBQSxNQUFBa0osRUFBQTdGLGFBVkEsY0FXQXU4QixFQUFBMGYsV0FBQSx3QkFBQXAyQyxHQUNBLEtBQUEsRUFDQSxPQUFBMDJCLEVBQUE4QyxnQkFBQTZiLGdCQUFBcjFDLEdBQ0EsUUFBQSxPQUFBLElBSUFxMkMsWUFBQSxTQUFBcjJDLEVBQUE2NEIsR0FDQSxJQUFBZ2QsRUFBQWwrRCxLQUFBLGtCQUFBcW9CLEVBQUE2NEIsR0FDQXlkLEVBQUFULEVBQUFsK0QsS0FBQSxvQkFBQWsrRCxFQUFBaGQsRUFBQTc0QixHQUFBLEtBQ0EsT0FBQTAyQixFQUFBMGYsV0FBQUcsNEJBQUFELEVBQUF0MkMsRUFBQTY0QixHQUFBLElBR0EyZCxvQkFBQSxTQUFBeDJDLEVBQUE2NEIsR0FDQSxJQUFBZ2QsRUFBQWwrRCxLQUFBLGtCQUFBcW9CLEVBQUE2NEIsR0FDQXlkLEVBQUFULEVBQUFsK0QsS0FBQSxvQkFBQWsrRCxFQUFBaGQsRUFBQTc0QixHQUFBeTJDLGdCQUFBLElBQUEsS0FDQSxPQUFBL2YsRUFBQTBmLFdBQUFHLDRCQUFBRCxFQUFBdDJDLEVBQUE2NEIsR0FBQSxJQUtBNmQsa0JBQUEsU0FBQTEyQyxFQUFBNjRCLEdBQ0EsT0FBQTc0QixFQUFBbEosVUFDQSxLQUFBLEVBQUEsT0FBQWtKLEVBQUE3RixhQWxDQSxhQW1DQSxLQUFBLEVBQUEsT0FBQXU4QixFQUFBOEMsZ0JBQUE4Yix3QkFBQXQxQyxHQUNBLFFBQUEsT0FBQSxPQU1BMjJDLG9CQUFBLFNBQUFkLEVBQUFoZCxFQUFBNzRCLEVBQUE1bEIsR0FDQSxJQUVBLE9BREF3N0QsRUFBQUMsRUFBQWwrRCxLQUFBdStELGFBQUE5N0QsR0FDQXkrQyxFQUFBNzRCLEdBQ0EsTUFBQTlHLEdBRUEsTUFEQUEsRUFBQWpMLFFBQUEsOENBQUE0bkQsRUFBQSxjQUFBMzhDLEVBQUFqTCxRQUNBaUwsTUFLQXc5QixFQUFBdWYsZ0JBQUEsU0FBQSxJQUFBdmYsRUFBQXVmLGdCQXREQSxHQXdFQXZmLEVBQUF1RCxhQUFBLGtCQUFBdkQsRUFBQXVmLGlCQUNBLFdBdUpBLFNBQUFXLEVBQUFodkQsR0FDQSxPQUFBLFdBQ0EsT0FBQUEsR0FLQSxTQUFBaXZELEVBQUFuZSxHQUNBLE9BQUFBLElBT0EsU0FBQW9lLEVBQUF0Z0UsR0FDQSxPQUFBa2dELEVBQUFDLE1BQUFxRyxVQUFBdEcsRUFBQXdSLG9CQUFBMkIsT0FBQXJ6RCxHQUFBLFNBQUFvUixFQUFBaE0sR0FDQSxPQUFBLFdBQ0EsT0FBQXBGLElBQUFvRixNQU9BLFNBQUFtN0QsRUFBQUMsRUFBQWo3QyxFQUFBaUUsR0FDQSxNQUFBLG1CQUFBZzNDLEVBQ0FGLEVBQUFFLEVBQUE5bkQsS0FBQSxLQUFBNk0sRUFBQWlFLElBRUEwMkIsRUFBQUMsTUFBQXFHLFVBQUFnYSxFQUFBSixHQU1BLFNBQUFLLEVBQUFqM0MsRUFBQWpFLEdBQ0EsT0FBQSs2QyxFQUFBbi9ELEtBQUEsWUFBQXVYLEtBQUF2WCxLQUFBcW9CLEVBQUFqRSxJQUdBLFNBQUFtN0MsRUFBQUMsR0FFQSxJQURBemdCLEVBQUE4QyxnQkFBQVEsZ0JBQUFtZCxHQUVBLE1BQUEsSUFBQXJoRSxNQUFBLGdCQUFBcWhFLEVBQUEsMENBR0EsU0FBQUMsRUFBQXZlLEVBQUF3ZSxFQUFBQyxHQUNBLElBQUFDLEVBQ0FDLEVBQUE5Z0IsRUFBQThDLGdCQUFBaDhCLFdBQUE2NUMsR0FDQUksRUFBQS9nQixFQUFBdWYsZ0JBQUEsU0FDQXlCLEVBQUFELEVBQUEsZUFNQSxHQUFBQyxFQUFBLENBQ0EsS0FBQUgsRUFBQUMsR0FDQUEsRUFBQTlnQixFQUFBOEMsZ0JBQUE3c0IsWUFBQTRxQyxHQUNBRyxFQUFBeGhFLEtBQUF1aEUsRUFBQUYsR0FHQUMsRUFBQTlnQixFQUFBOEMsZ0JBQUFoOEIsV0FBQTY1QyxHQUdBLEtBQUFFLEVBQUFDLEdBRUFBLEVBQUE5Z0IsRUFBQThDLGdCQUFBN3NCLFlBQUE0cUMsR0FDQUksRUFBQTllLEVBQUEwZSxFQUFBRCxHQUlBLFNBQUFLLEVBQUE5ZSxFQUFBK2UsRUFBQUMsR0FDQSxJQUFBQyxHQUFBLEVBTUFDLEVBQUEsSUFBQUgsRUFBQTlnRCxTQUNBaWhELEdBQ0FyaEIsRUFBQThDLGdCQUFBZ2Msb0NBQUFvQyxJQUVBRyxHQUFBRixHQUNBbmhCLEVBQUF1ZixnQkFBQSxTQUFBLGdCQUFBMkIsTUFFQUUsRUFBQUUsRUFBQUosRUFBQSxLQUFBL2UsRUFBQWdmLEdBQUEsdUJBRUFDLElBQUFHLEVBQUF2aEIsRUFBQUMsTUFBQWlFLGFBQUFnZCxLQU9BUixFQUFBdmUsRUFBQStlLEdBQUFHLEdBT0EsU0FBQUcsRUFBQWxCLEdBRUEsSUFBQXBnRSxLQUNBdWhFLEtBQ0FDLEtBMEJBLE9BekJBMWhCLEVBQUFDLE1BQUE0RCxjQUFBeWMsRUFBQSxTQUFBcUIsRUFBQWpnQixHQUNBLElBQUErZixFQUFBL2YsR0FBQSxDQUNBLElBQUFrZ0IsRUFBQTVoQixFQUFBLGtCQUFBMEIsR0FDQWtnQixJQUVBQSxFQUFBLFFBQ0FGLEVBQUFuOEQsS0FBQW04QyxHQUNBMUIsRUFBQUMsTUFBQXVFLGFBQUFvZCxFQUFBLE1BQUEsU0FBQUMsR0FDQSxHQUFBdkIsRUFBQXVCLEdBQUEsQ0FDQSxJQUFBLElBQUE3aEIsRUFBQUMsTUFBQW9GLGFBQUFxYyxFQUFBRyxHQUNBLE1BQUF6aUUsTUFBQSxpRkFBQXNpRSxFQUFBMXNELEtBQUEsT0FFQTJzRCxFQUFBRSxNQUlBSCxFQUFBamlFLFVBR0FTLEVBQUFxRixNQUFBTCxJQUFBdzhDLEVBQUE3ckIsUUFBQStyQyxLQUVBSCxFQUFBL2YsSUFBQSxLQUlBeGhELEVBR0EsU0FBQW9oRSxFQUFBaDRDLEVBQUF3NEMsRUFBQTNmLEVBQUFnZixHQXdEQSxTQUFBbGYsSUFDQSxPQUFBakMsRUFBQUMsTUFBQXFHLFVBQUF5YixFQUFBQSxJQUFBekIsRUFBQUgsR0F2REEsSUFBQTZCLEVBQUFoaUIsRUFBQUMsTUFBQWlMLFFBQUFobUMsSUFBQW9FLEVBQUEyNEMsR0FDQSxJQUFBSCxFQUFBLENBQ0EsR0FBQUUsRUFDQSxNQUFBNWlFLE1BQUEsaUVBRUE0Z0QsRUFBQUMsTUFBQWlMLFFBQUEzbkQsSUFBQStsQixFQUFBMjRDLEdBQUEsSUFNQUQsR0FBQWIsR0FDQW5oQixFQUFBa2lCLDRCQUFBNTRDLEVBQUE2NEIsR0FHQSxJQUFBbWUsRUFDQSxHQUFBd0IsR0FBQSxtQkFBQUEsRUFDQXhCLEVBQUF3QixNQUNBLENBQ0EsSUFBQWYsRUFBQS9nQixFQUFBdWYsZ0JBQUEsU0FDQUksRUFBQW9CLEVBQUEscUJBQUFSLEVBSUF3QixFQUFBL2hCLEVBQUE0UCxvQkFDQSxXQUtBLE9BSkEwUSxFQUFBd0IsRUFBQUEsRUFBQTNmLEVBQUE3NEIsR0FBQXEyQyxFQUFBbmdFLEtBQUF1aEUsRUFBQXozQyxFQUFBNjRCLEtBRUFBLEVBQUFnZ0IsZUFDQWhnQixFQUFBZ2dCLGdCQUNBN0IsR0FFQSxNQUFBcGQseUJBQUE1NUIsSUFHQWczQyxHQUFBeUIsRUFBQTlKLGFBQ0E4SixFQUFBLE1BR0EsSUFBQUssRUFDQSxHQUFBOUIsRUFBQSxDQUlBLElBQUErQixFQUFBTixFQUNBLFNBQUFyZ0IsR0FDQSxPQUFBLFdBQ0EsT0FBQXllLEVBQUE0QixJQUFBcmdCLE1BRUEsU0FBQUEsR0FDQSxPQUFBNGUsRUFBQTVlLElBUUFPLEVBQUEsSUFBQSxTQUFBLzhDLEdBQ0EsT0FBQW83RCxFQUFBcDdELElBQUFpN0QsRUFBQWtDLEVBQUFuOUQsS0FFQSs4QyxFQUFBLElBQUEsU0FBQS84QyxHQUNBLE9BQUFBLEtBQUFvN0QsR0FJQSxJQUFBZ0MsRUFBQWQsRUFBQWxCLEdBR0F0Z0IsRUFBQUMsTUFBQXVFLGFBQUE4ZCxFQUFBLFNBQUFDLEdBR0EsSUFBQUMsRUFBQUQsRUFBQTFzQyxRQUFBLEtBQ0E0c0MsRUFBQUYsRUFBQTFzQyxRQUFBLE9BQ0E2ckIsRUFBQTZnQixFQUFBcjlELElBRUEsSUFBQW9rQixFQUFBbEosVUFDQW9nRCxFQUFBOWUsR0FHQSxJQUVBLG1CQUFBOGdCLEdBQ0F4aUIsRUFBQXdSLG9CQUFBMkIsT0FBQSxXQUNBLElBQUF1UCxFQUFBRixFQUFBbDVDLEVBQUErNEMsRUFBQTNnQixHQUFBTyxFQUFBRSxFQUFBLE1BQUFBLEdBR0EsR0FBQXVnQixHQUFBQSxFQUFBLDJCQUFBLENBQ0EsR0FBQU4sSUFBQXg1RCxFQUNBLE1BQUEsSUFBQXhKLE1BQUEsc0JBQUFnakUsRUFBQSxRQUFBMWdCLEVBQUEsZ0lBQ0EwZ0IsRUFBQTFnQixLQU1BLG1CQUFBK2dCLEdBQ0F6aUIsRUFBQTRQLG9CQUNBLFdBQ0E2UyxFQUFBbjVDLEVBQUErNEMsRUFBQTNnQixHQUFBTyxFQUFBRSxFQUFBLE1BQUFBLElBRUEsTUFDQWUseUJBQUE1NUIsSUFHQSxNQUFBOUcsR0FFQSxNQURBQSxFQUFBakwsUUFBQSw4QkFBQW1xQyxFQUFBLEtBQUE0ZSxFQUFBNWUsR0FBQSxlQUFBbC9CLEVBQUFqTCxRQUNBaUwsS0FLQSxPQUNBNCtDLHNCQUFBZ0IsSUFBQXg1RCxHQWVBLFNBQUErNUQsRUFBQUMsR0FDQSxPQUFBQSxHQUFBQSxhQUFBNWlCLEVBQUFtQyxlQUNBeWdCLEVBQ0EsSUFBQTVpQixFQUFBbUMsZUFBQXlnQixHQWphQTVpQixFQUFBOEIsbUJBR0EsSUFBQXlmLEdBTUF6eUQsUUFBQSxFQUNBK3pELFVBQUEsRUFDQUMsVUFBQSxHQUlBOWlCLEVBQUEsa0JBQUEsU0FBQTBCLEdBQ0EsT0FBQTFCLEVBQUE4QixnQkFBQUosSUFLQTFCLEVBQUFtQyxlQUFBLFNBQUE0Z0IsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQXgvRCxHQUtBLFNBQUF5L0QsSUFLQSxJQUFBQyxFQUFBQyxFQUFBTixJQUFBQSxFQUNBTyxFQUFBdGpCLEVBQUFDLE1BQUF1QyxpQkFBQTRnQixHQWlDQSxPQS9CQUosR0FHQUEsRUFBQWIsZUFDQWEsRUFBQWIsZ0JBR0FuaUIsRUFBQUMsTUFBQXAzQixPQUFBbmUsRUFBQXM0RCxHQUdBdDRELEVBQUF5M0QsY0FBQXZoQixJQUVBbDJDLEVBQUEsWUFDQUEsRUFBQSxNQUFBNDRELEVBS0E1NEQsRUFBQSxHQUFBczFDLEdBRUF0MUMsRUFBQSxTQUFBMDRELEVBQ0ExNEQsRUFBQSxNQUFBNDRELEVBQ0FMLElBQ0F2NEQsRUFBQXU0RCxHQUFBSyxHQUtBSixHQUNBQSxFQUFBeDRELEVBQUFzNEQsRUFBQU0sR0FFQTU0RCxFQUFBLE1BTUEsSUFFQTJiLEVBQ0F1NkIsRUFIQWwyQyxFQUFBekosS0FDQW9pRSxFQUFBLG1CQUFBLElBQUFyakIsRUFBQWtKLGFBQUE2WixHQUlBci9ELEdBQUFBLEVBQUEsbUJBR0F5L0QsS0FFQXZpQixFQUFBWixFQUFBNFAsb0JBQUF1VCxFQUFBLE1BQUExTCxZQWRBLFdBQ0EsT0FBQXB4QyxJQUFBMjVCLEVBQUFDLE1BQUE4SCwrQkFBQTFoQyxJQWFBNjhCLDBCQUFBLEtBTUErVSxhQUNBdnRELEVBQUF5M0QsY0FBQXZoQixFQUdBQSxFQUFBLGlCQUFBLEtBUUF2NkIsS0FDQXU2QixFQUFBMmlCLFNBQUEsU0FBQWo2QyxHQUNBakQsRUFBQTlnQixLQUFBK2pCLEdBQ0EwMkIsRUFBQUMsTUFBQXVJLGdCQUFBQyxtQkFBQW4vQixFQUFBLFNBQUFBLEdBQ0EwMkIsRUFBQUMsTUFBQXlGLGdCQUFBci9CLEVBQUFpRCxHQUNBakQsRUFBQTVtQixTQUNBbWhELEVBQUFGLFVBQ0FoMkMsRUFBQXkzRCxjQUFBdmhCLEVBQUFoNEMsUUFhQW8zQyxFQUFBbUMsZUFBQTNnRCxVQUFBLG1CQUFBLFNBQUF1aEUsRUFBQUUsRUFBQUMsRUFBQXgvRCxHQUNBLE9BQUEsSUFBQXM4QyxFQUFBbUMsZUFBQTRnQixFQUFBOWhFLEtBQUFnaUUsRUFBQSxTQUFBdjRELEVBQUFzNEQsR0FFQXQ0RCxFQUFBLGVBQUFzNEQsRUFDQXQ0RCxFQUFBLFFBQUFzNEQsRUFBQSxNQUNBdDRELEVBQUEsVUFBQXM0RCxFQUFBLGNBQUF2aUUsTUFBQSxHQUNBaUssRUFBQSxTQUFBME4sUUFBQTFOLEVBQUEsU0FDQXc0RCxHQUNBQSxFQUFBeDRELElBQ0FoSCxJQU1BczhDLEVBQUFtQyxlQUFBM2dELFVBQUEsT0FBQSxTQUFBbXNCLEdBR0EsT0FBQSxJQUFBcXlCLEVBQUFtQyxlQUFBbGhELEtBQUFraEUsZUFBQWxoRSxLQUFBLE1BQUFBLEtBQUEsS0FBQSxTQUFBeUosRUFBQXM0RCxHQUdBdDRELEVBQUEsU0FBQXM0RCxFQUFBLFNBQ0FoakIsRUFBQUMsTUFBQXAzQixPQUFBbmUsRUFBQSxtQkFBQSxFQUFBaWpCLElBQUFBLE1BSUFxeUIsRUFBQW1DLGVBQUEzZ0QsVUFBQWdpRSx5QkFBQSxTQUFBVCxFQUFBRSxHQUNBLE9BQUFoaUUsS0FBQSxtQkFBQThoRSxFQUFBRSxFQUFBLE1BQUFRLG9CQUFBLEtBc0dBLElBQUF4QixFQUFBamlCLEVBQUFDLE1BQUFpTCxRQUFBUyxVQTJKQStYLEVBQUExakIsRUFBQUMsTUFBQWlMLFFBQUFTLFVBQ0EzTCxFQUFBa2lCLDRCQUFBLFNBQUE1NEMsRUFBQTY0QixHQUNBLEdBQUEsR0FBQXQ5QyxVQUFBcEYsT0FLQSxPQUFBdWdELEVBQUFDLE1BQUFpTCxRQUFBaG1DLElBQUFvRSxFQUFBbzZDLEdBSkExakIsRUFBQUMsTUFBQWlMLFFBQUEzbkQsSUFBQStsQixFQUFBbzZDLEVBQUF2aEIsR0FDQUEsRUFBQWdnQixlQUNBaGdCLEVBQUFnZ0IsY0FBQW9CLFNBQUFqNkMsSUFZQTAyQixFQUFBMmpCLDRCQUFBLFNBQUFyNkMsRUFBQWczQyxFQUFBc0MsR0FHQSxPQUZBLElBQUF0NUMsRUFBQWxKLFVBQ0E0L0IsRUFBQThDLGdCQUFBZ2Msb0NBQUF4MUMsR0FDQWc0QyxFQUFBaDRDLEVBQUFnM0MsRUFBQXFDLEVBQUFDLElBQUEsSUFHQTVpQixFQUFBNGpCLG9CQUFBLFNBQUF0NkMsRUFBQWczQyxFQUFBc0MsR0FDQSxJQUFBdjlDLEVBQUFzOUMsRUFBQUMsR0FDQSxPQUFBNWlCLEVBQUEyakIsNEJBQUFyNkMsRUFBQSsyQyxFQUFBQyxFQUFBajdDLEVBQUFpRSxHQUFBakUsSUFHQTI2QixFQUFBZ0QsMkJBQUEsU0FBQTRmLEVBQUEvVSxHQUNBLElBQUFBLEVBQUF6dEMsVUFBQSxJQUFBeXRDLEVBQUF6dEMsVUFDQXNnRCxFQUFBaUMsRUFBQUMsR0FBQS9VLEdBQUEsSUFHQTdOLEVBQUE2akIsY0FBQSxTQUFBakIsRUFBQS9VLEdBTUEsSUFKQXBPLEdBQUF2ckMsRUFBQSxTQUNBdXJDLEVBQUF2ckMsRUFBQSxRQUdBMjVDLEdBQUEsSUFBQUEsRUFBQXp0QyxVQUFBLElBQUF5dEMsRUFBQXp0QyxTQUNBLE1BQUEsSUFBQWhoQixNQUFBLHNHQUNBeXVELEVBQUFBLEdBQUEzNUMsRUFBQXJGLFNBQUFpQixLQUVBbXhELEVBQUEwQixFQUFBQyxHQUFBL1UsR0FBQSxJQUlBN04sRUFBQThqQixXQUFBLFNBQUF4NkMsR0FFQSxPQUFBQSxFQUFBbEosVUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLElBQUFpRixFQUFBMjZCLEVBQUFraUIsNEJBQUE1NEMsR0FDQSxHQUFBakUsRUFBQSxPQUFBQSxFQUNBLEdBQUFpRSxFQUFBcGEsV0FBQSxPQUFBOHdDLEVBQUE4akIsV0FBQXg2QyxFQUFBcGEsWUFHQSxPQUFBdEcsR0FFQW8zQyxFQUFBK2pCLFFBQUEsU0FBQXo2QyxHQUNBLElBQUFqRSxFQUFBMjZCLEVBQUE4akIsV0FBQXg2QyxHQUNBLE9BQUFqRSxFQUFBQSxFQUFBLE1BQUF6YyxHQUdBbzNDLEVBQUF1RCxhQUFBLGtCQUFBdkQsRUFBQThCLGlCQUNBOUIsRUFBQXVELGFBQUEsZ0JBQUF2RCxFQUFBNmpCLGVBQ0E3akIsRUFBQXVELGFBQUEsNkJBQUF2RCxFQUFBZ0QsNEJBQ0FoRCxFQUFBdUQsYUFBQSw4QkFBQXZELEVBQUEyakIsNkJBQ0EzakIsRUFBQXVELGFBQUEsc0JBQUF2RCxFQUFBNGpCLHFCQUNBNWpCLEVBQUF1RCxhQUFBLGFBQUF2RCxFQUFBOGpCLFlBQ0E5akIsRUFBQXVELGFBQUEsVUFBQXZELEVBQUErakIsU0ExZEEsR0E0ZEEsU0FBQW43RCxHQStCQSxTQUFBbzdELEVBQUF0L0QsRUFBQXUvRCxHQUNBLE9BQUF2L0QsRUFBQWlGLGVBQUFzNkQsR0FBQXYvRCxFQUFBdS9ELEdBQUFyN0QsRUFHQSxTQUFBczdELEVBQUFDLEVBQUFya0UsR0FDQSxJQUNBc2tFLEVBREF4akIsRUFBQW9qQixFQUFBSyxFQUFBRixHQUVBdmpCLEVBNEJBQSxFQUFBaVEsVUFBQS93RCxLQTFCQThnRCxFQUFBeWpCLEVBQUFGLEdBQUEsSUFBQW5rQixFQUFBWSxjQUNBaVEsVUFBQS93RCxHQUVBd2tFLEVBQUFILEVBQUEsU0FBQUksRUFBQUMsR0FDQSxJQUFBQyxLQUFBRCxJQUFBQSxFQUFBLGFBQ0FFLEVBQUFQLElBQUFJLFdBQUFBLEVBQUFFLHVCQUFBQSxVQUNBSixFQUFBRixHQVFBQyxHQUFBSyxFQUdBN2pCLEVBQUEsa0JBQUEyakIsR0FFQXZrQixFQUFBeU8sTUFBQXppQyxTQUFBLFdBQ0E0MEIsRUFBQSxrQkFBQTJqQixPQUlBSCxHQUFBLEdBTUEsU0FBQUUsRUFBQUgsRUFBQXJrRSxHQUNBNmtFLEVBQUEsYUFBQVIsR0FBQSxTQUFBSyxHQUNBQSxFQUVBRyxFQUFBLGlCQUFBUixFQUFBSyxHQUFBLFNBQUFELEdBQ0F6a0UsRUFBQXlrRSxFQUFBQyxLQU9BMWtFLEVBQUEsS0FBQSxRQUtBLFNBQUE2a0UsRUFBQTdQLEVBQUE4UCxFQUFBOWtFLEVBQUEra0UsR0FFQUEsSUFDQUEsRUFBQTdrQixFQUFBMGYsV0FBQSxRQUFBai9ELE1BQUEsSUFJQSxJQUFBcWtFLEVBQUFELEVBQUFqNkQsUUFDQSxHQUFBazZELEVBQUEsQ0FDQSxJQUFBQyxFQUFBRCxFQUFBaFEsR0FDQSxHQUFBaVEsRUFBQSxDQUNBLElBQUFDLEdBQUEsRUFnQkEsR0FmQUQsRUFBQWpnRSxNQUFBZ2dFLEVBQUFGLEVBQUE3L0QsT0FBQSxTQUFBN0UsR0FDQThrRSxFQUNBbGxFLEVBQUEsTUFDQSxPQUFBSSxFQUVBSixFQUFBSSxHQUdBeWtFLEVBQUE3UCxFQUFBOFAsRUFBQTlrRSxFQUFBK2tFLFFBT0FqOEQsSUFDQW84RCxHQUFBLEdBS0FGLEVBQUEsMEJBQ0EsTUFBQSxJQUFBMWxFLE1BQUEsOEdBS0F1bEUsRUFBQTdQLEVBQUE4UCxFQUFBOWtFLEVBQUEra0UsUUFJQS9rRSxFQUFBLE1BaklBLElBQUF1a0UsS0FDQUssS0FFQTFrQixFQUFBMGYsWUFDQXg2QyxJQUFBLFNBQUFpL0MsRUFBQXJrRSxHQUNBLElBQUFtbEUsRUFBQWpCLEVBQUFVLEVBQUFQLEdBQ0FjLEVBSUFBLEVBQUFSLHVCQUNBemtCLEVBQUF3UixvQkFBQTJCLE9BQUEsV0FDQXJ6RCxFQUFBbWxFLEVBQUFWLGNBR0F2a0IsRUFBQXlPLE1BQUF6aUMsU0FBQSxXQUFBbHNCLEVBQUFtbEUsRUFBQVYsY0FJQUwsRUFBQUMsRUFBQXJrRSxJQUlBb2xFLHNCQUFBLFNBQUFmLFVBQ0FPLEVBQUFQLElBR0FnQiwyQkFBQVIsR0E0R0Eza0IsRUFBQTBmLFdBQUEsV0FFQTFmLEVBQUF1RCxhQUFBLGFBQUF2RCxFQUFBMGYsWUFDQTFmLEVBQUF1RCxhQUFBLGlCQUFBdkQsRUFBQTBmLFdBQUF4NkMsS0FDQTg2QixFQUFBdUQsYUFBQSxtQ0FBQXZELEVBQUEwZixXQUFBd0YsdUJBNUlBLEdBOElBLFNBQUF0OEQsR0FtRUEsU0FBQXc4RCxFQUFBakIsRUFBQW5vQixFQUFBd29CLEVBQUExa0UsR0FDQSxJQUFBSSxLQUNBbWxFLEVBQUEsRUFDQUMsRUFBQSxXQUNBLEtBQUFELEdBQ0F2bEUsRUFBQUksSUFHQXFsRSxFQUFBZixFQUFBLFNBQ0FnQixFQUFBaEIsRUFBQSxVQUVBZSxFQUNBRSxFQUFBenBCLEVBQUF1cEIsRUFBQSxTQUFBRyxHQUNBMWxCLEVBQUEwZixXQUFBeUYsMkJBQUEsZ0JBQUFoQixFQUFBdUIsR0FBQSxTQUFBQyxHQUNBemxFLEVBQUEsU0FBQXlsRSxFQUNBTCxRQUlBQSxJQUdBRSxFQUNBQyxFQUFBenBCLEVBQUF3cEIsRUFBQSxTQUFBRSxHQUNBMWxCLEVBQUEwZixXQUFBeUYsMkJBQUEsaUJBQUFoQixFQUFBdUIsR0FBQSxTQUFBRSxHQUNBMWxFLEVBQUEybEUsR0FBQUQsRUFDQU4sUUFJQUEsSUFJQSxTQUFBUSxFQUFBOXBCLEVBQUF1cEIsRUFBQXpsRSxHQUNBLEdBQUEsaUJBQUF5bEUsRUFFQXpsRSxFQUFBa2dELEVBQUFDLE1BQUFxTixrQkFBQWlZLFNBQ0EsR0FBQUEsYUFBQXJ0RCxNQUVBcFksRUFBQXlsRSxRQUNBLEdBQUFRLEVBQUFSLEdBRUF6bEUsRUFBQWtnRCxFQUFBQyxNQUFBenNCLFVBQUEreEMsRUFBQTErQyxrQkFDQSxHQUFBMCtDLEVBQUEsUUFBQSxDQUNBLElBQUF4akIsRUFBQXdqQixFQUFBLFFBQ0EsR0FBQVMsRUFBQWprQixHQUVBamlELEVBQUFtbUUsRUFBQWxrQixTQUNBLEdBQUEsaUJBQUFBLEVBQUEsQ0FFQSxJQUFBbWtCLEVBQUFyM0QsRUFBQTRsQixlQUFBc3RCLEdBQ0Fta0IsRUFDQXBtRSxFQUFBbW1FLEVBQUFDLElBRUFscUIsRUFBQSwrQkFBQStGLFFBR0EvRixFQUFBLHlCQUFBK0YsUUFHQS9GLEVBQUEsMkJBQUF1cEIsR0FJQSxTQUFBWSxFQUFBbnFCLEVBQUF3cEIsRUFBQTFsRSxHQUNBLEdBQUEsbUJBQUEwbEUsRUFLQTFsRSxFQUFBLFNBQUFzOUMsR0FDQSxPQUFBLElBQUFvb0IsRUFBQXBvQixVQUVBLEdBQUEsbUJBQUFvb0IsRUFBQUssR0FFQS9sRSxFQUFBMGxFLEVBQUFLLFNBQ0EsR0FBQSxhQUFBTCxFQUFBLENBRUEsSUFBQVksRUFBQVosRUFBQSxTQUNBMWxFLEVBQUEsU0FBQXM5QyxFQUFBaXBCLEdBQ0EsT0FBQUQsUUFFQSxjQUFBWixFQUVBVyxFQUFBbnFCLEVBQUF3cEIsRUFBQSxVQUFBMWxFLEdBRUFrOEMsRUFBQSw0QkFBQXdwQixHQUlBLFNBQUFTLEVBQUFDLEdBQ0EsT0FBQWxtQixFQUFBQyxNQUFBaUUsYUFBQWdpQixJQUNBLElBQUEsU0FDQSxPQUFBbG1CLEVBQUFDLE1BQUFxTixrQkFBQTRZLEVBQUFsbEQsTUFDQSxJQUFBLFdBQ0EsT0FBQWcvQixFQUFBQyxNQUFBcU4sa0JBQUE0WSxFQUFBaDFELE9BQ0EsSUFBQSxXQUdBLEdBQUE2MEQsRUFBQUcsRUFBQXArQyxTQUNBLE9BQUFrNEIsRUFBQUMsTUFBQTRDLFdBQUFxakIsRUFBQXArQyxRQUFBakIsWUFNQSxPQUFBbTVCLEVBQUFDLE1BQUE0QyxXQUFBcWpCLEVBQUFyL0MsWUFHQSxTQUFBbS9DLEVBQUF0aEUsR0FDQSxPQUFBd1AsRUFBQSxZQUNBeFAsYUFBQTRoRSxZQUVBNWhFLEdBQUFBLEVBQUFzakQsU0FBQSxJQUFBdGpELEVBQUEwYixTQUlBLFNBQUEybEQsRUFBQXJoRSxHQUNBLE9BQUF3UCxFQUFBLGlCQUNBeFAsYUFBQTZoRSxpQkFFQTdoRSxHQUFBLEtBQUFBLEVBQUEwYixTQUlBLFNBQUFxbEQsRUFBQXpwQixFQUFBd29CLEVBQUExa0UsR0FDQSxpQkFBQTBrRSxFQUFBLFFBRUE3a0IsR0FBQXpyQyxFQUFBLFNBQ0F5ckMsR0FBQXpyQyxFQUFBLFVBQUFzd0QsRUFBQSxTQUFBMWtFLEdBRUFrOEMsRUFBQSw4Q0FHQWw4QyxFQUFBMGtFLEdBSUEsU0FBQWdDLEVBQUFyQyxHQUNBLE9BQUEsU0FBQTVzRCxHQUNBLE1BQUEsSUFBQW5ZLE1BQUEsY0FBQStrRSxFQUFBLE1BQUE1c0QsSUFwTUEsSUFBQWt2RCxLQUVBem1CLEVBQUEwZixXQUFBZ0gsU0FBQSxTQUFBdkMsRUFBQUssR0FDQSxJQUFBQSxFQUNBLE1BQUEsSUFBQXBsRSxNQUFBLDZCQUFBK2tFLEdBR0EsR0FBQW5rQixFQUFBMGYsV0FBQWlILGFBQUF4QyxHQUNBLE1BQUEsSUFBQS9rRSxNQUFBLGFBQUEra0UsRUFBQSwwQkFHQXNDLEVBQUF0QyxHQUFBSyxHQUdBeGtCLEVBQUEwZixXQUFBaUgsYUFBQSxTQUFBeEMsR0FDQSxPQUFBc0MsRUFBQTk4RCxlQUFBdzZELElBR0Fua0IsRUFBQTBmLFdBQUFrSCxXQUFBLFNBQUF6QyxVQUNBc0MsRUFBQXRDLEdBQ0Fua0IsRUFBQTBmLFdBQUF3RixzQkFBQWYsSUFHQW5rQixFQUFBMGYsV0FBQW1ILGVBQ0FDLFVBQUEsU0FBQTNDLEVBQUFya0UsR0FJQUEsRUFIQTJtRSxFQUFBOThELGVBQUF3NkQsR0FDQXNDLEVBQUF0QyxHQUNBLE9BSUE0QyxjQUFBLFNBQUE1QyxFQUFBSyxFQUFBMWtFLEdBQ0EsSUFBQWs4QyxFQUFBd3FCLEVBQUFyQyxHQUNBc0IsRUFBQXpwQixFQUFBd29CLEVBQUEsU0FBQWtCLEdBQ0FOLEVBQUFqQixFQUFBbm9CLEVBQUEwcEIsRUFBQTVsRSxNQUlBa25FLGFBQUEsU0FBQTdDLEVBQUFvQixFQUFBemxFLEdBQ0FnbUUsRUFBQVUsRUFBQXJDLEdBQUFvQixFQUFBemxFLElBR0FtbkUsY0FBQSxTQUFBOUMsRUFBQXFCLEVBQUExbEUsR0FDQXFtRSxFQUFBSyxFQUFBckMsR0FBQXFCLEVBQUExbEUsS0FJQSxJQUFBK2xFLEVBQUEsa0JBeUpBN2xCLEVBQUF1RCxhQUFBLHNCQUFBdkQsRUFBQTBmLFdBQUFnSCxVQUNBMW1CLEVBQUF1RCxhQUFBLDBCQUFBdkQsRUFBQTBmLFdBQUFpSCxjQUNBM21CLEVBQUF1RCxhQUFBLHdCQUFBdkQsRUFBQTBmLFdBQUFrSCxZQUlBNW1CLEVBQUF1RCxhQUFBLDJCQUFBdkQsRUFBQTBmLFdBQUFtSCxlQUdBN21CLEVBQUEwZixXQUFBLFFBQUFuNkQsS0FBQXk2QyxFQUFBMGYsV0FBQW1ILGVBR0E3bUIsRUFBQTBmLFdBQUF3SCx5QkFBQVQsRUFoT0EsR0FrT0EsU0FBQTc5RCxHQXVDQSxTQUFBdStELEVBQUE5bEQsRUFBQThnQyxHQUNBLElBQUFpbEIsRUFBQS9sRCxFQUFBb0MsYUFBQSxVQUVBLEdBQUEyakQsRUFBQSxDQUNBLElBQUFocUIsRUFBQWlxQixFQUFBLG9CQUFBRCxFQUFBamxCLEVBQUE5Z0MsR0FBQTArQyxnQkFBQSxFQUFBeEQsZUFBQSxJQUNBK0ssRUFBQXRuQixFQUFBQyxNQUFBcUcsVUFBQWxKLEVBQUEsU0FBQW1xQixFQUFBQyxHQUNBLE9BQUF4bkIsRUFBQTkxQixTQUFBcTlDLEVBQUEsTUFBQXJrQix5QkFBQTdoQyxNQUVBbmhCLEVBQUE4L0MsRUFBQUMsTUFBQXFHLFVBQUFnaEIsRUFBQSxTQUFBRyxFQUFBRCxHQUNBLElBQUFELEVBQUFFLEVBQUF0ZSxPQUVBLE9BQUFzZSxFQUFBeFAsV0FTQWpZLEVBQUE5MUIsVUFDQTJsQyxLQUFBLFdBQ0EsT0FBQTdQLEVBQUFDLE1BQUF1QyxpQkFBQWlsQixNQUVBeDZELE1BQUEreUMsRUFBQWdVLHNCQUFBdVQsSUFBQSxTQUFBcjJELEdBQ0F1MkQsSUFBQXYyRCxJQUVBZ3lDLHlCQUFBN2hDLElBYkFrbUQsSUF5QkEsT0FKQXJuRSxFQUFBeUosZUFBQSxVQUNBekosRUFBQSxLQUFBb25FLEdBR0FwbkUsRUFLQSxPQUFBd25FLFNBaEZBMW5CLEVBQUEwZixXQUFBLHdCQUFBLFNBQUFwMkMsR0FDQSxJQUFBNDZCLEVBQUFsRSxFQUFBQyxNQUFBaUUsYUFBQTU2QixHQUNBLEdBQUEwMkIsRUFBQTBmLFdBQUFpSCxhQUFBemlCLE1BRUEsR0FBQUEsRUFBQXo1QyxRQUFBLE1BQUEsR0FBQTZlLEdBQUEsK0JBQUEwMkIsRUFBQUMsTUFBQStFLFdBQUEsR0FBQTE3QixFQUFBMCtCLFVBQUE5RCxHQUNBLE9BQUFBLEdBS0FsRSxFQUFBMGYsV0FBQUcsNEJBQUEsU0FBQTVkLEVBQUEzNEIsRUFBQTY0QixFQUFBNGQsR0FFQSxHQUFBLElBQUF6MkMsRUFBQWxKLFNBQUEsQ0FDQSxJQUFBK2pELEVBQUFua0IsRUFBQTBmLFdBQUEsd0JBQUFwMkMsR0FDQSxHQUFBNjZDLEVBQUEsQ0FJQSxJQUZBbGlCLEVBQUFBLE9BRUEsVUFFQSxNQUFBLElBQUE3aUQsTUFBQSwrRUFHQSxJQUFBdW9FLEdBQUF6OUQsS0FBQWk2RCxFQUFBL21CLE9BQUErcEIsRUFBQTc5QyxFQUFBNjRCLElBRUFGLEVBQUEsVUFBQThkLEVBQ0EsV0FBQSxPQUFBNEgsR0FDQUEsR0FJQSxPQUFBMWxCLEdBR0EsSUFBQW9sQixFQUFBLElBQUFybkIsRUFBQXVmLGdCQXFEQXZmLEVBQUFDLE1BQUErRSxVQUFBLElBRUFoRixFQUFBMGYsV0FBQSxTQUFBLFNBQUExVSxHQUNBLE9BQUEsU0FBQW1aLEdBRUEsT0FEQXQxRCxFQUFBVSxjQUFBNDBELEdBQ0FuWixFQUFBbG1ELE1BQUE3RCxLQUFBNEQsWUFIQSxDQUtBbTdDLEVBQUEwZixXQUFBLFVBSUE3d0QsRUFBQXVYLHVCQUFBLFNBQUE0a0MsR0FDQSxPQUFBLFdBQ0EsSUFBQTRjLEVBQUE1YyxJQUNBNmMsRUFBQTduQixFQUFBMGYsV0FBQXdILHlCQUNBLElBQUEsSUFBQS9DLEtBQUEwRCxFQUNBQSxFQUFBbCtELGVBQUF3NkQsSUFDQXlELEVBQUFyNEQsY0FBQTQwRCxHQUdBLE9BQUF5RCxHQVRBLENBV0EvNEQsRUFBQXVYLHlCQWhIQSxHQWtIQSxTQUFBeGQsR0FtRUEsU0FBQWsvRCxFQUFBM0QsRUFBQTRELEVBQUFobUIsR0FDQSxJQUFBK2dCLEVBQUFpRixFQUFBLFNBQ0EsSUFBQWpGLEVBQ0EsTUFBQSxJQUFBMWpFLE1BQUEsY0FBQStrRSxFQUFBLHFCQUdBLElBQUE2RCxFQUFBaG9CLEVBQUFDLE1BQUE0QyxXQUFBaWdCLEdBQ0E5aUIsRUFBQThDLGdCQUFBQyxtQkFBQWhCLEVBQUFpbUIsR0FHQSxTQUFBQyxFQUFBRixFQUFBaG1CLEVBQUFtbUIsRUFBQUMsR0FDQSxJQUFBQyxFQUFBTCxFQUFBLGdCQUNBLE9BQUFLLEVBQ0FBLEVBQUE1b0UsS0FBQXVvRSxFQUFBSSxHQUFBcG1CLFFBQUFBLEVBQUFzbUIsY0FBQUgsSUFDQUMsRUEvRUEsSUFBQUcsRUFBQSxFQUVBdG9CLEVBQUE4QixnQkFBQSxXQUNBcnBDLEtBQUEsU0FBQXNwQyxFQUFBQyxFQUFBdW1CLEVBQUFDLEVBQUFybUIsR0FDQSxJQUFBc21CLEVBQ0FDLEVBQ0FDLEVBQUEsV0FDQSxJQUFBQyxFQUFBSCxHQUFBQSxFQUFBLFFBQ0EsbUJBQUFHLEdBQ0FBLEVBQUFwcEUsS0FBQWlwRSxHQUVBQSxFQUFBLEtBRUFDLEVBQUEsTUFFQVIsRUFBQWxvQixFQUFBQyxNQUFBenNCLFVBQUF3c0IsRUFBQThDLGdCQUFBajhCLFdBQUFrN0IsSUE0Q0EsT0ExQ0EvQixFQUFBQyxNQUFBdUksZ0JBQUFDLG1CQUFBMUcsRUFBQTRtQixHQUVBM29CLEVBQUE5MUIsU0FBQSxXQUNBLElBQ0FpNkMsRUFBQWdFLEVBREFqM0QsRUFBQTh1QyxFQUFBQyxNQUFBdUMsaUJBQUFSLEtBVUEsR0FQQSxpQkFBQTl3QyxFQUNBaXpELEVBQUFqekQsR0FFQWl6RCxFQUFBbmtCLEVBQUFDLE1BQUF1QyxpQkFBQXR4QyxFQUFBLE1BQ0FpM0QsRUFBQW5vQixFQUFBQyxNQUFBdUMsaUJBQUF0eEMsRUFBQSxVQUdBaXpELEVBQ0EsTUFBQSxJQUFBL2tFLE1BQUEsK0JBR0EsSUFBQXlwRSxFQUFBSCxJQUFBSixFQUNBdG9CLEVBQUEwZixXQUFBeDZDLElBQUFpL0MsRUFBQSxTQUFBNEQsR0FFQSxHQUFBVyxJQUFBRyxFQUFBLENBUUEsR0FIQUYsS0FHQVosRUFDQSxNQUFBLElBQUEzb0UsTUFBQSxzQkFBQStrRSxFQUFBLEtBRUEyRCxFQUFBM0QsRUFBQTRELEVBQUFobUIsR0FDQSxJQUFBK21CLEVBQUFiLEVBQUFGLEVBQUFobUIsRUFBQW1tQixFQUFBQyxHQUNBWSxFQUFBNW1CLEVBQUEsbUJBQUEybUIsT0FwREEsRUFvREEsU0FBQUUsR0FDQUEsRUFBQSxXQUFBRixFQUNBRSxFQUFBLHdCQUFBZCxJQUVBTyxFQUFBSyxFQUNBOW9CLEVBQUFnRCwyQkFBQStsQixFQUFBaG5CLE9BRUEsTUFBQW1CLHlCQUFBbkIsS0FFQW9CLDRCQUFBLEtBSUFuRCxFQUFBOEMsZ0JBQUFRLGdCQUFBLFdBQUEsRUFqRUEsR0FxRkEsSUFBQTJsQixHQUFBM3pCLE1BQUEsWUFBQUQsSUFBQSxXQUNBMkssRUFBQThCLGdCQUFBLE1BQ0FvbkIsT0FBQSxTQUFBbm5CLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQS93QyxFQUFBOHVDLEVBQUFDLE1BQUF1QyxpQkFBQVIsU0FDQWhDLEVBQUFDLE1BQUE0RCxjQUFBM3lDLEVBQUEsU0FBQWk0RCxFQUFBQyxHQU1BLElBQUFDLEdBQUEsS0FMQUQsRUFBQXBwQixFQUFBQyxNQUFBdUMsaUJBQUE0bUIsS0FLQSxPQUFBQSxHQUFBQSxJQUFBeGdFLEVBQ0F5Z0UsR0FDQXRuQixFQUFBNzVCLGdCQUFBaWhELEdBTUFucEIsRUFBQUMsTUFBQStFLFdBQUEsR0FBQW1rQixLQUFBRixHQUNBRSxFQUFBRixFQUFBRSxHQUNBRSxFQUNBdG5CLEVBQUE3NUIsZ0JBQUFpaEQsR0FFQXBuQixFQUFBb25CLEdBQUFDLEdBQ0FDLEdBQ0F0bkIsRUFBQS93QyxhQUFBbTRELEVBQUFDLEVBQUFsc0QsWUFPQSxTQUFBaXNELEdBQ0FucEIsRUFBQUMsTUFBQXlKLGVBQUEzSCxFQUFBc25CLEVBQUEsR0FBQUQsRUFBQWxzRCxnQkFPQThpQyxFQUFBOEIsZ0JBQUEsU0FDQTdtQyxPQUFBLFFBQUEsUUFDQXhDLEtBQUEsU0FBQXNwQyxFQUFBQyxFQUFBQyxHQVlBLFNBQUFxbkIsSUFHQSxJQUFBQyxFQUFBeG5CLEVBQUEvNEIsUUFDQXdnRCxFQUFBQyxFQUFBQyxJQUFBSCxFQUdBLElBQUF2cEIsRUFBQTJDLGdCQUFBMFEsZUFNQXNXLEdBQUFKLEdBQUEsQ0FJQSxJQUFBSyxFQUFBNXBCLEVBQUF3UixvQkFBQTJCLE9BQUFuUixHQUNBLEdBQUE2bkIsRUFBQSxDQUNBLElBQUFDLEVBQUFDLEVBQUFILEVBQUF6Z0IsT0FBQXlnQixFQUNBSSxJQUFBUixHQUlBRCxJQUNBdnBCLEVBQUFDLE1BQUF3RSxnQkFBQXFsQixFQUFBTixHQUFBLEdBQ0F4cEIsRUFBQUMsTUFBQXdFLGdCQUFBcWxCLEVBQUFFLEdBQUEsSUFHQUEsRUFBQVIsR0FJQXhwQixFQUFBQyxNQUFBd0UsZ0JBQUFxbEIsRUFBQU4sRUFBQUQsR0FFQVEsR0FBQS9wQixFQUFBZ1Usc0JBQUE0VixJQUNBQSxFQUFBRSxRQUdBOXBCLEVBQUFvRCxvQkFBQTJaLHFCQUFBNk0sRUFBQTNuQixFQUFBLFVBQUF1bkIsR0FBQSxJQWxEQSxJQUFBRSxFQUFBMXBCLEVBQUF5WixhQUFBLFdBRUEsT0FBQXhYLEVBQUEsSUFBQSxnQkFDQWpDLEVBQUFDLE1BQUF1QyxpQkFBQVAsRUFBQS84QixJQUFBLGlCQUNBKzhCLEVBQUEsSUFBQSxTQUNBakMsRUFBQUMsTUFBQXVDLGlCQUFBUCxFQUFBLzhCLElBQUEsVUFHQTY4QixFQUFBN3dDLFFBK0RBKzRELEVBQUEsWUFBQWxvQixFQUFBaCtDLEtBQ0E0bEUsRUFBQSxTQUFBNW5CLEVBQUFoK0MsS0FHQSxHQUFBa21FLEdBQUFOLEVBQUEsQ0FJQSxJQUFBcm5CLEVBQUFOLElBQ0E2bkIsRUFBQUksR0FBQWpxQixFQUFBQyxNQUFBdUMsaUJBQUFGLGFBQUFwcUMsTUFDQTZ4RCxJQUFBRixHQUFBdm5CLEVBQUEvOEMsTUFBQSs4QyxFQUFBdjhDLFFBQ0Fpa0UsRUFBQUgsRUFBQUgsSUFBQTlnRSxFQUNBNmdFLEVBQUFFLEdBQUFFLEVBR0FGLElBQUE1bkIsRUFBQTczQyxNQUNBODFDLEVBQUE4QixnQkFBQSxXQUFBLEtBQUFDLEVBQUEsV0FBQSxPQUFBLElBS0EvQixFQUFBOTFCLFNBQUFvL0MsRUFBQSxNQUFBcG1CLHlCQUFBbkIsSUFDQS9CLEVBQUFDLE1BQUFrSSxxQkFBQXBHLEVBQUEsUUFBQXVuQixHQUdBdHBCLEVBQUE5MUIsU0ExQ0EsV0FHQSxJQUFBMC9DLEVBQUE1cEIsRUFBQUMsTUFBQXVDLGlCQUFBUixLQUlBRCxFQUFBLzRCLFFBRkE2Z0QsRUFFQTdwQixFQUFBQyxNQUFBb0YsYUFBQXVrQixFQUFBRixNQUFBLEVBQ0FPLEVBRUFMLEVBR0FGLE1BQUFFLEdBNkJBLE1BQUExbUIseUJBQUFuQixJQUVBTyxFQUFBMTVDLEtBR0FvM0MsRUFBQW9ELG9CQUFBNlksZUFBQSxTQUFBLEVBRUFqYyxFQUFBOEIsZ0JBQUEsY0FDQW9uQixPQUFBLFNBQUFubkIsRUFBQUMsR0FDQUQsRUFBQTd3QyxNQUFBOHVDLEVBQUFDLE1BQUF1QyxpQkFBQVIsT0FLQWhDLEVBQUE4QixnQkFBQSxLQUNBb25CLE9BQUEsU0FBQW5uQixFQUFBQyxHQUNBLElBQUE5d0MsRUFBQTh1QyxFQUFBQyxNQUFBdUMsaUJBQUFSLEtBQ0EsT0FBQTl3QyxHQUFBLGlCQUFBQSxFQUNBOHVDLEVBQUFDLE1BQUE0RCxjQUFBM3lDLEVBQUEsU0FBQVQsRUFBQTR6QyxHQUNBQSxFQUFBckUsRUFBQUMsTUFBQXVDLGlCQUFBNkIsR0FDQXJFLEVBQUFDLE1BQUFtSixzQkFBQXJILEVBQUF0eEMsRUFBQTR6QyxNQUdBbnpDLEVBQUE4dUMsRUFBQUMsTUFBQXdILFdBQUF2dUMsT0FBQWhJLEdBQUEsS0FDQTh1QyxFQUFBQyxNQUFBbUosc0JBQUFySCxFQUFBQSxFQUFBLGdCQUFBLEdBQ0FBLEVBQUEsZUFBQTd3QyxFQUNBOHVDLEVBQUFDLE1BQUFtSixzQkFBQXJILEVBQUE3d0MsR0FBQSxNQUlBOHVDLEVBQUE4QixnQkFBQSxRQUNBb25CLE9BQUEsU0FBQW5uQixFQUFBQyxHQUNBLElBQUE5d0MsRUFBQTh1QyxFQUFBQyxNQUFBdUMsaUJBQUFSLEtBQ0E5d0MsR0FBQTZ3QyxFQUFBNXJCLFNBQ0E0ckIsRUFBQTc1QixnQkFBQSxZQUNBaFgsR0FBQTZ3QyxFQUFBNXJCLFdBQ0E0ckIsRUFBQTVyQixVQUFBLEtBSUE2cEIsRUFBQThCLGdCQUFBLFNBQ0FvbkIsT0FBQSxTQUFBbm5CLEVBQUFDLEdBQ0FoQyxFQUFBOEIsZ0JBQUEsT0FBQSxPQUFBQyxFQUFBLFdBQUEsT0FBQS9CLEVBQUFDLE1BQUF1QyxpQkFBQVIsU0FrQkFoQyxFQUFBOEIsZ0JBQUEsT0FDQXJwQyxLQUFBLFNBQUFzcEMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBK25CLEVBQUFsb0IsUUFDQWhDLEVBQUFDLE1BQUE0RCxjQUFBcW1CLEVBQUEsU0FBQTVYLEdBQ0EsaUJBQUFBLEdBQ0F0UyxFQUFBQyxNQUFBa0kscUJBQUFwRyxFQUFBdVEsRUFBQSxTQUFBanRELEdBQ0EsSUFBQThrRSxFQUNBQyxFQUFBcG9CLElBQUFzUSxHQUNBLEdBQUE4WCxFQUFBLENBR0EsSUFFQSxJQUFBQyxFQUFBcnFCLEVBQUFDLE1BQUF6c0IsVUFBQTN1QixXQUNBcTlDLEVBQUFDLEVBQUEsTUFDQWtvQixFQUFBanlELFFBQUE4cEMsR0FDQWlvQixFQUFBQyxFQUFBdGxFLE1BQUFvOUMsRUFBQW1vQixHQUNBLFNBQ0EsSUFBQUYsSUFDQTlrRSxFQUFBNmtDLGVBQ0E3a0MsRUFBQTZrQyxpQkFFQTdrQyxFQUFBNGxDLGFBQUEsSUFJQSxJQUFBZ1gsRUFBQS84QixJQUFBb3RDLEVBQUEsWUFFQWp0RCxFQUFBaWxFLGNBQUEsRUFDQWpsRSxFQUFBOGtDLGlCQUNBOWtDLEVBQUE4a0MsMEJBU0E2VixFQUFBOEIsZ0JBQUEsU0FDQXlvQiwwQkFBQSxTQUFBdm9CLEdBQ0EsT0FBQSxXQUNBLElBQUE0bkIsRUFBQTVuQixJQUNBd29CLEVBQUF4cUIsRUFBQUMsTUFBQW1HLGVBQUF3akIsR0FLQSxPQUFBWSxHQUFBLGlCQUFBQSxFQUFBL3FFLFFBSUF1Z0QsRUFBQUMsTUFBQXVDLGlCQUFBb25CLElBRUFhLFFBQUFELEVBQUEsS0FDQUUsR0FBQUYsRUFBQSxHQUNBRyxpQkFBQUgsRUFBQSxpQkFDQUksU0FBQUosRUFBQSxTQUNBSyxhQUFBTCxFQUFBLGFBQ0FNLFlBQUFOLEVBQUEsWUFDQU8sV0FBQVAsRUFBQSxXQUNBUSxVQUFBUixFQUFBLFVBQ0FTLGVBQUFqckIsRUFBQWtyQixxQkFBQXphLFlBYkFnYSxRQUFBYixFQUFBcUIsZUFBQWpyQixFQUFBa3JCLHFCQUFBemEsWUFpQkFoNEMsS0FBQSxTQUFBc3BDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQW5DLEVBQUE4QixnQkFBQSxTQUFBLEtBQUFDLEVBQUEvQixFQUFBOEIsZ0JBQUEsUUFBQXlvQiwwQkFBQXZvQixLQUVBa25CLE9BQUEsU0FBQW5uQixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQUFuQyxFQUFBOEIsZ0JBQUEsU0FBQSxPQUFBQyxFQUFBL0IsRUFBQThCLGdCQUFBLFFBQUF5b0IsMEJBQUF2b0IsR0FBQUMsRUFBQUMsRUFBQUMsS0FHQW5DLEVBQUFvRCxvQkFBQUMseUJBQUEsU0FBQSxFQUNBckQsRUFBQThDLGdCQUFBUSxnQkFBQSxTQUFBLEVBR0F0RCxFQUFBOEIsZ0JBQUEsVUFDQXJwQyxLQUFBLFNBQUFzcEMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBa3BCLEVBQUEsU0FBQUMsR0FPQXJwQixFQUFBLHVCQUFBLEVBQ0EsSUFBQXNwQixFQUFBdHBCLEVBQUFwOUIsY0FDQSxHQUFBLGtCQUFBMG1ELEVBQUEsQ0FDQSxJQUFBN3lCLEVBQ0EsSUFDQUEsRUFBQTZ5QixFQUFBL2pELGNBQ0EsTUFBQTdvQixHQUVBKzVDLEVBQUE2eUIsRUFBQXY3RCxLQUVBczdELEVBQUE1eUIsSUFBQXVKLEVBRUEsSUFBQTZuQixFQUFBNW5CLElBQ0FoQyxFQUFBb0Qsb0JBQUEyWixxQkFBQTZNLEVBQUEzbkIsRUFBQSxXQUFBbXBCLEdBQUEsR0FHQXJwQixFQUFBLHVCQUFBcXBCLEVBQ0FycEIsRUFBQSx1QkFBQSxHQUVBdXBCLEVBQUFILEVBQUEzeUQsS0FBQSxNQUFBLEdBQ0EreUQsRUFBQUosRUFBQTN5RCxLQUFBLE1BQUEsR0FFQXduQyxFQUFBQyxNQUFBa0kscUJBQUFwRyxFQUFBLFFBQUF1cEIsR0FDQXRyQixFQUFBQyxNQUFBa0kscUJBQUFwRyxFQUFBLFVBQUF1cEIsR0FDQXRyQixFQUFBQyxNQUFBa0kscUJBQUFwRyxFQUFBLE9BQUF3cEIsR0FDQXZyQixFQUFBQyxNQUFBa0kscUJBQUFwRyxFQUFBLFdBQUF3cEIsSUFFQXJDLE9BQUEsU0FBQW5uQixFQUFBQyxHQUNBLElBQUE5d0MsSUFBQTh1QyxFQUFBQyxNQUFBdUMsaUJBQUFSLEtBRUFELEVBQUEsdUJBQUFBLEVBQUEseUJBQUE3d0MsSUFDQUEsRUFBQTZ3QyxFQUFBM2hCLFFBQUEyaEIsRUFBQWpYLFFBS0E1NUIsR0FBQTZ3QyxFQUFBLHdCQUNBQSxFQUFBcDlCLGNBQUE3VSxLQUFBc3dCLFFBSUE0ZixFQUFBd1Isb0JBQUEyQixPQUFBblQsRUFBQUMsTUFBQTBJLGFBQUEsTUFBQTVHLEVBQUE3d0MsRUFBQSxVQUFBLGdCQUlBOHVDLEVBQUFvRCxvQkFBQTZZLGVBQUEsVUFBQSxFQUVBamMsRUFBQThCLGdCQUFBLFNBQUE5QixFQUFBOEIsZ0JBQUEsU0FDQTlCLEVBQUFvRCxvQkFBQTZZLGVBQUEsVUFBQSxFQUNBamMsRUFBQThCLGdCQUFBLE1BQ0FycEMsS0FBQSxXQUVBLE9BQUEwcUMsNEJBQUEsSUFFQStsQixPQUFBLFNBQUFubkIsRUFBQUMsR0FFQWhDLEVBQUFDLE1BQUFzTixRQUFBeEwsRUFBQUMsT0EwQ0FQLEVBQUEsTUFDQUEsRUFBQSxTQUFBLEdBQUEsR0FDQUEsRUFBQSxRQUFBLEdBQUEsRUFDQSxTQUFBVSxFQUFBSSxHQUNBLE9BQUFKLEVBQUFxaEIseUJBQUFqaEIsS0FHQSxJQUFBaXBCLEtBQ0F4ckIsRUFBQThCLGdCQUFBLFNBQ0FycEMsS0FBQSxTQUFBc3BDLEdBQ0EsR0FBQSxXQUFBL0IsRUFBQUMsTUFBQWlFLGFBQUFuQyxHQUNBLE1BQUEsSUFBQTNpRCxNQUFBLG1EQUdBLEtBQUEyaUQsRUFBQXRpRCxPQUFBLEdBQ0FzaUQsRUFBQWo0QixPQUFBLEdBSUEsT0FBQXE1Qiw0QkFBQSxJQUVBK2xCLE9BQUEsU0FBQW5uQixFQUFBQyxFQUFBQyxHQUNBLFNBQUF3cEIsSUFDQSxPQUFBenJCLEVBQUFDLE1BQUE4RixZQUFBaEUsRUFBQXIrQyxRQUFBLFNBQUE0bEIsR0FBQSxPQUFBQSxFQUFBNEcsV0EyQ0EsU0FBQXc3QyxFQUFBeHBELEVBQUFzakMsRUFBQXY4QixHQUNBLElBQUEwaUQsU0FBQW5tQixFQUNBLE1BQUEsWUFBQW1tQixFQUNBbm1CLEVBQUF0akMsR0FDQSxVQUFBeXBELEVBQ0F6cEQsRUFBQXNqQyxHQUVBdjhCLEVBb0NBLFNBQUEyaUQsRUFBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUFBQyxFQUdBaHNCLEVBQUEyYSxpQkFBQUcsV0FBQS9ZLEVBQUEvQixFQUFBQyxNQUFBdUMsaUJBQUFQLEVBQUEvOEIsSUFBQSxXQUFBLFFBQ0EsR0FBQSttRCxFQUFBeHNFLE9BQUEsQ0FHQSxJQUFBK25ELEVBQUF4SCxFQUFBQyxNQUFBb0YsYUFBQTRtQixFQUFBanNCLEVBQUEyYSxpQkFBQUMsVUFBQWtSLEVBQUEsTUFBQSxFQUNBOXJCLEVBQUFDLE1BQUFxSCw0QkFBQXdrQixFQUFBLEdBQUF0a0IsR0FHQXVrQixJQUFBdmtCLEdBQ0F4SCxFQUFBd1Isb0JBQUEyQixPQUFBblQsRUFBQUMsTUFBQTBJLGFBQUEsTUFBQTVHLEVBQUEsWUFoR0EsSUFPQW1xQixFQUNBQyxFQVJBQyxFQUFBLEdBQUFycUIsRUFBQXRpRCxPQUNBNHNFLEVBQUF0cUIsRUFBQXNxQixTQUNBQyxHQUFBRixHQUFBQyxFQUFBdHFCLEVBQUFsUSxVQUFBLEtBQ0EwNkIsRUFBQXZzQixFQUFBQyxNQUFBdUMsaUJBQUFSLEtBQ0FncUIsRUFBQS9wQixFQUFBLzhCLElBQUEsb0JBQUErOEIsRUFBQSxJQUFBLFNBQ0Ewb0IsRUFBQTFvQixFQUFBLzhCLElBQUEsMkJBQ0FzbkQsS0FHQVAsS0FFQUQsSUFDQUssRUFDQUosRUFBQWpzQixFQUFBQyxNQUFBNEYsU0FBQTRsQixJQUFBenJCLEVBQUEyYSxpQkFBQUMsV0FDQTdZLEVBQUF2aEIsZUFBQSxHQUNBeXJDLEVBQUExbUUsS0FBQXk2QyxFQUFBMmEsaUJBQUFDLFVBQUE3WSxFQUFBcitDLFFBQUFxK0MsRUFBQXZoQixrQkFJQStyQyxTQUNBLElBQUFBLEVBQUE5c0UsU0FDQThzRSxHQUFBQSxJQUdBSixFQUFBbnNCLEVBQUFDLE1BQUE4RixZQUFBd21CLEVBQUEsU0FBQWpuQixHQUNBLE9BQUFxbEIsR0FBQXJsQixJQUFBMThDLEdBQUEsT0FBQTA4QyxJQUFBdEYsRUFBQUMsTUFBQXVDLGlCQUFBOEMsRUFBQSxZQUlBckQsRUFBQSxJQUFBLG1CQUdBLFFBRkFpcUIsRUFBQWxzQixFQUFBQyxNQUFBdUMsaUJBQUFQLEVBQUEvOEIsSUFBQSxxQkFFQWduRCxJQUFBdGpFLEdBQ0F1akUsRUFBQS96RCxRQUFBb3pELElBcUJBLElBQUFPLEdBQUEsRUF3QkFTLEVBQUEsYUFDQSxTQUFBaGxDLEdBQ0F1YSxFQUFBNXlDLFlBQUFxNEIsSUFxQkEsSUFBQTFuQyxFQUFBOHJFLEVBQ0EzcEIsRUFBQSxJQUFBLHVCQUFBLG1CQUFBQSxFQUFBLzhCLElBQUEsd0JBQ0FwbEIsRUFBQSxTQUFBK3JFLEVBQUFDLEdBQ0FGLEVBQUFDLEVBQUFDLEdBQ0E5ckIsRUFBQXdSLG9CQUFBMkIsT0FBQWxSLEVBQUEvOEIsSUFBQSxzQkFBQSxNQUFBNG1ELEVBQUEsR0FBQUQsSUFBQUwsRUFBQUssRUFBQWpqRSxNQUlBbzNDLEVBQUFDLE1BQUF3c0IsbUNBQUExcUIsRUFBQW9xQixFQXREQSxTQUFBTixFQUFBaGlFLEVBQUE2aUUsR0FDQUEsRUFBQWp0RSxTQUNBd3NFLEdBQUFELEdBQUFVLEVBQUEsR0FBQXg4QyxVQUFBOHZCLEVBQUEyYSxpQkFBQUMsVUFBQThSLEVBQUEsUUFDQVgsR0FBQSxHQUVBLElBQUF2a0MsRUFBQXVhLEVBQUFwOUIsY0FBQXBWLGNBQUEsVUFDQSxHQUFBczhELElBQUFMLEVBQ0F4ckIsRUFBQUMsTUFBQXNKLGVBQUEvaEIsRUFBQXlhLEVBQUEvOEIsSUFBQSxtQkFDQTg2QixFQUFBMmEsaUJBQUFHLFdBQUF0ekIsRUFBQTUrQixPQUNBLENBRUEsSUFBQW95RCxFQUFBMFEsRUFBQUcsRUFBQTVwQixFQUFBLzhCLElBQUEsZ0JBQUEybUQsR0FDQTdyQixFQUFBMmEsaUJBQUFHLFdBQUF0ekIsRUFBQXdZLEVBQUFDLE1BQUF1QyxpQkFBQXdZLElBR0EsSUFBQTJSLEVBQUFqQixFQUFBRyxFQUFBNXBCLEVBQUEvOEIsSUFBQSxlQUFBODFDLEdBQ0FoYixFQUFBQyxNQUFBc0osZUFBQS9oQixFQUFBbWxDLEdBRUEsT0FBQW5sQyxJQW9DQWdsQyxFQUFBMXNFLEdBRUFrZ0QsRUFBQXdSLG9CQUFBMkIsT0FBQSxXQUNBLEdBQUE2WSxFQUVBaHNCLEVBQUEyYSxpQkFBQUcsV0FBQS9ZLEVBQUEvQixFQUFBQyxNQUFBdUMsaUJBQUFQLEVBQUEvOEIsSUFBQSxXQUFBLE9BQ0EsRUFHQW1uRCxFQUdBSixFQUFBeHNFLFFBQUFnc0UsSUFBQWhzRSxPQUFBd3NFLEVBQUF4c0UsT0FJQXdzRSxFQUFBeHNFLFFBQUFzaUQsRUFBQXZoQixlQUFBLEVBQ0F3ZixFQUFBMmEsaUJBQUFDLFVBQUE3WSxFQUFBcitDLFFBQUFxK0MsRUFBQXZoQixrQkFBQXlyQyxFQUFBLEdBQ0FBLEVBQUF4c0UsUUFBQXNpRCxFQUFBdmhCLGVBQUEsSUFPQXdmLEVBQUFDLE1BQUEwSSxhQUFBNUcsRUFBQSxhQU1BL0IsRUFBQUMsTUFBQTJKLHVDQUFBN0gsR0FFQXVxQixHQUFBNXFFLEtBQUFpVyxJQUFBMjBELEVBQUF2cUIsRUFBQWxRLFdBQUEsS0FDQWtRLEVBQUFsUSxVQUFBeTZCLEtBR0F0c0IsRUFBQThCLGdCQUFBLFFBQUErWSxzQkFBQTdhLEVBQUFDLE1BQUFpTCxRQUFBUyxVQUNBM0wsRUFBQThCLGdCQUFBLGlCQUNBN21DLE9BQUEsVUFBQSxXQUNBeEMsS0FBQSxTQUFBc3BDLEVBQUFDLEVBQUFDLEdBQ0FqQyxFQUFBQyxNQUFBa0kscUJBQUFwRyxFQUFBLFNBQUEsV0FDQSxJQUFBN3dDLEVBQUE4d0MsSUFBQTRxQixLQUNBNXNCLEVBQUFDLE1BQUF1RSxhQUFBekMsRUFBQXB5QyxxQkFBQSxVQUFBLFNBQUEyWixHQUNBQSxFQUFBNEcsVUFDQTA4QyxFQUFBcm5FLEtBQUF5NkMsRUFBQTJhLGlCQUFBQyxVQUFBdHhDLE1BRUEwMkIsRUFBQW9ELG9CQUFBMloscUJBQUE3ckQsRUFBQSt3QyxFQUFBLGtCQUFBMnFCLE1BR0ExRCxPQUFBLFNBQUFubkIsRUFBQUMsR0FDQSxHQUFBLFVBQUFoQyxFQUFBQyxNQUFBaUUsYUFBQW5DLEdBQ0EsTUFBQSxJQUFBM2lELE1BQUEsa0RBRUEsSUFBQXF6RCxFQUFBelMsRUFBQUMsTUFBQXVDLGlCQUFBUixLQUNBc3FCLEVBQUF2cUIsRUFBQWxRLFVBRUE0Z0IsR0FBQSxpQkFBQUEsRUFBQWh6RCxRQUNBdWdELEVBQUFDLE1BQUF1RSxhQUFBekMsRUFBQXB5QyxxQkFBQSxVQUFBLFNBQUEyWixHQUNBLElBQUFrK0IsRUFBQXhILEVBQUFDLE1BQUFvRixhQUFBb04sRUFBQXpTLEVBQUEyYSxpQkFBQUMsVUFBQXR4QyxLQUFBLEVBQ0FBLEVBQUE0RyxVQUFBczNCLEdBQ0F4SCxFQUFBQyxNQUFBcUgsNEJBQUFoK0IsRUFBQWsrQixLQUtBekYsRUFBQWxRLFVBQUF5NkIsSUFHQXRzQixFQUFBb0Qsb0JBQUE2WSxlQUFBLGlCQUFBLEVBQ0FqYyxFQUFBOEIsZ0JBQUEsT0FDQW9uQixPQUFBLFNBQUFubkIsRUFBQUMsR0FDQSxJQUFBOXdDLEVBQUE4dUMsRUFBQUMsTUFBQXVDLGlCQUFBUixTQUNBaEMsRUFBQUMsTUFBQTRELGNBQUEzeUMsRUFBQSxTQUFBMjdELEVBQUFDLEdBR0EsUUFGQUEsRUFBQTlzQixFQUFBQyxNQUFBdUMsaUJBQUFzcUIsS0FFQUEsSUFBQWxrRSxJQUFBLElBQUFra0UsSUFFQUEsRUFBQSxJQUdBL3FCLEVBQUFyeEMsTUFBQW04RCxHQUFBQyxNQUlBOXNCLEVBQUE4QixnQkFBQSxRQUNBcnBDLEtBQUEsU0FBQXNwQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLEdBQUEsbUJBQUFILElBQ0EsTUFBQSxJQUFBNWlELE1BQUEscURBQ0E0Z0QsRUFBQUMsTUFBQWtJLHFCQUFBcEcsRUFBQSxTQUFBLFNBQUExOEMsR0FDQSxJQUFBOGtFLEVBQ0FqNUQsRUFBQTh3QyxJQUNBLElBQUFtb0IsRUFBQWo1RCxFQUFBMVIsS0FBQTJpRCxFQUFBLE1BQUFKLEdBQ0EsU0FDQSxJQUFBb29CLElBQ0E5a0UsRUFBQTZrQyxlQUNBN2tDLEVBQUE2a0MsaUJBRUE3a0MsRUFBQTRsQyxhQUFBLFFBTUErVSxFQUFBOEIsZ0JBQUEsTUFDQXJwQyxLQUFBLFdBR0EsT0FBQTBxQyw0QkFBQSxJQUVBK2xCLE9BQUEsU0FBQW5uQixFQUFBQyxHQUNBaEMsRUFBQUMsTUFBQXNKLGVBQUF4SCxFQUFBQyxPQUdBaEMsRUFBQThDLGdCQUFBUSxnQkFBQSxNQUFBLEVBQ0EsV0FFQSxHQUFBcHZDLEdBQUFBLEVBQUFsRSxVQUNBLElBQUErOEQsRUFBQSxTQUFBemhELEdBQ0EsR0FBQUEsRUFDQSxPQUFBbFMsV0FBQWtTLEVBQUEsS0FLQTBoRCxFQUFBOTRELEVBQUErNEQsT0FBQS80RCxFQUFBKzRELE1BQUFudEQsU0FBQW5KLFNBQUF6QyxFQUFBKzRELE1BQUFudEQsV0FDQTVQLEVBQUFnRSxFQUFBbEUsVUFBQUUsVUFDQWc5RCxFQUFBSCxFQUFBNzhELEVBQUErRixNQUFBLDhDQUNBazNELEVBQUFKLEVBQUE3OEQsRUFBQStGLE1BQUEscUJBU0EsR0FBQStwQyxFQUFBQyxNQUFBK0UsVUFBQSxHQUNBLElBQUFvb0IsRUFBQXB0QixFQUFBQyxNQUFBaUwsUUFBQVMsVUFDQTBoQixFQUFBcnRCLEVBQUFDLE1BQUFpTCxRQUFBUyxVQUNBMmhCLEVBQUEsU0FBQWpvRSxHQUNBLElBQUF5TCxFQUFBN1AsS0FBQXFtQixjQUNBdU8sRUFBQS9rQixHQUFBa3ZDLEVBQUFDLE1BQUFpTCxRQUFBaG1DLElBQUFwVSxFQUFBdThELEdBQ0F4M0MsR0FDQUEsRUFBQXh3QixJQUdBa29FLEVBQUEsU0FBQXhyQixFQUFBbHNCLEdBQ0EsSUFBQXcxQyxFQUFBdHBCLEVBQUFwOUIsY0FDQXE3QixFQUFBQyxNQUFBaUwsUUFBQWhtQyxJQUFBbW1ELEVBQUErQixLQUNBcHRCLEVBQUFDLE1BQUFpTCxRQUFBM25ELElBQUE4bkUsRUFBQStCLEdBQUEsR0FDQXB0QixFQUFBQyxNQUFBa0kscUJBQUFrakIsRUFBQSxrQkFBQWlDLElBRUF0dEIsRUFBQUMsTUFBQWlMLFFBQUEzbkQsSUFBQXcrQyxFQUFBc3JCLEVBQUF4M0MsSUFJQW1xQixFQUFBOEIsZ0JBQUEsV0FDQXJwQyxLQUFBLFNBQUFzcEMsRUFBQUMsRUFBQUMsR0FFQSxJQUNBdXJCLEVBQ0FDLEVBRkFDLEVBQUEzckIsRUFBQTd3QyxNQUlBbzRELEVBQUEsU0FBQWprRSxHQUNBd0gsYUFBQTJnRSxHQUNBQyxFQUFBRCxFQUFBNWtFLEVBRUEsSUFBQStrRSxFQUFBNXJCLEVBQUE3d0MsTUFDQXc4RCxJQUFBQyxJQUVBdG9FLElBQUEwOEMsRUFBQSw0QkFBQTE4QyxFQUFBdEIsTUFDQTJwRSxFQUFBQyxFQUNBM3RCLEVBQUFvRCxvQkFBQTJaLHFCQUFBL2EsSUFBQUMsRUFBQSxZQUFBMHJCLEtBSUFDLEVBQUEsU0FBQXZvRSxHQUNBLElBQUFtb0UsRUFBQSxDQUtBQyxFQUFBMXJCLEVBQUE3d0MsTUFDQSxJQUFBMmtCLEVBQUF5ekMsRUFBQTl3RCxLQUFBdXBDLEdBQUFoK0MsS0FBQXNCLEVBQUF0QixPQUNBeXBFLEVBQUF4dEIsRUFBQUMsTUFBQXQxQyxXQUFBa3JCLEVBQUEsS0FNQWc0QyxFQUFBLEdBQUE3dEIsRUFBQUMsTUFBQStFLFVBQUE0b0IsRUFBQXRFLEVBRUF3RSxFQUFBLFdBQ0EsSUFBQWxFLEVBQUE1cEIsRUFBQUMsTUFBQXVDLGlCQUFBUixLQUVBLE9BQUE0bkIsR0FBQUEsSUFBQWhoRSxJQUNBZ2hFLEVBQUEsSUFHQTZELElBQUE3a0UsR0FBQWdoRSxJQUFBNkQsRUFPQTFyQixFQUFBN3dDLFFBQUEwNEQsSUFDQThELEVBQUE5RCxFQUNBN25CLEVBQUE3d0MsTUFBQTA0RCxHQVJBNXBCLEVBQUFDLE1BQUF0MUMsV0FBQW1qRSxFQUFBLElBWUFDLEVBQUEsU0FBQTFvRSxFQUFBd3dCLEdBQ0FtcUIsRUFBQUMsTUFBQWtJLHFCQUFBcEcsRUFBQTE4QyxFQUFBd3dCLElBR0FtcUIsRUFBQThCLGdCQUFBLFVBQUEsZUFFQTlCLEVBQUFDLE1BQUF1RSxhQUFBeEUsRUFBQThCLGdCQUFBLFVBQUEsZUFBQSxTQUFBd1EsR0FDQSxTQUFBQSxFQUFBN3hELE1BQUEsRUFBQSxHQUNBc3RFLEVBQUF6YixFQUFBN3hELE1BQUEsR0FBQW10RSxHQUVBRyxFQUFBemIsRUFBQWdYLEtBSUF0cEIsRUFBQUMsTUFBQStFLFVBQUEsSUFLQStvQixFQUFBLGlCQUFBLFNBQUExb0UsR0FDQSxVQUFBQSxFQUFBaTFELGNBQ0F1VCxFQUFBeG9FLEtBSUEsR0FBQTI2QyxFQUFBQyxNQUFBK0UsWUFJQStvQixFQUFBLFFBQUF6RSxHQUNBeUUsRUFBQSxVQUFBekUsSUFFQXRwQixFQUFBQyxNQUFBK0UsV0FBQSxJQU1BdW9CLEVBQUF4ckIsRUFBQThyQixHQUNBRSxFQUFBLFVBQUFILE1BS0FHLEVBQUEsUUFBQXpFLEdBRUE0RCxFQUFBLEdBQUEsYUFBQWx0QixFQUFBQyxNQUFBaUUsYUFBQW5DLElBR0Fnc0IsRUFBQSxVQUFBSCxHQUNBRyxFQUFBLFFBQUFILEdBQ0FHLEVBQUEsTUFBQUgsSUFDQVosRUFBQSxHQUdBZSxFQUFBLFVBQUFILEdBQ0FULEVBQUEsSUFFQVksRUFBQSxrQkFBQXpFLEdBR0F5RSxFQUFBLFdBQUF6RSxHQUNBeUUsRUFBQSxPQUFBekUsS0FNQXlFLEVBQUEsU0FBQXpFLEdBRUF0cEIsRUFBQTkxQixTQUFBNGpELEVBQUEsTUFBQTVxQix5QkFBQW5CLE1BR0EvQixFQUFBb0Qsb0JBQUE2WSxlQUFBLFdBQUEsRUFHQWpjLEVBQUE4QixnQkFBQSxXQUVBa3NCLFdBQUEsU0FBQTk4RCxFQUFBaEgsRUFBQStqRSxHQUNBQSxFQUFBLFlBQUEvOEQsS0FqTEEsR0FxTEE4dUMsRUFBQThCLGdCQUFBLFlBQ0FycEMsS0FBQSxTQUFBc3BDLEVBQUFDLEdBQ0EsR0FBQUEsSUFBQSxDQUNBLElBQUE5M0MsRUFBQSxnQkFBQTgxQyxFQUFBOEIsZ0JBQUEsV0FBQW9zQixhQUNBbHVCLEVBQUFDLE1BQUF5SixlQUFBM0gsRUFBQTczQyxNQUlBODFDLEVBQUE4QixnQkFBQSxXQUFBb3NCLGFBQUEsRUFDQWx1QixFQUFBOEIsZ0JBQUEsT0FDQTdtQyxPQUFBLFVBQUEsV0FDQXhDLEtBQUEsU0FBQXNwQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUEsU0FBQUYsRUFBQWlHLFFBQUF0eEMsZUFBQSxZQUFBcXJDLEVBQUFoK0MsTUFBQSxTQUFBZytDLEVBQUFoK0MsS0FBQSxDQU1BLElBQUFvcUUsR0FBQSxVQUNBQyxFQUFBbnNCLEVBQUEvOEIsSUFBQSxlQUNBbXBELEdBQUEsRUFDQVosRUFBQSxLQUVBVyxJQUNBLGlCQUFBQSxJQUNBQSxHQUFBQSxJQUNBcHVCLEVBQUFDLE1BQUErRixhQUFBbW9CLEVBQUFDLEdBQ0FELEVBQUFudUIsRUFBQUMsTUFBQTJGLHVCQUFBdW9CLElBR0EsSUFBQUcsRUFBQSxXQUNBYixFQUFBLEtBQ0FZLEdBQUEsRUFDQSxJQUFBekUsRUFBQTVuQixJQUNBMnJCLEVBQUEzdEIsRUFBQTJhLGlCQUFBQyxVQUFBN1ksR0FDQS9CLEVBQUFvRCxvQkFBQTJaLHFCQUFBNk0sRUFBQTNuQixFQUFBLFFBQUEwckIsSUFLQTN0QixFQUFBQyxNQUFBK0UsV0FBQSxTQUFBakQsRUFBQWlHLFFBQUF0eEMsZUFBQSxRQUFBcXJDLEVBQUFoK0MsTUFDQSxPQUFBZytDLEVBQUF3c0IsZ0JBQUF4c0IsRUFBQTN5QyxNQUFBLE9BQUEyeUMsRUFBQTN5QyxLQUFBbS9ELGdCQUNBLEdBQUF2dUIsRUFBQUMsTUFBQW9GLGFBQUE4b0IsRUFBQSxvQkFDQW51QixFQUFBQyxNQUFBa0kscUJBQUFwRyxFQUFBLGlCQUFBLFdBQUFzc0IsR0FBQSxJQUNBcnVCLEVBQUFDLE1BQUFrSSxxQkFBQXBHLEVBQUEsUUFBQSxXQUFBc3NCLEdBQUEsSUFDQXJ1QixFQUFBQyxNQUFBa0kscUJBQUFwRyxFQUFBLE9BQUEsV0FDQXNzQixHQUNBQyxPQUtBdHVCLEVBQUFDLE1BQUF1RSxhQUFBMnBCLEVBQUEsU0FBQTdiLEdBSUEsSUFBQXo4QixFQUFBeTRDLEVBQ0F0dUIsRUFBQUMsTUFBQXlILGlCQUFBNEssRUFBQSxXQUNBejhCLEVBQUEsV0FRQTQzQyxFQUFBenRCLEVBQUEyYSxpQkFBQUMsVUFBQTdZLEdBQ0EvQixFQUFBQyxNQUFBdDFDLFdBQUEyakUsRUFBQSxJQUVBaGMsRUFBQUEsRUFBQTV2RCxVQUFBLFFBQUFqRCxTQUVBdWdELEVBQUFDLE1BQUFrSSxxQkFBQXBHLEVBQUF1USxFQUFBejhCLEtBR0EsSUFBQTI0QyxFQUFBLFdBQ0EsSUFBQS9iLEVBQUF6UyxFQUFBQyxNQUFBdUMsaUJBQUFSLEtBQ0EyckIsRUFBQTN0QixFQUFBMmEsaUJBQUFDLFVBQUE3WSxHQUVBLEdBQUEsT0FBQTByQixHQUFBaGIsSUFBQWdiLEdBT0EsR0FGQWhiLElBQUFrYixFQUdBLEdBQUEsV0FBQTN0QixFQUFBQyxNQUFBaUUsYUFBQW5DLEdBQUEsQ0FDQSxJQUFBZ1osRUFBQTlZLEVBQUEvOEIsSUFBQSxtQkFDQXVwRCxFQUFBLFdBQ0F6dUIsRUFBQTJhLGlCQUFBRyxXQUFBL1ksRUFBQTBRLEVBQUFzSSxJQUVBMFQsSUFFQTFULEdBQUF0SSxJQUFBelMsRUFBQTJhLGlCQUFBQyxVQUFBN1ksR0FRQS9CLEVBQUFDLE1BQUF0MUMsV0FBQThqRSxFQUFBLEdBTEF6dUIsRUFBQXdSLG9CQUFBMkIsT0FBQW5ULEVBQUFDLE1BQUEwSSxhQUFBLE1BQUE1RyxFQUFBLGdCQVFBL0IsRUFBQTJhLGlCQUFBRyxXQUFBL1ksRUFBQTBRLFFBekJBelMsRUFBQUMsTUFBQXQxQyxXQUFBNmpFLEVBQUEsSUE4QkF4dUIsRUFBQTkxQixTQUFBc2tELEVBQUEsTUFBQXRyQix5QkFBQW5CLFNBaEdBL0IsRUFBQTJqQiw0QkFBQTVoQixHQUFBMm5CLGFBQUExbkIsS0FrR0FrbkIsT0FBQSxjQUVBbHBCLEVBQUFvRCxvQkFBQTZZLGVBQUEsT0FBQSxFQUNBamMsRUFBQThCLGdCQUFBLFNBQ0FvbkIsT0FBQSxTQUFBbm5CLEVBQUFDLEdBQ0EsSUFBQTl3QyxFQUFBOHVDLEVBQUFDLE1BQUF1QyxpQkFBQVIsS0FDQTBzQixJQUFBLFFBQUEzc0IsRUFBQXJ4QyxNQUFBa1UsU0FDQTFULElBQUF3OUQsRUFDQTNzQixFQUFBcnhDLE1BQUFrVSxRQUFBLElBQ0ExVCxHQUFBdzlELElBQ0Ezc0IsRUFBQXJ4QyxNQUFBa1UsUUFBQSxVQTl1QkEsU0FBQTB0QyxHQUNBdFMsRUFBQThCLGdCQUFBd1EsSUFDQTc1QyxLQUFBLFNBQUFzcEMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FNQSxPQUFBbkMsRUFBQThCLGdCQUFBLE1BQUEsS0FBQXRpRCxLQUFBeUIsS0FBQThnRCxFQUxBLFdBQ0EsSUFBQTdoRCxLQUVBLE9BREFBLEVBQUFveUQsR0FBQXRRLElBQ0E5aEQsR0FFQStoRCxFQUFBQyxFQUFBQyxLQTB1QkF3c0IsQ0FBQSxTQTRCQTN1QixFQUFBaXJCLGVBQUEsYUFFQWpyQixFQUFBaXJCLGVBQUF6cEUsVUFBQSxxQkFBQSxTQUFBb3RFLEVBQUF6c0IsRUFBQXorQyxFQUFBbXJFLEdBQ0EsTUFBQSxJQUFBenZFLE1BQUEsa0NBR0E0Z0QsRUFBQWlyQixlQUFBenBFLFVBQUEsK0JBQUEsU0FBQXNOLEdBQ0EsTUFBQSxJQUFBMVAsTUFBQSw0Q0FHQTRnRCxFQUFBaXJCLGVBQUF6cEUsVUFBQSxtQkFBQSxTQUFBc2hFLEVBQUErTCxHQUVBLEdBQUEsaUJBQUEvTCxFQUFBLENBRUEsSUFBQXpoRCxHQURBd3RELEVBQUFBLEdBQUFoZ0UsR0FDQTRsQixlQUFBcXVDLEdBQ0EsSUFBQXpoRCxFQUNBLE1BQUEsSUFBQWppQixNQUFBLGdDQUFBMGpFLEdBQ0EsT0FBQSxJQUFBOWlCLEVBQUE4dUIsZ0JBQUFDLFdBQUExdEQsR0FDQSxHQUFBLEdBQUF5aEQsRUFBQTFpRCxVQUFBLEdBQUEwaUQsRUFBQTFpRCxTQUVBLE9BQUEsSUFBQTQvQixFQUFBOHVCLGdCQUFBRSxrQkFBQWxNLEdBRUEsTUFBQSxJQUFBMWpFLE1BQUEsMEJBQUEwakUsSUFHQTlpQixFQUFBaXJCLGVBQUF6cEUsVUFBQSxlQUFBLFNBQUFzaEUsRUFBQTNnQixFQUFBeitDLEVBQUFtckUsR0FDQSxJQUFBRCxFQUFBM3RFLEtBQUEsbUJBQUE2aEUsRUFBQStMLEdBQ0EsT0FBQTV0RSxLQUFBLHFCQUFBMnRFLEVBQUF6c0IsRUFBQXorQyxFQUFBbXJFLElBR0E3dUIsRUFBQWlyQixlQUFBenBFLFVBQUEsb0JBQUEsU0FBQXNoRSxFQUFBK0wsR0FFQSxPQUFBLElBQUE1dEUsS0FBQSx3QkFFQUEsS0FBQSxtQkFBQTZoRSxFQUFBK0wsR0FBQSxLQUFBLGdCQUdBN3VCLEVBQUFpckIsZUFBQXpwRSxVQUFBLGdCQUFBLFNBQUFzaEUsRUFBQW1NLEVBQUFKLEdBQ0EsSUFBQUQsRUFBQTN0RSxLQUFBLG1CQUFBNmhFLEVBQUErTCxHQUNBSyxFQUFBRCxFQUFBTCxFQUFBLFFBQ0FBLEVBQUEsS0FBQU0sR0FDQU4sRUFBQSxLQUFBLGVBQUEsSUFHQTV1QixFQUFBdUQsYUFBQSxpQkFBQXZELEVBQUFpckIsZ0JBRUFqckIsRUFBQW12QixrQkFBQSxXQUlBLFNBQUFDLEVBQUF4UyxHQUVBLElBQUEsSUFEQXlTLEVBQUFydkIsRUFBQW9ELG9CQUFBQyx5QkFDQW5rRCxFQUFBLEVBQUFBLEVBQUEwOUQsRUFBQW45RCxPQUFBUCxJQUFBLENBQ0EsSUFBQWdHLEVBQUEwM0QsRUFBQTE5RCxHQUFBLElBQ0EsR0FBQW13RSxFQUFBMWxFLGVBQUF6RSxHQUFBLENBQ0EsSUFBQW9xRSxFQUFBRCxFQUFBbnFFLEdBRUEsR0FBQSxtQkFBQW9xRSxFQUFBLENBQ0EsSUFBQUMsRUFBQUQsRUFBQTFTLEVBQUExOUQsR0FBQSxPQUNBLEdBQUFxd0UsRUFDQSxNQUFBLElBQUFud0UsTUFBQW13RSxRQUNBLElBQUFELEVBQ0EsTUFBQSxJQUFBbHdFLE1BQUEsOENBQUE4RixFQUFBLG9DQU1BLFNBQUFzcUUsRUFBQUMsRUFBQUMsRUFBQXR1RCxFQUFBNnBELEdBQ0EsSUFBQTBFLEVBQUEzdkIsRUFBQW9ELG9CQUFBaVksbUJBQUFvVSxHQUNBTCxFQUFBTyxHQUNBLElBS0FDLEVBQ0Esd0VBTkE1dkIsRUFBQW9ELG9CQUFBOFksbUJBQUF5VCxHQUFBNVAsZ0JBQUEsSUFNQSxhQUFBMytDLEVBQUExSyxjQUFBLEtBQ0EsT0FBQXUwRCxFQUFBLCtCQUFBMkUsR0FBQUYsRUEvQkEsSUFBQUcsRUFBQSxvSUFDQUMsRUFBQSxrQ0FpQ0EsT0FDQUMsMEJBQUEsU0FBQWpOLEVBQUFtSSxFQUFBNEQsR0FDQTVELEVBQUEsb0JBQUFuSSxFQUFBK0wsSUFDQTVELEVBQUEsZ0JBQUFuSSxFQUFBLFNBQUFrTixHQUNBLE9BQUFod0IsRUFBQW12QixrQkFBQWMsOEJBQUFELEVBQUEvRSxJQUNBNEQsSUFHQW9CLDhCQUFBLFNBQUFELEVBQUEvRSxHQUNBLE9BQUErRSxFQUFBNW9FLFFBQUF5b0UsRUFBQSxXQUNBLE9BQUFMLEVBQUEzcUUsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQW9tRSxLQUNBN2pFLFFBQUEwb0UsRUFBQSxXQUNBLE9BQUFOLEVBQUEzcUUsVUFBQSxHQUFBLG9CQUFBLFdBQUFvbUUsTUFJQWlGLG1DQUFBLFNBQUE1UCxFQUFBbC9DLEdBQ0EsT0FBQTQrQixFQUFBeU4sWUFBQVMsUUFBQSxTQUFBMUgsRUFBQXJFLEdBQ0EsSUFBQWd1QixFQUFBM3BCLEVBQUF2d0IsWUFDQWs2QyxHQUFBQSxFQUFBL3VELFNBQUExSyxnQkFBQTBLLEdBQ0E0K0IsRUFBQTJqQiw0QkFBQXdNLEVBQUE3UCxFQUFBbmUsT0F2REEsR0FnRUFuQyxFQUFBdUQsYUFBQSxjQUFBdkQsRUFBQW12QixrQkFBQWUsb0NBQ0EsV0EyRUEsU0FBQUUsRUFBQXJ1QixHQUNBLE9BQUEvQixFQUFBQyxNQUFBaUwsUUFBQWhtQyxJQUFBNjhCLEVBQUFzdUIsT0FFQSxTQUFBQyxFQUFBdnVCLEVBQUF0MkMsR0FDQXUwQyxFQUFBQyxNQUFBaUwsUUFBQTNuRCxJQUFBdytDLEVBQUFzdUIsRUFBQTVrRSxHQXREQXUwQyxFQUFBOHVCLG1CQVVBOXVCLEVBQUE4dUIsZ0JBQUFDLFdBQUEsU0FBQWh0QixHQUdBLEdBRkE5Z0QsS0FBQTh0RSxXQUFBaHRCLEVBRUFBLEVBQUEsQ0FDQSxJQUFBbUMsRUFBQWxFLEVBQUFDLE1BQUFpRSxhQUFBbkMsR0FDQTlnRCxLQUFBc3ZFLGFBQ0EsV0FBQXJzQixFQVhBLEVBWUEsYUFBQUEsRUFYQSxFQWFBLFlBQUFBLEdBQUFuQyxFQUFBajZCLFNBQUEsS0FBQWk2QixFQUFBajZCLFFBQUExSCxTQVpBLEVBQ0EsSUFnQkE0L0IsRUFBQTh1QixnQkFBQUMsV0FBQXZ0RSxVQUFBLEtBQUEsV0FDQSxJQUFBZ3ZFLEVBcEJBLElBb0JBdnZFLEtBQUFzdkUsYUFBQSxPQW5CQSxJQW9CQXR2RSxLQUFBc3ZFLGFBQUEsUUFDQSxZQUVBLEdBQUEsR0FBQTFyRSxVQUFBcEYsT0FDQSxPQUFBd0IsS0FBQTh0RSxXQUFBeUIsR0FFQSxJQUFBNUQsRUFBQS9uRSxVQUFBLEdBQ0EsY0FBQTJyRSxFQUNBeHdCLEVBQUFDLE1BQUFzTixRQUFBdHNELEtBQUE4dEUsV0FBQW5DLEdBRUEzckUsS0FBQTh0RSxXQUFBeUIsR0FBQTVELEdBSUEsSUFBQTZELEVBQUF6d0IsRUFBQUMsTUFBQWlMLFFBQUFTLFVBQUEsSUFDQTNMLEVBQUE4dUIsZ0JBQUFDLFdBQUF2dEUsVUFBQSxLQUFBLFNBQUEwRCxHQUNBLEdBQUEsSUFBQUwsVUFBQXBGLE9BQ0EsT0FBQXVnRCxFQUFBQyxNQUFBaUwsUUFBQWhtQyxJQUFBamtCLEtBQUE4dEUsV0FBQTBCLEVBQUF2ckUsR0FFQTg2QyxFQUFBQyxNQUFBaUwsUUFBQTNuRCxJQUFBdEMsS0FBQTh0RSxXQUFBMEIsRUFBQXZyRSxFQUFBTCxVQUFBLEtBSUEsSUFBQXdyRSxFQUFBcndCLEVBQUFDLE1BQUFpTCxRQUFBUyxVQVFBM0wsRUFBQTh1QixnQkFBQUMsV0FBQXZ0RSxVQUFBLE1BQUEsV0FDQSxJQUFBdWdELEVBQUE5Z0QsS0FBQTh0RSxXQUNBLEdBQUEsR0FBQWxxRSxVQUFBcEYsT0FHQSxPQUZBMndFLEVBQUFydUIsR0FDQTJ1QixnQkF0REEsSUF3REF6dkUsS0FBQXN2RSxhQUFBeHVCLEVBQUFqNkIsUUF2REEsSUF3REE3bUIsS0FBQXN2RSxhQUFBeHVCLEVBQ0FuNUMsR0FHQTBuRSxFQUFBdnVCLEdBQUEydUIsY0FEQTdyRSxVQUFBLE1BVUFtN0MsRUFBQTh1QixnQkFBQUUsa0JBQUEsU0FBQWp0QixHQUNBOWdELEtBQUE4dEUsV0FBQWh0QixHQUVBL0IsRUFBQTh1QixnQkFBQUUsa0JBQUF4dEUsVUFBQSxJQUFBdytDLEVBQUE4dUIsZ0JBQUFDLFdBQ0EvdUIsRUFBQTh1QixnQkFBQUUsa0JBQUF4dEUsVUFBQTRFLFlBQUE0NUMsRUFBQTh1QixnQkFBQUUsa0JBQ0FodkIsRUFBQTh1QixnQkFBQUUsa0JBQUF4dEUsVUFBQSxLQUFBLFdBQ0EsR0FBQSxHQUFBcUQsVUFBQXBGLE9BQUEsQ0FDQSxJQUFBa3hFLEVBQUFQLEVBQUFudkUsS0FBQTh0RSxZQUdBLE9BRkE0QixFQUFBQyxXQUFBaG9FLEdBQUErbkUsRUFBQUQsZ0JBQ0FDLEVBQUFDLFNBQUFELEVBQUFELGNBQUFocUQsV0FDQWlxRCxFQUFBQyxTQUVBLElBQUFoRSxFQUFBL25FLFVBQUEsR0FDQXlyRSxFQUFBcnZFLEtBQUE4dEUsWUFBQTZCLFNBQUFoRSxLQUlBNXNCLEVBQUF1RCxhQUFBLGtCQUFBdkQsRUFBQTh1QixpQkFDQTl1QixFQUFBdUQsYUFBQSw2QkFBQXZELEVBQUE4dUIsZ0JBQUFDLFlBQ0EvdUIsRUFBQXVELGFBQUEsb0NBQUF2RCxFQUFBOHVCLGdCQUFBRSxtQkF6SEEsR0EySEEsV0FRQSxTQUFBNkIsRUFBQUMsRUFBQUMsRUFBQTkvRCxHQUVBLElBREEsSUFBQXFZLEVBQUF3M0MsRUFBQWdRLEVBQUFFLEVBQUFoeEIsRUFBQThDLGdCQUFBN3NCLFlBQUE4NkMsR0FDQWpRLElBQUF4M0MsRUFBQXczQyxLQUFBa1EsR0FFQS8vRCxFQUFBcVksRUFEQXczQyxFQUFBOWdCLEVBQUE4QyxnQkFBQTdzQixZQUFBM00sSUFLQSxTQUFBMm5ELEVBQUE1cEIsRUFBQWxGLEdBT0EsR0FBQWtGLEVBQUE1bkQsT0FBQSxDQUNBLElBQUFxeEUsRUFBQXpwQixFQUFBLEdBQ0EwcEIsRUFBQTFwQixFQUFBQSxFQUFBNW5ELE9BQUEsR0FDQXlQLEVBQUE0aEUsRUFBQTVoRSxXQUNBNnhELEVBQUEvZ0IsRUFBQXVmLGdCQUFBLFNBQ0F5QixFQUFBRCxFQUFBLGVBRUEsR0FBQUMsRUFBQSxDQWdCQSxHQWZBNlAsRUFBQUMsRUFBQUMsRUFBQSxTQUFBem5ELEVBQUE0bkQsR0FDQSxJQUFBQyxFQUFBN25ELEVBQUE4bkQsZ0JBQ0FDLEVBQUFyUSxFQUFBeGhFLEtBQUF1aEUsRUFBQXozQyxHQUNBK25ELElBQ0EvbkQsSUFBQXduRCxJQUNBQSxFQUFBTyxFQUFBLElBQUFILEdBQ0E1bkQsSUFBQXluRCxJQUNBQSxFQUFBTSxFQUFBQSxFQUFBNXhFLE9BQUEsSUFBQTB4RSxNQU9BOXBCLEVBQUE1bkQsT0FBQSxHQUNBcXhFLEVBQ0EsT0FFQUEsSUFBQUMsRUFDQTFwQixFQUFBOWhELEtBQUF1ckUsSUFFQXpwQixFQUFBOWhELEtBQUF1ckUsRUFBQUMsR0FDQS93QixFQUFBQyxNQUFBbUgseUJBQUFDLEVBQUFuNEMsSUFNQTJoRSxFQUFBQyxFQUFBQyxFQUFBLFNBQUF6bkQsR0FDQSxJQUFBQSxFQUFBbEosVUFBQSxJQUFBa0osRUFBQWxKLFVBQ0E0L0IsRUFBQTZqQixjQUFBMWhCLEVBQUE3NEIsS0FFQXVuRCxFQUFBQyxFQUFBQyxFQUFBLFNBQUF6bkQsR0FDQSxJQUFBQSxFQUFBbEosVUFBQSxJQUFBa0osRUFBQWxKLFVBQ0E0L0IsRUFBQXlOLFlBQUFZLCtCQUFBL2tDLEdBQUE2NEIsTUFJQW5DLEVBQUFDLE1BQUFtSCx5QkFBQUMsRUFBQW40QyxJQUlBLFNBQUFvaUUsRUFBQUMsR0FDQSxPQUFBQSxFQUFBbnhELFNBQUFteEQsRUFDQUEsRUFBQTl4RSxPQUFBLEVBQUE4eEUsRUFBQSxHQUNBLEtBR0EsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQTVPLEVBQUEzZ0IsRUFBQXorQyxHQUNBQSxFQUFBQSxNQUNBLElBQ0FtckUsR0FEQTRDLEdBQUFILEVBQUFHLElBQ0EzTyxPQUFBbitDLGNBQ0FndEQsRUFBQWp1RSxFQUFBLGdCQUFBa3VFLEVBQ0E1eEIsRUFBQW12QixrQkFBQVksMEJBQUFqTixFQUFBNk8sRUFBQTlDLEdBQ0EsSUFBQWdELEVBQUFGLEVBQUEsZUFBQTdPLEVBQUEzZ0IsRUFBQXorQyxFQUFBbXJFLEdBR0EsR0FBQSxpQkFBQWdELEVBQUFweUUsUUFBQW95RSxFQUFBcHlFLE9BQUEsR0FBQSxpQkFBQW95RSxFQUFBLEdBQUF6eEQsU0FDQSxNQUFBLElBQUFoaEIsTUFBQSxxREFFQSxJQUFBMHlFLEdBQUEsRUFDQSxPQUFBSixHQUNBLElBQUEsa0JBQ0ExeEIsRUFBQThDLGdCQUFBQyxtQkFBQTB1QixFQUFBSSxHQUNBQyxHQUFBLEVBQ0EsTUFDQSxJQUFBLGNBQ0E5eEIsRUFBQUMsTUFBQStHLGdCQUFBeXFCLEVBQUFJLEdBQ0FDLEdBQUEsRUFDQSxNQUNBLElBQUEsbUJBQUEsTUFDQSxRQUNBLE1BQUEsSUFBQTF5RSxNQUFBLHVCQUFBc3lFLEdBU0EsT0FOQUksSUFDQWIsRUFBQVksRUFBQTF2QixHQUNBeitDLEVBQUEsYUFDQXM4QyxFQUFBd1Isb0JBQUEyQixPQUFBenZELEVBQUEsWUFBQSxNQUFBbXVFLEVBQUExdkIsRUFBQSxTQUdBMHZCLEVBR0EsU0FBQUUsRUFBQWpQLEVBQUFyM0QsRUFBQTRaLEdBRUEsT0FBQTI2QixFQUFBa0osYUFBQTRaLEdBRUFBLElBQ0EsbUJBQUFBLEVBRUFBLEVBQUFyM0QsRUFBQTRaLEdBR0F5OUMsRUF1RkEsU0FBQWtQLEVBQUFqd0IsRUFBQWt3QixHQUNBLElBQUFDLEVBQUFseUIsRUFBQUMsTUFBQWlMLFFBQUFobUMsSUFBQTY4QixFQUFBb3dCLEdBQ0FELEdBQUEsbUJBQUFBLEVBQUEsU0FDQUEsRUFBQXh4QixVQUNBVixFQUFBQyxNQUFBaUwsUUFBQTNuRCxJQUFBdytDLEVBQUFvd0IsRUFBQUYsR0FBQUEsRUFBQWhhLFdBQUFnYSxFQUFBcnBFLEdBdk5BLElBQUFncEUsRUFDQTV4QixFQUFBb3lCLGtCQUFBLFNBQUFuSCxHQUNBLEdBQUFBLEdBQUFyaUUsS0FBQXFpRSxhQUFBanJCLEVBQUFpckIsZ0JBQ0EsTUFBQSxJQUFBN3JFLE1BQUEsc0RBQ0F3eUUsRUFBQTNHLEdBNEhBanJCLEVBQUFxeUIsZUFBQSxTQUFBdlAsRUFBQXdQLEVBQUE1dUUsRUFBQSt0RSxFQUFBQyxHQUVBLEtBREFodUUsRUFBQUEsT0FDQSxnQkFBQWt1RSxJQUFBaHBFLEVBQ0EsTUFBQSxJQUFBeEosTUFBQSx1REFHQSxHQUZBc3lFLEVBQUFBLEdBQUEsa0JBRUFELEVBQUEsQ0FDQSxJQUFBYyxFQUFBakIsRUFBQUcsR0FHQWUsRUFBQUQsR0FBQSxlQUFBYixFQUFBYSxFQUFBcmpFLFdBQUFxakUsRUFFQSxPQUFBdnlCLEVBQUE0UCxvQkFDQSxXQUVBLElBQUF6TixFQUFBbXdCLEdBQUFBLGFBQUF0eUIsRUFBQW1DLGVBQ0Ftd0IsRUFDQSxJQUFBdHlCLEVBQUFtQyxlQUFBbXdCLEVBQUEsS0FBQSxLQUFBLE1BQUE3TyxvQkFBQSxJQUVBZ1AsRUFBQVYsRUFBQWpQLEVBQUEzZ0IsRUFBQSxNQUFBQSxHQUNBMHZCLEVBQUFMLEVBQUFDLEVBQUFDLEVBQUFlLEVBQUF0d0IsRUFBQXorQyxHQUVBLGVBQUFndUUsSUFFQWEsRUFBQWpCLEVBREFHLEVBQUFJLEtBSUEsTUFDQXBhLFlBbkJBLFdBQUEsT0FBQThhLElBQUF2eUIsRUFBQUMsTUFBQTZILDRCQUFBeXFCLElBbUJBcnZCLHlCQUFBc3ZCLElBSUEsT0FBQXh5QixFQUFBeU4sWUFBQVMsUUFBQSxTQUFBMUgsR0FDQXhHLEVBQUFxeUIsZUFBQXZQLEVBQUF3UCxFQUFBNXVFLEVBQUE4aUQsRUFBQSxrQkFLQXhHLEVBQUEweUIsc0JBQUEsU0FBQTVQLEVBQUE2UCxFQUFBanZFLEVBQUFrdkUsRUFBQUMsR0FHQSxJQUFBQyxFQUdBQyxFQUFBLFNBQUFDLEVBQUFucEUsR0FPQSxPQUxBaXBFLEVBQUFELEVBQUEsbUJBQUFHLEVBQUF0dkUsRUFBQSxHQUFBLFNBQUEyaEIsR0FDQUEsRUFBQSxPQUFBeGIsSUFJQTJuRSxFQUFBLEtBQUEsbUJBREFPLEVBQUFqUCxFQUFBa1EsRUFBQUYsR0FDQUEsRUFBQXB2RSxJQUlBdXZFLEVBQUEsU0FBQUQsRUFBQUUsRUFBQXJwRSxHQUNBb25FLEVBQUFpQyxFQUFBSixHQUNBcHZFLEVBQUEsYUFDQUEsRUFBQSxZQUFBd3ZFLEVBQUFGLEdBSUFGLEVBQUEsTUFHQSxPQUFBOXlCLEVBQUE0UCxvQkFBQSxXQUNBLElBQUEyYyxFQUFBdnNCLEVBQUFDLE1BQUF1QyxpQkFBQW13QixZQUNBLElBQUFwRyxFQUFBOXNFLFNBQ0E4c0UsR0FBQUEsSUFHQSxJQUFBSixFQUFBbnNCLEVBQUFDLE1BQUE4RixZQUFBd21CLEVBQUEsU0FBQWpuQixHQUNBLE9BQUE1aEQsRUFBQSxrQkFBQTRoRCxJQUFBMThDLEdBQUEsT0FBQTA4QyxJQUFBdEYsRUFBQUMsTUFBQXVDLGlCQUFBOEMsRUFBQSxZQUtBdEYsRUFBQXdSLG9CQUFBMkIsT0FBQW5ULEVBQUFDLE1BQUF3c0IsbUNBQUEsTUFBQW1HLEVBQUF6RyxFQUFBNEcsRUFBQXJ2RSxFQUFBdXZFLEtBRUEsTUFBQS92Qix5QkFBQTB2QixLQUdBLElBQUFULEVBQUFueUIsRUFBQUMsTUFBQWlMLFFBQUFTLFVBUUEzTCxFQUFBOEIsZ0JBQUEsVUFDQXJwQyxLQUFBLFNBQUFzcEMsRUFBQUMsR0FFQSxJQUFBbXhCLEVBQUFuekIsRUFBQUMsTUFBQXVDLGlCQUFBUixLQUNBLEdBQUEsaUJBQUFteEIsR0FBQUEsRUFBQSxLQUVBbnpCLEVBQUE4QyxnQkFBQUcsVUFBQWxCLFFBQ0EsR0FBQSxVQUFBb3hCLEVBQUEsQ0FLQSxJQUFBOXNELEVBQUE4c0QsRUFBQSxVQUNBLEdBQUFuekIsRUFBQWtKLGFBQUE3aUMsR0FDQSxNQUFBLElBQUFqbkIsTUFBQSw2REFFQTB2QyxFQUFBa1IsRUFBQUMsTUFBQXlHLG1DQUFBcmdDLEdBQ0EsSUFBQTI1QixFQUFBOHVCLGdCQUFBRSxrQkFBQWp0QixHQUFBLE1BQUFqVCxPQUNBLENBRUEsSUFBQXU1QixFQUFBcm9CLEVBQUE4QyxnQkFBQWo4QixXQUFBazdCLEdBQ0FqVCxFQUFBa1IsRUFBQUMsTUFBQXlHLG1DQUFBMmhCLEdBQ0EsSUFBQXJvQixFQUFBOHVCLGdCQUFBRSxrQkFBQWp0QixHQUFBLE1BQUFqVCxHQUVBLE9BQUFxVSw0QkFBQSxJQUVBK2xCLE9BQUEsU0FBQW5uQixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBSUFzd0IsRUFKQXZoRSxFQUFBOHdDLElBQ0F0K0MsRUFBQXM4QyxFQUFBQyxNQUFBdUMsaUJBQUF0eEMsR0FDQXV4QyxHQUFBLEVBQ0Eyd0IsRUFBQSxLQWdCQSxHQWJBLGlCQUFBMXZFLEdBQ0ErdUUsRUFBQXZoRSxFQUNBeE4sT0FFQSt1RSxFQUFBL3VFLEVBQUEsS0FHQSxPQUFBQSxJQUNBKytDLEVBQUF6QyxFQUFBQyxNQUFBdUMsaUJBQUE5K0MsRUFBQSxLQUNBKytDLEdBQUEsVUFBQS8rQyxJQUNBKytDLEdBQUF6QyxFQUFBQyxNQUFBdUMsaUJBQUE5K0MsRUFBQSxTQUdBLFlBQUFBLEVBQUEsQ0FFQSxJQUFBMnZFLEVBQUE1d0IsR0FBQS8rQyxFQUFBLFlBQ0EwdkUsRUFBQXB6QixFQUFBMHlCLHNCQUFBRCxHQUFBMXdCLEVBQUFzeEIsRUFBQTN2RSxFQUFBcStDLEVBQUFJLFFBQ0EsR0FBQU0sRUFFQSxDQUVBLElBQUE2d0IsRUFBQSxTQUFBNXZFLEVBQ0F5K0MsRUFBQXFoQix5QkFBQTkvRCxFQUFBLEtBQUFBLEVBQUEsSUFDQXkrQyxFQUNBaXhCLEVBQUFwekIsRUFBQXF5QixlQUFBSSxHQUFBMXdCLEVBQUF1eEIsRUFBQTV2RSxFQUFBcStDLFFBTkEvQixFQUFBOEMsZ0JBQUFHLFVBQUFsQixHQVVBaXdCLEVBQUFqd0IsRUFBQXF4QixLQUtBcHpCLEVBQUFvRCxvQkFBQUMseUJBQUEsU0FBQSxTQUFBOHZCLEdBQ0EsSUFBQUksRUFBQXZ6QixFQUFBb0Qsb0JBQUFpWSxtQkFBQThYLEdBRUEsT0FBQSxHQUFBSSxFQUFBOXpFLFFBQUE4ekUsRUFBQSxHQUFBLFFBQ0EsS0FFQXZ6QixFQUFBb0Qsb0JBQUEwWix5QkFBQXlXLEVBQUEsUUFDQSxLQUNBLHlGQUdBdnpCLEVBQUE4QyxnQkFBQVEsZ0JBQUEsVUFBQSxFQXhTQSxHQTJTQXRELEVBQUF1RCxhQUFBLG9CQUFBdkQsRUFBQW95QixtQkFDQXB5QixFQUFBdUQsYUFBQSxpQkFBQXZELEVBQUFxeUIsZ0JBRUFyeUIsRUFBQUMsTUFBQTJXLDJCQUFBLFNBQUEvbEQsRUFBQTJpRSxFQUFBQyxHQUNBLEdBQUE1aUUsRUFBQXBSLFFBQUErekUsRUFBQS96RSxPQUFBLENBQ0EsSUFBQWkwRSxFQUFBcDBFLEVBQUFWLEVBQUErMEUsRUFBQUMsRUFDQSxJQUFBRixFQUFBcDBFLEVBQUEsSUFBQW0wRSxHQUFBQyxFQUFBRCxLQUFBRSxFQUFBOWlFLEVBQUF2UixNQUFBQSxFQUFBLENBQ0EsSUFBQVYsRUFBQSxFQUFBZzFFLEVBQUFKLEVBQUE1MEUsS0FBQUEsRUFDQSxHQUFBKzBFLEVBQUEsUUFBQUMsRUFBQSxNQUFBLENBQ0FELEVBQUEsTUFBQUMsRUFBQSxNQUNBQSxFQUFBLE1BQUFELEVBQUEsTUFDQUgsRUFBQXp0RSxPQUFBbkgsRUFBQSxHQUNBODBFLEVBQUE5MEUsRUFBQSxFQUNBLE1BR0E4MEUsR0FBQTkwRSxLQUtBb2hELEVBQUFDLE1BQUEyVixjQUFBLFdBaUJBLFNBQUFpZSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBdndFLEdBQ0EsSUFHQXd3RSxFQUNBQyxFQUdBQyxFQUFBQyxFQUNBQyxFQVJBQyxFQUFBN3lFLEtBQUFQLElBQ0FxekUsRUFBQTl5RSxLQUFBTixJQUNBcXpFLEtBQ0FDLEVBQUFaLEVBQUFyMEUsT0FDQWsxRSxFQUFBWixFQUFBdDBFLE9BQ0FtMUUsRUFBQUQsRUFBQUQsR0FBQSxFQUNBRyxFQUFBSCxFQUFBQyxFQUFBLEVBSUEsSUFBQVQsRUFBQSxFQUFBQSxHQUFBUSxFQUFBUixJQUtBLElBSkFHLEVBQUFELEVBQ0FLLEVBQUFsdkUsS0FBQTZ1RSxNQUNBRSxFQUFBQyxFQUFBSSxFQUFBVCxFQUFBVSxHQUVBVCxFQURBSyxFQUFBLEVBQUFOLEVBQUEsR0FDQUMsR0FBQUcsRUFBQUgsSUFDQSxHQUFBQSxFQUVBLEdBQUFELEVBRUEsR0FBQUosRUFBQUksRUFBQSxLQUFBSCxFQUFBSSxFQUFBLEdBQ0FDLEVBQUFELEdBQUFFLEVBQUFGLEVBQUEsT0FDQSxDQUNBLElBQUFXLEVBQUFULEVBQUFGLElBQUFVLEVBQ0FFLEVBQUFYLEVBQUFELEVBQUEsSUFBQVUsRUFDQVQsRUFBQUQsR0FBQUksRUFBQU8sRUFBQUMsR0FBQSxPQU5BWCxFQUFBRCxHQUFBQSxFQUFBLE9BRkFDLEVBQUFELEdBQUFELEVBQUEsRUFhQSxJQUFBYyxFQUFBQyxLQUFBQyxLQUFBQyxLQUNBLElBQUFqQixFQUFBUSxFQUFBUCxFQUFBUSxFQUFBVCxHQUFBQyxHQUNBYSxFQUFBUCxFQUFBUCxHQUFBQyxHQUFBLEVBQ0FBLEdBQUFhLElBQUFQLEVBQUFQLEdBQUFDLEVBQUEsR0FDQWUsRUFBQTN2RSxLQUFBMHZFLEVBQUFBLEVBQUF4MUUsU0FDQWtULE9BQUFxaEUsRUFDQTlpRSxNQUFBNmlFLElBQUFJLEdBQ0F0cUUsTUFBQXNxRSxJQUNBRCxHQUFBYyxJQUFBUCxFQUFBUCxFQUFBLEdBQUFDLEdBQ0FnQixFQUFBNXZFLEtBQUEwdkUsRUFBQUEsRUFBQXgxRSxTQUNBa1QsT0FBQXNoRSxFQUNBL2lFLE1BQUE0aUUsSUFBQUksR0FDQXJxRSxNQUFBcXFFLE9BRUFDLElBQ0FELEVBQ0F4d0UsRUFBQSxRQUNBdXhFLEVBQUExdkUsTUFDQW9OLE9BQUEsV0FDQXpCLE1BQUE2aUUsRUFBQUksTUFTQSxPQUZBbjBCLEVBQUFDLE1BQUEyVywyQkFBQXVlLEVBQUFELEdBQUF4eEUsRUFBQSxnQkFBQSxHQUFBZ3hFLEdBRUFPLEVBQUE1eEMsVUEzRUEsSUFBQSt4QyxFQUFBLFFBQUFDLEVBQUEsVUE4RUEsT0EzRUEsU0FBQUMsRUFBQUMsRUFBQTd4RSxHQU9BLE9BSkFBLEVBQUEsa0JBQUFBLEdBQUE4eEUsZUFBQTl4RSxHQUFBQSxNQUNBNHhFLEVBQUFBLE1BQ0FDLEVBQUFBLE1BRUFELEVBQUE3MUUsT0FBQTgxRSxFQUFBOTFFLE9BQ0FvMEUsRUFBQXlCLEVBQUFDLEVBQUFILEVBQUFDLEVBQUEzeEUsR0FFQW13RSxFQUFBMEIsRUFBQUQsRUFBQUQsRUFBQUQsRUFBQTF4RSxJQWRBLEdBa0ZBczhDLEVBQUF1RCxhQUFBLHNCQUFBdkQsRUFBQUMsTUFBQTJWLGVBQ0EsV0FXQSxTQUFBNmYsRUFBQWxYLEVBQUF6WSxFQUFBMFUsRUFBQWtiLEVBQUE3ckUsR0FFQSxJQUFBOHJFLEtBQ0EvbEIsRUFBQTVQLEVBQUE0UCxvQkFBQSxXQUNBLElBQUFnbUIsRUFBQTl2QixFQUFBMFUsRUFBQTN3RCxFQUFBbTJDLEVBQUFDLE1BQUFtSCx5QkFBQXV1QixFQUFBcFgsUUFHQW9YLEVBQUFsMkUsT0FBQSxJQUNBdWdELEVBQUFDLE1BQUErRyxnQkFBQTJ1QixFQUFBQyxHQUNBRixHQUNBMTFCLEVBQUF3UixvQkFBQTJCLE9BQUF1aUIsRUFBQSxNQUFBbGIsRUFBQW9iLEVBQUEvckUsS0FLQThyRSxFQUFBbDJFLE9BQUEsRUFDQXVnRCxFQUFBQyxNQUFBK0YsYUFBQTJ2QixFQUFBQyxJQUNBLE1BQUExeUIseUJBQUFxYixFQUFBOUcsWUFBQSxXQUFBLE9BQUF6WCxFQUFBQyxNQUFBOEgsK0JBQUE0dEIsTUFDQSxPQUFBQSxZQUFBQSxFQUFBL2xCLG9CQUFBQSxFQUFBcUksV0FBQXJJLEVBQUFobkQsR0FHQSxJQUFBaXRFLEVBQUE3MUIsRUFBQUMsTUFBQWlMLFFBQUFTLFVBQ0FtcUIsRUFBQTkxQixFQUFBQyxNQUFBaUwsUUFBQVMsVUFFQTNMLEVBQUFDLE1BQUF3c0IsbUNBQUEsU0FBQWptQixFQUFBOW5DLEVBQUFvbkMsRUFBQXBpRCxFQUFBZ3lFLEdBcUJBLFNBQUFLLEVBQUFDLEVBQUFDLEdBQ0FDLEVBQUFDLEVBQUFGLEdBQ0FHLElBQUFILElBQ0FJLEVBQUFMLEdBQUFFLEdBRUFBLEVBQUFJLGdCQUFBRixLQUNBcDJCLEVBQUFDLE1BQUFtSCx5QkFBQTh1QixFQUFBUCxZQUFBbnZCLEdBQ0ErdkIsRUFBQWh4RSxLQUFBMndFLEdBQ0FNLEVBQUFqeEUsS0FBQTJ3RSxHQUdBLFNBQUFPLEVBQUEzMkUsRUFBQTQyRSxHQUNBLEdBQUE1MkUsRUFDQSxJQUFBLElBQUFaLEVBQUEsRUFBQVAsRUFBQSszRSxFQUFBajNFLE9BQUFQLEVBQUFQLEVBQUFPLElBQ0F3M0UsRUFBQXgzRSxJQUNBOGdELEVBQUFDLE1BQUF1RSxhQUFBa3lCLEVBQUF4M0UsR0FBQXkyRSxZQUFBLFNBQUFyc0QsR0FDQXhwQixFQUFBd3BCLEVBQUFwcUIsRUFBQXczRSxFQUFBeDNFLEdBQUEyc0UsY0FuQ0FudEQsRUFBQUEsTUFDQWhiLEVBQUFBLE1BeUNBLElBQUEsSUF6QkF3eUUsRUF5QkFTLEVBQUFDLEVBeENBQyxFQUFBNzJCLEVBQUFDLE1BQUFpTCxRQUFBaG1DLElBQUFzaEMsRUFBQXF2QixLQUFBanRFLEVBQ0F1dEUsRUFBQW4yQixFQUFBQyxNQUFBaUwsUUFBQWhtQyxJQUFBc2hDLEVBQUFxdkIsT0FDQWlCLEVBQUE5MkIsRUFBQUMsTUFBQTRGLFNBQUFzd0IsRUFBQSxTQUFBWSxHQUFBLE9BQUFBLEVBQUFsTCxhQUNBb0osRUFBQWoxQixFQUFBQyxNQUFBMlYsY0FBQWtoQixFQUFBcDRELEVBQUFoYixFQUFBLGdCQUdBNnlFLEtBQ0FTLEVBQUEsRUFDQVosRUFBQSxFQUVBYSxLQUNBVCxLQUNBVSxLQUNBYixLQUNBYyxLQTBCQWo0RSxFQUFBLEVBQUF5M0UsRUFBQTFCLEVBQUEvMUUsR0FBQUEsSUFFQSxPQURBMDNFLEVBQUFELEVBQUEsTUFDQUEsRUFBQSxRQUNBLElBQUEsVUFDQUMsSUFBQWh1RSxLQUNBc3RFLEVBQUFDLEVBQUFhLElBR0FwbkIsc0JBQ0FzbUIsRUFBQXRtQixvQkFBQWxQLFVBQ0F3MUIsRUFBQXRtQixvQkFBQWhuRCxHQUlBbzNDLEVBQUFDLE1BQUFtSCx5QkFBQTh1QixFQUFBUCxZQUFBbnZCLEdBQUEvbUQsU0FDQWlFLEVBQUEsZUFDQTZ5RSxFQUFBaHhFLEtBQUEyd0UsR0FDQU0sRUFBQWp4RSxLQUFBMndFLEdBQ0FBLEVBQUFySyxhQUFBaUssRUFDQUksRUFBQSxLQUVBZ0IsRUFBQWg0RSxHQUFBZzNFLEdBR0FBLEdBQ0FlLEVBQUExeEUsS0FBQVQsTUFBQW15RSxFQUFBZixFQUFBUCxlQUlBcUIsSUFDQSxNQUVBLElBQUEsV0FDQWpCLEVBQUE3MkUsRUFBQTgzRSxLQUNBLE1BRUEsSUFBQSxRQUNBSixJQUFBaHVFLEVBQ0FtdEUsRUFBQTcyRSxFQUFBMDNFLElBRUFWLEdBQUFySyxXQUFBOEssRUFBQSxNQUFBTCxnQkFBQXQyQixFQUFBd1QsV0FBQTRpQixNQUNBRyxFQUFBaHhFLEtBQUEyd0UsR0FDQU0sRUFBQWp4RSxLQUFBMndFLEdBQ0FXLElBQ0FNLEVBQUFqNEUsR0FBQWczRSxJQU9BbDJCLEVBQUFDLE1BQUFpTCxRQUFBM25ELElBQUFpakQsRUFBQXF2QixFQUFBVSxHQUdBRSxFQUFBL3lFLEVBQUEsV0FBQTJ5RSxHQUdBcjJCLEVBQUFDLE1BQUF1RSxhQUFBeXlCLEVBQUF2ekUsRUFBQSxhQUFBczhDLEVBQUE0RyxVQUFBNUcsRUFBQXlHLFlBR0EsSUFBQSxJQUFBc3FCLEVBQUF6bkQsRUFBQXBxQixFQUFBLEVBQUFrNEUsRUFBQXAzQixFQUFBOEMsZ0JBQUFoOEIsV0FBQTAvQixHQUFBMHZCLEVBQUFNLEVBQUF0M0UsR0FBQUEsSUFBQSxDQUVBZzNFLEVBQUFQLGFBQ0EzMUIsRUFBQUMsTUFBQXAzQixPQUFBcXRELEVBQUFULEVBQUFqdkIsRUFBQVYsRUFBQW93QixFQUFBckssV0FBQTZKLEVBQUFRLEVBQUFJLGtCQUdBLElBQUEsSUFBQTlvRSxFQUFBLEVBQUE4YixFQUFBNHNELEVBQUFQLFlBQUFub0UsR0FBQTRwRSxFQUFBOXRELEVBQUEyTSxZQUFBODZDLEVBQUF6bkQsRUFBQTliLElBQ0E4YixJQUFBOHRELEdBQ0FwM0IsRUFBQThDLGdCQUFBeFUsWUFBQWtZLEVBQUFsOUIsRUFBQXluRCxJQUlBbUYsRUFBQW1CLGFBQUEzQixJQUNBQSxFQUFBUSxFQUFBckssV0FBQXFLLEVBQUFQLFlBQUFPLEVBQUFJLGlCQUNBSixFQUFBbUIsYUFBQSxHQWNBLElBTEFaLEVBQUEveUUsRUFBQSxhQUFBd3pFLEdBS0FoNEUsRUFBQSxFQUFBQSxFQUFBZzRFLEVBQUF6M0UsU0FBQVAsRUFDQWc0RSxFQUFBaDRFLEtBQ0FnNEUsRUFBQWg0RSxHQUFBMnNFLFdBQUFpSyxHQUtBVyxFQUFBL3lFLEVBQUEsVUFBQTJ5RSxHQUNBSSxFQUFBL3lFLEVBQUEsU0FBQXl6RSxJQS9LQSxHQW1MQW4zQixFQUFBdUQsYUFBQSwyQ0FBQXZELEVBQUFDLE1BQUF3c0Isb0NBQ0F6c0IsRUFBQWtyQixxQkFBQSxXQUNBanFFLEtBQUEsd0JBQUEsR0FHQSsrQyxFQUFBa3JCLHFCQUFBMXBFLFVBQUEsSUFBQXcrQyxFQUFBaXJCLGVBQ0FqckIsRUFBQWtyQixxQkFBQTFwRSxVQUFBNEUsWUFBQTQ1QyxFQUFBa3JCLHFCQUNBbHJCLEVBQUFrckIscUJBQUExcEUsVUFBQSxxQkFBQSxTQUFBb3RFLEVBQUF6c0IsRUFBQXorQyxFQUFBbXJFLEdBQ0EsSUFFQXhHLEtBRkFyb0IsRUFBQUMsTUFBQStFLFVBQUEsR0FDQTRwQixFQUFBLE1BQUEsTUFDQUEsRUFBQSxRQUFBLEtBRUEsR0FBQXZHLEVBQ0EsT0FBQXJvQixFQUFBQyxNQUFBenNCLFVBQUE2MEMsRUFBQWpnQyxXQUFBLEdBQUF2aEIsWUFFQSxJQUFBeXdELEVBQUExSSxFQUFBLE9BQ0EsT0FBQTV1QixFQUFBQyxNQUFBcU4sa0JBQUFncUIsRUFBQXpJLElBSUE3dUIsRUFBQWtyQixxQkFBQXphLFNBQUEsSUFBQXpRLEVBQUFrckIscUJBQ0FsckIsRUFBQW95QixrQkFBQXB5QixFQUFBa3JCLHFCQUFBemEsVUFFQXpRLEVBQUF1RCxhQUFBLHVCQUFBdkQsRUFBQWtyQixzQkFDQSxXQUNBbHJCLEVBQUF1M0IseUJBQUEsV0FtQkEsU0FBQUMsSUFDQSxHQUFBQyxFQUFBLEVBQ0EsTUFBQSxJQUFBcjRFLE1BQUEsNEZBR0EsU0FBQW95RSxFQUFBa0csRUFBQWpzRSxFQUFBa3NFLEdBQ0EsT0FBQWw0QixFQUFBLEtBQUFpNEIsRUFBQWpzRSxFQUFBa3NFLEdBcEJBLElBQUFGLEVBQUF4MkUsS0FBQXcyRSxrQkFBQSxXQUNBLElBQUFoNEIsSUFBQUEsRUFBQSxLQUNBLE9BQUEsRUFFQSxJQUNBLEdBQUFBLEVBQUEsS0FBQSxJQUFBLEtBQUEsS0FBQXZpQyxXQUFBelMsUUFBQSxPQUFBLEVBRUEsT0FBQSxFQUVBLE1BQUErWCxJQUVBLE9BQUEsRUFYQSxHQXVCQXZoQixLQUFBLHFCQUFBLFNBQUEydEUsRUFBQXpzQixFQUFBeitDLEVBQUFtckUsR0FDQUEsRUFBQUEsR0FBQWhnRSxFQUNBbkwsRUFBQUEsTUFDQTh6RSxJQUdBLElBQUFJLEVBQUFoSixFQUFBLEtBQUEsZUFDQSxJQUFBZ0osRUFBQSxDQUNBLElBQUFOLEVBQUExSSxFQUFBLFFBQUEsR0FFQTBJLEVBQUEscUNBQUFBLEVBQUEsZUFFQU0sRUFBQW40QixFQUFBLFNBQUEsS0FBQTYzQixHQUNBMUksRUFBQSxLQUFBLGNBQUFnSixHQUdBLElBR0FDLEVBQUFyRyxFQUFBb0csR0FIQXoxQixFQUFBLE9BQ0ExQyxFQUFBLFFBQUFxNEIsaUJBQUEzMUIsR0FBQXorQyxFQUFBLGtCQU1BLE9BSEFtMEUsRUFBQSxTQUFBaEosRUFBQXQvRCxjQUFBLFFBRUFrd0MsRUFBQSxhQUNBbzRCLEdBR0E1MkUsS0FBQSwrQkFBQSxTQUFBNk4sR0FDQSxNQUFBLG1DQUFBQSxFQUFBLGFBR0E3TixLQUFBLFlBQUEsU0FBQXd4RSxFQUFBc0YsR0FDQWxwRSxFQUFBNUIsTUFBQSxnQ0FBQXdsRSxFQUFBLEtBQUFzRixFQUFBLGVBR0FOLEVBQUEsSUFDQWg0QixFQUFBLEtBQUEsSUFBQSxTQUNBaDJDLEtBQUEsc0JBRUFnMkMsRUFBQSxLQUFBLElBQUEsU0FDQWgyQyxLQUFBLGFBQ0F1QyxNQUFBLFFBS0FnMEMsRUFBQXUzQix5QkFBQS8xRSxVQUFBLElBQUF3K0MsRUFBQWlyQixlQUNBanJCLEVBQUF1M0IseUJBQUEvMUUsVUFBQTRFLFlBQUE0NUMsRUFBQXUzQix5QkFHQSxJQUFBUyxFQUFBLElBQUFoNEIsRUFBQXUzQix5QkFDQVMsRUFBQVAsa0JBQUEsR0FDQXozQixFQUFBb3lCLGtCQUFBNEYsR0FFQWg0QixFQUFBdUQsYUFBQSwyQkFBQXZELEVBQUF1M0IsMEJBbEZBLEtBL3NMQSx5Q0NEQSxJQUFBVSxFQUFBLGdCQUNBQyxFQUFBLHNDQUNBQyxFQUFBLG1FQUNBQyxFQUFBLHVCQUNBQyxFQUFBLE9BQ0FDLEVBQUEsT0FFQTM0RSxFQUFBSixRQUFBLFNBQUFrTSxHQUNBLE1BQUEsaUJBQUFBLEdBQUFBLEdBSUFBLEVBQUFBLEVBQUFyRSxRQUFBaXhFLEVBQUEsSUFBQWp4RSxRQUFBa3hFLEVBQUEsSUFHQXAwRSxFQUFBbVQsTUFBQUEsS0FBQTJCLE1BQ0EzQixLQUFBMkIsTUFBQXZOLEdBR0F3c0UsRUFBQWhvRSxLQUFBeEUsRUFBQXJFLFFBQUE4d0UsRUFBQSxLQUNBOXdFLFFBQUErd0UsRUFBQSxLQUNBL3dFLFFBQUFneEUsRUFBQSxLQUNBLElBQUE1aUUsU0FBQSxVQUFBL0osVUFIQSxHQVZBLGlKQ1JBbE0sRUFBQWdELE9BQUEsU0FBQW1DLEdBQ0EsSUFBQXVVLEVBQUEsR0FFQSxJQUFBLElBQUEvWixLQUFBd0YsRUFDQUEsRUFBQWlGLGVBQUF6SyxLQUNBK1osRUFBQXhaLFNBQUF3WixHQUFBLEtBQ0FBLEdBQUEyK0IsbUJBQUExNEMsR0FBQSxJQUFBMDRDLG1CQUFBbHpDLEVBQUF4RixLQUlBLE9BQUErWixHQVVBMVosRUFBQW9ELE9BQUEsU0FBQTQxRSxHQUdBLElBQUEsSUFGQUMsS0FDQUMsRUFBQUYsRUFBQXovRCxNQUFBLEtBQ0E1WixFQUFBLEVBQUFJLEVBQUFtNUUsRUFBQWg1RSxPQUFBUCxFQUFBSSxFQUFBSixJQUFBLENBQ0EsSUFBQXc1RSxFQUFBRCxFQUFBdjVFLEdBQUE0WixNQUFBLEtBQ0EwL0QsRUFBQUcsbUJBQUFELEVBQUEsS0FBQUMsbUJBQUFELEVBQUEsSUFFQSxPQUFBRiw0QkM1QkEsSUFBQUksRUFBQSwwT0FFQXBuQyxHQUNBLFNBQUEsV0FBQSxZQUFBLFdBQUEsT0FBQSxXQUFBLE9BQUEsT0FBQSxXQUFBLE9BQUEsWUFBQSxPQUFBLFFBQUEsVUFHQTd4QyxFQUFBSixRQUFBLFNBQUEwWixHQUNBLElBQUF4SixFQUFBd0osRUFDQTlTLEVBQUE4UyxFQUFBeE8sUUFBQSxLQUNBaE0sRUFBQXdhLEVBQUF4TyxRQUFBLE1BRUEsR0FBQXRFLElBQUEsR0FBQTFILElBQ0F3YSxFQUFBQSxFQUFBdlcsVUFBQSxFQUFBeUQsR0FBQThTLEVBQUF2VyxVQUFBeUQsRUFBQTFILEdBQUEySSxRQUFBLEtBQUEsS0FBQTZSLEVBQUF2VyxVQUFBakUsRUFBQXdhLEVBQUF4WixTQU9BLElBSkEsSUFBQStaLEVBQUFvL0QsRUFBQXovRCxLQUFBRixHQUFBLElBQ0ExUyxLQUNBckgsRUFBQSxHQUVBQSxLQUNBcUgsRUFBQWlyQyxFQUFBdHlDLElBQUFzYSxFQUFBdGEsSUFBQSxHQVVBLE9BUEEsR0FBQWlILElBQUEsR0FBQTFILElBQ0E4SCxFQUFBNGdDLE9BQUExM0IsRUFDQWxKLEVBQUFHLEtBQUFILEVBQUFHLEtBQUFoRSxVQUFBLEVBQUE2RCxFQUFBRyxLQUFBakgsT0FBQSxHQUFBMkgsUUFBQSxLQUFBLEtBQ0FiLEVBQUFzeUUsVUFBQXR5RSxFQUFBc3lFLFVBQUF6eEUsUUFBQSxJQUFBLElBQUFBLFFBQUEsSUFBQSxJQUFBQSxRQUFBLEtBQUEsS0FDQWIsRUFBQXV5RSxTQUFBLEdBR0F2eUUsNEJDMUJBLFNBQUF3eUUsSUFDQSxNQUFBLElBQUEzNUUsTUFBQSxtQ0FFQSxTQUFBNDVFLElBQ0EsTUFBQSxJQUFBNTVFLE1BQUEscUNBc0JBLFNBQUE2NUUsRUFBQUMsR0FDQSxHQUFBQyxJQUFBeHVFLFdBRUEsT0FBQUEsV0FBQXV1RSxFQUFBLEdBR0EsSUFBQUMsSUFBQUosSUFBQUksSUFBQXh1RSxXQUVBLE9BREF3dUUsRUFBQXh1RSxXQUNBQSxXQUFBdXVFLEVBQUEsR0FFQSxJQUVBLE9BQUFDLEVBQUFELEVBQUEsR0FDQSxNQUFBejZFLEdBQ0EsSUFFQSxPQUFBMDZFLEVBQUEzNUUsS0FBQSxLQUFBMDVFLEVBQUEsR0FDQSxNQUFBejZFLEdBRUEsT0FBQTA2RSxFQUFBMzVFLEtBQUF5QixLQUFBaTRFLEVBQUEsS0FNQSxTQUFBRSxFQUFBQyxHQUNBLEdBQUFDLElBQUF6c0UsYUFFQSxPQUFBQSxhQUFBd3NFLEdBR0EsSUFBQUMsSUFBQU4sSUFBQU0sSUFBQXpzRSxhQUVBLE9BREF5c0UsRUFBQXpzRSxhQUNBQSxhQUFBd3NFLEdBRUEsSUFFQSxPQUFBQyxFQUFBRCxHQUNBLE1BQUE1NkUsR0FDQSxJQUVBLE9BQUE2NkUsRUFBQTk1RSxLQUFBLEtBQUE2NUUsR0FDQSxNQUFBNTZFLEdBR0EsT0FBQTY2RSxFQUFBOTVFLEtBQUF5QixLQUFBbzRFLEtBWUEsU0FBQUUsSUFDQUMsR0FBQUMsSUFHQUQsR0FBQSxFQUNBQyxFQUFBaDZFLE9BQ0FzdkIsRUFBQTBxRCxFQUFBMTBFLE9BQUFncUIsR0FFQTJxRCxHQUFBLEVBRUEzcUQsRUFBQXR2QixRQUNBazZFLEtBSUEsU0FBQUEsSUFDQSxJQUFBSCxFQUFBLENBR0EsSUFBQTVzRSxFQUFBcXNFLEVBQUFNLEdBQ0FDLEdBQUEsRUFHQSxJQURBLElBQUFoM0UsRUFBQXVzQixFQUFBdHZCLE9BQ0ErQyxHQUFBLENBR0EsSUFGQWkzRSxFQUFBMXFELEVBQ0FBLE9BQ0EycUQsRUFBQWwzRSxHQUNBaTNFLEdBQ0FBLEVBQUFDLEdBQUFwckQsTUFHQW9yRCxHQUFBLEVBQ0FsM0UsRUFBQXVzQixFQUFBdHZCLE9BRUFnNkUsRUFBQSxLQUNBRCxHQUFBLEVBQ0FKLEVBQUF4c0UsSUFpQkEsU0FBQWd0RSxFQUFBVixFQUFBeDZELEdBQ0F6ZCxLQUFBaTRFLElBQUFBLEVBQ0FqNEUsS0FBQXlkLE1BQUFBLEVBWUEsU0FBQTllLEtBaEtBLElBT0F1NUUsRUFDQUcsRUFSQW5rRSxFQUFBeFYsRUFBQUosWUFnQkEsV0FDQSxJQUVBNDVFLEVBREEsbUJBQUF4dUUsV0FDQUEsV0FFQW91RSxFQUVBLE1BQUF0NkUsR0FDQTA2RSxFQUFBSixFQUVBLElBRUFPLEVBREEsbUJBQUF6c0UsYUFDQUEsYUFFQW1zRSxFQUVBLE1BQUF2NkUsR0FDQTY2RSxFQUFBTixHQWpCQSxHQXdFQSxJQUVBUyxFQUZBMXFELEtBQ0F5cUQsR0FBQSxFQUVBRSxHQUFBLEVBeUNBdmtFLEVBQUEwa0UsU0FBQSxTQUFBWCxHQUNBLElBQUF0MEUsRUFBQSxJQUFBc1QsTUFBQXJULFVBQUFwRixPQUFBLEdBQ0EsR0FBQW9GLFVBQUFwRixPQUFBLEVBQ0EsSUFBQSxJQUFBUCxFQUFBLEVBQUFBLEVBQUEyRixVQUFBcEYsT0FBQVAsSUFDQTBGLEVBQUExRixFQUFBLEdBQUEyRixVQUFBM0YsR0FHQTZ2QixFQUFBeHBCLEtBQUEsSUFBQXEwRSxFQUFBVixFQUFBdDBFLElBQ0EsSUFBQW1xQixFQUFBdHZCLFFBQUErNUUsR0FDQVAsRUFBQVUsSUFTQUMsRUFBQXA0RSxVQUFBOHNCLElBQUEsV0FDQXJ0QixLQUFBaTRFLElBQUFwMEUsTUFBQSxLQUFBN0QsS0FBQXlkLFFBRUF2SixFQUFBMmtFLE1BQUEsVUFDQTNrRSxFQUFBNGtFLFNBQUEsRUFDQTVrRSxFQUFBQyxPQUNBRCxFQUFBNmtFLFFBQ0E3a0UsRUFBQTJLLFFBQUEsR0FDQTNLLEVBQUE4a0UsWUFJQTlrRSxFQUFBaFEsR0FBQXZGLEVBQ0F1VixFQUFBK2tFLFlBQUF0NkUsRUFDQXVWLEVBQUEzUCxLQUFBNUYsRUFDQXVWLEVBQUExUCxJQUFBN0YsRUFDQXVWLEVBQUF6UCxlQUFBOUYsRUFDQXVWLEVBQUF4UCxtQkFBQS9GLEVBQ0F1VixFQUFBblAsS0FBQXBHLEVBQ0F1VixFQUFBZ2xFLGdCQUFBdjZFLEVBQ0F1VixFQUFBaWxFLG9CQUFBeDZFLEVBRUF1VixFQUFBbFAsVUFBQSxTQUFBaUUsR0FBQSxVQUVBaUwsRUFBQXlzRCxRQUFBLFNBQUExM0QsR0FDQSxNQUFBLElBQUE5SyxNQUFBLHFDQUdBK1YsRUFBQWtsRSxJQUFBLFdBQUEsTUFBQSxLQUNBbGxFLEVBQUFtbEUsTUFBQSxTQUFBdDRELEdBQ0EsTUFBQSxJQUFBNWlCLE1BQUEsbUNBRUErVixFQUFBb2xFLE1BQUEsV0FBQSxPQUFBLDRCQ3BKQSxTQUFBbDRFLEVBQUFrRSxFQUFBdkYsR0FDQSxpQkFBQXVGLElBQ0F2RixFQUFBdUYsRUFDQUEsT0FBQXFDLEdBR0E1SCxFQUFBQSxNQUVBLElBUUF3NUUsRUFSQXI5QixFQUFBeEUsRUFBQXB5QyxHQUNBNGdDLEVBQUFnVyxFQUFBaFcsT0FDQWgrQixFQUFBZzBDLEVBQUFoMEMsR0FDQWhDLEVBQUFnMkMsRUFBQWgyQyxLQUNBc3pFLEVBQUFsbEQsRUFBQXBzQixJQUFBaEMsS0FBQW91QixFQUFBcHNCLEdBQUF1eEUsS0FtQkEsT0FsQkExNUUsRUFBQTI1RSxVQUFBMzVFLEVBQUEsMEJBQ0EsSUFBQUEsRUFBQTQ1RSxXQUFBSCxHQUtBN3dFLEVBQUEsK0JBQUF1OUIsR0FDQXF6QyxFQUFBSyxFQUFBMXpDLEVBQUFubUMsS0FFQXUwQixFQUFBcHNCLEtBQ0FTLEVBQUEseUJBQUF1OUIsR0FDQTVSLEVBQUFwc0IsR0FBQTB4RSxFQUFBMXpDLEVBQUFubUMsSUFFQXc1RSxFQUFBamxELEVBQUFwc0IsSUFFQWcwQyxFQUFBcjJDLFFBQUE5RixFQUFBOEYsUUFDQTlGLEVBQUE4RixNQUFBcTJDLEVBQUFyMkMsT0FFQTB6RSxFQUFBbHdFLE9BQUE2eUMsRUFBQWgyQyxLQUFBbkcsR0E3REEsSUFBQTIzQyxFQUFBMTVDLEVBQUEsU0FDQW9ILEVBQUFwSCxFQUFBLG9CQUNBNDdFLEVBQUE1N0UsRUFBQSxhQUNBMkssRUFBQTNLLEVBQUEsU0FBQSxvQkFNQVUsRUFBQUosUUFBQUEsRUFBQThDLEVBTUEsSUFBQWt6QixFQUFBaDJCLEVBQUF1N0UsWUF1REF2N0UsRUFBQXFILFNBQUFQLEVBQUFPLFNBU0FySCxFQUFBdzdFLFFBQUExNEUsRUFRQTlDLEVBQUFzN0UsUUFBQTU3RSxFQUFBLGFBQ0FNLEVBQUErRyxPQUFBckgsRUFBQSwyR0MxREEsU0FBQTQ3RSxFQUFBdDBFLEVBQUF2RixHQUNBLEtBQUFDLGdCQUFBNDVFLEdBQUEsT0FBQSxJQUFBQSxFQUFBdDBFLEVBQUF2RixHQUNBdUYsR0FBQSxpQkFBQUEsSUFDQXZGLEVBQUF1RixFQUNBQSxPQUFBcUMsSUFFQTVILEVBQUFBLE9BRUFtRyxLQUFBbkcsRUFBQW1HLE1BQUEsYUFDQWxHLEtBQUF5NUUsUUFDQXo1RSxLQUFBcXdELFFBQ0Fyd0QsS0FBQUQsS0FBQUEsRUFDQUMsS0FBQSs1RSxjQUFBLElBQUFoNkUsRUFBQWc2RSxjQUNBLzVFLEtBQUFnNkUscUJBQUFqNkUsRUFBQWk2RSxzQkFBQUMsRUFBQUEsR0FDQWo2RSxLQUFBazZFLGtCQUFBbjZFLEVBQUFtNkUsbUJBQUEsS0FDQWw2RSxLQUFBbTZFLHFCQUFBcDZFLEVBQUFvNkUsc0JBQUEsS0FDQW42RSxLQUFBbzZFLG9CQUFBcjZFLEVBQUFxNkUscUJBQUEsSUFDQXA2RSxLQUFBcTZFLFFBQUEsSUFBQXY2RSxHQUNBSSxJQUFBRixLQUFBazZFLG9CQUNBLzVFLElBQUFILEtBQUFtNkUsdUJBQ0E5NUUsT0FBQUwsS0FBQW82RSx3QkFFQXA2RSxLQUFBMkwsUUFBQSxNQUFBNUwsRUFBQTRMLFFBQUEsSUFBQTVMLEVBQUE0TCxTQUNBM0wsS0FBQTRHLFdBQUEsU0FDQTVHLEtBQUFzRixJQUFBQSxFQUNBdEYsS0FBQXM2RSxjQUNBdDZFLEtBQUF1NkUsU0FBQSxLQUNBdjZFLEtBQUF3NkUsVUFBQSxFQUNBeDZFLEtBQUF5NkUsZ0JBQ0EsSUFBQUMsRUFBQTM2RSxFQUFBcUYsUUFBQUEsRUFDQXBGLEtBQUEyNkUsUUFBQSxJQUFBRCxFQUFBRSxRQUNBNTZFLEtBQUE2NkUsUUFBQSxJQUFBSCxFQUFBSSxRQUNBOTZFLEtBQUErNkUsYUFBQSxJQUFBaDdFLEVBQUFnN0UsWUFDQS82RSxLQUFBKzZFLGFBQUEvNkUsS0FBQXdJLE9BL0RBLElBQUF3eUUsRUFBQWg5RSxFQUFBLG9CQUNBcUgsRUFBQXJILEVBQUEsWUFDQStGLEVBQUEvRixFQUFBLHFCQUNBb0gsRUFBQXBILEVBQUEsb0JBQ0FrRyxFQUFBbEcsRUFBQSxRQUNBdVosRUFBQXZaLEVBQUEsa0JBQ0EySyxFQUFBM0ssRUFBQSxTQUFBLDRCQUNBd0wsRUFBQXhMLEVBQUEsV0FDQThCLEVBQUE5QixFQUFBLFVBTUFpZixFQUFBbFYsT0FBQXhILFVBQUFtSSxlQU1BaEssRUFBQUosUUFBQXM3RSxFQW9EQUEsRUFBQXI1RSxVQUFBMDZFLFFBQUEsV0FDQWo3RSxLQUFBK0UsS0FBQWxCLE1BQUE3RCxLQUFBNEQsV0FDQSxJQUFBLElBQUFzM0UsS0FBQWw3RSxLQUFBeTVFLEtBQ0F4OEQsRUFBQTFlLEtBQUF5QixLQUFBeTVFLEtBQUF5QixJQUNBbDdFLEtBQUF5NUUsS0FBQXlCLEdBQUFuMkUsS0FBQWxCLE1BQUE3RCxLQUFBeTVFLEtBQUF5QixHQUFBdDNFLFlBV0FnMkUsRUFBQXI1RSxVQUFBNDZFLGdCQUFBLFdBQ0EsSUFBQSxJQUFBRCxLQUFBbDdFLEtBQUF5NUUsS0FDQXg4RCxFQUFBMWUsS0FBQXlCLEtBQUF5NUUsS0FBQXlCLEtBQ0FsN0UsS0FBQXk1RSxLQUFBeUIsR0FBQWh6RSxHQUFBbEksS0FBQW83RSxXQUFBRixLQWFBdEIsRUFBQXI1RSxVQUFBNjZFLFdBQUEsU0FBQUYsR0FDQSxPQUFBLE1BQUFBLEVBQUEsR0FBQUEsRUFBQSxLQUFBbDdFLEtBQUFxN0UsT0FBQW56RSxJQU9BbkUsRUFBQTYxRSxFQUFBcjVFLFdBVUFxNUUsRUFBQXI1RSxVQUFBdzVFLGFBQUEsU0FBQTVqRSxHQUNBLE9BQUF2UyxVQUFBcEYsUUFDQXdCLEtBQUFzN0UsZ0JBQUFubEUsRUFDQW5XLE1BRkFBLEtBQUFzN0UsZUFhQTFCLEVBQUFyNUUsVUFBQXk1RSxxQkFBQSxTQUFBN2pFLEdBQ0EsT0FBQXZTLFVBQUFwRixRQUNBd0IsS0FBQXU3RSxzQkFBQXBsRSxFQUNBblcsTUFGQUEsS0FBQXU3RSx1QkFhQTNCLEVBQUFyNUUsVUFBQTI1RSxrQkFBQSxTQUFBL2pFLEdBQ0EsT0FBQXZTLFVBQUFwRixRQUNBd0IsS0FBQXc3RSxtQkFBQXJsRSxFQUNBblcsS0FBQXE2RSxTQUFBcjZFLEtBQUFxNkUsUUFBQXI1RSxPQUFBbVYsR0FDQW5XLE1BSEFBLEtBQUF3N0Usb0JBTUE1QixFQUFBcjVFLFVBQUE2NUUsb0JBQUEsU0FBQWprRSxHQUNBLE9BQUF2UyxVQUFBcEYsUUFDQXdCLEtBQUF5N0UscUJBQUF0bEUsRUFDQW5XLEtBQUFxNkUsU0FBQXI2RSxLQUFBcTZFLFFBQUFuNUUsVUFBQWlWLEdBQ0FuVyxNQUhBQSxLQUFBeTdFLHNCQWNBN0IsRUFBQXI1RSxVQUFBNDVFLHFCQUFBLFNBQUFoa0UsR0FDQSxPQUFBdlMsVUFBQXBGLFFBQ0F3QixLQUFBMDdFLHNCQUFBdmxFLEVBQ0FuVyxLQUFBcTZFLFNBQUFyNkUsS0FBQXE2RSxRQUFBcDVFLE9BQUFrVixHQUNBblcsTUFIQUEsS0FBQTA3RSx1QkFhQTlCLEVBQUFyNUUsVUFBQW9MLFFBQUEsU0FBQXdLLEdBQ0EsT0FBQXZTLFVBQUFwRixRQUNBd0IsS0FBQTI3RSxTQUFBeGxFLEVBQ0FuVyxNQUZBQSxLQUFBMjdFLFVBWUEvQixFQUFBcjVFLFVBQUFxN0UscUJBQUEsWUFFQTU3RSxLQUFBNjdFLGNBQUE3N0UsS0FBQXM3RSxlQUFBLElBQUF0N0UsS0FBQXE2RSxRQUFBLzVFLFVBRUFOLEtBQUE4N0UsYUFZQWxDLEVBQUFyNUUsVUFBQWlJLEtBQ0FveEUsRUFBQXI1RSxVQUFBdTVFLFFBQUEsU0FBQXAyRSxFQUFBM0QsR0FFQSxHQURBNEksRUFBQSxnQkFBQTNJLEtBQUE0RyxhQUNBNUcsS0FBQTRHLFdBQUE0QyxRQUFBLFFBQUEsT0FBQXhKLEtBRUEySSxFQUFBLGFBQUEzSSxLQUFBc0YsS0FDQXRGLEtBQUFxN0UsT0FBQUwsRUFBQWg3RSxLQUFBc0YsSUFBQXRGLEtBQUFELE1BQ0EsSUFBQXNKLEVBQUFySixLQUFBcTdFLE9BQ0E1eEUsRUFBQXpKLEtBQ0FBLEtBQUE0RyxXQUFBLFVBQ0E1RyxLQUFBKzdFLGVBQUEsRUFHQSxJQUFBQyxFQUFBOTNFLEVBQUFtRixFQUFBLE9BQUEsV0FDQUksRUFBQStKLFNBQ0E5UCxHQUFBQSxNQUlBdTRFLEVBQUEvM0UsRUFBQW1GLEVBQUEsUUFBQSxTQUFBbUIsR0FLQSxHQUpBN0IsRUFBQSxpQkFDQWMsRUFBQW1CLFVBQ0FuQixFQUFBN0MsV0FBQSxTQUNBNkMsRUFBQXd4RSxRQUFBLGdCQUFBendFLEdBQ0E5RyxFQUFBLENBQ0EsSUFBQTFFLEVBQUEsSUFBQWIsTUFBQSxvQkFDQWEsRUFBQXdMLEtBQUFBLEVBQ0E5RyxFQUFBMUUsUUFHQXlLLEVBQUFteUUseUJBS0EsSUFBQSxJQUFBNTdFLEtBQUEyN0UsU0FBQSxDQUNBLElBQUFod0UsRUFBQTNMLEtBQUEyN0UsU0FDQWh6RSxFQUFBLHdDQUFBZ0QsR0FHQSxJQUFBcWlCLEVBQUF0a0IsV0FBQSxXQUNBZixFQUFBLHFDQUFBZ0QsR0FDQXF3RSxFQUFBdm9CLFVBQ0FwcUQsRUFBQTBCLFFBQ0ExQixFQUFBdEUsS0FBQSxRQUFBLFdBQ0EwRSxFQUFBd3hFLFFBQUEsa0JBQUF0dkUsSUFDQUEsR0FFQTNMLEtBQUFxd0QsS0FBQS9yRCxNQUNBbXZELFFBQUEsV0FDQTduRCxhQUFBb2lCLE1BUUEsT0FIQWh1QixLQUFBcXdELEtBQUEvckQsS0FBQTAzRSxHQUNBaDhFLEtBQUFxd0QsS0FBQS9yRCxLQUFBMjNFLEdBRUFqOEUsTUFTQTQ1RSxFQUFBcjVFLFVBQUFpVCxPQUFBLFdBQ0E3SyxFQUFBLFFBR0EzSSxLQUFBNEssVUFHQTVLLEtBQUE0RyxXQUFBLE9BQ0E1RyxLQUFBK0UsS0FBQSxRQUdBLElBQUFzRSxFQUFBckosS0FBQXE3RSxPQUNBcjdFLEtBQUFxd0QsS0FBQS9yRCxLQUFBSixFQUFBbUYsRUFBQSxPQUFBa08sRUFBQXZYLEtBQUEsWUFDQUEsS0FBQXF3RCxLQUFBL3JELEtBQUFKLEVBQUFtRixFQUFBLE9BQUFrTyxFQUFBdlgsS0FBQSxZQUNBQSxLQUFBcXdELEtBQUEvckQsS0FBQUosRUFBQW1GLEVBQUEsT0FBQWtPLEVBQUF2WCxLQUFBLFlBQ0FBLEtBQUFxd0QsS0FBQS9yRCxLQUFBSixFQUFBbUYsRUFBQSxRQUFBa08sRUFBQXZYLEtBQUEsYUFDQUEsS0FBQXF3RCxLQUFBL3JELEtBQUFKLEVBQUFtRixFQUFBLFFBQUFrTyxFQUFBdlgsS0FBQSxhQUNBQSxLQUFBcXdELEtBQUEvckQsS0FBQUosRUFBQWxFLEtBQUE2NkUsUUFBQSxVQUFBdGpFLEVBQUF2WCxLQUFBLGdCQVNBNDVFLEVBQUFyNUUsVUFBQTI3RSxPQUFBLFdBQ0FsOEUsS0FBQXU2RSxTQUFBLElBQUF6akUsS0FDQTlXLEtBQUFpN0UsUUFBQSxTQVNBckIsRUFBQXI1RSxVQUFBNDdFLE9BQUEsV0FDQW44RSxLQUFBaTdFLFFBQUEsT0FBQSxJQUFBbmtFLEtBQUE5VyxLQUFBdTZFLFdBU0FYLEVBQUFyNUUsVUFBQTY3RSxPQUFBLFNBQUE1eEUsR0FDQXhLLEtBQUE2NkUsUUFBQWwwRCxJQUFBbmMsSUFTQW92RSxFQUFBcjVFLFVBQUE4N0UsVUFBQSxTQUFBdnlFLEdBQ0E5SixLQUFBK0UsS0FBQSxTQUFBK0UsSUFTQTh2RSxFQUFBcjVFLFVBQUF5SyxRQUFBLFNBQUFoTSxHQUNBMkosRUFBQSxRQUFBM0osR0FDQWdCLEtBQUFpN0UsUUFBQSxRQUFBajhFLElBVUE0NkUsRUFBQXI1RSxVQUFBOEksT0FBQSxTQUFBNnhFLEVBQUFuN0UsR0FpQkEsU0FBQXU4RSxLQUNBOXlFLEVBQUFDLEVBQUE2d0UsV0FBQWp4RSxJQUNBSSxFQUFBNndFLFdBQUFoMkUsS0FBQStFLEdBbEJBLElBQUFBLEVBQUFySixLQUFBeTVFLEtBQUF5QixHQUNBLElBQUE3eEUsRUFBQSxDQUNBQSxFQUFBLElBQUFoRSxFQUFBckYsS0FBQWs3RSxFQUFBbjdFLEdBQ0FDLEtBQUF5NUUsS0FBQXlCLEdBQUE3eEUsRUFDQSxJQUFBSSxFQUFBekosS0FDQXFKLEVBQUFuRixHQUFBLGFBQUFvNEUsR0FDQWp6RSxFQUFBbkYsR0FBQSxVQUFBLFdBQ0FtRixFQUFBbkIsR0FBQXVCLEVBQUEyeEUsV0FBQUYsS0FHQWw3RSxLQUFBKzZFLGFBRUF1QixJQVVBLE9BQUFqekUsR0FTQXV3RSxFQUFBcjVFLFVBQUFrekQsUUFBQSxTQUFBcHFELEdBQ0EsSUFBQVQsRUFBQVksRUFBQXhKLEtBQUFzNkUsV0FBQWp4RSxJQUNBVCxHQUFBNUksS0FBQXM2RSxXQUFBeDFFLE9BQUE4RCxFQUFBLEdBQ0E1SSxLQUFBczZFLFdBQUE5N0UsUUFFQXdCLEtBQUErSyxTQVVBNnVFLEVBQUFyNUUsVUFBQXVKLE9BQUEsU0FBQUEsR0FDQW5CLEVBQUEsb0JBQUFtQixHQUNBLElBQUFMLEVBQUF6SixLQUNBOEosRUFBQWpFLE9BQUEsSUFBQWlFLEVBQUFoSCxPQUFBZ0gsRUFBQW94RSxLQUFBLElBQUFweEUsRUFBQWpFLE9BRUE0RCxFQUFBK3dFLFNBV0Evd0UsRUFBQWd4RSxhQUFBbjJFLEtBQUF3RixJQVRBTCxFQUFBK3dFLFVBQUEsRUFDQXg2RSxLQUFBMjZFLFFBQUFyNUUsT0FBQXdJLEVBQUEsU0FBQStSLEdBQ0EsSUFBQSxJQUFBNWQsRUFBQSxFQUFBQSxFQUFBNGQsRUFBQXJkLE9BQUFQLElBQ0F3TCxFQUFBNHhFLE9BQUFydkUsTUFBQTZQLEVBQUE1ZCxHQUFBNkwsRUFBQXJILFNBRUFnSCxFQUFBK3dFLFVBQUEsRUFDQS93RSxFQUFBOHlFLHlCQWNBM0MsRUFBQXI1RSxVQUFBZzhFLG1CQUFBLFdBQ0EsR0FBQXY4RSxLQUFBeTZFLGFBQUFqOEUsT0FBQSxJQUFBd0IsS0FBQXc2RSxTQUFBLENBQ0EsSUFBQWdDLEVBQUF4OEUsS0FBQXk2RSxhQUFBOXdFLFFBQ0EzSixLQUFBOEosT0FBQTB5RSxLQVVBNUMsRUFBQXI1RSxVQUFBcUssUUFBQSxXQUNBakMsRUFBQSxXQUdBLElBQUEsSUFEQTh6RSxFQUFBejhFLEtBQUFxd0QsS0FBQTd4RCxPQUNBUCxFQUFBLEVBQUFBLEVBQUF3K0UsRUFBQXgrRSxJQUNBK0IsS0FBQXF3RCxLQUFBMW1ELFFBQ0E4cEQsVUFHQXp6RCxLQUFBeTZFLGdCQUNBejZFLEtBQUF3NkUsVUFBQSxFQUNBeDZFLEtBQUF1NkUsU0FBQSxLQUVBdjZFLEtBQUE2NkUsUUFBQXBuQixXQVNBbW1CLEVBQUFyNUUsVUFBQXdLLE1BQ0E2dUUsRUFBQXI1RSxVQUFBbThFLFdBQUEsV0FDQS96RSxFQUFBLGNBQ0EzSSxLQUFBKzdFLGVBQUEsRUFDQS83RSxLQUFBNjdFLGNBQUEsRUFDQSxZQUFBNzdFLEtBQUE0RyxZQUdBNUcsS0FBQTRLLFVBRUE1SyxLQUFBcTZFLFFBQUF0NUUsUUFDQWYsS0FBQTRHLFdBQUEsU0FDQTVHLEtBQUFxN0UsUUFBQXI3RSxLQUFBcTdFLE9BQUF0d0UsU0FTQTZ1RSxFQUFBcjVFLFVBQUE0SyxRQUFBLFNBQUFpQixHQUNBekQsRUFBQSxXQUVBM0ksS0FBQTRLLFVBQ0E1SyxLQUFBcTZFLFFBQUF0NUUsUUFDQWYsS0FBQTRHLFdBQUEsU0FDQTVHLEtBQUErRSxLQUFBLFFBQUFxSCxHQUVBcE0sS0FBQXM3RSxnQkFBQXQ3RSxLQUFBKzdFLGVBQ0EvN0UsS0FBQTg3RSxhQVVBbEMsRUFBQXI1RSxVQUFBdTdFLFVBQUEsV0FDQSxHQUFBOTdFLEtBQUE2N0UsY0FBQTc3RSxLQUFBKzdFLGNBQUEsT0FBQS83RSxLQUVBLElBQUF5SixFQUFBekosS0FFQSxHQUFBQSxLQUFBcTZFLFFBQUEvNUUsVUFBQU4sS0FBQXU3RSxzQkFDQTV5RSxFQUFBLG9CQUNBM0ksS0FBQXE2RSxRQUFBdDVFLFFBQ0FmLEtBQUFpN0UsUUFBQSxvQkFDQWo3RSxLQUFBNjdFLGNBQUEsTUFDQSxDQUNBLElBQUExb0MsRUFBQW56QyxLQUFBcTZFLFFBQUE3NUUsV0FDQW1JLEVBQUEsMENBQUF3cUMsR0FFQW56QyxLQUFBNjdFLGNBQUEsRUFDQSxJQUFBN3RELEVBQUF0a0IsV0FBQSxXQUNBRCxFQUFBc3lFLGdCQUVBcHpFLEVBQUEsd0JBQ0FjLEVBQUF3eEUsUUFBQSxvQkFBQXh4RSxFQUFBNHdFLFFBQUEvNUUsVUFDQW1KLEVBQUF3eEUsUUFBQSxlQUFBeHhFLEVBQUE0d0UsUUFBQS81RSxVQUdBbUosRUFBQXN5RSxlQUVBdHlFLEVBQUFqQixLQUFBLFNBQUF4SixHQUNBQSxHQUNBMkosRUFBQSwyQkFDQWMsRUFBQW95RSxjQUFBLEVBQ0FweUUsRUFBQXF5RSxZQUNBcnlFLEVBQUF3eEUsUUFBQSxrQkFBQWo4RSxFQUFBd0wsUUFFQTdCLEVBQUEscUJBQ0FjLEVBQUFrekUsbUJBR0F4cEMsR0FFQW56QyxLQUFBcXdELEtBQUEvckQsTUFDQW12RCxRQUFBLFdBQ0E3bkQsYUFBQW9pQixRQVlBNHJELEVBQUFyNUUsVUFBQW84RSxZQUFBLFdBQ0EsSUFBQUMsRUFBQTU4RSxLQUFBcTZFLFFBQUEvNUUsU0FDQU4sS0FBQTY3RSxjQUFBLEVBQ0E3N0UsS0FBQXE2RSxRQUFBdDVFLFFBQ0FmLEtBQUFtN0Usa0JBQ0FuN0UsS0FBQWk3RSxRQUFBLFlBQUEyQixzS0N0akJBbCtFLEVBQUFKLFFBV0EsU0FBQW1GLEVBQUFpUSxFQUFBaFEsR0FFQSxPQURBRCxFQUFBUyxHQUFBd1AsRUFBQWhRLElBRUErdkQsUUFBQSxXQUNBaHdELEVBQUFnQixlQUFBaVAsRUFBQWhRLCtCQ2tDQSxTQUFBMkIsRUFBQWswRSxFQUFBMkIsRUFBQW43RSxHQUNBQyxLQUFBdTVFLEdBQUFBLEVBQ0F2NUUsS0FBQWs3RSxJQUFBQSxFQUNBbDdFLEtBQUE4M0MsS0FBQTkzQyxLQUNBQSxLQUFBNjhFLElBQUEsRUFDQTc4RSxLQUFBODhFLFFBQ0E5OEUsS0FBQSs4RSxpQkFDQS84RSxLQUFBZzlFLGNBQ0FoOUUsS0FBQWk5RSxXQUFBLEVBQ0FqOUUsS0FBQWs5RSxjQUFBLEVBQ0FuOUUsR0FBQUEsRUFBQThGLFFBQ0E3RixLQUFBNkYsTUFBQTlGLEVBQUE4RixPQUVBN0YsS0FBQXU1RSxHQUFBd0IsYUFBQS82RSxLQUFBd0ksT0E5REEsSUFBQXBELEVBQUFwSCxFQUFBLG9CQUNBK0YsRUFBQS9GLEVBQUEscUJBQ0F3ekIsRUFBQXh6QixFQUFBLFlBQ0FrRyxFQUFBbEcsRUFBQSxRQUNBdVosRUFBQXZaLEVBQUEsa0JBQ0EySyxFQUFBM0ssRUFBQSxTQUFBLDJCQUNBZ0ksRUFBQWhJLEVBQUEsV0FNQVUsRUFBQUosUUFBQStHLEVBU0EsSUFBQW1pQixHQUNBc3lELFFBQUEsRUFDQXFELGNBQUEsRUFDQUMsZ0JBQUEsRUFDQTlDLFdBQUEsRUFDQW9DLFdBQUEsRUFDQXp4RSxNQUFBLEVBQ0E2d0UsVUFBQSxFQUNBdUIsa0JBQUEsRUFDQUMsaUJBQUEsRUFDQUMsZ0JBQUEsRUFDQTFCLGFBQUEsRUFDQWh3RSxLQUFBLEVBQ0EyTyxLQUFBLEdBT0F6VixFQUFBaEIsRUFBQXhELFVBQUF3RSxLQTRCQWhCLEVBQUFzQixFQUFBOUUsV0FRQThFLEVBQUE5RSxVQUFBaTlFLFVBQUEsV0FDQSxJQUFBeDlFLEtBQUFxd0QsS0FBQSxDQUVBLElBQUFrcEIsRUFBQXY1RSxLQUFBdTVFLEdBQ0F2NUUsS0FBQXF3RCxNQUNBbnNELEVBQUFxMUUsRUFBQSxPQUFBaGlFLEVBQUF2WCxLQUFBLFdBQ0FrRSxFQUFBcTFFLEVBQUEsU0FBQWhpRSxFQUFBdlgsS0FBQSxhQUNBa0UsRUFBQXExRSxFQUFBLFFBQUFoaUUsRUFBQXZYLEtBQUEsZUFVQXFGLEVBQUE5RSxVQUFBaUksS0FDQW5ELEVBQUE5RSxVQUFBdTVFLFFBQUEsV0FDQSxPQUFBOTVFLEtBQUFpOUUsVUFBQWo5RSxNQUVBQSxLQUFBdzlFLFlBQ0F4OUUsS0FBQXU1RSxHQUFBL3dFLE9BQ0EsU0FBQXhJLEtBQUF1NUUsR0FBQTN5RSxZQUFBNUcsS0FBQXdULFNBQ0F4VCxLQUFBK0UsS0FBQSxjQUNBL0UsT0FVQXFGLEVBQUE5RSxVQUFBZ0ssS0FBQSxXQUNBLElBQUE1RyxFQUFBNnRCLEVBQUE1dEIsV0FHQSxPQUZBRCxFQUFBd1QsUUFBQSxXQUNBblgsS0FBQStFLEtBQUFsQixNQUFBN0QsS0FBQTJELEdBQ0EzRCxNQVlBcUYsRUFBQTlFLFVBQUF3RSxLQUFBLFNBQUEyTyxHQUNBLEdBQUE4VCxFQUFBOWUsZUFBQWdMLEdBRUEsT0FEQTNPLEVBQUFsQixNQUFBN0QsS0FBQTRELFdBQ0E1RCxLQUdBLElBQUEyRCxFQUFBNnRCLEVBQUE1dEIsV0FDQWtHLEdBQUFoSCxLQUFBc0MsRUFBQXE0RSxNQUFBanpFLEtBQUE3RyxHQW9CQSxPQWxCQW1HLEVBQUFySCxXQUNBcUgsRUFBQXJILFFBQUF3SixVQUFBak0sS0FBQTA5RSxRQUFBLElBQUExOUUsS0FBQTA5RSxNQUFBenhFLFNBR0EsbUJBQUF0SSxFQUFBQSxFQUFBbkYsT0FBQSxLQUNBbUssRUFBQSxpQ0FBQTNJLEtBQUE2OEUsS0FDQTc4RSxLQUFBODhFLEtBQUE5OEUsS0FBQTY4RSxLQUFBbDVFLEVBQUFtMUIsTUFDQWh2QixFQUFBNUIsR0FBQWxJLEtBQUE2OEUsT0FHQTc4RSxLQUFBaTlFLFVBQ0FqOUUsS0FBQThKLE9BQUFBLEdBRUE5SixLQUFBZzlFLFdBQUExNEUsS0FBQXdGLFVBR0E5SixLQUFBMDlFLE1BRUExOUUsTUFVQXFGLEVBQUE5RSxVQUFBdUosT0FBQSxTQUFBQSxHQUNBQSxFQUFBb3hFLElBQUFsN0UsS0FBQWs3RSxJQUNBbDdFLEtBQUF1NUUsR0FBQXp2RSxPQUFBQSxJQVNBekUsRUFBQTlFLFVBQUFpVCxPQUFBLFdBSUEsR0FIQTdLLEVBQUEsa0NBR0EsTUFBQTNJLEtBQUFrN0UsSUFDQSxHQUFBbDdFLEtBQUE2RixNQUFBLENBQ0EsSUFBQUEsRUFBQSxpQkFBQTdGLEtBQUE2RixNQUFBRyxFQUFBMUUsT0FBQXRCLEtBQUE2RixPQUFBN0YsS0FBQTZGLE1BQ0E4QyxFQUFBLHVDQUFBOUMsR0FDQTdGLEtBQUE4SixRQUFBaEgsS0FBQXNDLEVBQUF1NEUsUUFBQTkzRSxNQUFBQSxTQUVBN0YsS0FBQThKLFFBQUFoSCxLQUFBc0MsRUFBQXU0RSxXQVlBdDRFLEVBQUE5RSxVQUFBNEssUUFBQSxTQUFBaUIsR0FDQXpELEVBQUEsYUFBQXlELEdBQ0FwTSxLQUFBaTlFLFdBQUEsRUFDQWo5RSxLQUFBazlFLGNBQUEsU0FDQWw5RSxLQUFBa0ksR0FDQWxJLEtBQUErRSxLQUFBLGFBQUFxSCxJQVVBL0csRUFBQTlFLFVBQUFxOUUsU0FBQSxTQUFBOXpFLEdBQ0EsR0FBQUEsRUFBQW94RSxNQUFBbDdFLEtBQUFrN0UsSUFFQSxPQUFBcHhFLEVBQUFoSCxNQUNBLEtBQUFzQyxFQUFBdTRFLFFBQ0EzOUUsS0FBQTY5RSxZQUNBLE1BRUEsS0FBQXo0RSxFQUFBcTRFLE1BSUEsS0FBQXI0RSxFQUFBMDRFLGFBQ0E5OUUsS0FBQSs5RSxRQUFBajBFLEdBQ0EsTUFFQSxLQUFBMUUsRUFBQTQ0RSxJQUlBLEtBQUE1NEUsRUFBQTY0RSxXQUNBaitFLEtBQUFrK0UsTUFBQXAwRSxHQUNBLE1BRUEsS0FBQTFFLEVBQUErNEUsV0FDQW4rRSxLQUFBbytFLGVBQ0EsTUFFQSxLQUFBaDVFLEVBQUFpNUUsTUFDQXIrRSxLQUFBK0UsS0FBQSxRQUFBK0UsRUFBQVUsUUFZQW5GLEVBQUE5RSxVQUFBdzlFLFFBQUEsU0FBQWowRSxHQUNBLElBQUFuRyxFQUFBbUcsRUFBQVUsU0FDQTdCLEVBQUEsb0JBQUFoRixHQUVBLE1BQUFtRyxFQUFBNUIsS0FDQVMsRUFBQSxtQ0FDQWhGLEVBQUFXLEtBQUF0RSxLQUFBcytFLElBQUF4MEUsRUFBQTVCLE1BR0FsSSxLQUFBaTlFLFVBQ0FsNEUsRUFBQWxCLE1BQUE3RCxLQUFBMkQsR0FFQTNELEtBQUErOEUsY0FBQXo0RSxLQUFBWCxJQVVBMEIsRUFBQTlFLFVBQUErOUUsSUFBQSxTQUFBcDJFLEdBQ0EsSUFBQXVCLEVBQUF6SixLQUNBdStFLEdBQUEsRUFDQSxPQUFBLFdBRUEsSUFBQUEsRUFBQSxDQUNBQSxHQUFBLEVBQ0EsSUFBQTU2RSxFQUFBNnRCLEVBQUE1dEIsV0FDQStFLEVBQUEsaUJBQUFoRixHQUVBOEYsRUFBQUssUUFDQWhILEtBQUFzQyxFQUFBNDRFLElBQ0E5MUUsR0FBQUEsRUFDQXNDLEtBQUE3RyxPQVlBMEIsRUFBQTlFLFVBQUEyOUUsTUFBQSxTQUFBcDBFLEdBQ0EsSUFBQXcwRSxFQUFBdCtFLEtBQUE4OEUsS0FBQWh6RSxFQUFBNUIsSUFDQSxtQkFBQW8yRSxHQUNBMzFFLEVBQUEseUJBQUFtQixFQUFBNUIsR0FBQTRCLEVBQUFVLE1BQ0E4ekUsRUFBQXo2RSxNQUFBN0QsS0FBQThKLEVBQUFVLGFBQ0F4SyxLQUFBODhFLEtBQUFoekUsRUFBQTVCLEtBRUFTLEVBQUEsYUFBQW1CLEVBQUE1QixLQVVBN0MsRUFBQTlFLFVBQUFzOUUsVUFBQSxXQUNBNzlFLEtBQUFpOUUsV0FBQSxFQUNBajlFLEtBQUFrOUUsY0FBQSxFQUNBbDlFLEtBQUErRSxLQUFBLFdBQ0EvRSxLQUFBdytFLGdCQVNBbjVFLEVBQUE5RSxVQUFBaStFLGFBQUEsV0FDQSxJQUFBdmdGLEVBQ0EsSUFBQUEsRUFBQSxFQUFBQSxFQUFBK0IsS0FBQSs4RSxjQUFBditFLE9BQUFQLElBQ0E4RyxFQUFBbEIsTUFBQTdELEtBQUFBLEtBQUErOEUsY0FBQTkrRSxJQUlBLElBRkErQixLQUFBKzhFLGlCQUVBOStFLEVBQUEsRUFBQUEsRUFBQStCLEtBQUFnOUUsV0FBQXgrRSxPQUFBUCxJQUNBK0IsS0FBQThKLE9BQUE5SixLQUFBZzlFLFdBQUEvK0UsSUFFQStCLEtBQUFnOUUsZUFTQTMzRSxFQUFBOUUsVUFBQTY5RSxhQUFBLFdBQ0F6MUUsRUFBQSx5QkFBQTNJLEtBQUFrN0UsS0FDQWw3RSxLQUFBeXpELFVBQ0F6ekQsS0FBQW1MLFFBQUEseUJBV0E5RixFQUFBOUUsVUFBQWt6RCxRQUFBLFdBQ0EsR0FBQXp6RCxLQUFBcXdELEtBQUEsQ0FFQSxJQUFBLElBQUFweUQsRUFBQSxFQUFBQSxFQUFBK0IsS0FBQXF3RCxLQUFBN3hELE9BQUFQLElBQ0ErQixLQUFBcXdELEtBQUFweUQsR0FBQXcxRCxVQUVBenpELEtBQUFxd0QsS0FBQSxLQUdBcndELEtBQUF1NUUsR0FBQTlsQixRQUFBenpELE9BVUFxRixFQUFBOUUsVUFBQXdLLE1BQ0ExRixFQUFBOUUsVUFBQW04RSxXQUFBLFdBYUEsT0FaQTE4RSxLQUFBaTlFLFlBQ0F0MEUsRUFBQSw2QkFBQTNJLEtBQUFrN0UsS0FDQWw3RSxLQUFBOEosUUFBQWhILEtBQUFzQyxFQUFBKzRFLGNBSUFuK0UsS0FBQXl6RCxVQUVBenpELEtBQUFpOUUsV0FFQWo5RSxLQUFBbUwsUUFBQSx3QkFFQW5MLE1BV0FxRixFQUFBOUUsVUFBQTBMLFNBQUEsU0FBQUEsR0FHQSxPQUZBak0sS0FBQTA5RSxNQUFBMTlFLEtBQUEwOUUsVUFDQTE5RSxLQUFBMDlFLE1BQUF6eEUsU0FBQUEsRUFDQWpNLHNKQzNaQSxJQUFBdUYsRUFBQXZILEVBQUEsWUFDQTJLLEVBQUEzSyxFQUFBLFNBQUEsd0JBTUFVLEVBQUFKLFFBV0EsU0FBQWdILEVBQUFtNUUsR0FDQSxJQUFBaDdFLEVBQUE2QixFQUdBbTVFLEVBQUFBLEdBQUF4N0UsRUFBQTZDLFNBQ0EsTUFBQVIsSUFBQUEsRUFBQW01RSxFQUFBOTRFLFNBQUEsS0FBQTg0RSxFQUFBaDVFLE1BR0EsaUJBQUFILElBQ0EsTUFBQUEsRUFBQTZWLE9BQUEsS0FFQTdWLEVBREEsTUFBQUEsRUFBQTZWLE9BQUEsR0FDQXNqRSxFQUFBOTRFLFNBQUFMLEVBRUFtNUUsRUFBQWg1RSxLQUFBSCxHQUlBLHNCQUFBMEosS0FBQTFKLEtBQ0FxRCxFQUFBLHVCQUFBckQsR0FFQUEsT0FEQSxJQUFBbTVFLEVBQ0FBLEVBQUE5NEUsU0FBQSxLQUFBTCxFQUVBLFdBQUFBLEdBS0FxRCxFQUFBLFdBQUFyRCxHQUNBN0IsRUFBQThCLEVBQUFELElBSUE3QixFQUFBbUMsT0FDQSxjQUFBb0osS0FBQXZMLEVBQUFrQyxVQUNBbEMsRUFBQW1DLEtBQUEsS0FDQSxlQUFBb0osS0FBQXZMLEVBQUFrQyxZQUNBbEMsRUFBQW1DLEtBQUEsUUFJQW5DLEVBQUF5QyxLQUFBekMsRUFBQXlDLE1BQUEsSUFFQSxJQUNBVCxHQURBLElBQUFoQyxFQUFBZ0MsS0FBQStELFFBQUEsS0FDQSxJQUFBL0YsRUFBQWdDLEtBQUEsSUFBQWhDLEVBQUFnQyxLQU9BLE9BSkFoQyxFQUFBeUUsR0FBQXpFLEVBQUFrQyxTQUFBLE1BQUFGLEVBQUEsSUFBQWhDLEVBQUFtQyxLQUVBbkMsRUFBQTQ3QixLQUFBNTdCLEVBQUFrQyxTQUFBLE1BQUFGLEdBQUFnNUUsR0FBQUEsRUFBQTc0RSxPQUFBbkMsRUFBQW1DLEtBQUEsR0FBQSxJQUFBbkMsRUFBQW1DLE1BRUFuQywrS0M0RUEsU0FBQXVRLElBQ0EsSUFBQXJXLEVBQ0EsSUFDQUEsRUFBQVcsRUFBQTJWLFFBQUF0TCxNQUNBLE1BQUFuTCxJQU9BLE9BSkFHLFFBQUEsSUFBQXVXLEdBQUEsUUFBQUEsSUFDQXZXLEVBQUF1VyxFQUFBQyxJQUFBQyxPQUdBelcsR0ExSkFXLEVBQUFJLEVBQUFKLFFBQUFOLEVBQUEsWUFDQXFXLElBOEdBLFdBR0EsTUFBQSxpQkFBQUMsU0FDQUEsUUFBQUQsS0FDQUUsU0FBQWhVLFVBQUFzRCxNQUFBdEYsS0FBQStWLFFBQUFELElBQUFDLFFBQUExUSxZQWxIQXRGLEVBQUFrVyxXQXFFQSxTQUFBN1EsR0FDQSxJQUFBOFEsRUFBQXpVLEtBQUF5VSxVQVNBLEdBUEE5USxFQUFBLElBQUE4USxFQUFBLEtBQUEsSUFDQXpVLEtBQUEwVSxXQUNBRCxFQUFBLE1BQUEsS0FDQTlRLEVBQUEsSUFDQThRLEVBQUEsTUFBQSxLQUNBLElBQUFuVyxFQUFBcVcsU0FBQTNVLEtBQUE0VSxNQUVBSCxFQUFBLENBRUEsSUFBQUksRUFBQSxVQUFBN1UsS0FBQThVLE1BQ0FuUixFQUFBbUIsT0FBQSxFQUFBLEVBQUErUCxFQUFBLGtCQUtBLElBQUFqTSxFQUFBLEVBQ0FtTSxFQUFBLEVBQ0FwUixFQUFBLEdBQUF3QyxRQUFBLGNBQUEsU0FBQTZPLEdBQ0EsT0FBQUEsSUFDQXBNLElBQ0EsT0FBQW9NLElBR0FELEVBQUFuTSxNQUlBakYsRUFBQW1CLE9BQUFpUSxFQUFBLEVBQUFGLEtBbEdBdlcsRUFBQTJXLEtBMkhBLFNBQUFDLEdBQ0EsSUFDQSxNQUFBQSxFQUNBNVcsRUFBQTJWLFFBQUFrQixXQUFBLFNBRUE3VyxFQUFBMlYsUUFBQXRMLE1BQUF1TSxFQUVBLE1BQUExWCxNQWpJQWMsRUFBQTBWLEtBQUFBLEVBQ0ExVixFQUFBbVcsVUEyQkEsV0FJQSxRQUFBLG9CQUFBeEIsU0FBQUEsT0FBQWlCLFNBQUEsYUFBQWpCLE9BQUFpQixRQUFBcFIsT0FNQSxvQkFBQThLLFVBQUFBLFNBQUF3SCxpQkFBQXhILFNBQUF3SCxnQkFBQTNGLE9BQUE3QixTQUFBd0gsZ0JBQUEzRixNQUFBNEYsa0JBRUEsb0JBQUFwQyxRQUFBQSxPQUFBcUIsVUFBQXJCLE9BQUFxQixRQUFBZ0IsU0FBQXJDLE9BQUFxQixRQUFBaUIsV0FBQXRDLE9BQUFxQixRQUFBa0IsUUFHQSxvQkFBQXpHLFdBQUFBLFVBQUFFLFdBQUFGLFVBQUFFLFVBQUF3RyxjQUFBVCxNQUFBLG1CQUFBVSxTQUFBQyxPQUFBQyxHQUFBLEtBQUEsSUFFQSxvQkFBQTdHLFdBQUFBLFVBQUFFLFdBQUFGLFVBQUFFLFVBQUF3RyxjQUFBVCxNQUFBLHVCQTNDQTFXLEVBQUEyVixRQUFBLG9CQUFBNEIsYUFDQSxJQUFBQSxPQUFBNUIsUUFDQTRCLE9BQUE1QixRQUFBNkIsTUFzS0EsV0FDQSxJQUNBLE9BQUE3QyxPQUFBOEMsYUFDQSxNQUFBdlksS0F4S0F3WSxHQU1BMVgsRUFBQTJYLFFBQ0EsZ0JBQ0EsY0FDQSxZQUNBLGFBQ0EsYUFDQSxXQW1DQTNYLEVBQUE0WCxXQUFBM0osRUFBQSxTQUFBNEosR0FDQSxJQUNBLE9BQUFDLEtBQUFDLFVBQUFGLEdBQ0EsTUFBQW5YLEdBQ0EsTUFBQSwrQkFBQUEsRUFBQXNYLFVBcUdBaFksRUFBQWlZLE9BQUF2QyxnUEN4SUEsU0FBQTBxRSxFQUFBbDBFLEVBQUFxUyxHQUNBLElBQUFyUyxFQUFBLE9BQUFBLEVBRUEsR0FBQW0wRSxFQUFBbjBFLEdBQUEsQ0FDQSxJQUFBbzBFLEdBQUFDLGNBQUEsRUFBQXB0RCxJQUFBNVUsRUFBQXJlLFFBRUEsT0FEQXFlLEVBQUF2WSxLQUFBa0csR0FDQW8wRSxFQUNBLEdBQUF4L0QsRUFBQTVVLEdBQUEsQ0FFQSxJQUFBLElBREFzMEUsRUFBQSxJQUFBN25FLE1BQUF6TSxFQUFBaE0sUUFDQVAsRUFBQSxFQUFBQSxFQUFBdU0sRUFBQWhNLE9BQUFQLElBQ0E2Z0YsRUFBQTdnRixHQUFBeWdGLEVBQUFsMEUsRUFBQXZNLEdBQUE0ZSxHQUVBLE9BQUFpaUUsRUFDQSxHQUFBLGlCQUFBdDBFLEtBQUFBLGFBQUFzTSxNQUFBLENBQ0Fnb0UsS0FDQSxJQUFBLElBQUE3NkUsS0FBQXVHLEVBQ0FzMEUsRUFBQTc2RSxHQUFBeTZFLEVBQUFsMEUsRUFBQXZHLEdBQUE0WSxHQUVBLE9BQUFpaUUsRUFFQSxPQUFBdDBFLEVBa0JBLFNBQUF1MEUsRUFBQXYwRSxFQUFBcVMsR0FDQSxJQUFBclMsRUFBQSxPQUFBQSxFQUVBLEdBQUFBLEdBQUFBLEVBQUFxMEUsYUFDQSxPQUFBaGlFLEVBQUFyUyxFQUFBaW5CLEtBQ0EsR0FBQXJTLEVBQUE1VSxHQUNBLElBQUEsSUFBQXZNLEVBQUEsRUFBQUEsRUFBQXVNLEVBQUFoTSxPQUFBUCxJQUNBdU0sRUFBQXZNLEdBQUE4Z0YsRUFBQXYwRSxFQUFBdk0sR0FBQTRlLFFBRUEsR0FBQSxpQkFBQXJTLEVBQ0EsSUFBQSxJQUFBdkcsS0FBQXVHLEVBQ0FBLEVBQUF2RyxHQUFBODZFLEVBQUF2MEUsRUFBQXZHLEdBQUE0WSxHQUlBLE9BQUFyUyxFQTlFQSxJQUFBNFUsRUFBQXBoQixFQUFBLFdBQ0EyZ0YsRUFBQTNnRixFQUFBLGVBQ0FpZSxFQUFBbFUsT0FBQXhILFVBQUEwYixTQUNBcUQsRUFBQSxtQkFBQXJjLEVBQUFELE1BQUEsNkJBQUFpWixFQUFBMWQsS0FBQTBFLEVBQUFELE1BQ0F1YyxFQUFBLG1CQUFBdGMsRUFBQXVjLE1BQUEsNkJBQUF2RCxFQUFBMWQsS0FBQTBFLEVBQUF1YyxNQVlBbGhCLEVBQUEwZ0Ysa0JBQUEsU0FBQWwxRSxHQUNBLElBQUErUyxLQUNBb2lFLEVBQUFuMUUsRUFBQVUsS0FDQWd5RSxFQUFBMXlFLEVBR0EsT0FGQTB5RSxFQUFBaHlFLEtBQUFrMEUsRUFBQU8sRUFBQXBpRSxHQUNBMi9ELEVBQUEwQyxZQUFBcmlFLEVBQUFyZSxRQUNBc0wsT0FBQTB5RSxFQUFBMy9ELFFBQUFBLElBbUNBdmUsRUFBQTZnRixrQkFBQSxTQUFBcjFFLEVBQUErUyxHQUdBLE9BRkEvUyxFQUFBVSxLQUFBdTBFLEVBQUFqMUUsRUFBQVUsS0FBQXFTLEdBQ0EvUyxFQUFBbzFFLGlCQUFBdjNFLEVBQ0FtQyxHQStCQXhMLEVBQUE4Z0YsWUFBQSxTQUFBNTBFLEVBQUEzTCxHQUNBLFNBQUF3Z0YsRUFBQTU3RSxFQUFBNjdFLEVBQUFDLEdBQ0EsSUFBQTk3RSxFQUFBLE9BQUFBLEVBR0EsR0FBQTZiLEdBQUE3YixhQUFBVCxNQUNBdWMsR0FBQTliLGFBQUErYixLQUFBLENBQ0FnZ0UsSUFHQSxJQUFBQyxFQUFBLElBQUFubUUsV0FDQW1tRSxFQUFBcHZFLE9BQUEsV0FDQWt2RSxFQUNBQSxFQUFBRCxHQUFBdC9FLEtBQUFmLE9BR0F5Z0YsRUFBQTEvRSxLQUFBZixTQUlBdWdGLEdBQ0EzZ0YsRUFBQTZnRixJQUlBRCxFQUFBbG1FLGtCQUFBOVYsUUFDQSxHQUFBMmIsRUFBQTNiLEdBQ0EsSUFBQSxJQUFBeEYsRUFBQSxFQUFBQSxFQUFBd0YsRUFBQWpGLE9BQUFQLElBQ0FvaEYsRUFBQTU3RSxFQUFBeEYsR0FBQUEsRUFBQXdGLFFBRUEsR0FBQSxpQkFBQUEsSUFBQWs3RSxFQUFBbDdFLEdBQ0EsSUFBQSxJQUFBUSxLQUFBUixFQUNBNDdFLEVBQUE1N0UsRUFBQVEsR0FBQUEsRUFBQVIsR0FLQSxJQUFBKzdFLEVBQUEsRUFDQUUsRUFBQWwxRSxFQUNBNjBFLEVBQUFLLEdBQ0FGLEdBQ0EzZ0YsRUFBQTZnRiwwS0N6QkEsU0FBQTlFLEtBb0NBLFNBQUErRSxFQUFBbDhFLEdBR0EsSUFBQXVVLEVBQUEsR0FBQXZVLEVBQUFYLEtBd0JBLE9BckJBeEUsRUFBQXcvRSxlQUFBcjZFLEVBQUFYLE1BQUF4RSxFQUFBMi9FLGFBQUF4NkUsRUFBQVgsT0FDQWtWLEdBQUF2VSxFQUFBeTdFLFlBQUEsS0FLQXo3RSxFQUFBeTNFLEtBQUEsTUFBQXozRSxFQUFBeTNFLE1BQ0FsakUsR0FBQXZVLEVBQUF5M0UsSUFBQSxLQUlBLE1BQUF6M0UsRUFBQXlFLEtBQ0E4UCxHQUFBdlUsRUFBQXlFLElBSUEsTUFBQXpFLEVBQUErRyxPQUNBd04sR0FBQTVCLEtBQUFDLFVBQUE1UyxFQUFBK0csT0FHQTdCLEVBQUEsbUJBQUFsRixFQUFBdVUsR0FDQUEsRUFhQSxTQUFBNG5FLEVBQUFuOEUsRUFBQTVFLEdBV0F5VSxFQUFBOHJFLFlBQUEzN0UsRUFUQSxTQUFBaThFLEdBQ0EsSUFBQUcsRUFBQXZzRSxFQUFBMHJFLGtCQUFBVSxHQUNBbEQsRUFBQW1ELEVBQUFFLEVBQUEvMUUsUUFDQStTLEVBQUFnakUsRUFBQWhqRSxRQUVBQSxFQUFBMUYsUUFBQXFsRSxHQUNBMzlFLEVBQUFnZSxLQWFBLFNBQUFpK0QsSUFDQTk2RSxLQUFBOC9FLGNBQUEsS0F3REEsU0FBQUMsRUFBQS9uRSxHQUNBLElBQUEvWixFQUFBLEVBRUErRCxHQUNBYyxLQUFBNFAsT0FBQXNGLEVBQUFtRCxPQUFBLEtBR0EsR0FBQSxNQUFBN2MsRUFBQWdvQixNQUFBdGtCLEVBQUFjLE1BQUEsT0FBQW1JLElBR0EsR0FBQTNNLEVBQUF3L0UsZUFBQTk3RSxFQUFBYyxNQUFBeEUsRUFBQTIvRSxhQUFBajhFLEVBQUFjLEtBQUEsQ0FFQSxJQURBLElBQUFWLEVBQUEsR0FDQSxNQUFBNFYsRUFBQW1ELFNBQUFsZCxLQUNBbUUsR0FBQTRWLEVBQUFtRCxPQUFBbGQsR0FDQUEsR0FBQStaLEVBQUF4WixVQUVBLEdBQUE0RCxHQUFBc1EsT0FBQXRRLElBQUEsTUFBQTRWLEVBQUFtRCxPQUFBbGQsR0FDQSxNQUFBLElBQUFFLE1BQUEsdUJBRUE2RCxFQUFBazlFLFlBQUF4c0UsT0FBQXRRLEdBSUEsR0FBQSxNQUFBNFYsRUFBQW1ELE9BQUFsZCxFQUFBLEdBRUEsSUFEQStELEVBQUFrNUUsSUFBQSxLQUNBajlFLEdBRUEsT0FEQTRXLEVBQUFtRCxFQUFBbUQsT0FBQWxkLE1BRUErRCxFQUFBazVFLEtBQUFybUUsRUFDQTVXLElBQUErWixFQUFBeFosZUFHQXdELEVBQUFrNUUsSUFBQSxJQUlBLElBQUFuaEUsRUFBQS9CLEVBQUFtRCxPQUFBbGQsRUFBQSxHQUNBLEdBQUEsS0FBQThiLEdBQUFySCxPQUFBcUgsSUFBQUEsRUFBQSxDQUVBLElBREEvWCxFQUFBa0csR0FBQSxLQUNBakssR0FBQSxDQUNBLElBQUE0VyxFQUFBbUQsRUFBQW1ELE9BQUFsZCxHQUNBLEdBQUEsTUFBQTRXLEdBQUFuQyxPQUFBbUMsSUFBQUEsRUFBQSxHQUNBNVcsRUFDQSxNQUdBLEdBREErRCxFQUFBa0csSUFBQThQLEVBQUFtRCxPQUFBbGQsR0FDQUEsSUFBQStaLEVBQUF4WixPQUFBLE1BRUF3RCxFQUFBa0csR0FBQXdLLE9BQUExUSxFQUFBa0csSUFTQSxPQUxBOFAsRUFBQW1ELFNBQUFsZCxLQUNBK0QsRUFBQWcrRSxFQUFBaCtFLEVBQUFnVyxFQUFBRixPQUFBN1osS0FHQTBLLEVBQUEsbUJBQUFxUCxFQUFBaFcsR0FDQUEsRUFHQSxTQUFBZytFLEVBQUFoK0UsRUFBQWdXLEdBQ0EsSUFDQWhXLEVBQUF3SSxLQUFBNEwsS0FBQTJCLE1BQUFDLEdBQ0EsTUFBQXhhLEdBQ0EsT0FBQXlOLElBRUEsT0FBQWpKLEVBeUJBLFNBQUFpK0UsRUFBQW4yRSxHQUNBOUosS0FBQWtnRixVQUFBcDJFLEVBQ0E5SixLQUFBNmMsV0FrQ0EsU0FBQTVSLElBQ0EsT0FDQW5JLEtBQUF4RSxFQUFBKy9FLE1BQ0E3ekUsS0FBQSxnQkF4WUEsSUFBQTdCLEVBQUEzSyxFQUFBLFNBQUEsb0JBQ0ErRixFQUFBL0YsRUFBQSxxQkFDQW1pRixFQUFBbmlGLEVBQUEsZUFDQXNWLEVBQUF0VixFQUFBLFlBQ0EyZ0YsRUFBQTNnRixFQUFBLGVBUUFNLEVBQUFxSCxTQUFBLEVBUUFySCxFQUFBZ29CLE9BQ0EsVUFDQSxhQUNBLFFBQ0EsTUFDQSxRQUNBLGVBQ0EsY0FTQWhvQixFQUFBcS9FLFFBQUEsRUFRQXIvRSxFQUFBNi9FLFdBQUEsRUFRQTcvRSxFQUFBbS9FLE1BQUEsRUFRQW4vRSxFQUFBMC9FLElBQUEsRUFRQTEvRSxFQUFBKy9FLE1BQUEsRUFRQS8vRSxFQUFBdy9FLGFBQUEsRUFRQXgvRSxFQUFBMi9FLFdBQUEsRUFRQTMvRSxFQUFBczhFLFFBQUFBLEVBUUF0OEUsRUFBQXc4RSxRQUFBQSxFQW9CQUYsRUFBQXI2RSxVQUFBZSxPQUFBLFNBQUFtQyxFQUFBNUUsR0FDQTRFLEVBQUFYLE9BQUF4RSxFQUFBbS9FLE9BQUFoNkUsRUFBQVgsT0FBQXhFLEVBQUEwL0UsTUFBQW1DLEVBQUExOEUsRUFBQStHLFFBQ0EvRyxFQUFBWCxLQUFBVyxFQUFBWCxPQUFBeEUsRUFBQW0vRSxNQUFBbi9FLEVBQUF3L0UsYUFBQXgvRSxFQUFBMi9FLFlBR0F0MUUsRUFBQSxxQkFBQWxGLEdBRUFuRixFQUFBdy9FLGVBQUFyNkUsRUFBQVgsTUFBQXhFLEVBQUEyL0UsYUFBQXg2RSxFQUFBWCxLQUNBODhFLEVBQUFuOEUsRUFBQTVFLEdBSUFBLEdBREE4Z0YsRUFBQWw4RSxNQWtGQU0sRUFBQSsyRSxFQUFBdjZFLFdBVUF1NkUsRUFBQXY2RSxVQUFBb21CLElBQUEsU0FBQWxqQixHQUNBLElBQUFxRyxFQUNBLEdBQUEsaUJBQUFyRyxFQUNBcUcsRUFBQWkyRSxFQUFBdDhFLEdBQ0FuRixFQUFBdy9FLGVBQUFoMEUsRUFBQWhILE1BQUF4RSxFQUFBMi9FLGFBQUFuMEUsRUFBQWhILE1BQ0E5QyxLQUFBOC9FLGNBQUEsSUFBQUcsRUFBQW4yRSxHQUdBLElBQUE5SixLQUFBOC9FLGNBQUFJLFVBQUFoQixhQUNBbC9FLEtBQUErRSxLQUFBLFVBQUErRSxJQUdBOUosS0FBQStFLEtBQUEsVUFBQStFLE9BR0EsQ0FBQSxJQUFBNjBFLEVBQUFsN0UsS0FBQUEsRUFBQWpDLE9BWUEsTUFBQSxJQUFBckQsTUFBQSxpQkFBQXNGLEdBWEEsSUFBQXpELEtBQUE4L0UsY0FDQSxNQUFBLElBQUEzaEYsTUFBQSxxREFFQTJMLEVBQUE5SixLQUFBOC9FLGNBQUFNLGVBQUEzOEUsTUFFQXpELEtBQUE4L0UsY0FBQSxLQUNBOS9FLEtBQUErRSxLQUFBLFVBQUErRSxNQTRGQWd4RSxFQUFBdjZFLFVBQUFrekQsUUFBQSxXQUNBenpELEtBQUE4L0UsZUFDQTkvRSxLQUFBOC9FLGNBQUFPLDBCQTZCQUosRUFBQTEvRSxVQUFBNi9FLGVBQUEsU0FBQUUsR0FFQSxHQURBdGdGLEtBQUE2YyxRQUFBdlksS0FBQWc4RSxHQUNBdGdGLEtBQUE2YyxRQUFBcmUsU0FBQXdCLEtBQUFrZ0YsVUFBQWhCLFlBQUEsQ0FDQSxJQUFBcDFFLEVBQUF3SixFQUFBNnJFLGtCQUFBbi9FLEtBQUFrZ0YsVUFBQWxnRixLQUFBNmMsU0FFQSxPQURBN2MsS0FBQXFnRix5QkFDQXYyRSxFQUVBLE9BQUEsTUFTQW0yRSxFQUFBMS9FLFVBQUE4L0UsdUJBQUEsV0FDQXJnRixLQUFBa2dGLFVBQUEsS0FDQWxnRixLQUFBNmMsZ0lDdFlBbmUsRUFBQUosUUFRQSxTQUFBbUYsR0FDQSxPQUFBUixFQUFBNFEsUUFBQTVRLEVBQUE0USxPQUFBd0wsU0FBQTViLElBQ0FSLEVBQUF4RCxhQUFBZ0UsYUFBQWhFLHFLQzBJQSxTQUFBdVUsSUFDQSxJQUFBclcsRUFDQSxJQUNBQSxFQUFBVyxFQUFBMlYsUUFBQXRMLE1BQ0EsTUFBQW5MLElBT0EsT0FKQUcsUUFBQSxJQUFBdVcsR0FBQSxRQUFBQSxJQUNBdlcsRUFBQXVXLEVBQUFDLElBQUFDLE9BR0F6VyxHQTFKQVcsRUFBQUksRUFBQUosUUFBQU4sRUFBQSxZQUNBcVcsSUE4R0EsV0FHQSxNQUFBLGlCQUFBQyxTQUNBQSxRQUFBRCxLQUNBRSxTQUFBaFUsVUFBQXNELE1BQUF0RixLQUFBK1YsUUFBQUQsSUFBQUMsUUFBQTFRLFlBbEhBdEYsRUFBQWtXLFdBcUVBLFNBQUE3USxHQUNBLElBQUE4USxFQUFBelUsS0FBQXlVLFVBU0EsR0FQQTlRLEVBQUEsSUFBQThRLEVBQUEsS0FBQSxJQUNBelUsS0FBQTBVLFdBQ0FELEVBQUEsTUFBQSxLQUNBOVEsRUFBQSxJQUNBOFEsRUFBQSxNQUFBLEtBQ0EsSUFBQW5XLEVBQUFxVyxTQUFBM1UsS0FBQTRVLE1BRUFILEVBQUEsQ0FFQSxJQUFBSSxFQUFBLFVBQUE3VSxLQUFBOFUsTUFDQW5SLEVBQUFtQixPQUFBLEVBQUEsRUFBQStQLEVBQUEsa0JBS0EsSUFBQWpNLEVBQUEsRUFDQW1NLEVBQUEsRUFDQXBSLEVBQUEsR0FBQXdDLFFBQUEsY0FBQSxTQUFBNk8sR0FDQSxPQUFBQSxJQUNBcE0sSUFDQSxPQUFBb00sSUFHQUQsRUFBQW5NLE1BSUFqRixFQUFBbUIsT0FBQWlRLEVBQUEsRUFBQUYsS0FsR0F2VyxFQUFBMlcsS0EySEEsU0FBQUMsR0FDQSxJQUNBLE1BQUFBLEVBQ0E1VyxFQUFBMlYsUUFBQWtCLFdBQUEsU0FFQTdXLEVBQUEyVixRQUFBdEwsTUFBQXVNLEVBRUEsTUFBQTFYLE1BaklBYyxFQUFBMFYsS0FBQUEsRUFDQTFWLEVBQUFtVyxVQTJCQSxXQUlBLFFBQUEsb0JBQUF4QixTQUFBQSxPQUFBaUIsU0FBQSxhQUFBakIsT0FBQWlCLFFBQUFwUixPQU1BLG9CQUFBOEssVUFBQUEsU0FBQXdILGlCQUFBeEgsU0FBQXdILGdCQUFBM0YsT0FBQTdCLFNBQUF3SCxnQkFBQTNGLE1BQUE0RixrQkFFQSxvQkFBQXBDLFFBQUFBLE9BQUFxQixVQUFBckIsT0FBQXFCLFFBQUFnQixTQUFBckMsT0FBQXFCLFFBQUFpQixXQUFBdEMsT0FBQXFCLFFBQUFrQixRQUdBLG9CQUFBekcsV0FBQUEsVUFBQUUsV0FBQUYsVUFBQUUsVUFBQXdHLGNBQUFULE1BQUEsbUJBQUFVLFNBQUFDLE9BQUFDLEdBQUEsS0FBQSxJQUVBLG9CQUFBN0csV0FBQUEsVUFBQUUsV0FBQUYsVUFBQUUsVUFBQXdHLGNBQUFULE1BQUEsdUJBM0NBMVcsRUFBQTJWLFFBQUEsb0JBQUE0QixhQUNBLElBQUFBLE9BQUE1QixRQUNBNEIsT0FBQTVCLFFBQUE2QixNQXNLQSxXQUNBLElBQ0EsT0FBQTdDLE9BQUE4QyxhQUNBLE1BQUF2WSxLQXhLQXdZLEdBTUExWCxFQUFBMlgsUUFDQSxnQkFDQSxjQUNBLFlBQ0EsYUFDQSxhQUNBLFdBbUNBM1gsRUFBQTRYLFdBQUEzSixFQUFBLFNBQUE0SixHQUNBLElBQ0EsT0FBQUMsS0FBQUMsVUFBQUYsR0FDQSxNQUFBblgsR0FDQSxNQUFBLCtCQUFBQSxFQUFBc1gsVUFxR0FoWSxFQUFBaVksT0FBQXZDLHlTQ3ZLQXRWLEVBQUFKLFFBRUEsU0FBQXE3QixFQUFBL3dCLEdBS0EsSUFBQSxJQUpBNlUsS0FJQXhmLEdBRkEySyxFQUFBQSxHQUFBLElBRUEsRUFBQTNLLEVBQUEwN0IsRUFBQW43QixPQUFBUCxJQUNBd2YsRUFBQXhmLEVBQUEySyxHQUFBK3dCLEVBQUExN0IsR0FHQSxPQUFBd2YsNEJDTkEsSUFBQSxJQURBOGlFLEtBQ0F0aUYsRUFBQSxFQUFBQSxFQUFBLE1BQUFBLEVBQ0FzaUYsRUFBQXRpRixJQUFBQSxFQUFBLEtBQUFnZSxTQUFBLElBQUFuRSxPQUFBLEdBZ0JBcFosRUFBQUosUUFiQSxTQUFBOEQsRUFBQWk2QyxHQUNBLElBQUFwK0MsRUFBQW8rQyxHQUFBLEVBQ0Fta0MsRUFBQUQsRUFDQSxPQUFBQyxFQUFBcCtFLEVBQUFuRSxNQUFBdWlGLEVBQUFwK0UsRUFBQW5FLE1BQ0F1aUYsRUFBQXArRSxFQUFBbkUsTUFBQXVpRixFQUFBcCtFLEVBQUFuRSxNQUFBLElBQ0F1aUYsRUFBQXArRSxFQUFBbkUsTUFBQXVpRixFQUFBcCtFLEVBQUFuRSxNQUFBLElBQ0F1aUYsRUFBQXArRSxFQUFBbkUsTUFBQXVpRixFQUFBcCtFLEVBQUFuRSxNQUFBLElBQ0F1aUYsRUFBQXArRSxFQUFBbkUsTUFBQXVpRixFQUFBcCtFLEVBQUFuRSxNQUFBLElBQ0F1aUYsRUFBQXArRSxFQUFBbkUsTUFBQXVpRixFQUFBcCtFLEVBQUFuRSxNQUNBdWlGLEVBQUFwK0UsRUFBQW5FLE1BQUF1aUYsRUFBQXArRSxFQUFBbkUsTUFDQXVpRixFQUFBcCtFLEVBQUFuRSxNQUFBdWlGLEVBQUFwK0UsRUFBQW5FLDZDQ2ZBLElBQUF3aUYsRUFFQUMsRUFBQXo5RSxFQUFBeTlFLFFBQUF6OUUsRUFBQTA5RSxTQUNBLEdBQUFELEdBQUFBLEVBQUFFLGdCQUFBLENBRUEsSUFBQUMsRUFBQSxJQUFBbGhGLFdBQUEsSUFDQThnRixFQUFBLFdBRUEsT0FEQUMsRUFBQUUsZ0JBQUFDLEdBQ0FBLEdBSUEsSUFBQUosRUFBQSxDQUtBLElBQUFLLEVBQUEsSUFBQTdwRSxNQUFBLElBQ0F3cEUsRUFBQSxXQUNBLElBQUEsSUFBQTlpRixFQUFBTSxFQUFBLEVBQUFBLEVBQUEsR0FBQUEsSUFDQSxJQUFBLEVBQUFBLEtBQUFOLEVBQUEsV0FBQThDLEtBQUFHLFVBQ0FrZ0YsRUFBQTdpRixHQUFBTixNQUFBLEVBQUFNLElBQUEsR0FBQSxJQUdBLE9BQUE2aUYsR0FJQXBpRixFQUFBSixRQUFBbWlGLDZJQ2hDQSxJQUFBQSxFQUFBemlGLEVBQUEsYUFDQStpRixFQUFBL2lGLEVBQUEscUJBMkJBVSxFQUFBSixRQXpCQSxTQUFBbUUsRUFBQUwsRUFBQWk2QyxHQUNBLElBQUFwK0MsRUFBQW1FLEdBQUFpNkMsR0FBQSxFQUVBLGlCQUFBLElBQ0FqNkMsRUFBQSxVQUFBSyxFQUFBLElBQUF3VSxNQUFBLElBQUEsS0FDQXhVLEVBQUEsTUFJQSxJQUFBcStFLEdBRkFyK0UsRUFBQUEsT0FFQTdCLFNBQUE2QixFQUFBZytFLEtBQUFBLEtBT0EsR0FKQUssRUFBQSxHQUFBLEdBQUFBLEVBQUEsR0FBQSxHQUNBQSxFQUFBLEdBQUEsR0FBQUEsRUFBQSxHQUFBLElBR0ExK0UsRUFDQSxJQUFBLElBQUF4QyxFQUFBLEVBQUFBLEVBQUEsS0FBQUEsRUFDQXdDLEVBQUFuRSxFQUFBMkIsR0FBQWtoRixFQUFBbGhGLEdBSUEsT0FBQXdDLEdBQUEyK0UsRUFBQUQsa0VDekJBLGFBZ0JBLFNBQUF4L0UsRUFBQW13QixHQUNBLElBQUE5VyxFQUFBLEdBRUEsR0FDQUEsRUFBQXFtRSxFQUFBdnZELEVBQUFqekIsR0FBQW1jLEVBQ0E4VyxFQUFBaHhCLEtBQUFLLE1BQUEyd0IsRUFBQWp6QixTQUNBaXpCLEVBQUEsR0FFQSxPQUFBOVcsRUEwQkEsU0FBQTFJLElBQ0EsSUFBQXVaLEVBQUFscUIsR0FBQSxJQUFBd1YsTUFFQSxPQUFBMFUsSUFBQXhVLEdBQUErYixFQUFBLEVBQUEvYixFQUFBd1UsR0FDQUEsRUFBQSxJQUFBbHFCLEVBQUF5eEIsS0FNQSxJQTFEQSxJQUtBL2IsRUFMQWdxRSxFQUFBLG1FQUFBbnBFLE1BQUEsSUFDQXJaLEVBQUEsR0FDQXFiLEtBQ0FrWixFQUFBLEVBQ0E5MEIsRUFBQSxFQXNEQUEsRUFBQU8sRUFBQVAsSUFBQTRiLEVBQUFtbkUsRUFBQS9pRixJQUFBQSxFQUtBZ1UsRUFBQTNRLE9BQUFBLEVBQ0EyUSxFQUFBdlEsT0FoQ0EsU0FBQXNXLEdBQ0EsSUFBQWlwRSxFQUFBLEVBRUEsSUFBQWhqRixFQUFBLEVBQUFBLEVBQUErWixFQUFBeFosT0FBQVAsSUFDQWdqRixFQUFBQSxFQUFBemlGLEVBQUFxYixFQUFBN0IsRUFBQW1ELE9BQUFsZCxJQUdBLE9BQUFnakYsR0EwQkF2aUYsRUFBQUosUUFBQTJULDJCQ25FQSxJQUFBOHNDLEVBQUEvZ0QsRUFBQSxZQUNBdTdFLEVBQUF2N0UsRUFBQSxvQkFDQXVsRSxFQUFBdmxFLEVBQUEsb0JBRUFxTCxFQUFBa3dFLEVBQUFPLFFBQUFoMEUsU0FBQW83RSxRQUVBeGlGLEVBQUFKLFFBQUEsU0FBQTZpRixHQUNBLElBQUF2OUMsRUFBQTVqQyxLQVVBLE9BUkE0akMsRUFBQXU5QyxTQUFBcGlDLEVBQUFpVSxnQkFBQW11QixHQUVBdjlDLEVBQUF3OUMsT0FBQTdkLEVBQUE4ZCxLQUVBaDRFLEVBQUFuRixHQUFBLGVBQUEsU0FBQW9TLEdBQ0FzdEIsRUFBQXU5QyxTQUFBNzhFLEtBQUFnUyxLQUdBc3RCLG1GQ2pCQSxJQUFBbWIsRUFBQS9nRCxFQUFBLFlBQ0F1N0UsRUFBQXY3RSxFQUFBLG9CQUNBdWxFLEVBQUF2bEUsRUFBQSxvQkFFQXFMLEVBQUFrd0UsRUFBQU8sUUFBQWgwRSxTQUFBbzdFLFFBRUF4aUYsRUFBQUosUUFBQSxXQWdCQSxPQWZBMEIsS0FBQXNoRixXQUFBdmlDLEVBQUF3VCxXQUFBLElBRUF2eUQsS0FBQXVoRixZQUFBLFdBQ0EsS0FBQXZoRixLQUFBc2hGLGVBRUFqNEUsRUFBQXRFLEtBQUEsZ0JBQ0FzOEUsS0FBQTlkLEVBQUE4ZCxLQUNBdGhFLEtBQUEvZixLQUFBc2hGLGVBSUF0aEYsS0FBQXNoRixXQUFBLE1BRUEvcEUsS0FBQXZYLE1BRUFBLHNGQ3RCQSxJQUNBcWhGLEVBREFyakYsRUFBQSxhQUdBVSxFQUFBSixTQUNBK2lGLEtBQUFBLHdDQ0pBLElBQUFoakMsRUFBQXJnRCxFQUFBLFVBQ0ErZ0QsRUFBQS9nRCxFQUFBLFlBQ0F3akYsRUFBQXhqRixFQUFBLDJCQUNBeWpGLEVBQUF6akYsRUFBQSwyQkFHQTBqRixHQUZBMWpGLEVBQUEsZUFBQW1qRixTQUVBLElBQUFLLE9BRUFHLEVBQUEsSUFBQUYsRUFFQXBqQyxFQUFBLFdBQ0FVLEVBQUE2akIsY0FBQThlLEVBQUFyakMsRUFBQSxrQkFBQSxJQUVBVSxFQUFBNmpCLGNBQUErZSxFQUFBdGpDLEVBQUEsdUJBQUEsK0hDRkEvL0MsRUFBQTZpRiIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJtb2R1bGUuZXhwb3J0cyA9IGFmdGVyXG5cbmZ1bmN0aW9uIGFmdGVyKGNvdW50LCBjYWxsYmFjaywgZXJyX2NiKSB7XG4gICAgdmFyIGJhaWwgPSBmYWxzZVxuICAgIGVycl9jYiA9IGVycl9jYiB8fCBub29wXG4gICAgcHJveHkuY291bnQgPSBjb3VudFxuXG4gICAgcmV0dXJuIChjb3VudCA9PT0gMCkgPyBjYWxsYmFjaygpIDogcHJveHlcblxuICAgIGZ1bmN0aW9uIHByb3h5KGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChwcm94eS5jb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FmdGVyIGNhbGxlZCB0b28gbWFueSB0aW1lcycpXG4gICAgICAgIH1cbiAgICAgICAgLS1wcm94eS5jb3VudFxuXG4gICAgICAgIC8vIGFmdGVyIGZpcnN0IGVycm9yLCByZXN0IGFyZSBwYXNzZWQgdG8gZXJyX2NiXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGJhaWwgPSB0cnVlXG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpXG4gICAgICAgICAgICAvLyBmdXR1cmUgZXJyb3IgY2FsbGJhY2tzIHdpbGwgZ28gdG8gZXJyb3IgaGFuZGxlclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBlcnJfY2JcbiAgICAgICAgfSBlbHNlIGlmIChwcm94eS5jb3VudCA9PT0gMCAmJiAhYmFpbCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBub29wKCkge31cbiIsIi8qKlxuICogQW4gYWJzdHJhY3Rpb24gZm9yIHNsaWNpbmcgYW4gYXJyYXlidWZmZXIgZXZlbiB3aGVuXG4gKiBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgaXMgbm90IHN1cHBvcnRlZFxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheWJ1ZmZlciwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBhcnJheWJ1ZmZlci5ieXRlTGVuZ3RoO1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGVuZCA9IGVuZCB8fCBieXRlcztcblxuICBpZiAoYXJyYXlidWZmZXIuc2xpY2UpIHsgcmV0dXJuIGFycmF5YnVmZmVyLnNsaWNlKHN0YXJ0LCBlbmQpOyB9XG5cbiAgaWYgKHN0YXJ0IDwgMCkgeyBzdGFydCArPSBieXRlczsgfVxuICBpZiAoZW5kIDwgMCkgeyBlbmQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA+IGJ5dGVzKSB7IGVuZCA9IGJ5dGVzOyB9XG5cbiAgaWYgKHN0YXJ0ID49IGJ5dGVzIHx8IHN0YXJ0ID49IGVuZCB8fCBieXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gIH1cblxuICB2YXIgYWJ2ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZW5kIC0gc3RhcnQpO1xuICBmb3IgKHZhciBpID0gc3RhcnQsIGlpID0gMDsgaSA8IGVuZDsgaSsrLCBpaSsrKSB7XG4gICAgcmVzdWx0W2lpXSA9IGFidltpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmJ1ZmZlcjtcbn07XG4iLCJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cbiIsIi8qXG4gKiBiYXNlNjQtYXJyYXlidWZmZXJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtsYXN2aC9iYXNlNjQtYXJyYXlidWZmZXJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgTmlrbGFzIHZvbiBIZXJ0emVuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbigpe1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgY2hhcnMgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcblxuICAvLyBVc2UgYSBsb29rdXAgdGFibGUgdG8gZmluZCB0aGUgaW5kZXguXG4gIHZhciBsb29rdXAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbG9va3VwW2NoYXJzLmNoYXJDb2RlQXQoaSldID0gaTtcbiAgfVxuXG4gIGV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24oYXJyYXlidWZmZXIpIHtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlciksXG4gICAgaSwgbGVuID0gYnl0ZXMubGVuZ3RoLCBiYXNlNjQgPSBcIlwiO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9Mykge1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaV0gJiAzKSA8PCA0KSB8IChieXRlc1tpICsgMV0gPj4gNCldO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIpIHwgKGJ5dGVzW2kgKyAyXSA+PiA2KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cblxuICAgIGlmICgobGVuICUgMykgPT09IDIpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDEpICsgXCI9XCI7XG4gICAgfSBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArIFwiPT1cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTY0O1xuICB9O1xuXG4gIGV4cG9ydHMuZGVjb2RlID0gIGZ1bmN0aW9uKGJhc2U2NCkge1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBiYXNlNjQubGVuZ3RoICogMC43NSxcbiAgICBsZW4gPSBiYXNlNjQubGVuZ3RoLCBpLCBwID0gMCxcbiAgICBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcblxuICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSBcIj1cIikge1xuICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAyXSA9PT0gXCI9XCIpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFycmF5YnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCksXG4gICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz00KSB7XG4gICAgICBlbmNvZGVkMSA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKV07XG4gICAgICBlbmNvZGVkMiA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzEpXTtcbiAgICAgIGVuY29kZWQzID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMildO1xuICAgICAgZW5jb2RlZDQgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSszKV07XG5cbiAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xuICB9O1xufSkoKTtcbiIsIi8qKlxuICogQ3JlYXRlIGEgYmxvYiBidWlsZGVyIGV2ZW4gd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcbiAqL1xuXG52YXIgQmxvYkJ1aWxkZXIgPSBnbG9iYWwuQmxvYkJ1aWxkZXJcbiAgfHwgZ2xvYmFsLldlYktpdEJsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5NU0Jsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5Nb3pCbG9iQnVpbGRlcjtcblxuLyoqXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIGlzIHN1cHBvcnRlZFxuICovXG5cbnZhciBibG9iU3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcbiAgICByZXR1cm4gYS5zaXplID09PSAyO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBzdXBwb3J0cyBBcnJheUJ1ZmZlclZpZXdzXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxuICovXG5cbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYiA9IG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShbMSwyXSldKTtcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYkJ1aWxkZXIgaXMgc3VwcG9ydGVkXG4gKi9cblxudmFyIGJsb2JCdWlsZGVyU3VwcG9ydGVkID0gQmxvYkJ1aWxkZXJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmFwcGVuZFxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXG4gKiBVc2VkIGJ5IEJsb2JCdWlsZGVyIGNvbnN0cnVjdG9yIGFuZCBvbGQgYnJvd3NlcnMgdGhhdCBkaWRuJ3RcbiAqIHN1cHBvcnQgaXQgaW4gdGhlIEJsb2IgY29uc3RydWN0b3IuXG4gKi9cblxuZnVuY3Rpb24gbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2h1bmsgPSBhcnlbaV07XG4gICAgaWYgKGNodW5rLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xuXG4gICAgICAvLyBpZiB0aGlzIGlzIGEgc3ViYXJyYXksIG1ha2UgYSBjb3B5IHNvIHdlIG9ubHlcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxuICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggIT09IGJ1Zi5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsuYnl0ZUxlbmd0aCk7XG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xuICAgICAgICBidWYgPSBjb3B5LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgYXJ5W2ldID0gYnVmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgYmIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYmIuYXBwZW5kKGFyeVtpXSk7XG4gIH1cblxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XG59O1xuXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KTtcbiAgcmV0dXJuIG5ldyBCbG9iKGFyeSwgb3B0aW9ucyB8fCB7fSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgaWYgKGJsb2JTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gZ2xvYmFsLkJsb2IgOiBCbG9iQ29uc3RydWN0b3I7XG4gIH0gZWxzZSBpZiAoYmxvYkJ1aWxkZXJTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59KSgpO1xuIiwiLyoqXG4gKiBTbGljZSByZWZlcmVuY2UuXG4gKi9cblxudmFyIHNsaWNlID0gW10uc2xpY2U7XG5cbi8qKlxuICogQmluZCBgb2JqYCB0byBgZm5gLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBmbiBvciBzdHJpbmdcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgZm4pe1xuICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGZuKSBmbiA9IG9ialtmbl07XG4gIGlmICgnZnVuY3Rpb24nICE9IHR5cGVvZiBmbikgdGhyb3cgbmV3IEVycm9yKCdiaW5kKCkgcmVxdWlyZXMgYSBmdW5jdGlvbicpO1xuICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG9iaiwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIH1cbn07XG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcbiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucHJvdG90eXBlID0gbmV3IGZuO1xuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XG59OyIsIlxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9pbmRleCcpO1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgcGFyc2Vqc29uID0gcmVxdWlyZSgncGFyc2Vqc29uJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0ICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvY2tldCkpIHJldHVybiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgaWYgKHVyaSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gbnVsbDtcbiAgfVxuXG4gIGlmICh1cmkpIHtcbiAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCB1cmkucHJvdG9jb2wgPT09ICd3c3MnO1xuICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgfVxuXG4gIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBvcHRzLnNlY3VyZSA/IG9wdHMuc2VjdXJlXG4gICAgOiAoZ2xvYmFsLmxvY2F0aW9uICYmICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbCk7XG5cbiAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/ICc0NDMnIDogJzgwJztcbiAgfVxuXG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZSB8fFxuICAgIChnbG9iYWwubG9jYXRpb24gPyBsb2NhdGlvbi5ob3N0bmFtZSA6ICdsb2NhbGhvc3QnKTtcbiAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0IHx8IChnbG9iYWwubG9jYXRpb24gJiYgbG9jYXRpb24ucG9ydFxuICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICA6ICh0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5IHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLnF1ZXJ5KSB0aGlzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5xdWVyeSk7XG4gIHRoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7XG4gIHRoaXMucGF0aCA9IChvcHRzLnBhdGggfHwgJy9lbmdpbmUuaW8nKS5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nO1xuICB0aGlzLmZvcmNlSlNPTlAgPSAhIW9wdHMuZm9yY2VKU09OUDtcbiAgdGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuICB0aGlzLmZvcmNlQmFzZTY0ID0gISFvcHRzLmZvcmNlQmFzZTY0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSAhIW9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW0gfHwgJ3QnO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFsncG9sbGluZycsICd3ZWJzb2NrZXQnXTtcbiAgdGhpcy50cmFuc3BvcnRPcHRpb25zID0gb3B0cy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICB0aGlzLnBvbGljeVBvcnQgPSBvcHRzLnBvbGljeVBvcnQgfHwgODQzO1xuICB0aGlzLnJlbWVtYmVyVXBncmFkZSA9IG9wdHMucmVtZW1iZXJVcGdyYWRlIHx8IGZhbHNlO1xuICB0aGlzLmJpbmFyeVR5cGUgPSBudWxsO1xuICB0aGlzLm9ubHlCaW5hcnlVcGdyYWRlcyA9IG9wdHMub25seUJpbmFyeVVwZ3JhZGVzO1xuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gZmFsc2UgIT09IG9wdHMucGVyTWVzc2FnZURlZmxhdGUgPyAob3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB7fSkgOiBmYWxzZTtcblxuICBpZiAodHJ1ZSA9PT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSkgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9O1xuICBpZiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQgPSAxMDI0O1xuICB9XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZnggfHwgbnVsbDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleSB8fCBudWxsO1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2UgfHwgbnVsbDtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0IHx8IG51bGw7XG4gIHRoaXMuY2EgPSBvcHRzLmNhIHx8IG51bGw7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycyB8fCBudWxsO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gISFvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT09ICdvYmplY3QnICYmIGdsb2JhbDtcbiAgaWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsKSB7XG4gICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmxvY2FsQWRkcmVzcykge1xuICAgICAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gIHRoaXMuaWQgPSBudWxsO1xuICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucGluZ0ludGVydmFsVGltZXIgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gIHRoaXMub3BlbigpO1xufVxuXG5Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5Tb2NrZXQuU29ja2V0ID0gU29ja2V0O1xuU29ja2V0LlRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0Jyk7XG5Tb2NrZXQudHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xuU29ja2V0LnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHF1ZXJ5ID0gY2xvbmUodGhpcy5xdWVyeSk7XG5cbiAgLy8gYXBwZW5kIGVuZ2luZS5pbyBwcm90b2NvbCBpZGVudGlmaWVyXG4gIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAvLyB0cmFuc3BvcnQgbmFtZVxuICBxdWVyeS50cmFuc3BvcnQgPSBuYW1lO1xuXG4gIC8vIHBlci10cmFuc3BvcnQgb3B0aW9uc1xuICB2YXIgb3B0aW9ucyA9IHRoaXMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSB8fCB7fTtcblxuICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKHRoaXMuaWQpIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7XG5cbiAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW25hbWVdKHtcbiAgICBxdWVyeTogcXVlcnksXG4gICAgc29ja2V0OiB0aGlzLFxuICAgIGFnZW50OiBvcHRpb25zLmFnZW50IHx8IHRoaXMuYWdlbnQsXG4gICAgaG9zdG5hbWU6IG9wdGlvbnMuaG9zdG5hbWUgfHwgdGhpcy5ob3N0bmFtZSxcbiAgICBwb3J0OiBvcHRpb25zLnBvcnQgfHwgdGhpcy5wb3J0LFxuICAgIHNlY3VyZTogb3B0aW9ucy5zZWN1cmUgfHwgdGhpcy5zZWN1cmUsXG4gICAgcGF0aDogb3B0aW9ucy5wYXRoIHx8IHRoaXMucGF0aCxcbiAgICBmb3JjZUpTT05QOiBvcHRpb25zLmZvcmNlSlNPTlAgfHwgdGhpcy5mb3JjZUpTT05QLFxuICAgIGpzb25wOiBvcHRpb25zLmpzb25wIHx8IHRoaXMuanNvbnAsXG4gICAgZm9yY2VCYXNlNjQ6IG9wdGlvbnMuZm9yY2VCYXNlNjQgfHwgdGhpcy5mb3JjZUJhc2U2NCxcbiAgICBlbmFibGVzWERSOiBvcHRpb25zLmVuYWJsZXNYRFIgfHwgdGhpcy5lbmFibGVzWERSLFxuICAgIHRpbWVzdGFtcFJlcXVlc3RzOiBvcHRpb25zLnRpbWVzdGFtcFJlcXVlc3RzIHx8IHRoaXMudGltZXN0YW1wUmVxdWVzdHMsXG4gICAgdGltZXN0YW1wUGFyYW06IG9wdGlvbnMudGltZXN0YW1wUGFyYW0gfHwgdGhpcy50aW1lc3RhbXBQYXJhbSxcbiAgICBwb2xpY3lQb3J0OiBvcHRpb25zLnBvbGljeVBvcnQgfHwgdGhpcy5wb2xpY3lQb3J0LFxuICAgIHBmeDogb3B0aW9ucy5wZnggfHwgdGhpcy5wZngsXG4gICAga2V5OiBvcHRpb25zLmtleSB8fCB0aGlzLmtleSxcbiAgICBwYXNzcGhyYXNlOiBvcHRpb25zLnBhc3NwaHJhc2UgfHwgdGhpcy5wYXNzcGhyYXNlLFxuICAgIGNlcnQ6IG9wdGlvbnMuY2VydCB8fCB0aGlzLmNlcnQsXG4gICAgY2E6IG9wdGlvbnMuY2EgfHwgdGhpcy5jYSxcbiAgICBjaXBoZXJzOiBvcHRpb25zLmNpcGhlcnMgfHwgdGhpcy5jaXBoZXJzLFxuICAgIHJlamVjdFVuYXV0aG9yaXplZDogb3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWQgfHwgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IG9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgfHwgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSxcbiAgICBleHRyYUhlYWRlcnM6IG9wdGlvbnMuZXh0cmFIZWFkZXJzIHx8IHRoaXMuZXh0cmFIZWFkZXJzLFxuICAgIGZvcmNlTm9kZTogb3B0aW9ucy5mb3JjZU5vZGUgfHwgdGhpcy5mb3JjZU5vZGUsXG4gICAgbG9jYWxBZGRyZXNzOiBvcHRpb25zLmxvY2FsQWRkcmVzcyB8fCB0aGlzLmxvY2FsQWRkcmVzcyxcbiAgICByZXF1ZXN0VGltZW91dDogb3B0aW9ucy5yZXF1ZXN0VGltZW91dCB8fCB0aGlzLnJlcXVlc3RUaW1lb3V0LFxuICAgIHByb3RvY29sczogb3B0aW9ucy5wcm90b2NvbHMgfHwgdm9pZCAoMClcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgdmFyIG8gPSB7fTtcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYW5zcG9ydDtcbiAgaWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoJ3dlYnNvY2tldCcpICE9PSAtMSkge1xuICAgIHRyYW5zcG9ydCA9ICd3ZWJzb2NrZXQnO1xuICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgJ05vIHRyYW5zcG9ydHMgYXZhaWxhYmxlJyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgfVxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG5cbiAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICB0cnkge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmFuc3BvcnQub3BlbigpO1xuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgZGVidWcoJ3NldHRpbmcgdHJhbnNwb3J0ICVzJywgdHJhbnNwb3J0Lm5hbWUpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ2NsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlcycsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICB0cmFuc3BvcnRcbiAgLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uRHJhaW4oKTtcbiAgfSlcbiAgLm9uKCdwYWNrZXQnLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9KVxuICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoZSk7XG4gIH0pXG4gIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCd0cmFuc3BvcnQgY2xvc2UnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuICgpIHtcbiAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgIHZhciB1cGdyYWRlTG9zZXNCaW5hcnkgPSAhdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiBzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtcbiAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgfVxuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgc2VsZi51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBkZWJ1ZygnY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0Jyk7XG5cbiAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICBzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICd1cGdyYWRlJyB9XSk7XG4gICAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpO1xuICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgIGNsZWFudXAoKTtcblxuICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpO1xuICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlICgpIHtcbiAgICBvbmVycm9yKCd0cmFuc3BvcnQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25jbG9zZSAoKSB7XG4gICAgb25lcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb251cGdyYWRlICh0bykge1xuICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpO1xuICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTtcblxuICB0cmFuc3BvcnQub3BlbigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzb2NrZXQgb3BlbicpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIHRoaXMuZmx1c2goKTtcblxuICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcblxuICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMub25IYW5kc2hha2UocGFyc2Vqc29uKHBhY2tldC5kYXRhKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb25nJzpcbiAgICAgICAgdGhpcy5zZXRQaW5nKCk7XG4gICAgICAgIHRoaXMuZW1pdCgncG9uZycpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdzZXJ2ZXIgZXJyb3InKTtcbiAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGFja2V0LmRhdGEpO1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggc29ja2V0IHJlYWR5U3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkhhbmRzaGFrZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnaGFuZHNoYWtlJywgZGF0YSk7XG4gIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgdGhpcy5vbk9wZW4oKTtcbiAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICB0aGlzLnNldFBpbmcoKTtcblxuICAvLyBQcm9sb25nIGxpdmVuZXNzIG9mIHNvY2tldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7XG4gIHRoaXMub24oJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xufTtcblxuLyoqXG4gKiBSZXNldHMgcGluZyB0aW1lb3V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHNlbGYub25DbG9zZSgncGluZyB0aW1lb3V0Jyk7XG4gIH0sIHRpbWVvdXQgfHwgKHNlbGYucGluZ0ludGVydmFsICsgc2VsZi5waW5nVGltZW91dCkpO1xufTtcblxuLyoqXG4gKiBQaW5ncyBzZXJ2ZXIgZXZlcnkgYHRoaXMucGluZ0ludGVydmFsYCBhbmQgZXhwZWN0cyByZXNwb25zZVxuICogd2l0aGluIGB0aGlzLnBpbmdUaW1lb3V0YCBvciBjbG9zZXMgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2xlYXJUaW1lb3V0KHNlbGYucGluZ0ludGVydmFsVGltZXIpO1xuICBzZWxmLnBpbmdJbnRlcnZhbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtcycsIHNlbGYucGluZ1RpbWVvdXQpO1xuICAgIHNlbGYucGluZygpO1xuICAgIHNlbGYub25IZWFydGJlYXQoc2VsZi5waW5nVGltZW91dCk7XG4gIH0sIHNlbGYucGluZ0ludGVydmFsKTtcbn07XG5cbi8qKlxuKiBTZW5kcyBhIHBpbmcgcGFja2V0LlxuKlxuKiBAYXBpIHByaXZhdGVcbiovXG5cblNvY2tldC5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlbmRQYWNrZXQoJ3BpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdwaW5nJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25EcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdCgnZHJhaW4nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICF0aGlzLnVwZ3JhZGluZyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIGRlYnVnKCdmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldCcsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAvLyBzcGxpY2Ugd3JpdGVCdWZmZXIgYW5kIGNhbGxiYWNrQnVmZmVyIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICB0aGlzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLndyaXRlID1cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtc2csIG9wdGlvbnMsIGZuKSB7XG4gIHRoaXMuc2VuZFBhY2tldCgnbWVzc2FnZScsIG1zZywgb3B0aW9ucywgZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kUGFja2V0ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEsIG9wdGlvbnMsIGZuKSB7XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGF0YSkge1xuICAgIGZuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgZm4gPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgaWYgKCdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfTtcbiAgdGhpcy5lbWl0KCdwYWNrZXRDcmVhdGUnLCBwYWNrZXQpO1xuICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgaWYgKGZuKSB0aGlzLm9uY2UoJ2ZsdXNoJywgZm4pO1xuICB0aGlzLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2luZyc7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCdmb3JjZWQgY2xvc2UnKTtcbiAgICBkZWJ1Zygnc29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZScpO1xuICAgIHNlbGYudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwQW5kQ2xvc2UgKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgY2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhaXRGb3JVcGdyYWRlICgpIHtcbiAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgIHNlbGYub25jZSgndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgc2VsZi5vbmNlKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvclxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ3NvY2tldCBlcnJvciAlaicsIGVycik7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMub25DbG9zZSgndHJhbnNwb3J0IGVycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24sIGRlc2MpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBjbGVhciB0aW1lcnNcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnRcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XG5cbiAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3BlblxuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzYyk7XG5cbiAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICBzZWxmLndyaXRlQnVmZmVyID0gW107XG4gICAgc2VsZi5wcmV2QnVmZmVyTGVuID0gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICpcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHVwZ3JhZGVzKSB7XG4gIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBqID0gdXBncmFkZXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKH5pbmRleCh0aGlzLnRyYW5zcG9ydHMsIHVwZ3JhZGVzW2ldKSkgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlcztcbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydDtcblxuLyoqXG4gKiBUcmFuc3BvcnQgYWJzdHJhY3QgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBUcmFuc3BvcnQgKG9wdHMpIHtcbiAgdGhpcy5wYXRoID0gb3B0cy5wYXRoO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZTtcbiAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0O1xuICB0aGlzLnNlY3VyZSA9IG9wdHMuc2VjdXJlO1xuICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW07XG4gIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgPSBvcHRzLnRpbWVzdGFtcFJlcXVlc3RzO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7XG4gIHRoaXMuc29ja2V0ID0gb3B0cy5zb2NrZXQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleTtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7XG4gIHRoaXMuY2EgPSBvcHRzLmNhO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoVHJhbnNwb3J0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRW1pdHMgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKG1zZywgZGVzYykge1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci50eXBlID0gJ1RyYW5zcG9ydEVycm9yJztcbiAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICAgIHRoaXMuZG9PcGVuKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgdGhpcy5vbkNsb3NlKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IG5vdCBvcGVuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gb3BlblxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFhIUiA9IHJlcXVpcmUoJy4vcG9sbGluZy14aHInKTtcbnZhciBKU09OUCA9IHJlcXVpcmUoJy4vcG9sbGluZy1qc29ucCcpO1xudmFyIHdlYnNvY2tldCA9IHJlcXVpcmUoJy4vd2Vic29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0IHRyYW5zcG9ydHMuXG4gKi9cblxuZXhwb3J0cy5wb2xsaW5nID0gcG9sbGluZztcbmV4cG9ydHMud2Vic29ja2V0ID0gd2Vic29ja2V0O1xuXG4vKipcbiAqIFBvbGxpbmcgdHJhbnNwb3J0IHBvbHltb3JwaGljIGNvbnN0cnVjdG9yLlxuICogRGVjaWRlcyBvbiB4aHIgdnMganNvbnAgYmFzZWQgb24gZmVhdHVyZSBkZXRlY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9sbGluZyAob3B0cykge1xuICB2YXIgeGhyO1xuICB2YXIgeGQgPSBmYWxzZTtcbiAgdmFyIHhzID0gZmFsc2U7XG4gIHZhciBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuXG4gIGlmIChnbG9iYWwubG9jYXRpb24pIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpO1xuICAgIHJldHVybiBuZXcgSlNPTlAob3B0cyk7XG4gIH1cbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBKU09OUFBvbGxpbmc7XG5cbi8qKlxuICogQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gKi9cblxudmFyIHJOZXdsaW5lID0gL1xcbi9nO1xudmFyIHJFc2NhcGVkTmV3bGluZSA9IC9cXFxcbi9nO1xuXG4vKipcbiAqIEdsb2JhbCBKU09OUCBjYWxsYmFja3MuXG4gKi9cblxudmFyIGNhbGxiYWNrcztcblxuLyoqXG4gKiBOb29wLlxuICovXG5cbmZ1bmN0aW9uIGVtcHR5ICgpIHsgfVxuXG4vKipcbiAqIEpTT05QIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEpTT05QUG9sbGluZyAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG5cbiAgLy8gZGVmaW5lIGdsb2JhbCBjYWxsYmFja3MgYXJyYXkgaWYgbm90IHByZXNlbnRcbiAgLy8gd2UgZG8gdGhpcyBoZXJlIChsYXppbHkpIHRvIGF2b2lkIHVubmVlZGVkIGdsb2JhbCBwb2xsdXRpb25cbiAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIGNvbnNpZGVyIG11bHRpcGxlIGVuZ2luZXMgaW4gdGhlIHNhbWUgcGFnZVxuICAgIGlmICghZ2xvYmFsLl9fX2VpbykgZ2xvYmFsLl9fX2VpbyA9IFtdO1xuICAgIGNhbGxiYWNrcyA9IGdsb2JhbC5fX19laW87XG4gIH1cblxuICAvLyBjYWxsYmFjayBpZGVudGlmaWVyXG4gIHRoaXMuaW5kZXggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gIC8vIGFkZCBjYWxsYmFjayB0byBqc29ucCBnbG9iYWxcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAobXNnKSB7XG4gICAgc2VsZi5vbkRhdGEobXNnKTtcbiAgfSk7XG5cbiAgLy8gYXBwZW5kIHRvIHF1ZXJ5IHN0cmluZ1xuICB0aGlzLnF1ZXJ5LmogPSB0aGlzLmluZGV4O1xuXG4gIC8vIHByZXZlbnQgc3B1cmlvdXMgZXJyb3JzIGZyb20gYmVpbmcgZW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgdW5sb2FkZWRcbiAgaWYgKGdsb2JhbC5kb2N1bWVudCAmJiBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5zY3JpcHQpIHNlbGYuc2NyaXB0Lm9uZXJyb3IgPSBlbXB0eTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChKU09OUFBvbGxpbmcsIFBvbGxpbmcpO1xuXG4vKlxuICogSlNPTlAgb25seSBzdXBwb3J0cyBiaW5hcnkgYXMgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLmZvcm0pIHtcbiAgICB0aGlzLmZvcm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvcm0pO1xuICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICB9XG5cbiAgUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cblxuICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICBzY3JpcHQuc3JjID0gdGhpcy51cmkoKTtcbiAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbCBlcnJvcicsIGUpO1xuICB9O1xuXG4gIHZhciBpbnNlcnRBdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgaWYgKGluc2VydEF0KSB7XG4gICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XG4gIH0gZWxzZSB7XG4gICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfVxuICB0aGlzLnNjcmlwdCA9IHNjcmlwdDtcblxuICB2YXIgaXNVQWdlY2tvID0gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgL2dlY2tvL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICBpZiAoaXNVQWdlY2tvKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgfSwgMTAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgd2l0aCBhIGhpZGRlbiBpZnJhbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghdGhpcy5mb3JtKSB7XG4gICAgdmFyIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgdmFyIGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHZhciBpZCA9IHRoaXMuaWZyYW1lSWQgPSAnZWlvX2lmcmFtZV8nICsgdGhpcy5pbmRleDtcbiAgICB2YXIgaWZyYW1lO1xuXG4gICAgZm9ybS5jbGFzc05hbWUgPSAnc29ja2V0aW8nO1xuICAgIGZvcm0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGZvcm0uc3R5bGUudG9wID0gJy0xMDAwcHgnO1xuICAgIGZvcm0uc3R5bGUubGVmdCA9ICctMTAwMHB4JztcbiAgICBmb3JtLnRhcmdldCA9IGlkO1xuICAgIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICAgIGZvcm0uc2V0QXR0cmlidXRlKCdhY2NlcHQtY2hhcnNldCcsICd1dGYtOCcpO1xuICAgIGFyZWEubmFtZSA9ICdkJztcbiAgICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgIHRoaXMuYXJlYSA9IGFyZWE7XG4gIH1cblxuICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy51cmkoKTtcblxuICBmdW5jdGlvbiBjb21wbGV0ZSAoKSB7XG4gICAgaW5pdElmcmFtZSgpO1xuICAgIGZuKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0SWZyYW1lICgpIHtcbiAgICBpZiAoc2VsZi5pZnJhbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlbGYuZm9ybS5yZW1vdmVDaGlsZChzZWxmLmlmcmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbGluZyBpZnJhbWUgcmVtb3ZhbCBlcnJvcicsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBpZTYgZHluYW1pYyBpZnJhbWVzIHdpdGggdGFyZ2V0PVwiXCIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcilcbiAgICAgIHZhciBodG1sID0gJzxpZnJhbWUgc3JjPVwiamF2YXNjcmlwdDowXCIgbmFtZT1cIicgKyBzZWxmLmlmcmFtZUlkICsgJ1wiPic7XG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGh0bWwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgaWZyYW1lLm5hbWUgPSBzZWxmLmlmcmFtZUlkO1xuICAgICAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0OjAnO1xuICAgIH1cblxuICAgIGlmcmFtZS5pZCA9IHNlbGYuaWZyYW1lSWQ7XG5cbiAgICBzZWxmLmZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBzZWxmLmlmcmFtZSA9IGlmcmFtZTtcbiAgfVxuXG4gIGluaXRJZnJhbWUoKTtcblxuICAvLyBlc2NhcGUgXFxuIHRvIHByZXZlbnQgaXQgZnJvbSBiZWluZyBjb252ZXJ0ZWQgaW50byBcXHJcXG4gYnkgc29tZSBVQXNcbiAgLy8gZG91YmxlIGVzY2FwaW5nIGlzIHJlcXVpcmVkIGZvciBlc2NhcGVkIG5ldyBsaW5lcyBiZWNhdXNlIHVuZXNjYXBpbmcgb2YgbmV3IGxpbmVzIGNhbiBiZSBkb25lIHNhZmVseSBvbiBzZXJ2ZXItc2lkZVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKHJFc2NhcGVkTmV3bGluZSwgJ1xcXFxcXG4nKTtcbiAgdGhpcy5hcmVhLnZhbHVlID0gZGF0YS5yZXBsYWNlKHJOZXdsaW5lLCAnXFxcXG4nKTtcblxuICB0cnkge1xuICAgIHRoaXMuZm9ybS5zdWJtaXQoKTtcbiAgfSBjYXRjaCAoZSkge31cblxuICBpZiAodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpIHtcbiAgICB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5pZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pZnJhbWUub25sb2FkID0gY29tcGxldGU7XG4gIH1cbn07XG4iLCIvKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhocicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gWEhSO1xubW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7fVxuXG4vKipcbiAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFhIUiAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIGlmIChnbG9iYWwubG9jYXRpb24pIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgdGhpcy54ZCA9IG9wdHMuaG9zdG5hbWUgIT09IGdsb2JhbC5sb2NhdGlvbi5ob3N0bmFtZSB8fFxuICAgICAgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHRoaXMueHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChYSFIsIFBvbGxpbmcpO1xuXG4vKipcbiAqIFhIUiBzdXBwb3J0cyBiaW5hcnlcbiAqL1xuXG5YSFIucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgb3B0cy51cmkgPSB0aGlzLnVyaSgpO1xuICBvcHRzLnhkID0gdGhpcy54ZDtcbiAgb3B0cy54cyA9IHRoaXMueHM7XG4gIG9wdHMuYWdlbnQgPSB0aGlzLmFnZW50IHx8IGZhbHNlO1xuICBvcHRzLnN1cHBvcnRzQmluYXJ5ID0gdGhpcy5zdXBwb3J0c0JpbmFyeTtcbiAgb3B0cy5lbmFibGVzWERSID0gdGhpcy5lbmFibGVzWERSO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgb3B0cy5yZXF1ZXN0VGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5leHRyYUhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcblxuICByZXR1cm4gbmV3IFJlcXVlc3Qob3B0cyk7XG59O1xuXG4vKipcbiAqIFNlbmRzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG4gIHZhciBpc0JpbmFyeSA9IHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJyAmJiBkYXRhICE9PSB1bmRlZmluZWQ7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdQT1NUJywgZGF0YTogZGF0YSwgaXNCaW5hcnk6IGlzQmluYXJ5IH0pO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJlcS5vbignc3VjY2VzcycsIGZuKTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb3N0IGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMuc2VuZFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3hociBwb2xsJyk7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYub25EYXRhKGRhdGEpO1xuICB9KTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb2xsIGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMucG9sbFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogUmVxdWVzdCBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3QgKG9wdHMpIHtcbiAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZCB8fCAnR0VUJztcbiAgdGhpcy51cmkgPSBvcHRzLnVyaTtcbiAgdGhpcy54ZCA9ICEhb3B0cy54ZDtcbiAgdGhpcy54cyA9ICEhb3B0cy54cztcbiAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICB0aGlzLmRhdGEgPSB1bmRlZmluZWQgIT09IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50O1xuICB0aGlzLmlzQmluYXJ5ID0gb3B0cy5pc0JpbmFyeTtcbiAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IG9wdHMuc3VwcG9ydHNCaW5hcnk7XG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG5cbiAgdGhpcy5jcmVhdGUoKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIFhIUiBvYmplY3QgYW5kIHNlbmRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9wdHMgPSB7IGFnZW50OiB0aGlzLmFnZW50LCB4ZG9tYWluOiB0aGlzLnhkLCB4c2NoZW1lOiB0aGlzLnhzLCBlbmFibGVzWERSOiB0aGlzLmVuYWJsZXNYRFIgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgdmFyIHhociA9IHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICBkZWJ1ZygneGhyIG9wZW4gJXM6ICVzJywgdGhpcy5tZXRob2QsIHRoaXMudXJpKTtcbiAgICB4aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmksIHRoaXMuYXN5bmMpO1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayAmJiB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrKHRydWUpO1xuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLmV4dHJhSGVhZGVyc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIGlmICgnUE9TVCcgPT09IHRoaXMubWV0aG9kKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5pc0JpbmFyeSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICcqLyonKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgLy8gaWU2IGNoZWNrXG4gICAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVxdWVzdFRpbWVvdXQpIHtcbiAgICAgIHhoci50aW1lb3V0ID0gdGhpcy5yZXF1ZXN0VGltZW91dDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgIH07XG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSAyKSB7XG4gICAgICAgICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb250ZW50VHlwZSA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGRlYnVnKCd4aHIgZGF0YSAlcycsIHRoaXMuZGF0YSk7XG4gICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmaHJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgdGhpcy5pbmRleCA9IFJlcXVlc3QucmVxdWVzdHNDb3VudCsrO1xuICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25TdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ3N1Y2Nlc3MnKTtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBpZiB3ZSBoYXZlIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG4gIHRoaXMub25TdWNjZXNzKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLmNsZWFudXAodHJ1ZSk7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBob3VzZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKGZyb21FcnJvcikge1xuICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB0aGlzLnhociB8fCBudWxsID09PSB0aGlzLnhocikge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB4bWxodHRwcmVxdWVzdFxuICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgIHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgfVxuXG4gIGlmIChmcm9tRXJyb3IpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICAgIGRlbGV0ZSBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdO1xuICB9XG5cbiAgdGhpcy54aHIgPSBudWxsO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBsb2FkLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRhdGE7XG4gIHRyeSB7XG4gICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgIHRyeSB7XG4gICAgICBjb250ZW50VHlwZSA9IHRoaXMueGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZSB8fCB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5vbkVycm9yKGUpO1xuICB9XG4gIGlmIChudWxsICE9IGRhdGEpIHtcbiAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuaGFzWERSID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBnbG9iYWwuWERvbWFpblJlcXVlc3QgJiYgIXRoaXMueHMgJiYgdGhpcy5lbmFibGVzWERSO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnRcbiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXNcbiAqIGVtaXR0ZWQuXG4gKi9cblxuUmVxdWVzdC5yZXF1ZXN0c0NvdW50ID0gMDtcblJlcXVlc3QucmVxdWVzdHMgPSB7fTtcblxuaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICBpZiAoZ2xvYmFsLmF0dGFjaEV2ZW50KSB7XG4gICAgZ2xvYmFsLmF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIHVubG9hZEhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmxvYWRIYW5kbGVyICgpIHtcbiAgZm9yICh2YXIgaSBpbiBSZXF1ZXN0LnJlcXVlc3RzKSB7XG4gICAgaWYgKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIFJlcXVlc3QucmVxdWVzdHNbaV0uYWJvcnQoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIHllYXN0ID0gcmVxdWlyZSgneWVhc3QnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6d2Vic29ja2V0Jyk7XG52YXIgQnJvd3NlcldlYlNvY2tldCA9IGdsb2JhbC5XZWJTb2NrZXQgfHwgZ2xvYmFsLk1veldlYlNvY2tldDtcbnZhciBOb2RlV2ViU29ja2V0O1xuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRyeSB7XG4gICAgTm9kZVdlYlNvY2tldCA9IHJlcXVpcmUoJ3dzJyk7XG4gIH0gY2F0Y2ggKGUpIHsgfVxufVxuXG4vKipcbiAqIEdldCBlaXRoZXIgdGhlIGBXZWJTb2NrZXRgIG9yIGBNb3pXZWJTb2NrZXRgIGdsb2JhbHNcbiAqIGluIHRoZSBicm93c2VyIG9yIHRyeSB0byByZXNvbHZlIFdlYlNvY2tldC1jb21wYXRpYmxlXG4gKiBpbnRlcmZhY2UgZXhwb3NlZCBieSBgd3NgIGZvciBOb2RlLWxpa2UgZW52aXJvbm1lbnQuXG4gKi9cblxudmFyIFdlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQ7XG5pZiAoIVdlYlNvY2tldCAmJiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICBXZWJTb2NrZXQgPSBOb2RlV2ViU29ja2V0O1xufVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gV1M7XG5cbi8qKlxuICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBXUyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlO1xuICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQgJiYgIW9wdHMuZm9yY2VOb2RlO1xuICB0aGlzLnByb3RvY29scyA9IG9wdHMucHJvdG9jb2xzO1xuICBpZiAoIXRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgV2ViU29ja2V0ID0gTm9kZVdlYlNvY2tldDtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFdTLCBUcmFuc3BvcnQpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBuYW1lLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLm5hbWUgPSAnd2Vic29ja2V0JztcblxuLypcbiAqIFdlYlNvY2tldHMgc3VwcG9ydCBiaW5hcnlcbiAqL1xuXG5XUy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIE9wZW5zIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuY2hlY2soKSkge1xuICAgIC8vIGxldCBwcm9iZSB0aW1lb3V0XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHVyaSA9IHRoaXMudXJpKCk7XG4gIHZhciBwcm90b2NvbHMgPSB0aGlzLnByb3RvY29scztcbiAgdmFyIG9wdHMgPSB7XG4gICAgYWdlbnQ6IHRoaXMuYWdlbnQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IHRoaXMucGVyTWVzc2FnZURlZmxhdGVcbiAgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgIG9wdHMuaGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuICB9XG4gIGlmICh0aGlzLmxvY2FsQWRkcmVzcykge1xuICAgIG9wdHMubG9jYWxBZGRyZXNzID0gdGhpcy5sb2NhbEFkZHJlc3M7XG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMud3MgPSB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA/IChwcm90b2NvbHMgPyBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzKSA6IG5ldyBXZWJTb2NrZXQodXJpKSkgOiBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzLCBvcHRzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG5cbiAgaWYgKHRoaXMud3MuYmluYXJ5VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMud3Muc3VwcG9ydHMgJiYgdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnbm9kZWJ1ZmZlcic7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgfVxuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbn07XG5cbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHNvY2tldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMud3Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25PcGVuKCk7XG4gIH07XG4gIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgfTtcbiAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgfTtcbiAgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3dlYnNvY2tldCBlcnJvcicsIGUpO1xuICB9O1xufTtcblxuLyoqXG4gKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWRcbiAgdmFyIHRvdGFsID0gcGFja2V0cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdG90YWw7IGkgPCBsOyBpKyspIHtcbiAgICAoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHNlbGYuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgIHZhciBvcHRzID0ge307XG4gICAgICAgICAgaWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gcGFja2V0Lm9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSAnc3RyaW5nJyA9PT0gdHlwZW9mIGRhdGEgPyBnbG9iYWwuQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPCBzZWxmLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhLCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1Zygnd2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLS10b3RhbCB8fCBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KShwYWNrZXRzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUgKCkge1xuICAgIHNlbGYuZW1pdCgnZmx1c2gnKTtcblxuICAgIC8vIGZha2UgZHJhaW5cbiAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICd3c3MnIDogJ3dzJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ3dzcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICgnd3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgaWYgKHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG5cbi8qKlxuICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFXZWJTb2NrZXQgJiYgISgnX19pbml0aWFsaXplJyBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSk7XG59O1xuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHZhciB4ZG9tYWluID0gb3B0cy54ZG9tYWluO1xuXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4XG4gIHZhciB4c2NoZW1lID0gb3B0cy54c2NoZW1lO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IGhhcyBhIGZsb3cgb2Ygbm90IHNlbmRpbmcgY29va2llLCB0aGVyZWZvcmUgaXQgc2hvdWxkIGJlIGRpc2FibGVkIGFzIGEgZGVmYXVsdC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvZW5naW5lLmlvLWNsaWVudC9wdWxsLzIxN1xuICB2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxuICAvLyBiZWNhdXNlIGxvYWRpbmcgYmFyIGtlZXBzIGZsYXNoaW5nIHdoZW4gdXNpbmcganNvbnAtcG9sbGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20veXVqaW9zYWthL3NvY2tlLmlvLWllOC1sb2FkaW5nLWV4YW1wbGVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICBpZiAoIXhkb21haW4pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxbWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKV0oJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gICAgfSBjYXRjaCAoZSkgeyB9XG4gIH1cbn07XG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICdsaWdodHNlYWdyZWVuJyxcbiAgJ2ZvcmVzdGdyZWVuJyxcbiAgJ2dvbGRlbnJvZCcsXG4gICdkb2RnZXJibHVlJyxcbiAgJ2RhcmtvcmNoaWQnLFxuICAnY3JpbXNvbidcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG52YXIgaGFzQmluYXJ5ID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcbnZhciBzbGljZUJ1ZmZlciA9IHJlcXVpcmUoJ2FycmF5YnVmZmVyLnNsaWNlJyk7XG52YXIgYWZ0ZXIgPSByZXF1aXJlKCdhZnRlcicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcblxudmFyIGJhc2U2NGVuY29kZXI7XG5pZiAoZ2xvYmFsICYmIGdsb2JhbC5BcnJheUJ1ZmZlcikge1xuICBiYXNlNjRlbmNvZGVyID0gcmVxdWlyZSgnYmFzZTY0LWFycmF5YnVmZmVyJyk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgYW4gYW5kcm9pZCBicm93c2VyLiBUaGF0IHJlcXVpcmVzIHVzIHRvIHVzZVxuICogQXJyYXlCdWZmZXIgd2l0aCBwb2xsaW5nIHRyYW5zcG9ydHMuLi5cbiAqXG4gKiBodHRwOi8vZ2hpbmRhLm5ldC9qcGVnLWJsb2ItYWpheC1hbmRyb2lkL1xuICovXG5cbnZhciBpc0FuZHJvaWQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gUGhhbnRvbUpTLlxuICogVXBsb2FkaW5nIGEgQmxvYiB3aXRoIFBoYW50b21KUyBkb2VzIG5vdCB3b3JrIGNvcnJlY3RseSwgYXMgcmVwb3J0ZWQgaGVyZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcml5YS9waGFudG9tanMvaXNzdWVzLzExMzk1XG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBpc1BoYW50b21KUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9QaGFudG9tSlMvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIFdoZW4gdHJ1ZSwgYXZvaWRzIHVzaW5nIEJsb2JzIHRvIGVuY29kZSBwYXlsb2Fkcy5cbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGRvbnRTZW5kQmxvYnMgPSBpc0FuZHJvaWQgfHwgaXNQaGFudG9tSlM7XG5cbi8qKlxuICogQ3VycmVudCBwcm90b2NvbCB2ZXJzaW9uLlxuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqL1xuXG52YXIgcGFja2V0cyA9IGV4cG9ydHMucGFja2V0cyA9IHtcbiAgICBvcGVuOiAgICAgMCAgICAvLyBub24td3NcbiAgLCBjbG9zZTogICAgMSAgICAvLyBub24td3NcbiAgLCBwaW5nOiAgICAgMlxuICAsIHBvbmc6ICAgICAzXG4gICwgbWVzc2FnZTogIDRcbiAgLCB1cGdyYWRlOiAgNVxuICAsIG5vb3A6ICAgICA2XG59O1xuXG52YXIgcGFja2V0c2xpc3QgPSBrZXlzKHBhY2tldHMpO1xuXG4vKipcbiAqIFByZW1hZGUgZXJyb3IgcGFja2V0LlxuICovXG5cbnZhciBlcnIgPSB7IHR5cGU6ICdlcnJvcicsIGRhdGE6ICdwYXJzZXIgZXJyb3InIH07XG5cbi8qKlxuICogQ3JlYXRlIGEgYmxvYiBhcGkgZXZlbiBmb3IgYmxvYiBidWlsZGVyIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2IgPSByZXF1aXJlKCdibG9iJyk7XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldC5cbiAqXG4gKiAgICAgPHBhY2tldCB0eXBlIGlkPiBbIDxkYXRhPiBdXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgNWhlbGxvIHdvcmxkXG4gKiAgICAgM1xuICogICAgIDRcbiAqXG4gKiBCaW5hcnkgaXMgZW5jb2RlZCBpbiBhbiBpZGVudGljYWwgcHJpbmNpcGxlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdXRmOGVuY29kZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXRmOGVuY29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gdXRmOGVuY29kZTtcbiAgICB1dGY4ZW5jb2RlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkYXRhID0gKHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQpXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHBhY2tldC5kYXRhLmJ1ZmZlciB8fCBwYWNrZXQuZGF0YTtcblxuICBpZiAoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBtaWdodCBiZSBhbiBvYmplY3Qgd2l0aCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgaWYgKGRhdGEgJiYgZGF0YS5iYXNlNjQpIHtcbiAgICByZXR1cm4gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU2VuZGluZyBkYXRhIGFzIGEgdXRmLTggc3RyaW5nXG4gIHZhciBlbmNvZGVkID0gcGFja2V0c1twYWNrZXQudHlwZV07XG5cbiAgLy8gZGF0YSBmcmFnbWVudCBpcyBvcHRpb25hbFxuICBpZiAodW5kZWZpbmVkICE9PSBwYWNrZXQuZGF0YSkge1xuICAgIGVuY29kZWQgKz0gdXRmOGVuY29kZSA/IHV0ZjguZW5jb2RlKFN0cmluZyhwYWNrZXQuZGF0YSksIHsgc3RyaWN0OiBmYWxzZSB9KSA6IFN0cmluZyhwYWNrZXQuZGF0YSk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2soJycgKyBlbmNvZGVkKTtcblxufTtcblxuZnVuY3Rpb24gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spIHtcbiAgLy8gcGFja2V0IGRhdGEgaXMgYW4gb2JqZWN0IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV0gKyBwYWNrZXQuZGF0YS5kYXRhO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBoZWxwZXJzIGZvciBiaW5hcnkgdHlwZXNcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIGNvbnRlbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgcmVzdWx0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMSArIGRhdGEuYnl0ZUxlbmd0aCk7XG5cbiAgcmVzdWx0QnVmZmVyWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0QnVmZmVyW2krMV0gPSBjb250ZW50QXJyYXlbaV07XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2socmVzdWx0QnVmZmVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBwYWNrZXQuZGF0YSA9IGZyLnJlc3VsdDtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB0cnVlLCBjYWxsYmFjayk7XG4gIH07XG4gIHJldHVybiBmci5yZWFkQXNBcnJheUJ1ZmZlcihwYWNrZXQuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmIChkb250U2VuZEJsb2JzKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBuZXcgVWludDhBcnJheSgxKTtcbiAgbGVuZ3RoWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIHZhciBibG9iID0gbmV3IEJsb2IoW2xlbmd0aC5idWZmZXIsIHBhY2tldC5kYXRhXSk7XG5cbiAgcmV0dXJuIGNhbGxiYWNrKGJsb2IpO1xufVxuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQgd2l0aCBiaW5hcnkgZGF0YSBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0LCBoYXMgYHR5cGVgIGFuZCBgZGF0YWBcbiAqIEByZXR1cm4ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBjYWxsYmFjaykge1xuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV07XG4gIGlmIChCbG9iICYmIHBhY2tldC5kYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHtcbiAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGI2NCA9IGZyLnJlc3VsdC5zcGxpdCgnLCcpWzFdO1xuICAgICAgY2FsbGJhY2sobWVzc2FnZSArIGI2NCk7XG4gICAgfTtcbiAgICByZXR1cm4gZnIucmVhZEFzRGF0YVVSTChwYWNrZXQuZGF0YSk7XG4gIH1cblxuICB2YXIgYjY0ZGF0YTtcbiAgdHJ5IHtcbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgd2l0aCB0eXBlZCBhcnJheXNcbiAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSk7XG4gICAgdmFyIGJhc2ljID0gbmV3IEFycmF5KHR5cGVkLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgYmFzaWNbaV0gPSB0eXBlZFtpXTtcbiAgICB9XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmFzaWMpO1xuICB9XG4gIG1lc3NhZ2UgKz0gZ2xvYmFsLmJ0b2EoYjY0ZGF0YSk7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldC4gQ2hhbmdlcyBmb3JtYXQgdG8gQmxvYiBpZiByZXF1ZXN0ZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCB1dGY4ZGVjb2RlKSB7XG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIC8vIFN0cmluZyBkYXRhXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZGF0YS5jaGFyQXQoMCkgPT09ICdiJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLCBiaW5hcnlUeXBlKTtcbiAgICB9XG5cbiAgICBpZiAodXRmOGRlY29kZSkge1xuICAgICAgZGF0YSA9IHRyeURlY29kZShkYXRhKTtcbiAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdHlwZSA9IGRhdGEuY2hhckF0KDApO1xuXG4gICAgaWYgKE51bWJlcih0eXBlKSAhPSB0eXBlIHx8ICFwYWNrZXRzbGlzdFt0eXBlXSkge1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogZGF0YS5zdWJzdHJpbmcoMSkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0gfTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXNBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgdHlwZSA9IGFzQXJyYXlbMF07XG4gIHZhciByZXN0ID0gc2xpY2VCdWZmZXIoZGF0YSwgMSk7XG4gIGlmIChCbG9iICYmIGJpbmFyeVR5cGUgPT09ICdibG9iJykge1xuICAgIHJlc3QgPSBuZXcgQmxvYihbcmVzdF0pO1xuICB9XG4gIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiByZXN0IH07XG59O1xuXG5mdW5jdGlvbiB0cnlEZWNvZGUoZGF0YSkge1xuICB0cnkge1xuICAgIGRhdGEgPSB1dGY4LmRlY29kZShkYXRhLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldCBlbmNvZGVkIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqL1xuXG5leHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKG1zZywgYmluYXJ5VHlwZSkge1xuICB2YXIgdHlwZSA9IHBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldO1xuICBpZiAoIWJhc2U2NGVuY29kZXIpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogbXNnLnN1YnN0cigxKSB9IH07XG4gIH1cblxuICB2YXIgZGF0YSA9IGJhc2U2NGVuY29kZXIuZGVjb2RlKG1zZy5zdWJzdHIoMSkpO1xuXG4gIGlmIChiaW5hcnlUeXBlID09PSAnYmxvYicgJiYgQmxvYikge1xuICAgIGRhdGEgPSBuZXcgQmxvYihbZGF0YV0pO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogZGF0YSB9O1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKS5cbiAqXG4gKiAgICAgPGxlbmd0aD46ZGF0YVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDExOmhlbGxvIHdvcmxkMjpoaVxuICpcbiAqIElmIGFueSBjb250ZW50cyBhcmUgYmluYXJ5LCB0aGV5IHdpbGwgYmUgZW5jb2RlZCBhcyBiYXNlNjQgc3RyaW5ncy4gQmFzZTY0XG4gKiBlbmNvZGVkIHN0cmluZ3MgYXJlIG1hcmtlZCB3aXRoIGEgYiBiZWZvcmUgdGhlIGxlbmd0aCBzcGVjaWZpZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBpc0JpbmFyeSA9IGhhc0JpbmFyeShwYWNrZXRzKTtcblxuICBpZiAoc3VwcG9ydHNCaW5hcnkgJiYgaXNCaW5hcnkpIHtcbiAgICBpZiAoQmxvYiAmJiAhZG9udFNlbmRCbG9icykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYihwYWNrZXRzLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIocGFja2V0cywgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjaygnMDonKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UubGVuZ3RoICsgJzonICsgbWVzc2FnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgIWlzQmluYXJ5ID8gZmFsc2UgOiBzdXBwb3J0c0JpbmFyeSwgZmFsc2UsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbignJykpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQXN5bmMgYXJyYXkgbWFwIHVzaW5nIGFmdGVyXG4gKi9cblxuZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGFyeS5sZW5ndGgpO1xuICB2YXIgbmV4dCA9IGFmdGVyKGFyeS5sZW5ndGgsIGRvbmUpO1xuXG4gIHZhciBlYWNoV2l0aEluZGV4ID0gZnVuY3Rpb24oaSwgZWwsIGNiKSB7XG4gICAgZWFjaChlbCwgZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgcmVzdWx0W2ldID0gbXNnO1xuICAgICAgY2IoZXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICBlYWNoV2l0aEluZGV4KGksIGFyeVtpXSwgbmV4dCk7XG4gIH1cbn1cblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gUG9zc2libGUgYmluYXJ5IGNvbnRlbnRzIGFyZVxuICogZGVjb2RlZCBmcm9tIHRoZWlyIGJhc2U2NCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIHBhY2tldDtcbiAgaWYgKGRhdGEgPT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9ICcnLCBuLCBtc2c7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaHIgPSBkYXRhLmNoYXJBdChpKTtcblxuICAgIGlmIChjaHIgIT09ICc6Jykge1xuICAgICAgbGVuZ3RoICs9IGNocjtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09ICcnIHx8IChsZW5ndGggIT0gKG4gPSBOdW1iZXIobGVuZ3RoKSkpKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBtc2cgPSBkYXRhLnN1YnN0cihpICsgMSwgbik7XG5cbiAgICBpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIGlmIChtc2cubGVuZ3RoKSB7XG4gICAgICBwYWNrZXQgPSBleHBvcnRzLmRlY29kZVBhY2tldChtc2csIGJpbmFyeVR5cGUsIGZhbHNlKTtcblxuICAgICAgaWYgKGVyci50eXBlID09PSBwYWNrZXQudHlwZSAmJiBlcnIuZGF0YSA9PT0gcGFja2V0LmRhdGEpIHtcbiAgICAgICAgLy8gcGFyc2VyIGVycm9yIGluIGluZGl2aWR1YWwgcGFja2V0IC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJldCA9IGNhbGxiYWNrKHBhY2tldCwgaSArIG4sIGwpO1xuICAgICAgaWYgKGZhbHNlID09PSByZXQpIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhZHZhbmNlIGN1cnNvclxuICAgIGkgKz0gbjtcbiAgICBsZW5ndGggPSAnJztcbiAgfVxuXG4gIGlmIChsZW5ndGggIT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkgYXMgYmluYXJ5LlxuICpcbiAqIDwxID0gYmluYXJ5LCAwID0gc3RyaW5nPjxudW1iZXIgZnJvbSAwLTk+PG51bWJlciBmcm9tIDAtOT5bLi4uXTxudW1iZXJcbiAqIDI1NT48ZGF0YT5cbiAqXG4gKiBFeGFtcGxlOlxuICogMSAzIDI1NSAxIDIgMywgaWYgdGhlIGJpbmFyeSBjb250ZW50cyBhcmUgaW50ZXJwcmV0ZWQgYXMgOCBiaXQgaW50ZWdlcnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCBlbmNvZGVkUGFja2V0cykge1xuICAgIHZhciB0b3RhbExlbmd0aCA9IGVuY29kZWRQYWNrZXRzLnJlZHVjZShmdW5jdGlvbihhY2MsIHApIHtcbiAgICAgIHZhciBsZW47XG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKXtcbiAgICAgICAgbGVuID0gcC5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW4gPSBwLmJ5dGVMZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjICsgbGVuLnRvU3RyaW5nKCkubGVuZ3RoICsgbGVuICsgMjsgLy8gc3RyaW5nL2JpbmFyeSBpZGVudGlmaWVyICsgc2VwYXJhdG9yID0gMlxuICAgIH0sIDApO1xuXG4gICAgdmFyIHJlc3VsdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuXG4gICAgdmFyIGJ1ZmZlckluZGV4ID0gMDtcbiAgICBlbmNvZGVkUGFja2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiBwID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBhYiA9IHA7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShwLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBwLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYWIgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKSB7IC8vIG5vdCB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDA7XG4gICAgICB9IGVsc2UgeyAvLyB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW5TdHIgPSBhYi5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDI1NTtcblxuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEFycmF5LmJ1ZmZlcik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBFbmNvZGUgYXMgQmxvYlxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYiA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAxO1xuICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IGVuY29kZWQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGVkID0gdmlldy5idWZmZXI7XG4gICAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuID0gKGVuY29kZWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilcbiAgICAgICAgPyBlbmNvZGVkLmJ5dGVMZW5ndGhcbiAgICAgICAgOiBlbmNvZGVkLnNpemU7XG5cbiAgICAgIHZhciBsZW5TdHIgPSBsZW4udG9TdHJpbmcoKTtcbiAgICAgIHZhciBsZW5ndGhBcnkgPSBuZXcgVWludDhBcnJheShsZW5TdHIubGVuZ3RoICsgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgbGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdID0gMjU1O1xuXG4gICAgICBpZiAoQmxvYikge1xuICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtiaW5hcnlJZGVudGlmaWVyLmJ1ZmZlciwgbGVuZ3RoQXJ5LmJ1ZmZlciwgZW5jb2RlZF0pO1xuICAgICAgICBkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpO1xuICB9KTtcbn07XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFN0cmluZ3MgYXJlIGRlY29kZWQgYnlcbiAqIGludGVycHJldGluZyBlYWNoIGJ5dGUgYXMgYSBrZXkgY29kZSBmb3IgZW50cmllcyBtYXJrZWQgdG8gc3RhcnQgd2l0aCAwLiBTZWVcbiAqIGRlc2NyaXB0aW9uIG9mIGVuY29kZVBheWxvYWRBc0JpbmFyeVxuICpcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeSA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgYnVmZmVyVGFpbCA9IGRhdGE7XG4gIHZhciBidWZmZXJzID0gW107XG5cbiAgd2hpbGUgKGJ1ZmZlclRhaWwuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICB2YXIgdGFpbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyVGFpbCk7XG4gICAgdmFyIGlzU3RyaW5nID0gdGFpbEFycmF5WzBdID09PSAwO1xuICAgIHZhciBtc2dMZW5ndGggPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAxOyA7IGkrKykge1xuICAgICAgaWYgKHRhaWxBcnJheVtpXSA9PT0gMjU1KSBicmVhaztcblxuICAgICAgLy8gMzEwID0gY2hhciBsZW5ndGggb2YgTnVtYmVyLk1BWF9WQUxVRVxuICAgICAgaWYgKG1zZ0xlbmd0aC5sZW5ndGggPiAzMTApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIG1zZ0xlbmd0aCArPSB0YWlsQXJyYXlbaV07XG4gICAgfVxuXG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDIgKyBtc2dMZW5ndGgubGVuZ3RoKTtcbiAgICBtc2dMZW5ndGggPSBwYXJzZUludChtc2dMZW5ndGgpO1xuXG4gICAgdmFyIG1zZyA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDAsIG1zZ0xlbmd0aCk7XG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtc2cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KG1zZykpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB0byB0eXBlZCBhcnJheXNcbiAgICAgICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkobXNnKTtcbiAgICAgICAgbXNnID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBtc2cgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh0eXBlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBidWZmZXJzLnB1c2gobXNnKTtcbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgbXNnTGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0b3RhbCA9IGJ1ZmZlcnMubGVuZ3RoO1xuICBidWZmZXJzLmZvckVhY2goZnVuY3Rpb24oYnVmZmVyLCBpKSB7XG4gICAgY2FsbGJhY2soZXhwb3J0cy5kZWNvZGVQYWNrZXQoYnVmZmVyLCBiaW5hcnlUeXBlLCB0cnVlKSwgaSwgdG90YWwpO1xuICB9KTtcbn07XG4iLCJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgYGV4cG9ydHNgXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWBcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCwgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlLFxuXHQvLyBhbmQgdXNlIGl0IGFzIGByb290YFxuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdHZhciBjb3VudGVyID0gMDtcblx0XHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0XHR2YXIgdmFsdWU7XG5cdFx0dmFyIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHRocm93IEVycm9yKFxuXHRcdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IHNoaWZ0KSAmIDB4M0YpIHwgMHg4MCk7XG5cdH1cblxuXHRmdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG5cdFx0fVxuXHRcdHZhciBzeW1ib2wgPSAnJztcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkY4MDApID09IDApIHsgLy8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkZGMDAwMCkgPT0gMCkgeyAvLyAzLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdFx0Y29kZVBvaW50ID0gMHhGRkZEO1xuXHRcdFx0fVxuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRzeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgJiAweDNGKSB8IDB4ODApO1xuXHRcdHJldHVybiBzeW1ib2w7XG5cdH1cblxuXHRmdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZywgb3B0cykge1xuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0XHR2YXIgY29kZVBvaW50cyA9IHVjczJkZWNvZGUoc3RyaW5nKTtcblx0XHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIGNvZGVQb2ludDtcblx0XHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRjb2RlUG9pbnQgPSBjb2RlUG9pbnRzW2luZGV4XTtcblx0XHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ5dGVTdHJpbmc7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiByZWFkQ29udGludWF0aW9uQnl0ZSgpIHtcblx0XHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0aWYgKChjb250aW51YXRpb25CeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGVuZCB1cCBoZXJlLCBpdOKAmXMgbm90IGEgY29udGludWF0aW9uIGJ5dGVcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlU3ltYm9sKHN0cmljdCkge1xuXHRcdHZhciBieXRlMTtcblx0XHR2YXIgYnl0ZTI7XG5cdFx0dmFyIGJ5dGUzO1xuXHRcdHZhciBieXRlNDtcblx0XHR2YXIgY29kZVBvaW50O1xuXG5cdFx0aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gUmVhZCBmaXJzdCBieXRlXG5cdFx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdFx0Ynl0ZUluZGV4Kys7XG5cblx0XHQvLyAxLWJ5dGUgc2VxdWVuY2UgKG5vIGNvbnRpbnVhdGlvbiBieXRlcylcblx0XHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdFx0cmV0dXJuIGJ5dGUxO1xuXHRcdH1cblxuXHRcdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMztcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRcdHJldHVybiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSA/IGNvZGVQb2ludCA6IDB4RkZGRDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDA3KSA8PCAweDEyKSB8IChieXRlMiA8PCAweDBDKSB8XG5cdFx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBVVEYtOCBkZXRlY3RlZCcpO1xuXHR9XG5cblx0dmFyIGJ5dGVBcnJheTtcblx0dmFyIGJ5dGVDb3VudDtcblx0dmFyIGJ5dGVJbmRleDtcblx0ZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nLCBvcHRzKSB7XG5cdFx0b3B0cyA9IG9wdHMgfHwge307XG5cdFx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRcdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdFx0Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtcblx0XHRieXRlSW5kZXggPSAwO1xuXHRcdHZhciBjb2RlUG9pbnRzID0gW107XG5cdFx0dmFyIHRtcDtcblx0XHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHRcdH1cblx0XHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciB1dGY4ID0ge1xuXHRcdCd2ZXJzaW9uJzogJzIuMS4yJyxcblx0XHQnZW5jb2RlJzogdXRmOGVuY29kZSxcblx0XHQnZGVjb2RlJzogdXRmOGRlY29kZVxuXHR9O1xuXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHV0Zjg7XG5cdFx0fSk7XG5cdH1cdGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuXHRcdGlmIChmcmVlTW9kdWxlKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSB1dGY4O1xuXHRcdH0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3QuaGFzT3duUHJvcGVydHk7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gdXRmOCkge1xuXHRcdFx0XHRoYXNPd25Qcm9wZXJ0eS5jYWxsKHV0ZjgsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSB1dGY4W2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QudXRmOCA9IHV0Zjg7XG5cdH1cblxufSh0aGlzKSk7XG4iLCIvKiBnbG9iYWwgQmxvYiBGaWxlICovXG5cbi8qXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIGdsb2JhbC5CbG9iID09PSAnZnVuY3Rpb24nIHx8IHRvU3RyaW5nLmNhbGwoZ2xvYmFsLkJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBnbG9iYWwuRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0cmluZy5jYWxsKGdsb2JhbC5GaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7XG5cbi8qKlxuICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS5cbiAqXG4gKiBTdXBwb3J0cyBCdWZmZXIsIEFycmF5QnVmZmVyLCBCbG9iIGFuZCBGaWxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbnl0aGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNCaW5hcnkgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgZ2xvYmFsLkJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgKHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8XG4gICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSlcbiAgICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvaGFzLWJpbmFyeS9wdWxsLzRcbiAgaWYgKG9iai50b0pTT04gJiYgdHlwZW9mIG9iai50b0pTT04gPT09ICdmdW5jdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqXG4gKiBMb2dpYyBib3Jyb3dlZCBmcm9tIE1vZGVybml6cjpcbiAqXG4gKiAgIC0gaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2NvcnMuanNcbiAqL1xuXG50cnkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbn0gY2F0Y2ggKGVycikge1xuICAvLyBpZiBYTUxIdHRwIHN1cHBvcnQgaXMgZGlzYWJsZWQgaW4gSUUgdGhlbiBpdCB3aWxsIHRocm93XG4gIC8vIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xufVxuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4yLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE3LTAzLTIwVDE4OjU5WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy4yLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0XHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdFx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0XHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdERPTUV2YWwoIGNvZGUgKTtcblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbXBsZSBzZWxlY3RvciB0aGF0IGNhbiBiZSBmaWx0ZXJlZCBkaXJlY3RseSwgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0fVxuXG5cdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90ICYmIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwiaWZyYW1lXCIgKSApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuICAgICAgICAvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcbiAgICAgICAgLy8gZG9uJ3Qgc3VwcG9ydCBpdC5cbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG4gICAgICAgICAgICBlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHR9IHdoaWxlIChcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0KTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBcIj50Ym9keVwiLCBlbGVtIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJtYXJnaW4gPSAoIC9ebWFyZ2luLyApO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSxcblx0XHR2YWwgPSAwO1xuXG5cdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRpZiAoIGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0aSA9IDQ7XG5cblx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHR9IGVsc2Uge1xuXHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL0hlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiICkge1xuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSBdO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1lcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciBkb2MsIGRvY0VsZW0sIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0d2luID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdH07XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIW5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldCA9IHtcblx0XHRcdFx0dG9wOiBwYXJlbnRPZmZzZXQudG9wICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApLFxuXHRcdFx0XHRsZWZ0OiBwYXJlbnRPZmZzZXQubGVmdCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlIClcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qIVxuICogS25vY2tvdXQgSmF2YVNjcmlwdCBsaWJyYXJ5IHYzLjQuMlxuICogKGMpIFRoZSBLbm9ja291dC5qcyB0ZWFtIC0gaHR0cDovL2tub2Nrb3V0anMuY29tL1xuICogTGljZW5zZTogTUlUIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiAqL1xuXG4oZnVuY3Rpb24oKXtcbnZhciBERUJVRz10cnVlO1xuKGZ1bmN0aW9uKHVuZGVmaW5lZCl7XG4gICAgLy8gKDAsIGV2YWwpKCd0aGlzJykgaXMgYSByb2J1c3Qgd2F5IG9mIGdldHRpbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3RcbiAgICAvLyBGb3IgZGV0YWlscywgc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQxMTk5ODgvcmV0dXJuLXRoaXMtMC1ldmFsdGhpcy8xNDEyMDAyMyMxNDEyMDAyM1xuICAgIHZhciB3aW5kb3cgPSB0aGlzIHx8ICgwLCBldmFsKSgndGhpcycpLFxuICAgICAgICBkb2N1bWVudCA9IHdpbmRvd1snZG9jdW1lbnQnXSxcbiAgICAgICAgbmF2aWdhdG9yID0gd2luZG93WyduYXZpZ2F0b3InXSxcbiAgICAgICAgalF1ZXJ5SW5zdGFuY2UgPSB3aW5kb3dbXCJqUXVlcnlcIl0sXG4gICAgICAgIEpTT04gPSB3aW5kb3dbXCJKU09OXCJdO1xuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAvLyBTdXBwb3J0IHRocmVlIG1vZHVsZSBsb2FkaW5nIHNjZW5hcmlvc1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10pIHtcbiAgICAgICAgLy8gWzFdIEFNRCBhbm9ueW1vdXMgbW9kdWxlXG4gICAgICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVxdWlyZSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBbMl0gQ29tbW9uSlMvTm9kZS5qc1xuICAgICAgICBmYWN0b3J5KG1vZHVsZVsnZXhwb3J0cyddIHx8IGV4cG9ydHMpOyAgLy8gbW9kdWxlLmV4cG9ydHMgaXMgZm9yIE5vZGUuanNcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBbM10gTm8gbW9kdWxlIGxvYWRlciAocGxhaW4gPHNjcmlwdD4gdGFnKSAtIHB1dCBkaXJlY3RseSBpbiBnbG9iYWwgbmFtZXNwYWNlXG4gICAgICAgIGZhY3Rvcnkod2luZG93WydrbyddID0ge30pO1xuICAgIH1cbn0oZnVuY3Rpb24oa29FeHBvcnRzLCBhbWRSZXF1aXJlKXtcbi8vIEludGVybmFsbHksIGFsbCBLTyBvYmplY3RzIGFyZSBhdHRhY2hlZCB0byBrb0V4cG9ydHMgKGV2ZW4gdGhlIG5vbi1leHBvcnRlZCBvbmVzIHdob3NlIG5hbWVzIHdpbGwgYmUgbWluaWZpZWQgYnkgdGhlIGNsb3N1cmUgY29tcGlsZXIpLlxuLy8gSW4gdGhlIGZ1dHVyZSwgdGhlIGZvbGxvd2luZyBcImtvXCIgdmFyaWFibGUgbWF5IGJlIG1hZGUgZGlzdGluY3QgZnJvbSBcImtvRXhwb3J0c1wiIHNvIHRoYXQgcHJpdmF0ZSBvYmplY3RzIGFyZSBub3QgZXh0ZXJuYWxseSByZWFjaGFibGUuXG52YXIga28gPSB0eXBlb2Yga29FeHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGtvRXhwb3J0cyA6IHt9O1xuLy8gR29vZ2xlIENsb3N1cmUgQ29tcGlsZXIgaGVscGVycyAodXNlZCBvbmx5IHRvIG1ha2UgdGhlIG1pbmlmaWVkIGZpbGUgc21hbGxlcilcbmtvLmV4cG9ydFN5bWJvbCA9IGZ1bmN0aW9uKGtvUGF0aCwgb2JqZWN0KSB7XG4gICAgdmFyIHRva2VucyA9IGtvUGF0aC5zcGxpdChcIi5cIik7XG5cbiAgICAvLyBJbiB0aGUgZnV0dXJlLCBcImtvXCIgbWF5IGJlY29tZSBkaXN0aW5jdCBmcm9tIFwia29FeHBvcnRzXCIgKHNvIHRoYXQgbm9uLWV4cG9ydGVkIG9iamVjdHMgYXJlIG5vdCByZWFjaGFibGUpXG4gICAgLy8gQXQgdGhhdCBwb2ludCwgXCJ0YXJnZXRcIiB3b3VsZCBiZSBzZXQgdG86ICh0eXBlb2Yga29FeHBvcnRzICE9PSBcInVuZGVmaW5lZFwiID8ga29FeHBvcnRzIDoga28pXG4gICAgdmFyIHRhcmdldCA9IGtvO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoIC0gMTsgaSsrKVxuICAgICAgICB0YXJnZXQgPSB0YXJnZXRbdG9rZW5zW2ldXTtcbiAgICB0YXJnZXRbdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXV0gPSBvYmplY3Q7XG59O1xua28uZXhwb3J0UHJvcGVydHkgPSBmdW5jdGlvbihvd25lciwgcHVibGljTmFtZSwgb2JqZWN0KSB7XG4gICAgb3duZXJbcHVibGljTmFtZV0gPSBvYmplY3Q7XG59O1xua28udmVyc2lvbiA9IFwiMy40LjJcIjtcblxua28uZXhwb3J0U3ltYm9sKCd2ZXJzaW9uJywga28udmVyc2lvbik7XG4vLyBGb3IgYW55IG9wdGlvbnMgdGhhdCBtYXkgYWZmZWN0IHZhcmlvdXMgYXJlYXMgb2YgS25vY2tvdXQgYW5kIGFyZW4ndCBkaXJlY3RseSBhc3NvY2lhdGVkIHdpdGggZGF0YSBiaW5kaW5nLlxua28ub3B0aW9ucyA9IHtcbiAgICAnZGVmZXJVcGRhdGVzJzogZmFsc2UsXG4gICAgJ3VzZU9ubHlOYXRpdmVFdmVudHMnOiBmYWxzZVxufTtcblxuLy9rby5leHBvcnRTeW1ib2woJ29wdGlvbnMnLCBrby5vcHRpb25zKTsgICAvLyAnb3B0aW9ucycgaXNuJ3QgbWluaWZpZWRcbmtvLnV0aWxzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvYmplY3RGb3JFYWNoKG9iaiwgYWN0aW9uKSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uKHByb3AsIG9ialtwcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgZm9yKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UHJvdG90eXBlT2Yob2JqLCBwcm90bykge1xuICAgICAgICBvYmouX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgdmFyIGNhblNldFByb3RvdHlwZSA9ICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICB2YXIgY2FuVXNlU3ltYm9scyA9ICFERUJVRyAmJiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nO1xuXG4gICAgLy8gUmVwcmVzZW50IHRoZSBrbm93biBldmVudCB0eXBlcyBpbiBhIGNvbXBhY3Qgd2F5LCB0aGVuIGF0IHJ1bnRpbWUgdHJhbnNmb3JtIGl0IGludG8gYSBoYXNoIHdpdGggZXZlbnQgbmFtZSBhcyBrZXkgKGZvciBmYXN0IGxvb2t1cClcbiAgICB2YXIga25vd25FdmVudHMgPSB7fSwga25vd25FdmVudFR5cGVzQnlFdmVudE5hbWUgPSB7fTtcbiAgICB2YXIga2V5RXZlbnRUeXBlTmFtZSA9IChuYXZpZ2F0b3IgJiYgL0ZpcmVmb3hcXC8yL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgPyAnS2V5Ym9hcmRFdmVudCcgOiAnVUlFdmVudHMnO1xuICAgIGtub3duRXZlbnRzW2tleUV2ZW50VHlwZU5hbWVdID0gWydrZXl1cCcsICdrZXlkb3duJywgJ2tleXByZXNzJ107XG4gICAga25vd25FdmVudHNbJ01vdXNlRXZlbnRzJ10gPSBbJ2NsaWNrJywgJ2RibGNsaWNrJywgJ21vdXNlZG93bicsICdtb3VzZXVwJywgJ21vdXNlbW92ZScsICdtb3VzZW92ZXInLCAnbW91c2VvdXQnLCAnbW91c2VlbnRlcicsICdtb3VzZWxlYXZlJ107XG4gICAgb2JqZWN0Rm9yRWFjaChrbm93bkV2ZW50cywgZnVuY3Rpb24oZXZlbnRUeXBlLCBrbm93bkV2ZW50c0ZvclR5cGUpIHtcbiAgICAgICAgaWYgKGtub3duRXZlbnRzRm9yVHlwZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0ga25vd25FdmVudHNGb3JUeXBlLmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICBrbm93bkV2ZW50VHlwZXNCeUV2ZW50TmFtZVtrbm93bkV2ZW50c0ZvclR5cGVbaV1dID0gZXZlbnRUeXBlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGV2ZW50c1RoYXRNdXN0QmVSZWdpc3RlcmVkVXNpbmdBdHRhY2hFdmVudCA9IHsgJ3Byb3BlcnR5Y2hhbmdlJzogdHJ1ZSB9OyAvLyBXb3JrYXJvdW5kIGZvciBhbiBJRTkgaXNzdWUgLSBodHRwczovL2dpdGh1Yi5jb20vU3RldmVTYW5kZXJzb24va25vY2tvdXQvaXNzdWVzLzQwNlxuXG4gICAgLy8gRGV0ZWN0IElFIHZlcnNpb25zIGZvciBidWcgd29ya2Fyb3VuZHMgKHVzZXMgSUUgY29uZGl0aW9uYWxzLCBub3QgVUEgc3RyaW5nLCBmb3Igcm9idXN0bmVzcylcbiAgICAvLyBOb3RlIHRoYXQsIHNpbmNlIElFIDEwIGRvZXMgbm90IHN1cHBvcnQgY29uZGl0aW9uYWwgY29tbWVudHMsIHRoZSBmb2xsb3dpbmcgbG9naWMgb25seSBkZXRlY3RzIElFIDwgMTAuXG4gICAgLy8gQ3VycmVudGx5IHRoaXMgaXMgYnkgZGVzaWduLCBzaW5jZSBJRSAxMCsgYmVoYXZlcyBjb3JyZWN0bHkgd2hlbiB0cmVhdGVkIGFzIGEgc3RhbmRhcmQgYnJvd3Nlci5cbiAgICAvLyBJZiB0aGVyZSBpcyBhIGZ1dHVyZSBuZWVkIHRvIGRldGVjdCBzcGVjaWZpYyB2ZXJzaW9ucyBvZiBJRTEwKywgd2Ugd2lsbCBhbWVuZCB0aGlzLlxuICAgIHZhciBpZVZlcnNpb24gPSBkb2N1bWVudCAmJiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2ZXJzaW9uID0gMywgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIGlFbGVtcyA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaScpO1xuXG4gICAgICAgIC8vIEtlZXAgY29uc3RydWN0aW5nIGNvbmRpdGlvbmFsIEhUTUwgYmxvY2tzIHVudGlsIHdlIGhpdCBvbmUgdGhhdCByZXNvbHZlcyB0byBhbiBlbXB0eSBmcmFnbWVudFxuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gJzwhLS1baWYgZ3QgSUUgJyArICgrK3ZlcnNpb24pICsgJ10+PGk+PC9pPjwhW2VuZGlmXS0tPicsXG4gICAgICAgICAgICBpRWxlbXNbMF1cbiAgICAgICAgKSB7fVxuICAgICAgICByZXR1cm4gdmVyc2lvbiA+IDQgPyB2ZXJzaW9uIDogdW5kZWZpbmVkO1xuICAgIH0oKSk7XG4gICAgdmFyIGlzSWU2ID0gaWVWZXJzaW9uID09PSA2LFxuICAgICAgICBpc0llNyA9IGllVmVyc2lvbiA9PT0gNztcblxuICAgIGZ1bmN0aW9uIGlzQ2xpY2tPbkNoZWNrYWJsZUVsZW1lbnQoZWxlbWVudCwgZXZlbnRUeXBlKSB7XG4gICAgICAgIGlmICgoa28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnQpICE9PSBcImlucHV0XCIpIHx8ICFlbGVtZW50LnR5cGUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGV2ZW50VHlwZS50b0xvd2VyQ2FzZSgpICE9IFwiY2xpY2tcIikgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgaW5wdXRUeXBlID0gZWxlbWVudC50eXBlO1xuICAgICAgICByZXR1cm4gKGlucHV0VHlwZSA9PSBcImNoZWNrYm94XCIpIHx8IChpbnB1dFR5cGUgPT0gXCJyYWRpb1wiKTtcbiAgICB9XG5cbiAgICAvLyBGb3IgZGV0YWlscyBvbiB0aGUgcGF0dGVybiBmb3IgY2hhbmdpbmcgbm9kZSBjbGFzc2VzXG4gICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20va25vY2tvdXQva25vY2tvdXQvaXNzdWVzLzE1OTdcbiAgICB2YXIgY3NzQ2xhc3NOYW1lUmVnZXggPSAvXFxTKy9nO1xuXG4gICAgZnVuY3Rpb24gdG9nZ2xlRG9tTm9kZUNzc0NsYXNzKG5vZGUsIGNsYXNzTmFtZXMsIHNob3VsZEhhdmVDbGFzcykge1xuICAgICAgICB2YXIgYWRkT3JSZW1vdmVGbjtcbiAgICAgICAgaWYgKGNsYXNzTmFtZXMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS5jbGFzc0xpc3QgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgYWRkT3JSZW1vdmVGbiA9IG5vZGUuY2xhc3NMaXN0W3Nob3VsZEhhdmVDbGFzcyA/ICdhZGQnIDogJ3JlbW92ZSddO1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5Rm9yRWFjaChjbGFzc05hbWVzLm1hdGNoKGNzc0NsYXNzTmFtZVJlZ2V4KSwgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZE9yUmVtb3ZlRm4uY2FsbChub2RlLmNsYXNzTGlzdCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUuY2xhc3NOYW1lWydiYXNlVmFsJ10gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgLy8gU1ZHIHRhZyAuY2xhc3NOYW1lcyBpcyBhbiBTVkdBbmltYXRlZFN0cmluZyBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIHRvZ2dsZU9iamVjdENsYXNzUHJvcGVydHlTdHJpbmcobm9kZS5jbGFzc05hbWUsICdiYXNlVmFsJywgY2xhc3NOYW1lcywgc2hvdWxkSGF2ZUNsYXNzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbm9kZS5jbGFzc05hbWUgb3VnaHQgdG8gYmUgYSBzdHJpbmcuXG4gICAgICAgICAgICAgICAgdG9nZ2xlT2JqZWN0Q2xhc3NQcm9wZXJ0eVN0cmluZyhub2RlLCAnY2xhc3NOYW1lJywgY2xhc3NOYW1lcywgc2hvdWxkSGF2ZUNsYXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZU9iamVjdENsYXNzUHJvcGVydHlTdHJpbmcob2JqLCBwcm9wLCBjbGFzc05hbWVzLCBzaG91bGRIYXZlQ2xhc3MpIHtcbiAgICAgICAgLy8gb2JqL3Byb3AgaXMgZWl0aGVyIGEgbm9kZS8nY2xhc3NOYW1lJyBvciBhIFNWR0FuaW1hdGVkU3RyaW5nLydiYXNlVmFsJy5cbiAgICAgICAgdmFyIGN1cnJlbnRDbGFzc05hbWVzID0gb2JqW3Byb3BdLm1hdGNoKGNzc0NsYXNzTmFtZVJlZ2V4KSB8fCBbXTtcbiAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKGNsYXNzTmFtZXMubWF0Y2goY3NzQ2xhc3NOYW1lUmVnZXgpLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLmFkZE9yUmVtb3ZlSXRlbShjdXJyZW50Q2xhc3NOYW1lcywgY2xhc3NOYW1lLCBzaG91bGRIYXZlQ2xhc3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgb2JqW3Byb3BdID0gY3VycmVudENsYXNzTmFtZXMuam9pbihcIiBcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmllbGRzSW5jbHVkZWRXaXRoSnNvblBvc3Q6IFsnYXV0aGVudGljaXR5X3Rva2VuJywgL15fX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbihfLiopPyQvXSxcblxuICAgICAgICBhcnJheUZvckVhY2g6IGZ1bmN0aW9uIChhcnJheSwgYWN0aW9uKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IGFycmF5Lmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICBhY3Rpb24oYXJyYXlbaV0sIGkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFycmF5SW5kZXhPZjogZnVuY3Rpb24gKGFycmF5LCBpdGVtKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnJheSwgaXRlbSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IGFycmF5Lmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFycmF5Rmlyc3Q6IGZ1bmN0aW9uIChhcnJheSwgcHJlZGljYXRlLCBwcmVkaWNhdGVPd25lcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBhcnJheS5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHByZWRpY2F0ZU93bmVyLCBhcnJheVtpXSwgaSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJheVtpXTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFycmF5UmVtb3ZlSXRlbTogZnVuY3Rpb24gKGFycmF5LCBpdGVtVG9SZW1vdmUpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGtvLnV0aWxzLmFycmF5SW5kZXhPZihhcnJheSwgaXRlbVRvUmVtb3ZlKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICBhcnJheS5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGFycmF5R2V0RGlzdGluY3RWYWx1ZXM6IGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICAgICAgYXJyYXkgPSBhcnJheSB8fCBbXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gYXJyYXkubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtvLnV0aWxzLmFycmF5SW5kZXhPZihyZXN1bHQsIGFycmF5W2ldKSA8IDApXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXJyYXlNYXA6IGZ1bmN0aW9uIChhcnJheSwgbWFwcGluZykge1xuICAgICAgICAgICAgYXJyYXkgPSBhcnJheSB8fCBbXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gYXJyYXkubGVuZ3RoOyBpIDwgajsgaSsrKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1hcHBpbmcoYXJyYXlbaV0sIGkpKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXJyYXlGaWx0ZXI6IGZ1bmN0aW9uIChhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICAgICAgICBhcnJheSA9IGFycmF5IHx8IFtdO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBhcnJheS5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpXSwgaSkpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFycmF5W2ldKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXJyYXlQdXNoQWxsOiBmdW5jdGlvbiAoYXJyYXksIHZhbHVlc1RvUHVzaCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1RvUHVzaCBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICAgICAgICAgIGFycmF5LnB1c2guYXBwbHkoYXJyYXksIHZhbHVlc1RvUHVzaCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSB2YWx1ZXNUb1B1c2gubGVuZ3RoOyBpIDwgajsgaSsrKVxuICAgICAgICAgICAgICAgICAgICBhcnJheS5wdXNoKHZhbHVlc1RvUHVzaFtpXSk7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkT3JSZW1vdmVJdGVtOiBmdW5jdGlvbihhcnJheSwgdmFsdWUsIGluY2x1ZGVkKSB7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdFbnRyeUluZGV4ID0ga28udXRpbHMuYXJyYXlJbmRleE9mKGtvLnV0aWxzLnBlZWtPYnNlcnZhYmxlKGFycmF5KSwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nRW50cnlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZWQpXG4gICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWluY2x1ZGVkKVxuICAgICAgICAgICAgICAgICAgICBhcnJheS5zcGxpY2UoZXhpc3RpbmdFbnRyeUluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjYW5TZXRQcm90b3R5cGU6IGNhblNldFByb3RvdHlwZSxcblxuICAgICAgICBleHRlbmQ6IGV4dGVuZCxcblxuICAgICAgICBzZXRQcm90b3R5cGVPZjogc2V0UHJvdG90eXBlT2YsXG5cbiAgICAgICAgc2V0UHJvdG90eXBlT2ZPckV4dGVuZDogY2FuU2V0UHJvdG90eXBlID8gc2V0UHJvdG90eXBlT2YgOiBleHRlbmQsXG5cbiAgICAgICAgb2JqZWN0Rm9yRWFjaDogb2JqZWN0Rm9yRWFjaCxcblxuICAgICAgICBvYmplY3RNYXA6IGZ1bmN0aW9uKHNvdXJjZSwgbWFwcGluZykge1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBtYXBwaW5nKHNvdXJjZVtwcm9wXSwgcHJvcCwgc291cmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9LFxuXG4gICAgICAgIGVtcHR5RG9tTm9kZTogZnVuY3Rpb24gKGRvbU5vZGUpIHtcbiAgICAgICAgICAgIHdoaWxlIChkb21Ob2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBrby5yZW1vdmVOb2RlKGRvbU5vZGUuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW92ZUNsZWFuZWROb2Rlc1RvQ29udGFpbmVyRWxlbWVudDogZnVuY3Rpb24obm9kZXMpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBpdCdzIGEgcmVhbCBhcnJheSwgYXMgd2UncmUgYWJvdXQgdG8gcmVwYXJlbnQgdGhlIG5vZGVzIGFuZFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3Qgd2FudCB0aGUgdW5kZXJseWluZyBjb2xsZWN0aW9uIHRvIGNoYW5nZSB3aGlsZSB3ZSdyZSBkb2luZyB0aGF0LlxuICAgICAgICAgICAgdmFyIG5vZGVzQXJyYXkgPSBrby51dGlscy5tYWtlQXJyYXkobm9kZXMpO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRG9jdW1lbnQgPSAobm9kZXNBcnJheVswXSAmJiBub2Rlc0FycmF5WzBdLm93bmVyRG9jdW1lbnQpIHx8IGRvY3VtZW50O1xuXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gdGVtcGxhdGVEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gbm9kZXNBcnJheS5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoa28uY2xlYW5Ob2RlKG5vZGVzQXJyYXlbaV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xvbmVOb2RlczogZnVuY3Rpb24gKG5vZGVzQXJyYXksIHNob3VsZENsZWFuTm9kZXMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gbm9kZXNBcnJheS5sZW5ndGgsIG5ld05vZGVzQXJyYXkgPSBbXTsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjbG9uZWROb2RlID0gbm9kZXNBcnJheVtpXS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZXNBcnJheS5wdXNoKHNob3VsZENsZWFuTm9kZXMgPyBrby5jbGVhbk5vZGUoY2xvbmVkTm9kZSkgOiBjbG9uZWROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdOb2Rlc0FycmF5O1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldERvbU5vZGVDaGlsZHJlbjogZnVuY3Rpb24gKGRvbU5vZGUsIGNoaWxkTm9kZXMpIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLmVtcHR5RG9tTm9kZShkb21Ob2RlKTtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBjaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgZG9tTm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByZXBsYWNlRG9tTm9kZXM6IGZ1bmN0aW9uIChub2RlVG9SZXBsYWNlT3JOb2RlQXJyYXksIG5ld05vZGVzQXJyYXkpIHtcbiAgICAgICAgICAgIHZhciBub2Rlc1RvUmVwbGFjZUFycmF5ID0gbm9kZVRvUmVwbGFjZU9yTm9kZUFycmF5Lm5vZGVUeXBlID8gW25vZGVUb1JlcGxhY2VPck5vZGVBcnJheV0gOiBub2RlVG9SZXBsYWNlT3JOb2RlQXJyYXk7XG4gICAgICAgICAgICBpZiAobm9kZXNUb1JlcGxhY2VBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluc2VydGlvblBvaW50ID0gbm9kZXNUb1JlcGxhY2VBcnJheVswXTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gaW5zZXJ0aW9uUG9pbnQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IG5ld05vZGVzQXJyYXkubGVuZ3RoOyBpIDwgajsgaSsrKVxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5ld05vZGVzQXJyYXlbaV0sIGluc2VydGlvblBvaW50KTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IG5vZGVzVG9SZXBsYWNlQXJyYXkubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGtvLnJlbW92ZU5vZGUobm9kZXNUb1JlcGxhY2VBcnJheVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGZpeFVwQ29udGludW91c05vZGVBcnJheTogZnVuY3Rpb24oY29udGludW91c05vZGVBcnJheSwgcGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgLy8gQmVmb3JlIGFjdGluZyBvbiBhIHNldCBvZiBub2RlcyB0aGF0IHdlcmUgcHJldmlvdXNseSBvdXRwdXR0ZWQgYnkgYSB0ZW1wbGF0ZSBmdW5jdGlvbiwgd2UgaGF2ZSB0byByZWNvbmNpbGVcbiAgICAgICAgICAgIC8vIHRoZW0gYWdhaW5zdCB3aGF0IGlzIGluIHRoZSBET00gcmlnaHQgbm93LiBJdCBtYXkgYmUgdGhhdCBzb21lIG9mIHRoZSBub2RlcyBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkLCBvciB0aGF0XG4gICAgICAgICAgICAvLyBuZXcgbm9kZXMgbWlnaHQgaGF2ZSBiZWVuIGluc2VydGVkIGluIHRoZSBtaWRkbGUsIGZvciBleGFtcGxlIGJ5IGEgYmluZGluZy4gQWxzbywgdGhlcmUgbWF5IHByZXZpb3VzbHkgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBsZWFkaW5nIGNvbW1lbnQgbm9kZXMgKGNyZWF0ZWQgYnkgcmV3cml0dGVuIHN0cmluZy1iYXNlZCB0ZW1wbGF0ZXMpIHRoYXQgaGF2ZSBzaW5jZSBiZWVuIHJlbW92ZWQgZHVyaW5nIGJpbmRpbmcuXG4gICAgICAgICAgICAvLyBTbywgdGhpcyBmdW5jdGlvbiB0cmFuc2xhdGVzIHRoZSBvbGQgXCJtYXBcIiBvdXRwdXQgYXJyYXkgaW50byBpdHMgYmVzdCBndWVzcyBvZiB0aGUgc2V0IG9mIGN1cnJlbnQgRE9NIG5vZGVzLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFJ1bGVzOlxuICAgICAgICAgICAgLy8gICBbQV0gQW55IGxlYWRpbmcgbm9kZXMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCBzaG91bGQgYmUgaWdub3JlZFxuICAgICAgICAgICAgLy8gICAgICAgVGhlc2UgbW9zdCBsaWtlbHkgY29ycmVzcG9uZCB0byBtZW1vaXphdGlvbiBub2RlcyB0aGF0IHdlcmUgYWxyZWFkeSByZW1vdmVkIGR1cmluZyBiaW5kaW5nXG4gICAgICAgICAgICAvLyAgICAgICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2tub2Nrb3V0L2tub2Nrb3V0L3B1bGwvNDQwXG4gICAgICAgICAgICAvLyAgIFtCXSBBbnkgdHJhaWxpbmcgbm9kZXMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlIHNob3VsZCBiZSBpZ25vcmVkXG4gICAgICAgICAgICAvLyAgICAgICBUaGlzIHByZXZlbnRzIHRoZSBjb2RlIGhlcmUgZnJvbSBhZGRpbmcgdW5yZWxhdGVkIG5vZGVzIHRvIHRoZSBhcnJheSB3aGlsZSBwcm9jZXNzaW5nIHJ1bGUgW0NdXG4gICAgICAgICAgICAvLyAgICAgICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2tub2Nrb3V0L2tub2Nrb3V0L3B1bGwvMTkwM1xuICAgICAgICAgICAgLy8gICBbQ10gV2Ugd2FudCB0byBvdXRwdXQgYSBjb250aW51b3VzIHNlcmllcyBvZiBub2Rlcy4gU28sIGlnbm9yZSBhbnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkLFxuICAgICAgICAgICAgLy8gICAgICAgYW5kIGluY2x1ZGUgYW55IG5vZGVzIHRoYXQgaGF2ZSBiZWVuIGluc2VydGVkIGFtb25nIHRoZSBwcmV2aW91cyBjb2xsZWN0aW9uXG5cbiAgICAgICAgICAgIGlmIChjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBwYXJlbnQgbm9kZSBjYW4gYmUgYSB2aXJ0dWFsIGVsZW1lbnQ7IHNvIGdldCB0aGUgcmVhbCBwYXJlbnQgbm9kZVxuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSAocGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBwYXJlbnROb2RlLnBhcmVudE5vZGUpIHx8IHBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgICAgICAvLyBSdWxlIFtBXVxuICAgICAgICAgICAgICAgIHdoaWxlIChjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCAmJiBjb250aW51b3VzTm9kZUFycmF5WzBdLnBhcmVudE5vZGUgIT09IHBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVvdXNOb2RlQXJyYXkuc3BsaWNlKDAsIDEpO1xuXG4gICAgICAgICAgICAgICAgLy8gUnVsZSBbQl1cbiAgICAgICAgICAgICAgICB3aGlsZSAoY29udGludW91c05vZGVBcnJheS5sZW5ndGggPiAxICYmIGNvbnRpbnVvdXNOb2RlQXJyYXlbY29udGludW91c05vZGVBcnJheS5sZW5ndGggLSAxXS5wYXJlbnROb2RlICE9PSBwYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aC0tO1xuXG4gICAgICAgICAgICAgICAgLy8gUnVsZSBbQ11cbiAgICAgICAgICAgICAgICBpZiAoY29udGludW91c05vZGVBcnJheS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gY29udGludW91c05vZGVBcnJheVswXSwgbGFzdCA9IGNvbnRpbnVvdXNOb2RlQXJyYXlbY29udGludW91c05vZGVBcnJheS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSB3aXRoIHRoZSBhY3R1YWwgbmV3IGNvbnRpbnVvdXMgbm9kZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29udGludW91c05vZGVBcnJheS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludW91c05vZGVBcnJheS5wdXNoKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludW91c05vZGVBcnJheS5wdXNoKGxhc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250aW51b3VzTm9kZUFycmF5O1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldE9wdGlvbk5vZGVTZWxlY3Rpb25TdGF0ZTogZnVuY3Rpb24gKG9wdGlvbk5vZGUsIGlzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIElFNiBzb21ldGltZXMgdGhyb3dzIFwidW5rbm93biBlcnJvclwiIGlmIHlvdSB0cnkgdG8gd3JpdGUgdG8gLnNlbGVjdGVkIGRpcmVjdGx5LCB3aGVyZWFzIEZpcmVmb3ggc3RydWdnbGVzIHdpdGggc2V0QXR0cmlidXRlLiBQaWNrIG9uZSBiYXNlZCBvbiBicm93c2VyLlxuICAgICAgICAgICAgaWYgKGllVmVyc2lvbiA8IDcpXG4gICAgICAgICAgICAgICAgb3B0aW9uTm9kZS5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiLCBpc1NlbGVjdGVkKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvcHRpb25Ob2RlLnNlbGVjdGVkID0gaXNTZWxlY3RlZDtcbiAgICAgICAgfSxcblxuICAgICAgICBzdHJpbmdUcmltOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nID09PSBudWxsIHx8IHN0cmluZyA9PT0gdW5kZWZpbmVkID8gJycgOlxuICAgICAgICAgICAgICAgIHN0cmluZy50cmltID9cbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLnRyaW0oKSA6XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZy50b1N0cmluZygpLnJlcGxhY2UoL15bXFxzXFx4YTBdK3xbXFxzXFx4YTBdKyQvZywgJycpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN0cmluZ1N0YXJ0c1dpdGg6IGZ1bmN0aW9uIChzdHJpbmcsIHN0YXJ0c1dpdGgpIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyB8fCBcIlwiO1xuICAgICAgICAgICAgaWYgKHN0YXJ0c1dpdGgubGVuZ3RoID4gc3RyaW5nLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnN1YnN0cmluZygwLCBzdGFydHNXaXRoLmxlbmd0aCkgPT09IHN0YXJ0c1dpdGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZG9tTm9kZUlzQ29udGFpbmVkQnk6IGZ1bmN0aW9uIChub2RlLCBjb250YWluZWRCeU5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlID09PSBjb250YWluZWRCeU5vZGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMTEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBGaXhlcyBpc3N1ZSAjMTE2MiAtIGNhbid0IHVzZSBub2RlLmNvbnRhaW5zIGZvciBkb2N1bWVudCBmcmFnbWVudHMgb24gSUU4XG4gICAgICAgICAgICBpZiAoY29udGFpbmVkQnlOb2RlLmNvbnRhaW5zKVxuICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZWRCeU5vZGUuY29udGFpbnMobm9kZS5ub2RlVHlwZSA9PT0gMyA/IG5vZGUucGFyZW50Tm9kZSA6IG5vZGUpO1xuICAgICAgICAgICAgaWYgKGNvbnRhaW5lZEJ5Tm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNvbnRhaW5lZEJ5Tm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIDE2KSA9PSAxNjtcbiAgICAgICAgICAgIHdoaWxlIChub2RlICYmIG5vZGUgIT0gY29udGFpbmVkQnlOb2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAhIW5vZGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50OiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmRvbU5vZGVJc0NvbnRhaW5lZEJ5KG5vZGUsIG5vZGUub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFueURvbU5vZGVJc0F0dGFjaGVkVG9Eb2N1bWVudDogZnVuY3Rpb24obm9kZXMpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWtvLnV0aWxzLmFycmF5Rmlyc3Qobm9kZXMsIGtvLnV0aWxzLmRvbU5vZGVJc0F0dGFjaGVkVG9Eb2N1bWVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGFnTmFtZUxvd2VyOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBGb3IgSFRNTCBlbGVtZW50cywgdGFnTmFtZSB3aWxsIGFsd2F5cyBiZSB1cHBlciBjYXNlOyBmb3IgWEhUTUwgZWxlbWVudHMsIGl0J2xsIGJlIGxvd2VyIGNhc2UuXG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBmdXR1cmUgb3B0aW1pemF0aW9uOiBJZiB3ZSBrbm93IGl0J3MgYW4gZWxlbWVudCBmcm9tIGFuIFhIVE1MIGRvY3VtZW50IChub3QgSFRNTCksXG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIGRvIHRoZSAudG9Mb3dlckNhc2UoKSBhcyBpdCB3aWxsIGFsd2F5cyBiZSBsb3dlciBjYXNlIGFueXdheS5cbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQudGFnTmFtZSAmJiBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjYXRjaEZ1bmN0aW9uRXJyb3JzOiBmdW5jdGlvbiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBrb1snb25FcnJvciddID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAga29bJ29uRXJyb3InXSAmJiBrb1snb25FcnJvciddKGUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gOiBkZWxlZ2F0ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoa28udXRpbHMuY2F0Y2hGdW5jdGlvbkVycm9ycyhoYW5kbGVyKSwgdGltZW91dCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVmZXJFcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBrb1snb25FcnJvciddICYmIGtvWydvbkVycm9yJ10oZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVnaXN0ZXJFdmVudEhhbmRsZXI6IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVkSGFuZGxlciA9IGtvLnV0aWxzLmNhdGNoRnVuY3Rpb25FcnJvcnMoaGFuZGxlcik7XG5cbiAgICAgICAgICAgIHZhciBtdXN0VXNlQXR0YWNoRXZlbnQgPSBpZVZlcnNpb24gJiYgZXZlbnRzVGhhdE11c3RCZVJlZ2lzdGVyZWRVc2luZ0F0dGFjaEV2ZW50W2V2ZW50VHlwZV07XG4gICAgICAgICAgICBpZiAoIWtvLm9wdGlvbnNbJ3VzZU9ubHlOYXRpdmVFdmVudHMnXSAmJiAhbXVzdFVzZUF0dGFjaEV2ZW50ICYmIGpRdWVyeUluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5SW5zdGFuY2UoZWxlbWVudClbJ2JpbmQnXShldmVudFR5cGUsIHdyYXBwZWRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIW11c3RVc2VBdHRhY2hFdmVudCAmJiB0eXBlb2YgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyID09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCB3cmFwcGVkSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQuYXR0YWNoRXZlbnQgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHZhciBhdHRhY2hFdmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHsgd3JhcHBlZEhhbmRsZXIuY2FsbChlbGVtZW50LCBldmVudCk7IH0sXG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50TmFtZSA9IFwib25cIiArIGV2ZW50VHlwZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmF0dGFjaEV2ZW50KGF0dGFjaEV2ZW50TmFtZSwgYXR0YWNoRXZlbnRIYW5kbGVyKTtcblxuICAgICAgICAgICAgICAgIC8vIElFIGRvZXMgbm90IGRpc3Bvc2UgYXR0YWNoRXZlbnQgaGFuZGxlcnMgYXV0b21hdGljYWxseSAodW5saWtlIHdpdGggYWRkRXZlbnRMaXN0ZW5lcilcbiAgICAgICAgICAgICAgICAvLyBzbyB0byBhdm9pZCBsZWFrcywgd2UgaGF2ZSB0byByZW1vdmUgdGhlbSBtYW51YWxseS4gU2VlIGJ1ZyAjODU2XG4gICAgICAgICAgICAgICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5kZXRhY2hFdmVudChhdHRhY2hFdmVudE5hbWUsIGF0dGFjaEV2ZW50SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBhZGRFdmVudExpc3RlbmVyIG9yIGF0dGFjaEV2ZW50XCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRyaWdnZXJFdmVudDogZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50VHlwZSkge1xuICAgICAgICAgICAgaWYgKCEoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlbGVtZW50IG11c3QgYmUgYSBET00gbm9kZSB3aGVuIGNhbGxpbmcgdHJpZ2dlckV2ZW50XCIpO1xuXG4gICAgICAgICAgICAvLyBGb3IgY2xpY2sgZXZlbnRzIG9uIGNoZWNrYm94ZXMgYW5kIHJhZGlvIGJ1dHRvbnMsIGpRdWVyeSB0b2dnbGVzIHRoZSBlbGVtZW50IGNoZWNrZWQgc3RhdGUgKmFmdGVyKiB0aGVcbiAgICAgICAgICAgIC8vIGV2ZW50IGhhbmRsZXIgcnVucyBpbnN0ZWFkIG9mICpiZWZvcmUqLiAoVGhpcyB3YXMgZml4ZWQgaW4gMS45IGZvciBjaGVja2JveGVzIGJ1dCBub3QgZm9yIHJhZGlvIGJ1dHRvbnMuKVxuICAgICAgICAgICAgLy8gSUUgZG9lc24ndCBjaGFuZ2UgdGhlIGNoZWNrZWQgc3RhdGUgd2hlbiB5b3UgdHJpZ2dlciB0aGUgY2xpY2sgZXZlbnQgdXNpbmcgXCJmaXJlRXZlbnRcIi5cbiAgICAgICAgICAgIC8vIEluIGJvdGggY2FzZXMsIHdlJ2xsIHVzZSB0aGUgY2xpY2sgbWV0aG9kIGluc3RlYWQuXG4gICAgICAgICAgICB2YXIgdXNlQ2xpY2tXb3JrYXJvdW5kID0gaXNDbGlja09uQ2hlY2thYmxlRWxlbWVudChlbGVtZW50LCBldmVudFR5cGUpO1xuXG4gICAgICAgICAgICBpZiAoIWtvLm9wdGlvbnNbJ3VzZU9ubHlOYXRpdmVFdmVudHMnXSAmJiBqUXVlcnlJbnN0YW5jZSAmJiAhdXNlQ2xpY2tXb3JrYXJvdW5kKSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5SW5zdGFuY2UoZWxlbWVudClbJ3RyaWdnZXInXShldmVudFR5cGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50LmRpc3BhdGNoRXZlbnQgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudENhdGVnb3J5ID0ga25vd25FdmVudFR5cGVzQnlFdmVudE5hbWVbZXZlbnRUeXBlXSB8fCBcIkhUTUxFdmVudHNcIjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoZXZlbnRDYXRlZ29yeSk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmluaXRFdmVudChldmVudFR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMCwgMCwgMCwgMCwgMCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdXBwbGllZCBlbGVtZW50IGRvZXNuJ3Qgc3VwcG9ydCBkaXNwYXRjaEV2ZW50XCIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VDbGlja1dvcmthcm91bmQgJiYgZWxlbWVudC5jbGljaykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQuZmlyZUV2ZW50ICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmZpcmVFdmVudChcIm9uXCIgKyBldmVudFR5cGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0cmlnZ2VyaW5nIGV2ZW50c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB1bndyYXBPYnNlcnZhYmxlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBrby5pc09ic2VydmFibGUodmFsdWUpID8gdmFsdWUoKSA6IHZhbHVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBlZWtPYnNlcnZhYmxlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBrby5pc09ic2VydmFibGUodmFsdWUpID8gdmFsdWUucGVlaygpIDogdmFsdWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9nZ2xlRG9tTm9kZUNzc0NsYXNzOiB0b2dnbGVEb21Ob2RlQ3NzQ2xhc3MsXG5cbiAgICAgICAgc2V0VGV4dENvbnRlbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHRleHRDb250ZW50KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHRleHRDb250ZW50KTtcbiAgICAgICAgICAgIGlmICgodmFsdWUgPT09IG51bGwpIHx8ICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSlcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiXCI7XG5cbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdGhlcmUgdG8gYmUgZXhhY3RseSBvbmUgY2hpbGQ6IGEgdGV4dCBub2RlLlxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGNoaWxkcmVuLCBtb3JlIHRoYW4gb25lLCBvciBpZiBpdCdzIG5vdCBhIHRleHQgbm9kZSxcbiAgICAgICAgICAgIC8vIHdlJ2xsIGNsZWFyIGV2ZXJ5dGhpbmcgYW5kIGNyZWF0ZSBhIHNpbmdsZSB0ZXh0IG5vZGUuXG4gICAgICAgICAgICB2YXIgaW5uZXJUZXh0Tm9kZSA9IGtvLnZpcnR1YWxFbGVtZW50cy5maXJzdENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKCFpbm5lclRleHROb2RlIHx8IGlubmVyVGV4dE5vZGUubm9kZVR5cGUgIT0gMyB8fCBrby52aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcoaW5uZXJUZXh0Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMuc2V0RG9tTm9kZUNoaWxkcmVuKGVsZW1lbnQsIFtlbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWUpXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlubmVyVGV4dE5vZGUuZGF0YSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrby51dGlscy5mb3JjZVJlZnJlc2goZWxlbWVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0RWxlbWVudE5hbWU6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQubmFtZSA9IG5hbWU7XG5cbiAgICAgICAgICAgIC8vIFdvcmthcm91bmQgSUUgNi83IGlzc3VlXG4gICAgICAgICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9pc3N1ZXMvMTk3XG4gICAgICAgICAgICAvLyAtIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3Qvc2V0dGluZ190aGVfbmFtZV9hdHRyaWJ1dGVfaW5faWVfZG9tL1xuICAgICAgICAgICAgaWYgKGllVmVyc2lvbiA8PSA3KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5tZXJnZUF0dHJpYnV0ZXMoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIjxpbnB1dCBuYW1lPSdcIiArIGVsZW1lbnQubmFtZSArIFwiJy8+XCIpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoKGUpIHt9IC8vIEZvciBJRTkgd2l0aCBkb2MgbW9kZSBcIklFOSBTdGFuZGFyZHNcIiBhbmQgYnJvd3NlciBtb2RlIFwiSUU5IENvbXBhdGliaWxpdHkgVmlld1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9yY2VSZWZyZXNoOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBhbiBJRTkgcmVuZGVyaW5nIGJ1ZyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9pc3N1ZXMvMjA5XG4gICAgICAgICAgICBpZiAoaWVWZXJzaW9uID49IDkpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgdGV4dCBub2RlcyBhbmQgY29tbWVudCBub2RlcyAobW9zdCBsaWtlbHkgdmlydHVhbCBlbGVtZW50cyksIHdlIHdpbGwgaGF2ZSB0byByZWZyZXNoIHRoZSBjb250YWluZXJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IG5vZGUubm9kZVR5cGUgPT0gMSA/IG5vZGUgOiBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW0uc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgIGVsZW0uc3R5bGUuem9vbSA9IGVsZW0uc3R5bGUuem9vbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBlbnN1cmVTZWxlY3RFbGVtZW50SXNSZW5kZXJlZENvcnJlY3RseTogZnVuY3Rpb24oc2VsZWN0RWxlbWVudCkge1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgSUU5IHJlbmRlcmluZyBidWcgLSBpdCBkb2Vzbid0IHJlbGlhYmx5IGRpc3BsYXkgYWxsIHRoZSB0ZXh0IGluIGR5bmFtaWNhbGx5LWFkZGVkIHNlbGVjdCBib3hlcyB1bmxlc3MgeW91IGZvcmNlIGl0IHRvIHJlLXJlbmRlciBieSB1cGRhdGluZyB0aGUgd2lkdGguXG4gICAgICAgICAgICAvLyAoU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9pc3N1ZXMvMzEyLCBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU5MDg0OTQvc2VsZWN0LW9ubHktc2hvd3MtZmlyc3QtY2hhci1vZi1zZWxlY3RlZC1vcHRpb24pXG4gICAgICAgICAgICAvLyBBbHNvIGZpeGVzIElFNyBhbmQgSUU4IGJ1ZyB0aGF0IGNhdXNlcyBzZWxlY3RzIHRvIGJlIHplcm8gd2lkdGggaWYgZW5jbG9zZWQgYnkgJ2lmJyBvciAnd2l0aCcuIChTZWUgaXNzdWUgIzgzOSlcbiAgICAgICAgICAgIGlmIChpZVZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxXaWR0aCA9IHNlbGVjdEVsZW1lbnQuc3R5bGUud2lkdGg7XG4gICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5zdHlsZS53aWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5zdHlsZS53aWR0aCA9IG9yaWdpbmFsV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmFuZ2U6IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgICAgICAgICAgbWluID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShtaW4pO1xuICAgICAgICAgICAgbWF4ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShtYXgpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IG1pbjsgaSA8PSBtYXg7IGkrKylcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWFrZUFycmF5OiBmdW5jdGlvbihhcnJheUxpa2VPYmplY3QpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gYXJyYXlMaWtlT2JqZWN0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFycmF5TGlrZU9iamVjdFtpXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVTeW1ib2xPclN0cmluZzogZnVuY3Rpb24oaWRlbnRpZmllcikge1xuICAgICAgICAgICAgcmV0dXJuIGNhblVzZVN5bWJvbHMgPyBTeW1ib2woaWRlbnRpZmllcikgOiBpZGVudGlmaWVyO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzSWU2IDogaXNJZTYsXG4gICAgICAgIGlzSWU3IDogaXNJZTcsXG4gICAgICAgIGllVmVyc2lvbiA6IGllVmVyc2lvbixcblxuICAgICAgICBnZXRGb3JtRmllbGRzOiBmdW5jdGlvbihmb3JtLCBmaWVsZE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBmaWVsZHMgPSBrby51dGlscy5tYWtlQXJyYXkoZm9ybS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpKS5jb25jYXQoa28udXRpbHMubWFrZUFycmF5KGZvcm0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZXh0YXJlYVwiKSkpO1xuICAgICAgICAgICAgdmFyIGlzTWF0Y2hpbmdGaWVsZCA9ICh0eXBlb2YgZmllbGROYW1lID09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oZmllbGQpIHsgcmV0dXJuIGZpZWxkLm5hbWUgPT09IGZpZWxkTmFtZSB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbihmaWVsZCkgeyByZXR1cm4gZmllbGROYW1lLnRlc3QoZmllbGQubmFtZSkgfTsgLy8gVHJlYXQgZmllbGROYW1lIGFzIHJlZ2V4IG9yIG9iamVjdCBjb250YWluaW5nIHByZWRpY2F0ZVxuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBmaWVsZHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNNYXRjaGluZ0ZpZWxkKGZpZWxkc1tpXSkpXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChmaWVsZHNbaV0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhcnNlSnNvbjogZnVuY3Rpb24gKGpzb25TdHJpbmcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YganNvblN0cmluZyA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAganNvblN0cmluZyA9IGtvLnV0aWxzLnN0cmluZ1RyaW0oanNvblN0cmluZyk7XG4gICAgICAgICAgICAgICAgaWYgKGpzb25TdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEpTT04gJiYgSlNPTi5wYXJzZSkgLy8gVXNlIG5hdGl2ZSBwYXJzaW5nIHdoZXJlIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobmV3IEZ1bmN0aW9uKFwicmV0dXJuIFwiICsganNvblN0cmluZykpKCk7IC8vIEZhbGxiYWNrIG9uIGxlc3Mgc2FmZSBwYXJzaW5nIGZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN0cmluZ2lmeUpzb246IGZ1bmN0aW9uIChkYXRhLCByZXBsYWNlciwgc3BhY2UpIHsgICAvLyByZXBsYWNlciBhbmQgc3BhY2UgYXJlIG9wdGlvbmFsXG4gICAgICAgICAgICBpZiAoIUpTT04gfHwgIUpTT04uc3RyaW5naWZ5KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIEpTT04uc3RyaW5naWZ5KCkuIFNvbWUgYnJvd3NlcnMgKGUuZy4sIElFIDwgOCkgZG9uJ3Qgc3VwcG9ydCBpdCBuYXRpdmVseSwgYnV0IHlvdSBjYW4gb3ZlcmNvbWUgdGhpcyBieSBhZGRpbmcgYSBzY3JpcHQgcmVmZXJlbmNlIHRvIGpzb24yLmpzLCBkb3dubG9hZGFibGUgZnJvbSBodHRwOi8vd3d3Lmpzb24ub3JnL2pzb24yLmpzXCIpO1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZGF0YSksIHJlcGxhY2VyLCBzcGFjZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcG9zdEpzb246IGZ1bmN0aW9uICh1cmxPckZvcm0sIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IG9wdGlvbnNbJ3BhcmFtcyddIHx8IHt9O1xuICAgICAgICAgICAgdmFyIGluY2x1ZGVGaWVsZHMgPSBvcHRpb25zWydpbmNsdWRlRmllbGRzJ10gfHwgdGhpcy5maWVsZHNJbmNsdWRlZFdpdGhKc29uUG9zdDtcbiAgICAgICAgICAgIHZhciB1cmwgPSB1cmxPckZvcm07XG5cbiAgICAgICAgICAgIC8vIElmIHdlIHdlcmUgZ2l2ZW4gYSBmb3JtLCB1c2UgaXRzICdhY3Rpb24nIFVSTCBhbmQgcGljayBvdXQgYW55IHJlcXVlc3RlZCBmaWVsZCB2YWx1ZXNcbiAgICAgICAgICAgIGlmKCh0eXBlb2YgdXJsT3JGb3JtID09ICdvYmplY3QnKSAmJiAoa28udXRpbHMudGFnTmFtZUxvd2VyKHVybE9yRm9ybSkgPT09IFwiZm9ybVwiKSkge1xuICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbEZvcm0gPSB1cmxPckZvcm07XG4gICAgICAgICAgICAgICAgdXJsID0gb3JpZ2luYWxGb3JtLmFjdGlvbjtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gaW5jbHVkZUZpZWxkcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRzID0ga28udXRpbHMuZ2V0Rm9ybUZpZWxkcyhvcmlnaW5hbEZvcm0sIGluY2x1ZGVGaWVsZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gZmllbGRzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW2ZpZWxkc1tqXS5uYW1lXSA9IGZpZWxkc1tqXS52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGRhdGEpO1xuICAgICAgICAgICAgdmFyIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgICAgICAgICAgIGZvcm0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgZm9ybS5hY3Rpb24gPSB1cmw7XG4gICAgICAgICAgICBmb3JtLm1ldGhvZCA9IFwicG9zdFwiO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSAnZGF0YScgdGhpcyBpcyBhIG1vZGVsIG9iamVjdCwgd2UgaW5jbHVkZSBhbGwgcHJvcGVydGllcyBpbmNsdWRpbmcgdGhvc2UgaW5oZXJpdGVkIGZyb20gaXRzIHByb3RvdHlwZVxuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgICBpbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICBpbnB1dC5uYW1lID0ga2V5O1xuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0ga28udXRpbHMuc3RyaW5naWZ5SnNvbihrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGRhdGFba2V5XSkpO1xuICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqZWN0Rm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICAgICAgaW5wdXQubmFtZSA9IGtleTtcbiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuICAgICAgICAgICAgb3B0aW9uc1snc3VibWl0dGVyJ10gPyBvcHRpb25zWydzdWJtaXR0ZXInXShmb3JtKSA6IGZvcm0uc3VibWl0KCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGZvcm0pOyB9LCAwKTtcbiAgICAgICAgfVxuICAgIH1cbn0oKSk7XG5cbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMnLCBrby51dGlscyk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmFycmF5Rm9yRWFjaCcsIGtvLnV0aWxzLmFycmF5Rm9yRWFjaCk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmFycmF5Rmlyc3QnLCBrby51dGlscy5hcnJheUZpcnN0KTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlGaWx0ZXInLCBrby51dGlscy5hcnJheUZpbHRlcik7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmFycmF5R2V0RGlzdGluY3RWYWx1ZXMnLCBrby51dGlscy5hcnJheUdldERpc3RpbmN0VmFsdWVzKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlJbmRleE9mJywga28udXRpbHMuYXJyYXlJbmRleE9mKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlNYXAnLCBrby51dGlscy5hcnJheU1hcCk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmFycmF5UHVzaEFsbCcsIGtvLnV0aWxzLmFycmF5UHVzaEFsbCk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmFycmF5UmVtb3ZlSXRlbScsIGtvLnV0aWxzLmFycmF5UmVtb3ZlSXRlbSk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmV4dGVuZCcsIGtvLnV0aWxzLmV4dGVuZCk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmZpZWxkc0luY2x1ZGVkV2l0aEpzb25Qb3N0Jywga28udXRpbHMuZmllbGRzSW5jbHVkZWRXaXRoSnNvblBvc3QpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5nZXRGb3JtRmllbGRzJywga28udXRpbHMuZ2V0Rm9ybUZpZWxkcyk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLnBlZWtPYnNlcnZhYmxlJywga28udXRpbHMucGVla09ic2VydmFibGUpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5wb3N0SnNvbicsIGtvLnV0aWxzLnBvc3RKc29uKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMucGFyc2VKc29uJywga28udXRpbHMucGFyc2VKc29uKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXInLCBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcik7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLnN0cmluZ2lmeUpzb24nLCBrby51dGlscy5zdHJpbmdpZnlKc29uKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMucmFuZ2UnLCBrby51dGlscy5yYW5nZSk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLnRvZ2dsZURvbU5vZGVDc3NDbGFzcycsIGtvLnV0aWxzLnRvZ2dsZURvbU5vZGVDc3NDbGFzcyk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLnRyaWdnZXJFdmVudCcsIGtvLnV0aWxzLnRyaWdnZXJFdmVudCk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLnVud3JhcE9ic2VydmFibGUnLCBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMub2JqZWN0Rm9yRWFjaCcsIGtvLnV0aWxzLm9iamVjdEZvckVhY2gpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5hZGRPclJlbW92ZUl0ZW0nLCBrby51dGlscy5hZGRPclJlbW92ZUl0ZW0pO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5zZXRUZXh0Q29udGVudCcsIGtvLnV0aWxzLnNldFRleHRDb250ZW50KTtcbmtvLmV4cG9ydFN5bWJvbCgndW53cmFwJywga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSk7IC8vIENvbnZlbmllbnQgc2hvcnRoYW5kLCBiZWNhdXNlIHRoaXMgaXMgdXNlZCBzbyBjb21tb25seVxuXG5pZiAoIUZ1bmN0aW9uLnByb3RvdHlwZVsnYmluZCddKSB7XG4gICAgLy8gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgaXMgYSBzdGFuZGFyZCBwYXJ0IG9mIEVDTUFTY3JpcHQgNXRoIEVkaXRpb24gKERlY2VtYmVyIDIwMDksIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9wdWJsaWNhdGlvbnMvZmlsZXMvRUNNQS1TVC9FQ01BLTI2Mi5wZGYpXG4gICAgLy8gSW4gY2FzZSB0aGUgYnJvd3NlciBkb2Vzbid0IGltcGxlbWVudCBpdCBuYXRpdmVseSwgcHJvdmlkZSBhIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24uIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdGhlIG9uZSBpbiBwcm90b3R5cGUuanNcbiAgICBGdW5jdGlvbi5wcm90b3R5cGVbJ2JpbmQnXSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsRnVuY3Rpb24gPSB0aGlzO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseShvYmplY3QsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHBhcnRpYWxBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBwYXJ0aWFsQXJncy5zbGljZSgwKTtcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseShvYmplY3QsIGFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmtvLnV0aWxzLmRvbURhdGEgPSBuZXcgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdW5pcXVlSWQgPSAwO1xuICAgIHZhciBkYXRhU3RvcmVLZXlFeHBhbmRvUHJvcGVydHlOYW1lID0gXCJfX2tvX19cIiArIChuZXcgRGF0ZSkuZ2V0VGltZSgpO1xuICAgIHZhciBkYXRhU3RvcmUgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGdldEFsbChub2RlLCBjcmVhdGVJZk5vdEZvdW5kKSB7XG4gICAgICAgIHZhciBkYXRhU3RvcmVLZXkgPSBub2RlW2RhdGFTdG9yZUtleUV4cGFuZG9Qcm9wZXJ0eU5hbWVdO1xuICAgICAgICB2YXIgaGFzRXhpc3RpbmdEYXRhU3RvcmUgPSBkYXRhU3RvcmVLZXkgJiYgKGRhdGFTdG9yZUtleSAhPT0gXCJudWxsXCIpICYmIGRhdGFTdG9yZVtkYXRhU3RvcmVLZXldO1xuICAgICAgICBpZiAoIWhhc0V4aXN0aW5nRGF0YVN0b3JlKSB7XG4gICAgICAgICAgICBpZiAoIWNyZWF0ZUlmTm90Rm91bmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGRhdGFTdG9yZUtleSA9IG5vZGVbZGF0YVN0b3JlS2V5RXhwYW5kb1Byb3BlcnR5TmFtZV0gPSBcImtvXCIgKyB1bmlxdWVJZCsrO1xuICAgICAgICAgICAgZGF0YVN0b3JlW2RhdGFTdG9yZUtleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YVN0b3JlW2RhdGFTdG9yZUtleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAobm9kZSwga2V5KSB7XG4gICAgICAgICAgICB2YXIgYWxsRGF0YUZvck5vZGUgPSBnZXRBbGwobm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGFsbERhdGFGb3JOb2RlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBhbGxEYXRhRm9yTm9kZVtrZXldO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChub2RlLCBrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBkb24ndCBhY3R1YWxseSBjcmVhdGUgYSBuZXcgZG9tRGF0YSBrZXkgaWYgd2UgYXJlIGFjdHVhbGx5IGRlbGV0aW5nIGEgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoZ2V0QWxsKG5vZGUsIGZhbHNlKSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYWxsRGF0YUZvck5vZGUgPSBnZXRBbGwobm9kZSwgdHJ1ZSk7XG4gICAgICAgICAgICBhbGxEYXRhRm9yTm9kZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIGRhdGFTdG9yZUtleSA9IG5vZGVbZGF0YVN0b3JlS2V5RXhwYW5kb1Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBpZiAoZGF0YVN0b3JlS2V5KSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFTdG9yZVtkYXRhU3RvcmVLZXldO1xuICAgICAgICAgICAgICAgIG5vZGVbZGF0YVN0b3JlS2V5RXhwYW5kb1Byb3BlcnR5TmFtZV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBFeHBvc2luZyBcImRpZCBjbGVhblwiIGZsYWcgcHVyZWx5IHNvIHNwZWNzIGNhbiBpbmZlciB3aGV0aGVyIHRoaW5ncyBoYXZlIGJlZW4gY2xlYW5lZCB1cCBhcyBpbnRlbmRlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIG5leHRLZXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAodW5pcXVlSWQrKykgKyBkYXRhU3RvcmVLZXlFeHBhbmRvUHJvcGVydHlOYW1lO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuZG9tRGF0YScsIGtvLnV0aWxzLmRvbURhdGEpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5kb21EYXRhLmNsZWFyJywga28udXRpbHMuZG9tRGF0YS5jbGVhcik7IC8vIEV4cG9ydGluZyBvbmx5IHNvIHNwZWNzIGNhbiBjbGVhciB1cCBhZnRlciB0aGVtc2VsdmVzIGZ1bGx5XG5cbmtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbCA9IG5ldyAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBkb21EYXRhS2V5ID0ga28udXRpbHMuZG9tRGF0YS5uZXh0S2V5KCk7XG4gICAgdmFyIGNsZWFuYWJsZU5vZGVUeXBlcyA9IHsgMTogdHJ1ZSwgODogdHJ1ZSwgOTogdHJ1ZSB9OyAgICAgICAvLyBFbGVtZW50LCBDb21tZW50LCBEb2N1bWVudFxuICAgIHZhciBjbGVhbmFibGVOb2RlVHlwZXNXaXRoRGVzY2VuZGFudHMgPSB7IDE6IHRydWUsIDk6IHRydWUgfTsgLy8gRWxlbWVudCwgRG9jdW1lbnRcblxuICAgIGZ1bmN0aW9uIGdldERpc3Bvc2VDYWxsYmFja3NDb2xsZWN0aW9uKG5vZGUsIGNyZWF0ZUlmTm90Rm91bmQpIHtcbiAgICAgICAgdmFyIGFsbERpc3Bvc2VDYWxsYmFja3MgPSBrby51dGlscy5kb21EYXRhLmdldChub2RlLCBkb21EYXRhS2V5KTtcbiAgICAgICAgaWYgKChhbGxEaXNwb3NlQ2FsbGJhY2tzID09PSB1bmRlZmluZWQpICYmIGNyZWF0ZUlmTm90Rm91bmQpIHtcbiAgICAgICAgICAgIGFsbERpc3Bvc2VDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KG5vZGUsIGRvbURhdGFLZXksIGFsbERpc3Bvc2VDYWxsYmFja3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGxEaXNwb3NlQ2FsbGJhY2tzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZXN0cm95Q2FsbGJhY2tzQ29sbGVjdGlvbihub2RlKSB7XG4gICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KG5vZGUsIGRvbURhdGFLZXksIHVuZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW5TaW5nbGVOb2RlKG5vZGUpIHtcbiAgICAgICAgLy8gUnVuIGFsbCB0aGUgZGlzcG9zZSBjYWxsYmFja3NcbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IGdldERpc3Bvc2VDYWxsYmFja3NDb2xsZWN0aW9uKG5vZGUsIGZhbHNlKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApOyAvLyBDbG9uZSwgYXMgdGhlIGFycmF5IG1heSBiZSBtb2RpZmllZCBkdXJpbmcgaXRlcmF0aW9uICh0eXBpY2FsbHksIGNhbGxiYWNrcyB3aWxsIHJlbW92ZSB0aGVtc2VsdmVzKVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldKG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXJhc2UgdGhlIERPTSBkYXRhXG4gICAgICAgIGtvLnV0aWxzLmRvbURhdGEuY2xlYXIobm9kZSk7XG5cbiAgICAgICAgLy8gUGVyZm9ybSBjbGVhbnVwIG5lZWRlZCBieSBleHRlcm5hbCBsaWJyYXJpZXMgKGN1cnJlbnRseSBvbmx5IGpRdWVyeSwgYnV0IGNhbiBiZSBleHRlbmRlZClcbiAgICAgICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsW1wiY2xlYW5FeHRlcm5hbERhdGFcIl0obm9kZSk7XG5cbiAgICAgICAgLy8gQ2xlYXIgYW55IGltbWVkaWF0ZS1jaGlsZCBjb21tZW50IG5vZGVzLCBhcyB0aGVzZSB3b3VsZG4ndCBoYXZlIGJlZW4gZm91bmQgYnlcbiAgICAgICAgLy8gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgaW4gY2xlYW5Ob2RlKCkgKGNvbW1lbnQgbm9kZXMgYXJlbid0IGVsZW1lbnRzKVxuICAgICAgICBpZiAoY2xlYW5hYmxlTm9kZVR5cGVzV2l0aERlc2NlbmRhbnRzW25vZGUubm9kZVR5cGVdKVxuICAgICAgICAgICAgY2xlYW5JbW1lZGlhdGVDb21tZW50VHlwZUNoaWxkcmVuKG5vZGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFuSW1tZWRpYXRlQ29tbWVudFR5cGVDaGlsZHJlbihub2RlV2l0aENoaWxkcmVuKSB7XG4gICAgICAgIHZhciBjaGlsZCwgbmV4dENoaWxkID0gbm9kZVdpdGhDaGlsZHJlbi5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAoY2hpbGQgPSBuZXh0Q2hpbGQpIHtcbiAgICAgICAgICAgIG5leHRDaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSA4KVxuICAgICAgICAgICAgICAgIGNsZWFuU2luZ2xlTm9kZShjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGREaXNwb3NlQ2FsbGJhY2sgOiBmdW5jdGlvbihub2RlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgZ2V0RGlzcG9zZUNhbGxiYWNrc0NvbGxlY3Rpb24obm9kZSwgdHJ1ZSkucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlRGlzcG9zZUNhbGxiYWNrIDogZnVuY3Rpb24obm9kZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBjYWxsYmFja3NDb2xsZWN0aW9uID0gZ2V0RGlzcG9zZUNhbGxiYWNrc0NvbGxlY3Rpb24obm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrc0NvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBrby51dGlscy5hcnJheVJlbW92ZUl0ZW0oY2FsbGJhY2tzQ29sbGVjdGlvbiwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja3NDb2xsZWN0aW9uLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgICAgICAgICBkZXN0cm95Q2FsbGJhY2tzQ29sbGVjdGlvbihub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhbk5vZGUgOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAvLyBGaXJzdCBjbGVhbiB0aGlzIG5vZGUsIHdoZXJlIGFwcGxpY2FibGVcbiAgICAgICAgICAgIGlmIChjbGVhbmFibGVOb2RlVHlwZXNbbm9kZS5ub2RlVHlwZV0pIHtcbiAgICAgICAgICAgICAgICBjbGVhblNpbmdsZU5vZGUobm9kZSk7XG5cbiAgICAgICAgICAgICAgICAvLyAuLi4gdGhlbiBpdHMgZGVzY2VuZGFudHMsIHdoZXJlIGFwcGxpY2FibGVcbiAgICAgICAgICAgICAgICBpZiAoY2xlYW5hYmxlTm9kZVR5cGVzV2l0aERlc2NlbmRhbnRzW25vZGUubm9kZVR5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENsb25lIHRoZSBkZXNjZW5kYW50cyBsaXN0IGluIGNhc2UgaXQgY2hhbmdlcyBkdXJpbmcgaXRlcmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjZW5kYW50cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBrby51dGlscy5hcnJheVB1c2hBbGwoZGVzY2VuZGFudHMsIG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBkZXNjZW5kYW50cy5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhblNpbmdsZU5vZGUoZGVzY2VuZGFudHNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZU5vZGUgOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICBrby5jbGVhbk5vZGUobm9kZSk7XG4gICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBcImNsZWFuRXh0ZXJuYWxEYXRhXCIgOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBzdXBwb3J0IGZvciBqUXVlcnkgaGVyZSBiZWNhdXNlIGl0J3Mgc28gY29tbW9ubHkgdXNlZC5cbiAgICAgICAgICAgIC8vIE1hbnkgalF1ZXJ5IHBsdWdpbnMgKGluY2x1ZGluZyBqcXVlcnkudG1wbCkgc3RvcmUgZGF0YSB1c2luZyBqUXVlcnkncyBlcXVpdmFsZW50IG9mIGRvbURhdGFcbiAgICAgICAgICAgIC8vIHNvIG5vdGlmeSBpdCB0byB0ZWFyIGRvd24gYW55IHJlc291cmNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIG5vZGUgJiBkZXNjZW5kYW50cyBoZXJlLlxuICAgICAgICAgICAgaWYgKGpRdWVyeUluc3RhbmNlICYmICh0eXBlb2YgalF1ZXJ5SW5zdGFuY2VbJ2NsZWFuRGF0YSddID09IFwiZnVuY3Rpb25cIikpXG4gICAgICAgICAgICAgICAgalF1ZXJ5SW5zdGFuY2VbJ2NsZWFuRGF0YSddKFtub2RlXSk7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcbmtvLmNsZWFuTm9kZSA9IGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5jbGVhbk5vZGU7IC8vIFNob3J0aGFuZCBuYW1lIGZvciBjb252ZW5pZW5jZVxua28ucmVtb3ZlTm9kZSA9IGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5yZW1vdmVOb2RlOyAvLyBTaG9ydGhhbmQgbmFtZSBmb3IgY29udmVuaWVuY2VcbmtvLmV4cG9ydFN5bWJvbCgnY2xlYW5Ob2RlJywga28uY2xlYW5Ob2RlKTtcbmtvLmV4cG9ydFN5bWJvbCgncmVtb3ZlTm9kZScsIGtvLnJlbW92ZU5vZGUpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5kb21Ob2RlRGlzcG9zYWwnLCBrby51dGlscy5kb21Ob2RlRGlzcG9zYWwpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrJywga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmRvbU5vZGVEaXNwb3NhbC5yZW1vdmVEaXNwb3NlQ2FsbGJhY2snLCBrby51dGlscy5kb21Ob2RlRGlzcG9zYWwucmVtb3ZlRGlzcG9zZUNhbGxiYWNrKTtcbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5vbmUgPSBbMCwgXCJcIiwgXCJcIl0sXG4gICAgICAgIHRhYmxlID0gWzEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCJdLFxuICAgICAgICB0Ym9keSA9IFsyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiXSxcbiAgICAgICAgdHIgPSBbMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sXG4gICAgICAgIHNlbGVjdCA9IFsxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIl0sXG4gICAgICAgIGxvb2t1cCA9IHtcbiAgICAgICAgICAgICd0aGVhZCc6IHRhYmxlLFxuICAgICAgICAgICAgJ3Rib2R5JzogdGFibGUsXG4gICAgICAgICAgICAndGZvb3QnOiB0YWJsZSxcbiAgICAgICAgICAgICd0cic6IHRib2R5LFxuICAgICAgICAgICAgJ3RkJzogdHIsXG4gICAgICAgICAgICAndGgnOiB0cixcbiAgICAgICAgICAgICdvcHRpb24nOiBzZWxlY3QsXG4gICAgICAgICAgICAnb3B0Z3JvdXAnOiBzZWxlY3RcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBUaGlzIGlzIG5lZWRlZCBmb3Igb2xkIElFIGlmIHlvdSdyZSAqbm90KiB1c2luZyBlaXRoZXIgalF1ZXJ5IG9yIGlubmVyU2hpdi4gRG9lc24ndCBhZmZlY3Qgb3RoZXIgY2FzZXMuXG4gICAgICAgIG1heVJlcXVpcmVDcmVhdGVFbGVtZW50SGFjayA9IGtvLnV0aWxzLmllVmVyc2lvbiA8PSA4O1xuXG4gICAgZnVuY3Rpb24gZ2V0V3JhcCh0YWdzKSB7XG4gICAgICAgIHZhciBtID0gdGFncy5tYXRjaCgvXjwoW2Etel0rKVsgPl0vKTtcbiAgICAgICAgcmV0dXJuIChtICYmIGxvb2t1cFttWzFdXSkgfHwgbm9uZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaW1wbGVIdG1sUGFyc2UoaHRtbCwgZG9jdW1lbnRDb250ZXh0KSB7XG4gICAgICAgIGRvY3VtZW50Q29udGV4dCB8fCAoZG9jdW1lbnRDb250ZXh0ID0gZG9jdW1lbnQpO1xuICAgICAgICB2YXIgd2luZG93Q29udGV4dCA9IGRvY3VtZW50Q29udGV4dFsncGFyZW50V2luZG93J10gfHwgZG9jdW1lbnRDb250ZXh0WydkZWZhdWx0VmlldyddIHx8IHdpbmRvdztcblxuICAgICAgICAvLyBCYXNlZCBvbiBqUXVlcnkncyBcImNsZWFuXCIgZnVuY3Rpb24sIGJ1dCBvbmx5IGFjY291bnRpbmcgZm9yIHRhYmxlLXJlbGF0ZWQgZWxlbWVudHMuXG4gICAgICAgIC8vIElmIHlvdSBoYXZlIHJlZmVyZW5jZWQgalF1ZXJ5LCB0aGlzIHdvbid0IGJlIHVzZWQgYW55d2F5IC0gS08gd2lsbCB1c2UgalF1ZXJ5J3MgXCJjbGVhblwiIGZ1bmN0aW9uIGRpcmVjdGx5XG5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHRoZXJlJ3Mgc3RpbGwgYW4gaXNzdWUgaW4gSUUgPCA5IHdoZXJlYnkgaXQgd2lsbCBkaXNjYXJkIGNvbW1lbnQgbm9kZXMgdGhhdCBhcmUgdGhlIGZpcnN0IGNoaWxkIG9mXG4gICAgICAgIC8vIGEgZGVzY2VuZGFudCBub2RlLiBGb3IgZXhhbXBsZTogXCI8ZGl2PjwhLS0gbXljb21tZW50IC0tPmFiYzwvZGl2PlwiIHdpbGwgZ2V0IHBhcnNlZCBhcyBcIjxkaXY+YWJjPC9kaXY+XCJcbiAgICAgICAgLy8gVGhpcyB3b24ndCBhZmZlY3QgYW55b25lIHdobyBoYXMgcmVmZXJlbmNlZCBqUXVlcnksIGFuZCB0aGVyZSdzIGFsd2F5cyB0aGUgd29ya2Fyb3VuZCBvZiBpbnNlcnRpbmcgYSBkdW1teSBub2RlXG4gICAgICAgIC8vIChwb3NzaWJseSBhIHRleHQgbm9kZSkgaW4gZnJvbnQgb2YgdGhlIGNvbW1lbnQuIFNvLCBLTyBkb2VzIG5vdCBhdHRlbXB0IHRvIHdvcmthcm91bmQgdGhpcyBJRSBpc3N1ZSBhdXRvbWF0aWNhbGx5IGF0IHByZXNlbnQuXG5cbiAgICAgICAgLy8gVHJpbSB3aGl0ZXNwYWNlLCBvdGhlcndpc2UgaW5kZXhPZiB3b24ndCB3b3JrIGFzIGV4cGVjdGVkXG4gICAgICAgIHZhciB0YWdzID0ga28udXRpbHMuc3RyaW5nVHJpbShodG1sKS50b0xvd2VyQ2FzZSgpLCBkaXYgPSBkb2N1bWVudENvbnRleHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgICAgICAgIHdyYXAgPSBnZXRXcmFwKHRhZ3MpLFxuICAgICAgICAgICAgZGVwdGggPSB3cmFwWzBdO1xuXG4gICAgICAgIC8vIEdvIHRvIGh0bWwgYW5kIGJhY2ssIHRoZW4gcGVlbCBvZmYgZXh0cmEgd3JhcHBlcnNcbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGFsd2F5cyBwcmVmaXggd2l0aCBzb21lIGR1bW15IHRleHQsIGJlY2F1c2Ugb3RoZXJ3aXNlLCBJRTw5IHdpbGwgc3RyaXAgb3V0IGxlYWRpbmcgY29tbWVudCBub2RlcyBpbiBkZXNjZW5kYW50cy4gVG90YWwgbWFkbmVzcy5cbiAgICAgICAgdmFyIG1hcmt1cCA9IFwiaWdub3JlZDxkaXY+XCIgKyB3cmFwWzFdICsgaHRtbCArIHdyYXBbMl0gKyBcIjwvZGl2PlwiO1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvd0NvbnRleHRbJ2lubmVyU2hpdiddID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IGlubmVyU2hpdiBpcyBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBodG1sNXNoaXYuIFdlIHNob3VsZCBjb25zaWRlciBhZGRpbmdcbiAgICAgICAgICAgIC8vIHN1cHBvcnQgZm9yIGh0bWw1c2hpdiAoZXhjZXB0IGlmIG5vIGV4cGxpY2l0IHN1cHBvcnQgaXMgbmVlZGVkLCBlLmcuLCBpZiBodG1sNXNoaXZcbiAgICAgICAgICAgIC8vIHNvbWVob3cgc2hpbXMgdGhlIG5hdGl2ZSBBUElzIHNvIGl0IGp1c3Qgd29ya3MgYW55d2F5KVxuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKHdpbmRvd0NvbnRleHRbJ2lubmVyU2hpdiddKG1hcmt1cCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1heVJlcXVpcmVDcmVhdGVFbGVtZW50SGFjaykge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdteS1lbGVtZW50JykgdHJpY2sgdG8gZW5hYmxlIGN1c3RvbSBlbGVtZW50cyBpbiBJRTYtOFxuICAgICAgICAgICAgICAgIC8vIG9ubHkgd29ya3MgaWYgd2UgYXNzaWduIGlubmVySFRNTCBvbiBhbiBlbGVtZW50IGFzc29jaWF0ZWQgd2l0aCB0aGF0IGRvY3VtZW50LlxuICAgICAgICAgICAgICAgIGRvY3VtZW50Q29udGV4dC5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gbWFya3VwO1xuXG4gICAgICAgICAgICBpZiAobWF5UmVxdWlyZUNyZWF0ZUVsZW1lbnRIYWNrKSB7XG4gICAgICAgICAgICAgICAgZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1vdmUgdG8gdGhlIHJpZ2h0IGRlcHRoXG4gICAgICAgIHdoaWxlIChkZXB0aC0tKVxuICAgICAgICAgICAgZGl2ID0gZGl2Lmxhc3RDaGlsZDtcblxuICAgICAgICByZXR1cm4ga28udXRpbHMubWFrZUFycmF5KGRpdi5sYXN0Q2hpbGQuY2hpbGROb2Rlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24galF1ZXJ5SHRtbFBhcnNlKGh0bWwsIGRvY3VtZW50Q29udGV4dCkge1xuICAgICAgICAvLyBqUXVlcnkncyBcInBhcnNlSFRNTFwiIGZ1bmN0aW9uIHdhcyBpbnRyb2R1Y2VkIGluIGpRdWVyeSAxLjguMCBhbmQgaXMgYSBkb2N1bWVudGVkIHB1YmxpYyBBUEkuXG4gICAgICAgIGlmIChqUXVlcnlJbnN0YW5jZVsncGFyc2VIVE1MJ10pIHtcbiAgICAgICAgICAgIHJldHVybiBqUXVlcnlJbnN0YW5jZVsncGFyc2VIVE1MJ10oaHRtbCwgZG9jdW1lbnRDb250ZXh0KSB8fCBbXTsgLy8gRW5zdXJlIHdlIGFsd2F5cyByZXR1cm4gYW4gYXJyYXkgYW5kIG5ldmVyIG51bGxcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZvciBqUXVlcnkgPCAxLjguMCwgd2UgZmFsbCBiYWNrIG9uIHRoZSB1bmRvY3VtZW50ZWQgaW50ZXJuYWwgXCJjbGVhblwiIGZ1bmN0aW9uLlxuICAgICAgICAgICAgdmFyIGVsZW1zID0galF1ZXJ5SW5zdGFuY2VbJ2NsZWFuJ10oW2h0bWxdLCBkb2N1bWVudENvbnRleHQpO1xuXG4gICAgICAgICAgICAvLyBBcyBvZiBqUXVlcnkgMS43LjEsIGpRdWVyeSBwYXJzZXMgdGhlIEhUTUwgYnkgYXBwZW5kaW5nIGl0IHRvIHNvbWUgZHVtbXkgcGFyZW50IG5vZGVzIGhlbGQgaW4gYW4gaW4tbWVtb3J5IGRvY3VtZW50IGZyYWdtZW50LlxuICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgaXQgbmV2ZXIgY2xlYXJzIHRoZSBkdW1teSBwYXJlbnQgbm9kZXMgZnJvbSB0aGUgZG9jdW1lbnQgZnJhZ21lbnQsIHNvIGl0IGxlYWtzIG1lbW9yeSBvdmVyIHRpbWUuXG4gICAgICAgICAgICAvLyBGaXggdGhpcyBieSBmaW5kaW5nIHRoZSB0b3AtbW9zdCBkdW1teSBwYXJlbnQgZWxlbWVudCwgYW5kIGRldGFjaGluZyBpdCBmcm9tIGl0cyBvd25lciBmcmFnbWVudC5cbiAgICAgICAgICAgIGlmIChlbGVtcyAmJiBlbGVtc1swXSkge1xuICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIHRvcC1tb3N0IHBhcmVudCBlbGVtZW50IHRoYXQncyBhIGRpcmVjdCBjaGlsZCBvZiBhIGRvY3VtZW50IGZyYWdtZW50XG4gICAgICAgICAgICAgICAgdmFyIGVsZW0gPSBlbGVtc1swXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZWxlbS5wYXJlbnROb2RlICYmIGVsZW0ucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gMTEgLyogaS5lLiwgRG9jdW1lbnRGcmFnbWVudCAqLylcbiAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAvLyAuLi4gdGhlbiBkZXRhY2ggaXRcbiAgICAgICAgICAgICAgICBpZiAoZWxlbS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgICAgICBlbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBlbGVtcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50ID0gZnVuY3Rpb24oaHRtbCwgZG9jdW1lbnRDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBqUXVlcnlJbnN0YW5jZSA/XG4gICAgICAgICAgICBqUXVlcnlIdG1sUGFyc2UoaHRtbCwgZG9jdW1lbnRDb250ZXh0KSA6ICAgLy8gQXMgYmVsb3csIGJlbmVmaXQgZnJvbSBqUXVlcnkncyBvcHRpbWlzYXRpb25zIHdoZXJlIHBvc3NpYmxlXG4gICAgICAgICAgICBzaW1wbGVIdG1sUGFyc2UoaHRtbCwgZG9jdW1lbnRDb250ZXh0KTsgIC8vIC4uLiBvdGhlcndpc2UsIHRoaXMgc2ltcGxlIGxvZ2ljIHdpbGwgZG8gaW4gbW9zdCBjb21tb24gY2FzZXMuXG4gICAgfTtcblxuICAgIGtvLnV0aWxzLnNldEh0bWwgPSBmdW5jdGlvbihub2RlLCBodG1sKSB7XG4gICAgICAgIGtvLnV0aWxzLmVtcHR5RG9tTm9kZShub2RlKTtcblxuICAgICAgICAvLyBUaGVyZSdzIG5vIGxlZ2l0aW1hdGUgcmVhc29uIHRvIGRpc3BsYXkgYSBzdHJpbmdpZmllZCBvYnNlcnZhYmxlIHdpdGhvdXQgdW53cmFwcGluZyBpdCwgc28gd2UnbGwgdW53cmFwIGl0XG4gICAgICAgIGh0bWwgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGh0bWwpO1xuXG4gICAgICAgIGlmICgoaHRtbCAhPT0gbnVsbCkgJiYgKGh0bWwgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaHRtbCAhPSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICBodG1sID0gaHRtbC50b1N0cmluZygpO1xuXG4gICAgICAgICAgICAvLyBqUXVlcnkgY29udGFpbnMgYSBsb3Qgb2Ygc29waGlzdGljYXRlZCBjb2RlIHRvIHBhcnNlIGFyYml0cmFyeSBIVE1MIGZyYWdtZW50cyxcbiAgICAgICAgICAgIC8vIGZvciBleGFtcGxlIDx0cj4gZWxlbWVudHMgd2hpY2ggYXJlIG5vdCBub3JtYWxseSBhbGxvd2VkIHRvIGV4aXN0IG9uIHRoZWlyIG93bi5cbiAgICAgICAgICAgIC8vIElmIHlvdSd2ZSByZWZlcmVuY2VkIGpRdWVyeSB3ZSdsbCB1c2UgdGhhdCByYXRoZXIgdGhhbiBkdXBsaWNhdGluZyBpdHMgY29kZS5cbiAgICAgICAgICAgIGlmIChqUXVlcnlJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGpRdWVyeUluc3RhbmNlKG5vZGUpWydodG1sJ10oaHRtbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIC4uLiBvdGhlcndpc2UsIHVzZSBLTydzIG93biBwYXJzaW5nIGxvZ2ljLlxuICAgICAgICAgICAgICAgIHZhciBwYXJzZWROb2RlcyA9IGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50KGh0bWwsIG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJzZWROb2Rlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChwYXJzZWROb2Rlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxua28uZXhwb3J0U3ltYm9sKCd1dGlscy5wYXJzZUh0bWxGcmFnbWVudCcsIGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50KTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuc2V0SHRtbCcsIGtvLnV0aWxzLnNldEh0bWwpO1xuXG5rby5tZW1vaXphdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1lbW9zID0ge307XG5cbiAgICBmdW5jdGlvbiByYW5kb21NYXg4SGV4Q2hhcnMoKSB7XG4gICAgICAgIHJldHVybiAoKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwMDAwMCkgfCAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUlkKCkge1xuICAgICAgICByZXR1cm4gcmFuZG9tTWF4OEhleENoYXJzKCkgKyByYW5kb21NYXg4SGV4Q2hhcnMoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZE1lbW9Ob2Rlcyhyb290Tm9kZSwgYXBwZW5kVG9BcnJheSkge1xuICAgICAgICBpZiAoIXJvb3ROb2RlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAocm9vdE5vZGUubm9kZVR5cGUgPT0gOCkge1xuICAgICAgICAgICAgdmFyIG1lbW9JZCA9IGtvLm1lbW9pemF0aW9uLnBhcnNlTWVtb1RleHQocm9vdE5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgICAgIGlmIChtZW1vSWQgIT0gbnVsbClcbiAgICAgICAgICAgICAgICBhcHBlbmRUb0FycmF5LnB1c2goeyBkb21Ob2RlOiByb290Tm9kZSwgbWVtb0lkOiBtZW1vSWQgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAocm9vdE5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNoaWxkTm9kZXMgPSByb290Tm9kZS5jaGlsZE5vZGVzLCBqID0gY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICAgICAgZmluZE1lbW9Ob2RlcyhjaGlsZE5vZGVzW2ldLCBhcHBlbmRUb0FycmF5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIG1lbW9pemU6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbiBvbmx5IHBhc3MgYSBmdW5jdGlvbiB0byBrby5tZW1vaXphdGlvbi5tZW1vaXplKClcIik7XG4gICAgICAgICAgICB2YXIgbWVtb0lkID0gZ2VuZXJhdGVSYW5kb21JZCgpO1xuICAgICAgICAgICAgbWVtb3NbbWVtb0lkXSA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgcmV0dXJuIFwiPCEtLVtrb19tZW1vOlwiICsgbWVtb0lkICsgXCJdLS0+XCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdW5tZW1vaXplOiBmdW5jdGlvbiAobWVtb0lkLCBjYWxsYmFja1BhcmFtcykge1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gbWVtb3NbbWVtb0lkXTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYW55IG1lbW8gd2l0aCBJRCBcIiArIG1lbW9JZCArIFwiLiBQZXJoYXBzIGl0J3MgYWxyZWFkeSBiZWVuIHVubWVtb2l6ZWQuXCIpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBjYWxsYmFja1BhcmFtcyB8fCBbXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgZGVsZXRlIG1lbW9zW21lbW9JZF07IH1cbiAgICAgICAgfSxcblxuICAgICAgICB1bm1lbW9pemVEb21Ob2RlQW5kRGVzY2VuZGFudHM6IGZ1bmN0aW9uIChkb21Ob2RlLCBleHRyYUNhbGxiYWNrUGFyYW1zQXJyYXkpIHtcbiAgICAgICAgICAgIHZhciBtZW1vcyA9IFtdO1xuICAgICAgICAgICAgZmluZE1lbW9Ob2Rlcyhkb21Ob2RlLCBtZW1vcyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IG1lbW9zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBub2RlID0gbWVtb3NbaV0uZG9tTm9kZTtcbiAgICAgICAgICAgICAgICB2YXIgY29tYmluZWRQYXJhbXMgPSBbbm9kZV07XG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhQ2FsbGJhY2tQYXJhbXNBcnJheSlcbiAgICAgICAgICAgICAgICAgICAga28udXRpbHMuYXJyYXlQdXNoQWxsKGNvbWJpbmVkUGFyYW1zLCBleHRyYUNhbGxiYWNrUGFyYW1zQXJyYXkpO1xuICAgICAgICAgICAgICAgIGtvLm1lbW9pemF0aW9uLnVubWVtb2l6ZShtZW1vc1tpXS5tZW1vSWQsIGNvbWJpbmVkUGFyYW1zKTtcbiAgICAgICAgICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IFwiXCI7IC8vIE5ldXRlciB0aGlzIG5vZGUgc28gd2UgZG9uJ3QgdHJ5IHRvIHVubWVtb2l6ZSBpdCBhZ2FpblxuICAgICAgICAgICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTsgLy8gSWYgcG9zc2libGUsIGVyYXNlIGl0IHRvdGFsbHkgKG5vdCBhbHdheXMgcG9zc2libGUgLSBzb21lb25lIGVsc2UgbWlnaHQganVzdCBob2xkIGEgcmVmZXJlbmNlIHRvIGl0IHRoZW4gY2FsbCB1bm1lbW9pemVEb21Ob2RlQW5kRGVzY2VuZGFudHMgYWdhaW4pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2VNZW1vVGV4dDogZnVuY3Rpb24gKG1lbW9UZXh0KSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSBtZW1vVGV4dC5tYXRjaCgvXlxcW2tvX21lbW9cXDooLio/KVxcXSQvKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xuXG5rby5leHBvcnRTeW1ib2woJ21lbW9pemF0aW9uJywga28ubWVtb2l6YXRpb24pO1xua28uZXhwb3J0U3ltYm9sKCdtZW1vaXphdGlvbi5tZW1vaXplJywga28ubWVtb2l6YXRpb24ubWVtb2l6ZSk7XG5rby5leHBvcnRTeW1ib2woJ21lbW9pemF0aW9uLnVubWVtb2l6ZScsIGtvLm1lbW9pemF0aW9uLnVubWVtb2l6ZSk7XG5rby5leHBvcnRTeW1ib2woJ21lbW9pemF0aW9uLnBhcnNlTWVtb1RleHQnLCBrby5tZW1vaXphdGlvbi5wYXJzZU1lbW9UZXh0KTtcbmtvLmV4cG9ydFN5bWJvbCgnbWVtb2l6YXRpb24udW5tZW1vaXplRG9tTm9kZUFuZERlc2NlbmRhbnRzJywga28ubWVtb2l6YXRpb24udW5tZW1vaXplRG9tTm9kZUFuZERlc2NlbmRhbnRzKTtcbmtvLnRhc2tzID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2NoZWR1bGVyLFxuICAgICAgICB0YXNrUXVldWUgPSBbXSxcbiAgICAgICAgdGFza1F1ZXVlTGVuZ3RoID0gMCxcbiAgICAgICAgbmV4dEhhbmRsZSA9IDEsXG4gICAgICAgIG5leHRJbmRleFRvUHJvY2VzcyA9IDA7XG5cbiAgICBpZiAod2luZG93WydNdXRhdGlvbk9ic2VydmVyJ10pIHtcbiAgICAgICAgLy8gQ2hyb21lIDI3KywgRmlyZWZveCAxNCssIElFIDExKywgT3BlcmEgMTUrLCBTYWZhcmkgNi4xK1xuICAgICAgICAvLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRrYWFudG9ub3YvYmx1ZWJpcmQgKiBDb3B5cmlnaHQgKGMpIDIwMTQgUGV0a2EgQW50b25vdiAqIExpY2Vuc2U6IE1JVFxuICAgICAgICBzY2hlZHVsZXIgPSAoZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKS5vYnNlcnZlKGRpdiwge2F0dHJpYnV0ZXM6IHRydWV9KTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IGRpdi5jbGFzc0xpc3QudG9nZ2xlKFwiZm9vXCIpOyB9O1xuICAgICAgICB9KShzY2hlZHVsZWRQcm9jZXNzKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50ICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBJRSA2LTEwXG4gICAgICAgIC8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL1l1enVKUy9zZXRJbW1lZGlhdGUgKiBDb3B5cmlnaHQgKGMpIDIwMTIgQmFybmVzYW5kbm9ibGUuY29tLCBsbGMsIERvbmF2b24gV2VzdCwgYW5kIERvbWVuaWMgRGVuaWNvbGEgKiBMaWNlbnNlOiBNSVRcbiAgICAgICAgc2NoZWR1bGVyID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1Rhc2tzKCkge1xuICAgICAgICBpZiAodGFza1F1ZXVlTGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBFYWNoIG1hcmsgcmVwcmVzZW50cyB0aGUgZW5kIG9mIGEgbG9naWNhbCBncm91cCBvZiB0YXNrcyBhbmQgdGhlIG51bWJlciBvZiB0aGVzZSBncm91cHMgaXNcbiAgICAgICAgICAgIC8vIGxpbWl0ZWQgdG8gcHJldmVudCB1bmNoZWNrZWQgcmVjdXJzaW9uLlxuICAgICAgICAgICAgdmFyIG1hcmsgPSB0YXNrUXVldWVMZW5ndGgsIGNvdW50TWFya3MgPSAwO1xuXG4gICAgICAgICAgICAvLyBuZXh0SW5kZXhUb1Byb2Nlc3Mga2VlcHMgdHJhY2sgb2Ygd2hlcmUgd2UgYXJlIGluIHRoZSBxdWV1ZTsgcHJvY2Vzc1Rhc2tzIGNhbiBiZSBjYWxsZWQgcmVjdXJzaXZlbHkgd2l0aG91dCBpc3N1ZVxuICAgICAgICAgICAgZm9yICh2YXIgdGFzazsgbmV4dEluZGV4VG9Qcm9jZXNzIDwgdGFza1F1ZXVlTGVuZ3RoOyApIHtcbiAgICAgICAgICAgICAgICBpZiAodGFzayA9IHRhc2tRdWV1ZVtuZXh0SW5kZXhUb1Byb2Nlc3MrK10pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRJbmRleFRvUHJvY2VzcyA+IG1hcmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgrK2NvdW50TWFya3MgPj0gNTAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRJbmRleFRvUHJvY2VzcyA9IHRhc2tRdWV1ZUxlbmd0aDsgICAvLyBza2lwIGFsbCB0YXNrcyByZW1haW5pbmcgaW4gdGhlIHF1ZXVlIHNpbmNlIGFueSBvZiB0aGVtIGNvdWxkIGJlIGNhdXNpbmcgdGhlIHJlY3Vyc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLmRlZmVyRXJyb3IoRXJyb3IoXCInVG9vIG11Y2ggcmVjdXJzaW9uJyBhZnRlciBwcm9jZXNzaW5nIFwiICsgY291bnRNYXJrcyArIFwiIHRhc2sgZ3JvdXBzLlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrID0gdGFza1F1ZXVlTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrby51dGlscy5kZWZlckVycm9yKGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlZFByb2Nlc3MoKSB7XG4gICAgICAgIHByb2Nlc3NUYXNrcygpO1xuXG4gICAgICAgIC8vIFJlc2V0IHRoZSBxdWV1ZVxuICAgICAgICBuZXh0SW5kZXhUb1Byb2Nlc3MgPSB0YXNrUXVldWVMZW5ndGggPSB0YXNrUXVldWUubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2hlZHVsZVRhc2tQcm9jZXNzaW5nKCkge1xuICAgICAgICBrby50YXNrc1snc2NoZWR1bGVyJ10oc2NoZWR1bGVkUHJvY2Vzcyk7XG4gICAgfVxuXG4gICAgdmFyIHRhc2tzID0ge1xuICAgICAgICAnc2NoZWR1bGVyJzogc2NoZWR1bGVyLCAgICAgLy8gQWxsb3cgb3ZlcnJpZGluZyB0aGUgc2NoZWR1bGVyXG5cbiAgICAgICAgc2NoZWR1bGU6IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICAgICAgICBpZiAoIXRhc2tRdWV1ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlVGFza1Byb2Nlc3NpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFza1F1ZXVlW3Rhc2tRdWV1ZUxlbmd0aCsrXSA9IGZ1bmM7XG4gICAgICAgICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gaGFuZGxlIC0gKG5leHRIYW5kbGUgLSB0YXNrUXVldWVMZW5ndGgpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IG5leHRJbmRleFRvUHJvY2VzcyAmJiBpbmRleCA8IHRhc2tRdWV1ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRhc2tRdWV1ZVtpbmRleF0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEZvciB0ZXN0aW5nIG9ubHk6IHJlc2V0IHRoZSBxdWV1ZSBhbmQgcmV0dXJuIHRoZSBwcmV2aW91cyBxdWV1ZSBsZW5ndGhcbiAgICAgICAgJ3Jlc2V0Rm9yVGVzdGluZyc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSB0YXNrUXVldWVMZW5ndGggLSBuZXh0SW5kZXhUb1Byb2Nlc3M7XG4gICAgICAgICAgICBuZXh0SW5kZXhUb1Byb2Nlc3MgPSB0YXNrUXVldWVMZW5ndGggPSB0YXNrUXVldWUubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcnVuRWFybHk6IHByb2Nlc3NUYXNrc1xuICAgIH07XG5cbiAgICByZXR1cm4gdGFza3M7XG59KSgpO1xuXG5rby5leHBvcnRTeW1ib2woJ3Rhc2tzJywga28udGFza3MpO1xua28uZXhwb3J0U3ltYm9sKCd0YXNrcy5zY2hlZHVsZScsIGtvLnRhc2tzLnNjaGVkdWxlKTtcbi8va28uZXhwb3J0U3ltYm9sKCd0YXNrcy5jYW5jZWwnLCBrby50YXNrcy5jYW5jZWwpOyAgXCJjYW5jZWxcIiBpc24ndCBtaW5pZmllZFxua28uZXhwb3J0U3ltYm9sKCd0YXNrcy5ydW5FYXJseScsIGtvLnRhc2tzLnJ1bkVhcmx5KTtcbmtvLmV4dGVuZGVycyA9IHtcbiAgICAndGhyb3R0bGUnOiBmdW5jdGlvbih0YXJnZXQsIHRpbWVvdXQpIHtcbiAgICAgICAgLy8gVGhyb3R0bGluZyBtZWFucyB0d28gdGhpbmdzOlxuXG4gICAgICAgIC8vICgxKSBGb3IgZGVwZW5kZW50IG9ic2VydmFibGVzLCB3ZSB0aHJvdHRsZSAqZXZhbHVhdGlvbnMqIHNvIHRoYXQsIG5vIG1hdHRlciBob3cgZmFzdCBpdHMgZGVwZW5kZW5jaWVzXG4gICAgICAgIC8vICAgICBub3RpZnkgdXBkYXRlcywgdGhlIHRhcmdldCBkb2Vzbid0IHJlLWV2YWx1YXRlIChhbmQgaGVuY2UgZG9lc24ndCBub3RpZnkpIGZhc3RlciB0aGFuIGEgY2VydGFpbiByYXRlXG4gICAgICAgIHRhcmdldFsndGhyb3R0bGVFdmFsdWF0aW9uJ10gPSB0aW1lb3V0O1xuXG4gICAgICAgIC8vICgyKSBGb3Igd3JpdGFibGUgdGFyZ2V0cyAob2JzZXJ2YWJsZXMsIG9yIHdyaXRhYmxlIGRlcGVuZGVudCBvYnNlcnZhYmxlcyksIHdlIHRocm90dGxlICp3cml0ZXMqXG4gICAgICAgIC8vICAgICBzbyB0aGUgdGFyZ2V0IGNhbm5vdCBjaGFuZ2UgdmFsdWUgc3luY2hyb25vdXNseSBvciBmYXN0ZXIgdGhhbiBhIGNlcnRhaW4gcmF0ZVxuICAgICAgICB2YXIgd3JpdGVUaW1lb3V0SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICByZXR1cm4ga28uZGVwZW5kZW50T2JzZXJ2YWJsZSh7XG4gICAgICAgICAgICAncmVhZCc6IHRhcmdldCxcbiAgICAgICAgICAgICd3cml0ZSc6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHdyaXRlVGltZW91dEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB3cml0ZVRpbWVvdXRJbnN0YW5jZSA9IGtvLnV0aWxzLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAncmF0ZUxpbWl0JzogZnVuY3Rpb24odGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciB0aW1lb3V0LCBtZXRob2QsIGxpbWl0RnVuY3Rpb247XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gb3B0aW9ucztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBvcHRpb25zWyd0aW1lb3V0J107XG4gICAgICAgICAgICBtZXRob2QgPSBvcHRpb25zWydtZXRob2QnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJhdGVMaW1pdCBzdXBlcnNlZGVzIGRlZmVycmVkIHVwZGF0ZXNcbiAgICAgICAgdGFyZ2V0Ll9kZWZlclVwZGF0ZXMgPSBmYWxzZTtcblxuICAgICAgICBsaW1pdEZ1bmN0aW9uID0gbWV0aG9kID09ICdub3RpZnlXaGVuQ2hhbmdlc1N0b3AnID8gIGRlYm91bmNlIDogdGhyb3R0bGU7XG4gICAgICAgIHRhcmdldC5saW1pdChmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGxpbWl0RnVuY3Rpb24oY2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgJ2RlZmVycmVkJzogZnVuY3Rpb24odGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zICE9PSB0cnVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcXCdkZWZlcnJlZFxcJyBleHRlbmRlciBvbmx5IGFjY2VwdHMgdGhlIHZhbHVlIFxcJ3RydWVcXCcsIGJlY2F1c2UgaXQgaXMgbm90IHN1cHBvcnRlZCB0byB0dXJuIGRlZmVycmFsIG9mZiBvbmNlIGVuYWJsZWQuJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGFyZ2V0Ll9kZWZlclVwZGF0ZXMpIHtcbiAgICAgICAgICAgIHRhcmdldC5fZGVmZXJVcGRhdGVzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRhcmdldC5saW1pdChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlLFxuICAgICAgICAgICAgICAgICAgICBpZ25vcmVVcGRhdGVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZ25vcmVVcGRhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrby50YXNrcy5jYW5jZWwoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZSA9IGtvLnRhc2tzLnNjaGVkdWxlKGNhbGxiYWNrKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVVcGRhdGVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbJ25vdGlmeVN1YnNjcmliZXJzJ10odW5kZWZpbmVkLCAnZGlydHknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlVXBkYXRlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgICdub3RpZnknOiBmdW5jdGlvbih0YXJnZXQsIG5vdGlmeVdoZW4pIHtcbiAgICAgICAgdGFyZ2V0W1wiZXF1YWxpdHlDb21wYXJlclwiXSA9IG5vdGlmeVdoZW4gPT0gXCJhbHdheXNcIiA/XG4gICAgICAgICAgICBudWxsIDogIC8vIG51bGwgZXF1YWxpdHlDb21wYXJlciBtZWFucyB0byBhbHdheXMgbm90aWZ5XG4gICAgICAgICAgICB2YWx1ZXNBcmVQcmltaXRpdmVBbmRFcXVhbDtcbiAgICB9XG59O1xuXG52YXIgcHJpbWl0aXZlVHlwZXMgPSB7ICd1bmRlZmluZWQnOjEsICdib29sZWFuJzoxLCAnbnVtYmVyJzoxLCAnc3RyaW5nJzoxIH07XG5mdW5jdGlvbiB2YWx1ZXNBcmVQcmltaXRpdmVBbmRFcXVhbChhLCBiKSB7XG4gICAgdmFyIG9sZFZhbHVlSXNQcmltaXRpdmUgPSAoYSA9PT0gbnVsbCkgfHwgKHR5cGVvZihhKSBpbiBwcmltaXRpdmVUeXBlcyk7XG4gICAgcmV0dXJuIG9sZFZhbHVlSXNQcmltaXRpdmUgPyAoYSA9PT0gYikgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdGhyb3R0bGUoY2FsbGJhY2ssIHRpbWVvdXQpIHtcbiAgICB2YXIgdGltZW91dEluc3RhbmNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGltZW91dEluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aW1lb3V0SW5zdGFuY2UgPSBrby51dGlscy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZGVib3VuY2UoY2FsbGJhY2ssIHRpbWVvdXQpIHtcbiAgICB2YXIgdGltZW91dEluc3RhbmNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SW5zdGFuY2UpO1xuICAgICAgICB0aW1lb3V0SW5zdGFuY2UgPSBrby51dGlscy5zZXRUaW1lb3V0KGNhbGxiYWNrLCB0aW1lb3V0KTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBhcHBseUV4dGVuZGVycyhyZXF1ZXN0ZWRFeHRlbmRlcnMpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAocmVxdWVzdGVkRXh0ZW5kZXJzKSB7XG4gICAgICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2gocmVxdWVzdGVkRXh0ZW5kZXJzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZXh0ZW5kZXJIYW5kbGVyID0ga28uZXh0ZW5kZXJzW2tleV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4dGVuZGVySGFuZGxlciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZXh0ZW5kZXJIYW5kbGVyKHRhcmdldCwgdmFsdWUpIHx8IHRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmtvLmV4cG9ydFN5bWJvbCgnZXh0ZW5kZXJzJywga28uZXh0ZW5kZXJzKTtcblxua28uc3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHRhcmdldCwgY2FsbGJhY2ssIGRpc3Bvc2VDYWxsYmFjaykge1xuICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5kaXNwb3NlQ2FsbGJhY2sgPSBkaXNwb3NlQ2FsbGJhY2s7XG4gICAgdGhpcy5pc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAga28uZXhwb3J0UHJvcGVydHkodGhpcywgJ2Rpc3Bvc2UnLCB0aGlzLmRpc3Bvc2UpO1xufTtcbmtvLnN1YnNjcmlwdGlvbi5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzRGlzcG9zZWQgPSB0cnVlO1xuICAgIHRoaXMuZGlzcG9zZUNhbGxiYWNrKCk7XG59O1xuXG5rby5zdWJzY3JpYmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAga28udXRpbHMuc2V0UHJvdG90eXBlT2ZPckV4dGVuZCh0aGlzLCBrb19zdWJzY3JpYmFibGVfZm4pO1xuICAgIGtvX3N1YnNjcmliYWJsZV9mbi5pbml0KHRoaXMpO1xufVxuXG52YXIgZGVmYXVsdEV2ZW50ID0gXCJjaGFuZ2VcIjtcblxuLy8gTW92ZWQgb3V0IG9mIFwibGltaXRcIiB0byBhdm9pZCB0aGUgZXh0cmEgY2xvc3VyZVxuZnVuY3Rpb24gbGltaXROb3RpZnlTdWJzY3JpYmVycyh2YWx1ZSwgZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50IHx8IGV2ZW50ID09PSBkZWZhdWx0RXZlbnQpIHtcbiAgICAgICAgdGhpcy5fbGltaXRDaGFuZ2UodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQgPT09ICdiZWZvcmVDaGFuZ2UnKSB7XG4gICAgICAgIHRoaXMuX2xpbWl0QmVmb3JlQ2hhbmdlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9vcmlnTm90aWZ5U3Vic2NyaWJlcnModmFsdWUsIGV2ZW50KTtcbiAgICB9XG59XG5cbnZhciBrb19zdWJzY3JpYmFibGVfZm4gPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuX3N1YnNjcmlwdGlvbnMgPSB7IFwiY2hhbmdlXCI6IFtdIH07XG4gICAgICAgIGluc3RhbmNlLl92ZXJzaW9uTnVtYmVyID0gMTtcbiAgICB9LFxuXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGNhbGxiYWNrVGFyZ2V0LCBldmVudCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgZXZlbnQgPSBldmVudCB8fCBkZWZhdWx0RXZlbnQ7XG4gICAgICAgIHZhciBib3VuZENhbGxiYWNrID0gY2FsbGJhY2tUYXJnZXQgPyBjYWxsYmFjay5iaW5kKGNhbGxiYWNrVGFyZ2V0KSA6IGNhbGxiYWNrO1xuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcga28uc3Vic2NyaXB0aW9uKHNlbGYsIGJvdW5kQ2FsbGJhY2ssIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5UmVtb3ZlSXRlbShzZWxmLl9zdWJzY3JpcHRpb25zW2V2ZW50XSwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGlmIChzZWxmLmFmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlKVxuICAgICAgICAgICAgICAgIHNlbGYuYWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmUoZXZlbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc2VsZi5iZWZvcmVTdWJzY3JpcHRpb25BZGQpXG4gICAgICAgICAgICBzZWxmLmJlZm9yZVN1YnNjcmlwdGlvbkFkZChldmVudCk7XG5cbiAgICAgICAgaWYgKCFzZWxmLl9zdWJzY3JpcHRpb25zW2V2ZW50XSlcbiAgICAgICAgICAgIHNlbGYuX3N1YnNjcmlwdGlvbnNbZXZlbnRdID0gW107XG4gICAgICAgIHNlbGYuX3N1YnNjcmlwdGlvbnNbZXZlbnRdLnB1c2goc3Vic2NyaXB0aW9uKTtcblxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH0sXG5cbiAgICBcIm5vdGlmeVN1YnNjcmliZXJzXCI6IGZ1bmN0aW9uICh2YWx1ZVRvTm90aWZ5LCBldmVudCkge1xuICAgICAgICBldmVudCA9IGV2ZW50IHx8IGRlZmF1bHRFdmVudDtcbiAgICAgICAgaWYgKGV2ZW50ID09PSBkZWZhdWx0RXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmVyc2lvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1N1YnNjcmlwdGlvbnNGb3JFdmVudChldmVudCkpIHtcbiAgICAgICAgICAgIHZhciBzdWJzID0gZXZlbnQgPT09IGRlZmF1bHRFdmVudCAmJiB0aGlzLl9jaGFuZ2VTdWJzY3JpcHRpb25zIHx8IHRoaXMuX3N1YnNjcmlwdGlvbnNbZXZlbnRdLnNsaWNlKDApO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmJlZ2luKCk7IC8vIEJlZ2luIHN1cHByZXNzaW5nIGRlcGVuZGVuY3kgZGV0ZWN0aW9uIChieSBzZXR0aW5nIHRoZSB0b3AgZnJhbWUgdG8gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBzdWJzY3JpcHRpb247IHN1YnNjcmlwdGlvbiA9IHN1YnNbaV07ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiBjYXNlIGEgc3Vic2NyaXB0aW9uIHdhcyBkaXNwb3NlZCBkdXJpbmcgdGhlIGFycmF5Rm9yRWFjaCBjeWNsZSwgY2hlY2tcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGlzRGlzcG9zZWQgb24gZWFjaCBzdWJzY3JpcHRpb24gYmVmb3JlIGludm9raW5nIGl0cyBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbi5pc0Rpc3Bvc2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmNhbGxiYWNrKHZhbHVlVG9Ob3RpZnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAga28uZGVwZW5kZW5jeURldGVjdGlvbi5lbmQoKTsgLy8gRW5kIHN1cHByZXNzaW5nIGRlcGVuZGVuY3kgZGV0ZWN0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0VmVyc2lvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmVyc2lvbk51bWJlcjtcbiAgICB9LFxuXG4gICAgaGFzQ2hhbmdlZDogZnVuY3Rpb24gKHZlcnNpb25Ub0NoZWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZlcnNpb24oKSAhPT0gdmVyc2lvblRvQ2hlY2s7XG4gICAgfSxcblxuICAgIHVwZGF0ZVZlcnNpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKyt0aGlzLl92ZXJzaW9uTnVtYmVyO1xuICAgIH0sXG5cbiAgICBsaW1pdDogZnVuY3Rpb24obGltaXRGdW5jdGlvbikge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIHNlbGZJc09ic2VydmFibGUgPSBrby5pc09ic2VydmFibGUoc2VsZiksXG4gICAgICAgICAgICBpZ25vcmVCZWZvcmVDaGFuZ2UsIG5vdGlmeU5leHRDaGFuZ2UsIHByZXZpb3VzVmFsdWUsIHBlbmRpbmdWYWx1ZSwgYmVmb3JlQ2hhbmdlID0gJ2JlZm9yZUNoYW5nZSc7XG5cbiAgICAgICAgaWYgKCFzZWxmLl9vcmlnTm90aWZ5U3Vic2NyaWJlcnMpIHtcbiAgICAgICAgICAgIHNlbGYuX29yaWdOb3RpZnlTdWJzY3JpYmVycyA9IHNlbGZbXCJub3RpZnlTdWJzY3JpYmVyc1wiXTtcbiAgICAgICAgICAgIHNlbGZbXCJub3RpZnlTdWJzY3JpYmVyc1wiXSA9IGxpbWl0Tm90aWZ5U3Vic2NyaWJlcnM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmluaXNoID0gbGltaXRGdW5jdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuX25vdGlmaWNhdGlvbklzUGVuZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBJZiBhbiBvYnNlcnZhYmxlIHByb3ZpZGVkIGEgcmVmZXJlbmNlIHRvIGl0c2VsZiwgYWNjZXNzIGl0IHRvIGdldCB0aGUgbGF0ZXN0IHZhbHVlLlxuICAgICAgICAgICAgLy8gVGhpcyBhbGxvd3MgY29tcHV0ZWQgb2JzZXJ2YWJsZXMgdG8gZGVsYXkgY2FsY3VsYXRpbmcgdGhlaXIgdmFsdWUgdW50aWwgbmVlZGVkLlxuICAgICAgICAgICAgaWYgKHNlbGZJc09ic2VydmFibGUgJiYgcGVuZGluZ1ZhbHVlID09PSBzZWxmKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZ1ZhbHVlID0gc2VsZi5fZXZhbElmQ2hhbmdlZCA/IHNlbGYuX2V2YWxJZkNoYW5nZWQoKSA6IHNlbGYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzaG91bGROb3RpZnkgPSBub3RpZnlOZXh0Q2hhbmdlIHx8IHNlbGYuaXNEaWZmZXJlbnQocHJldmlvdXNWYWx1ZSwgcGVuZGluZ1ZhbHVlKTtcblxuICAgICAgICAgICAgbm90aWZ5TmV4dENoYW5nZSA9IGlnbm9yZUJlZm9yZUNoYW5nZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoc2hvdWxkTm90aWZ5KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fb3JpZ05vdGlmeVN1YnNjcmliZXJzKHByZXZpb3VzVmFsdWUgPSBwZW5kaW5nVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzZWxmLl9saW1pdENoYW5nZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBzZWxmLl9jaGFuZ2VTdWJzY3JpcHRpb25zID0gc2VsZi5fc3Vic2NyaXB0aW9uc1tkZWZhdWx0RXZlbnRdLnNsaWNlKDApO1xuICAgICAgICAgICAgc2VsZi5fbm90aWZpY2F0aW9uSXNQZW5kaW5nID0gaWdub3JlQmVmb3JlQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgIHBlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgZmluaXNoKCk7XG4gICAgICAgIH07XG4gICAgICAgIHNlbGYuX2xpbWl0QmVmb3JlQ2hhbmdlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghaWdub3JlQmVmb3JlQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHNlbGYuX29yaWdOb3RpZnlTdWJzY3JpYmVycyh2YWx1ZSwgYmVmb3JlQ2hhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc2VsZi5fbm90aWZ5TmV4dENoYW5nZUlmVmFsdWVJc0RpZmZlcmVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuaXNEaWZmZXJlbnQocHJldmlvdXNWYWx1ZSwgc2VsZi5wZWVrKHRydWUgLypldmFsdWF0ZSovKSkpIHtcbiAgICAgICAgICAgICAgICBub3RpZnlOZXh0Q2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgaGFzU3Vic2NyaXB0aW9uc0ZvckV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uc1tldmVudF0gJiYgdGhpcy5fc3Vic2NyaXB0aW9uc1tldmVudF0ubGVuZ3RoO1xuICAgIH0sXG5cbiAgICBnZXRTdWJzY3JpcHRpb25zQ291bnQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25zW2V2ZW50XSAmJiB0aGlzLl9zdWJzY3JpcHRpb25zW2V2ZW50XS5sZW5ndGggfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0b3RhbCA9IDA7XG4gICAgICAgICAgICBrby51dGlscy5vYmplY3RGb3JFYWNoKHRoaXMuX3N1YnNjcmlwdGlvbnMsIGZ1bmN0aW9uKGV2ZW50TmFtZSwgc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgIT09ICdkaXJ0eScpXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsICs9IHN1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaXNEaWZmZXJlbnQ6IGZ1bmN0aW9uKG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gIXRoaXNbJ2VxdWFsaXR5Q29tcGFyZXInXSB8fCAhdGhpc1snZXF1YWxpdHlDb21wYXJlciddKG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgfSxcblxuICAgIGV4dGVuZDogYXBwbHlFeHRlbmRlcnNcbn07XG5cbmtvLmV4cG9ydFByb3BlcnR5KGtvX3N1YnNjcmliYWJsZV9mbiwgJ3N1YnNjcmliZScsIGtvX3N1YnNjcmliYWJsZV9mbi5zdWJzY3JpYmUpO1xua28uZXhwb3J0UHJvcGVydHkoa29fc3Vic2NyaWJhYmxlX2ZuLCAnZXh0ZW5kJywga29fc3Vic2NyaWJhYmxlX2ZuLmV4dGVuZCk7XG5rby5leHBvcnRQcm9wZXJ0eShrb19zdWJzY3JpYmFibGVfZm4sICdnZXRTdWJzY3JpcHRpb25zQ291bnQnLCBrb19zdWJzY3JpYmFibGVfZm4uZ2V0U3Vic2NyaXB0aW9uc0NvdW50KTtcblxuLy8gRm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBwcm90byBhc3NpZ25tZW50LCB3ZSBvdmVyd3JpdGUgdGhlIHByb3RvdHlwZSBvZiBlYWNoXG4vLyBvYnNlcnZhYmxlIGluc3RhbmNlLiBTaW5jZSBvYnNlcnZhYmxlcyBhcmUgZnVuY3Rpb25zLCB3ZSBuZWVkIEZ1bmN0aW9uLnByb3RvdHlwZVxuLy8gdG8gc3RpbGwgYmUgaW4gdGhlIHByb3RvdHlwZSBjaGFpbi5cbmlmIChrby51dGlscy5jYW5TZXRQcm90b3R5cGUpIHtcbiAgICBrby51dGlscy5zZXRQcm90b3R5cGVPZihrb19zdWJzY3JpYmFibGVfZm4sIEZ1bmN0aW9uLnByb3RvdHlwZSk7XG59XG5cbmtvLnN1YnNjcmliYWJsZVsnZm4nXSA9IGtvX3N1YnNjcmliYWJsZV9mbjtcblxuXG5rby5pc1N1YnNjcmliYWJsZSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHJldHVybiBpbnN0YW5jZSAhPSBudWxsICYmIHR5cGVvZiBpbnN0YW5jZS5zdWJzY3JpYmUgPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBpbnN0YW5jZVtcIm5vdGlmeVN1YnNjcmliZXJzXCJdID09IFwiZnVuY3Rpb25cIjtcbn07XG5cbmtvLmV4cG9ydFN5bWJvbCgnc3Vic2NyaWJhYmxlJywga28uc3Vic2NyaWJhYmxlKTtcbmtvLmV4cG9ydFN5bWJvbCgnaXNTdWJzY3JpYmFibGUnLCBrby5pc1N1YnNjcmliYWJsZSk7XG5cbmtvLmNvbXB1dGVkQ29udGV4dCA9IGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBvdXRlckZyYW1lcyA9IFtdLFxuICAgICAgICBjdXJyZW50RnJhbWUsXG4gICAgICAgIGxhc3RJZCA9IDA7XG5cbiAgICAvLyBSZXR1cm4gYSB1bmlxdWUgSUQgdGhhdCBjYW4gYmUgYXNzaWduZWQgdG8gYW4gb2JzZXJ2YWJsZSBmb3IgZGVwZW5kZW5jeSB0cmFja2luZy5cbiAgICAvLyBUaGVvcmV0aWNhbGx5LCB5b3UgY291bGQgZXZlbnR1YWxseSBvdmVyZmxvdyB0aGUgbnVtYmVyIHN0b3JhZ2Ugc2l6ZSwgcmVzdWx0aW5nXG4gICAgLy8gaW4gZHVwbGljYXRlIElEcy4gQnV0IGluIEphdmFTY3JpcHQsIHRoZSBsYXJnZXN0IGV4YWN0IGludGVncmFsIHZhbHVlIGlzIDJeNTNcbiAgICAvLyBvciA5LDAwNywxOTksMjU0LDc0MCw5OTIuIElmIHlvdSBjcmVhdGVkIDEsMDAwLDAwMCBJRHMgcGVyIHNlY29uZCwgaXQgd291bGRcbiAgICAvLyB0YWtlIG92ZXIgMjg1IHllYXJzIHRvIHJlYWNoIHRoYXQgbnVtYmVyLlxuICAgIC8vIFJlZmVyZW5jZSBodHRwOi8vYmxvZy52amV1eC5jb20vMjAxMC9qYXZhc2NyaXB0L2phdmFzY3JpcHQtbWF4X2ludC1udW1iZXItbGltaXRzLmh0bWxcbiAgICBmdW5jdGlvbiBnZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuICsrbGFzdElkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJlZ2luKG9wdGlvbnMpIHtcbiAgICAgICAgb3V0ZXJGcmFtZXMucHVzaChjdXJyZW50RnJhbWUpO1xuICAgICAgICBjdXJyZW50RnJhbWUgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAgICAgY3VycmVudEZyYW1lID0gb3V0ZXJGcmFtZXMucG9wKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmVnaW46IGJlZ2luLFxuXG4gICAgICAgIGVuZDogZW5kLFxuXG4gICAgICAgIHJlZ2lzdGVyRGVwZW5kZW5jeTogZnVuY3Rpb24gKHN1YnNjcmliYWJsZSkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRGcmFtZSkge1xuICAgICAgICAgICAgICAgIGlmICgha28uaXNTdWJzY3JpYmFibGUoc3Vic2NyaWJhYmxlKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBzdWJzY3JpYmFibGUgdGhpbmdzIGNhbiBhY3QgYXMgZGVwZW5kZW5jaWVzXCIpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRGcmFtZS5jYWxsYmFjay5jYWxsKGN1cnJlbnRGcmFtZS5jYWxsYmFja1RhcmdldCwgc3Vic2NyaWJhYmxlLCBzdWJzY3JpYmFibGUuX2lkIHx8IChzdWJzY3JpYmFibGUuX2lkID0gZ2V0SWQoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGlnbm9yZTogZnVuY3Rpb24gKGNhbGxiYWNrLCBjYWxsYmFja1RhcmdldCwgY2FsbGJhY2tBcmdzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGJlZ2luKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrVGFyZ2V0LCBjYWxsYmFja0FyZ3MgfHwgW10pO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBlbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXREZXBlbmRlbmNpZXNDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRGcmFtZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEZyYW1lLmNvbXB1dGVkLmdldERlcGVuZGVuY2llc0NvdW50KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNJbml0aWFsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50RnJhbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRGcmFtZS5pc0luaXRpYWw7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxua28uZXhwb3J0U3ltYm9sKCdjb21wdXRlZENvbnRleHQnLCBrby5jb21wdXRlZENvbnRleHQpO1xua28uZXhwb3J0U3ltYm9sKCdjb21wdXRlZENvbnRleHQuZ2V0RGVwZW5kZW5jaWVzQ291bnQnLCBrby5jb21wdXRlZENvbnRleHQuZ2V0RGVwZW5kZW5jaWVzQ291bnQpO1xua28uZXhwb3J0U3ltYm9sKCdjb21wdXRlZENvbnRleHQuaXNJbml0aWFsJywga28uY29tcHV0ZWRDb250ZXh0LmlzSW5pdGlhbCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgnaWdub3JlRGVwZW5kZW5jaWVzJywga28uaWdub3JlRGVwZW5kZW5jaWVzID0ga28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUpO1xudmFyIG9ic2VydmFibGVMYXRlc3RWYWx1ZSA9IGtvLnV0aWxzLmNyZWF0ZVN5bWJvbE9yU3RyaW5nKCdfbGF0ZXN0VmFsdWUnKTtcblxua28ub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIFdyaXRlXG5cbiAgICAgICAgICAgIC8vIElnbm9yZSB3cml0ZXMgaWYgdGhlIHZhbHVlIGhhc24ndCBjaGFuZ2VkXG4gICAgICAgICAgICBpZiAob2JzZXJ2YWJsZS5pc0RpZmZlcmVudChvYnNlcnZhYmxlW29ic2VydmFibGVMYXRlc3RWYWx1ZV0sIGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnZhbHVlV2lsbE11dGF0ZSgpO1xuICAgICAgICAgICAgICAgIG9ic2VydmFibGVbb2JzZXJ2YWJsZUxhdGVzdFZhbHVlXSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnZhbHVlSGFzTXV0YXRlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7IC8vIFBlcm1pdHMgY2hhaW5lZCBhc3NpZ25tZW50c1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gUmVhZFxuICAgICAgICAgICAga28uZGVwZW5kZW5jeURldGVjdGlvbi5yZWdpc3RlckRlcGVuZGVuY3kob2JzZXJ2YWJsZSk7IC8vIFRoZSBjYWxsZXIgb25seSBuZWVkcyB0byBiZSBub3RpZmllZCBvZiBjaGFuZ2VzIGlmIHRoZXkgZGlkIGEgXCJyZWFkXCIgb3BlcmF0aW9uXG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZVtvYnNlcnZhYmxlTGF0ZXN0VmFsdWVdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JzZXJ2YWJsZVtvYnNlcnZhYmxlTGF0ZXN0VmFsdWVdID0gaW5pdGlhbFZhbHVlO1xuXG4gICAgLy8gSW5oZXJpdCBmcm9tICdzdWJzY3JpYmFibGUnXG4gICAgaWYgKCFrby51dGlscy5jYW5TZXRQcm90b3R5cGUpIHtcbiAgICAgICAgLy8gJ3N1YnNjcmliYWJsZScgd29uJ3QgYmUgb24gdGhlIHByb3RvdHlwZSBjaGFpbiB1bmxlc3Mgd2UgcHV0IGl0IHRoZXJlIGRpcmVjdGx5XG4gICAgICAgIGtvLnV0aWxzLmV4dGVuZChvYnNlcnZhYmxlLCBrby5zdWJzY3JpYmFibGVbJ2ZuJ10pO1xuICAgIH1cbiAgICBrby5zdWJzY3JpYmFibGVbJ2ZuJ10uaW5pdChvYnNlcnZhYmxlKTtcblxuICAgIC8vIEluaGVyaXQgZnJvbSAnb2JzZXJ2YWJsZSdcbiAgICBrby51dGlscy5zZXRQcm90b3R5cGVPZk9yRXh0ZW5kKG9ic2VydmFibGUsIG9ic2VydmFibGVGbik7XG5cbiAgICBpZiAoa28ub3B0aW9uc1snZGVmZXJVcGRhdGVzJ10pIHtcbiAgICAgICAga28uZXh0ZW5kZXJzWydkZWZlcnJlZCddKG9ic2VydmFibGUsIHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiBvYnNlcnZhYmxlO1xufVxuXG4vLyBEZWZpbmUgcHJvdG90eXBlIGZvciBvYnNlcnZhYmxlc1xudmFyIG9ic2VydmFibGVGbiA9IHtcbiAgICAnZXF1YWxpdHlDb21wYXJlcic6IHZhbHVlc0FyZVByaW1pdGl2ZUFuZEVxdWFsLFxuICAgIHBlZWs6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpc1tvYnNlcnZhYmxlTGF0ZXN0VmFsdWVdOyB9LFxuICAgIHZhbHVlSGFzTXV0YXRlZDogZnVuY3Rpb24gKCkgeyB0aGlzWydub3RpZnlTdWJzY3JpYmVycyddKHRoaXNbb2JzZXJ2YWJsZUxhdGVzdFZhbHVlXSk7IH0sXG4gICAgdmFsdWVXaWxsTXV0YXRlOiBmdW5jdGlvbiAoKSB7IHRoaXNbJ25vdGlmeVN1YnNjcmliZXJzJ10odGhpc1tvYnNlcnZhYmxlTGF0ZXN0VmFsdWVdLCAnYmVmb3JlQ2hhbmdlJyk7IH1cbn07XG5cbi8vIE5vdGUgdGhhdCBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHByb3RvIGFzc2lnbm1lbnQsIHRoZVxuLy8gaW5oZXJpdGFuY2UgY2hhaW4gaXMgY3JlYXRlZCBtYW51YWxseSBpbiB0aGUga28ub2JzZXJ2YWJsZSBjb25zdHJ1Y3RvclxuaWYgKGtvLnV0aWxzLmNhblNldFByb3RvdHlwZSkge1xuICAgIGtvLnV0aWxzLnNldFByb3RvdHlwZU9mKG9ic2VydmFibGVGbiwga28uc3Vic2NyaWJhYmxlWydmbiddKTtcbn1cblxudmFyIHByb3RvUHJvcGVydHkgPSBrby5vYnNlcnZhYmxlLnByb3RvUHJvcGVydHkgPSAnX19rb19wcm90b19fJztcbm9ic2VydmFibGVGbltwcm90b1Byb3BlcnR5XSA9IGtvLm9ic2VydmFibGU7XG5cbmtvLmhhc1Byb3RvdHlwZSA9IGZ1bmN0aW9uKGluc3RhbmNlLCBwcm90b3R5cGUpIHtcbiAgICBpZiAoKGluc3RhbmNlID09PSBudWxsKSB8fCAoaW5zdGFuY2UgPT09IHVuZGVmaW5lZCkgfHwgKGluc3RhbmNlW3Byb3RvUHJvcGVydHldID09PSB1bmRlZmluZWQpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGluc3RhbmNlW3Byb3RvUHJvcGVydHldID09PSBwcm90b3R5cGUpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBrby5oYXNQcm90b3R5cGUoaW5zdGFuY2VbcHJvdG9Qcm9wZXJ0eV0sIHByb3RvdHlwZSk7IC8vIFdhbGsgdGhlIHByb3RvdHlwZSBjaGFpblxufTtcblxua28uaXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGtvLmhhc1Byb3RvdHlwZShpbnN0YW5jZSwga28ub2JzZXJ2YWJsZSk7XG59XG5rby5pc1dyaXRlYWJsZU9ic2VydmFibGUgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyBPYnNlcnZhYmxlXG4gICAgaWYgKCh0eXBlb2YgaW5zdGFuY2UgPT0gJ2Z1bmN0aW9uJykgJiYgaW5zdGFuY2VbcHJvdG9Qcm9wZXJ0eV0gPT09IGtvLm9ic2VydmFibGUpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vIFdyaXRlYWJsZSBkZXBlbmRlbnQgb2JzZXJ2YWJsZVxuICAgIGlmICgodHlwZW9mIGluc3RhbmNlID09ICdmdW5jdGlvbicpICYmIChpbnN0YW5jZVtwcm90b1Byb3BlcnR5XSA9PT0ga28uZGVwZW5kZW50T2JzZXJ2YWJsZSkgJiYgKGluc3RhbmNlLmhhc1dyaXRlRnVuY3Rpb24pKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBbnl0aGluZyBlbHNlXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5rby5leHBvcnRTeW1ib2woJ29ic2VydmFibGUnLCBrby5vYnNlcnZhYmxlKTtcbmtvLmV4cG9ydFN5bWJvbCgnaXNPYnNlcnZhYmxlJywga28uaXNPYnNlcnZhYmxlKTtcbmtvLmV4cG9ydFN5bWJvbCgnaXNXcml0ZWFibGVPYnNlcnZhYmxlJywga28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKTtcbmtvLmV4cG9ydFN5bWJvbCgnaXNXcml0YWJsZU9ic2VydmFibGUnLCBrby5pc1dyaXRlYWJsZU9ic2VydmFibGUpO1xua28uZXhwb3J0U3ltYm9sKCdvYnNlcnZhYmxlLmZuJywgb2JzZXJ2YWJsZUZuKTtcbmtvLmV4cG9ydFByb3BlcnR5KG9ic2VydmFibGVGbiwgJ3BlZWsnLCBvYnNlcnZhYmxlRm4ucGVlayk7XG5rby5leHBvcnRQcm9wZXJ0eShvYnNlcnZhYmxlRm4sICd2YWx1ZUhhc011dGF0ZWQnLCBvYnNlcnZhYmxlRm4udmFsdWVIYXNNdXRhdGVkKTtcbmtvLmV4cG9ydFByb3BlcnR5KG9ic2VydmFibGVGbiwgJ3ZhbHVlV2lsbE11dGF0ZScsIG9ic2VydmFibGVGbi52YWx1ZVdpbGxNdXRhdGUpO1xua28ub2JzZXJ2YWJsZUFycmF5ID0gZnVuY3Rpb24gKGluaXRpYWxWYWx1ZXMpIHtcbiAgICBpbml0aWFsVmFsdWVzID0gaW5pdGlhbFZhbHVlcyB8fCBbXTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFZhbHVlcyAhPSAnb2JqZWN0JyB8fCAhKCdsZW5ndGgnIGluIGluaXRpYWxWYWx1ZXMpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgYXJndW1lbnQgcGFzc2VkIHdoZW4gaW5pdGlhbGl6aW5nIGFuIG9ic2VydmFibGUgYXJyYXkgbXVzdCBiZSBhbiBhcnJheSwgb3IgbnVsbCwgb3IgdW5kZWZpbmVkLlwiKTtcblxuICAgIHZhciByZXN1bHQgPSBrby5vYnNlcnZhYmxlKGluaXRpYWxWYWx1ZXMpO1xuICAgIGtvLnV0aWxzLnNldFByb3RvdHlwZU9mT3JFeHRlbmQocmVzdWx0LCBrby5vYnNlcnZhYmxlQXJyYXlbJ2ZuJ10pO1xuICAgIHJldHVybiByZXN1bHQuZXh0ZW5kKHsndHJhY2tBcnJheUNoYW5nZXMnOnRydWV9KTtcbn07XG5cbmtvLm9ic2VydmFibGVBcnJheVsnZm4nXSA9IHtcbiAgICAncmVtb3ZlJzogZnVuY3Rpb24gKHZhbHVlT3JQcmVkaWNhdGUpIHtcbiAgICAgICAgdmFyIHVuZGVybHlpbmdBcnJheSA9IHRoaXMucGVlaygpO1xuICAgICAgICB2YXIgcmVtb3ZlZFZhbHVlcyA9IFtdO1xuICAgICAgICB2YXIgcHJlZGljYXRlID0gdHlwZW9mIHZhbHVlT3JQcmVkaWNhdGUgPT0gXCJmdW5jdGlvblwiICYmICFrby5pc09ic2VydmFibGUodmFsdWVPclByZWRpY2F0ZSkgPyB2YWx1ZU9yUHJlZGljYXRlIDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB2YWx1ZSA9PT0gdmFsdWVPclByZWRpY2F0ZTsgfTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmRlcmx5aW5nQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHVuZGVybHlpbmdBcnJheVtpXTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlbW92ZWRWYWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVXaWxsTXV0YXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbW92ZWRWYWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdW5kZXJseWluZ0FycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbW92ZWRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlSGFzTXV0YXRlZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZW1vdmVkVmFsdWVzO1xuICAgIH0sXG5cbiAgICAncmVtb3ZlQWxsJzogZnVuY3Rpb24gKGFycmF5T2ZWYWx1ZXMpIHtcbiAgICAgICAgLy8gSWYgeW91IHBhc3NlZCB6ZXJvIGFyZ3MsIHdlIHJlbW92ZSBldmVyeXRoaW5nXG4gICAgICAgIGlmIChhcnJheU9mVmFsdWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciB1bmRlcmx5aW5nQXJyYXkgPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgICAgIHZhciBhbGxWYWx1ZXMgPSB1bmRlcmx5aW5nQXJyYXkuc2xpY2UoMCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlV2lsbE11dGF0ZSgpO1xuICAgICAgICAgICAgdW5kZXJseWluZ0FycmF5LnNwbGljZSgwLCB1bmRlcmx5aW5nQXJyYXkubGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVIYXNNdXRhdGVkKCk7XG4gICAgICAgICAgICByZXR1cm4gYWxsVmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHlvdSBwYXNzZWQgYW4gYXJnLCB3ZSBpbnRlcnByZXQgaXQgYXMgYW4gYXJyYXkgb2YgZW50cmllcyB0byByZW1vdmVcbiAgICAgICAgaWYgKCFhcnJheU9mVmFsdWVzKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICByZXR1cm4gdGhpc1sncmVtb3ZlJ10oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4ga28udXRpbHMuYXJyYXlJbmRleE9mKGFycmF5T2ZWYWx1ZXMsIHZhbHVlKSA+PSAwO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgJ2Rlc3Ryb3knOiBmdW5jdGlvbiAodmFsdWVPclByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgdW5kZXJseWluZ0FycmF5ID0gdGhpcy5wZWVrKCk7XG4gICAgICAgIHZhciBwcmVkaWNhdGUgPSB0eXBlb2YgdmFsdWVPclByZWRpY2F0ZSA9PSBcImZ1bmN0aW9uXCIgJiYgIWtvLmlzT2JzZXJ2YWJsZSh2YWx1ZU9yUHJlZGljYXRlKSA/IHZhbHVlT3JQcmVkaWNhdGUgOiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlID09PSB2YWx1ZU9yUHJlZGljYXRlOyB9O1xuICAgICAgICB0aGlzLnZhbHVlV2lsbE11dGF0ZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gdW5kZXJseWluZ0FycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB1bmRlcmx5aW5nQXJyYXlbaV07XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlKSlcbiAgICAgICAgICAgICAgICB1bmRlcmx5aW5nQXJyYXlbaV1bXCJfZGVzdHJveVwiXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZUhhc011dGF0ZWQoKTtcbiAgICB9LFxuXG4gICAgJ2Rlc3Ryb3lBbGwnOiBmdW5jdGlvbiAoYXJyYXlPZlZhbHVlcykge1xuICAgICAgICAvLyBJZiB5b3UgcGFzc2VkIHplcm8gYXJncywgd2UgZGVzdHJveSBldmVyeXRoaW5nXG4gICAgICAgIGlmIChhcnJheU9mVmFsdWVzID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpc1snZGVzdHJveSddKGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZSB9KTtcblxuICAgICAgICAvLyBJZiB5b3UgcGFzc2VkIGFuIGFyZywgd2UgaW50ZXJwcmV0IGl0IGFzIGFuIGFycmF5IG9mIGVudHJpZXMgdG8gZGVzdHJveVxuICAgICAgICBpZiAoIWFycmF5T2ZWYWx1ZXMpXG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIHJldHVybiB0aGlzWydkZXN0cm95J10oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4ga28udXRpbHMuYXJyYXlJbmRleE9mKGFycmF5T2ZWYWx1ZXMsIHZhbHVlKSA+PSAwO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgJ2luZGV4T2YnOiBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICB2YXIgdW5kZXJseWluZ0FycmF5ID0gdGhpcygpO1xuICAgICAgICByZXR1cm4ga28udXRpbHMuYXJyYXlJbmRleE9mKHVuZGVybHlpbmdBcnJheSwgaXRlbSk7XG4gICAgfSxcblxuICAgICdyZXBsYWNlJzogZnVuY3Rpb24ob2xkSXRlbSwgbmV3SXRlbSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzWydpbmRleE9mJ10ob2xkSXRlbSk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlV2lsbE11dGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5wZWVrKClbaW5kZXhdID0gbmV3SXRlbTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVIYXNNdXRhdGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyBOb3RlIHRoYXQgZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBwcm90byBhc3NpZ25tZW50LCB0aGVcbi8vIGluaGVyaXRhbmNlIGNoYWluIGlzIGNyZWF0ZWQgbWFudWFsbHkgaW4gdGhlIGtvLm9ic2VydmFibGVBcnJheSBjb25zdHJ1Y3RvclxuaWYgKGtvLnV0aWxzLmNhblNldFByb3RvdHlwZSkge1xuICAgIGtvLnV0aWxzLnNldFByb3RvdHlwZU9mKGtvLm9ic2VydmFibGVBcnJheVsnZm4nXSwga28ub2JzZXJ2YWJsZVsnZm4nXSk7XG59XG5cbi8vIFBvcHVsYXRlIGtvLm9ic2VydmFibGVBcnJheS5mbiB3aXRoIHJlYWQvd3JpdGUgZnVuY3Rpb25zIGZyb20gbmF0aXZlIGFycmF5c1xuLy8gSW1wb3J0YW50OiBEbyBub3QgYWRkIGFueSBhZGRpdGlvbmFsIGZ1bmN0aW9ucyBoZXJlIHRoYXQgbWF5IHJlYXNvbmFibHkgYmUgdXNlZCB0byAqcmVhZCogZGF0YSBmcm9tIHRoZSBhcnJheVxuLy8gYmVjYXVzZSB3ZSdsbCBldmFsIHRoZW0gd2l0aG91dCBjYXVzaW5nIHN1YnNjcmlwdGlvbnMsIHNvIGtvLmNvbXB1dGVkIG91dHB1dCBjb3VsZCBlbmQgdXAgZ2V0dGluZyBzdGFsZVxua28udXRpbHMuYXJyYXlGb3JFYWNoKFtcInBvcFwiLCBcInB1c2hcIiwgXCJyZXZlcnNlXCIsIFwic2hpZnRcIiwgXCJzb3J0XCIsIFwic3BsaWNlXCIsIFwidW5zaGlmdFwiXSwgZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICBrby5vYnNlcnZhYmxlQXJyYXlbJ2ZuJ11bbWV0aG9kTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZSBcInBlZWtcIiB0byBhdm9pZCBjcmVhdGluZyBhIHN1YnNjcmlwdGlvbiBpbiBhbnkgY29tcHV0ZWQgdGhhdCB3ZSdyZSBleGVjdXRpbmcgaW4gdGhlIGNvbnRleHQgb2ZcbiAgICAgICAgLy8gKGZvciBjb25zaXN0ZW5jeSB3aXRoIG11dGF0aW5nIHJlZ3VsYXIgb2JzZXJ2YWJsZXMpXG4gICAgICAgIHZhciB1bmRlcmx5aW5nQXJyYXkgPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgdGhpcy52YWx1ZVdpbGxNdXRhdGUoKTtcbiAgICAgICAgdGhpcy5jYWNoZURpZmZGb3JLbm93bk9wZXJhdGlvbih1bmRlcmx5aW5nQXJyYXksIG1ldGhvZE5hbWUsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBtZXRob2RDYWxsUmVzdWx0ID0gdW5kZXJseWluZ0FycmF5W21ldGhvZE5hbWVdLmFwcGx5KHVuZGVybHlpbmdBcnJheSwgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy52YWx1ZUhhc011dGF0ZWQoKTtcbiAgICAgICAgLy8gVGhlIG5hdGl2ZSBzb3J0IGFuZCByZXZlcnNlIG1ldGhvZHMgcmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBhcnJheSwgYnV0IGl0IG1ha2VzIG1vcmUgc2Vuc2UgdG8gcmV0dXJuIHRoZSBvYnNlcnZhYmxlIGFycmF5IGluc3RlYWQuXG4gICAgICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0ID09PSB1bmRlcmx5aW5nQXJyYXkgPyB0aGlzIDogbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICB9O1xufSk7XG5cbi8vIFBvcHVsYXRlIGtvLm9ic2VydmFibGVBcnJheS5mbiB3aXRoIHJlYWQtb25seSBmdW5jdGlvbnMgZnJvbSBuYXRpdmUgYXJyYXlzXG5rby51dGlscy5hcnJheUZvckVhY2goW1wic2xpY2VcIl0sIGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAga28ub2JzZXJ2YWJsZUFycmF5WydmbiddW21ldGhvZE5hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdW5kZXJseWluZ0FycmF5ID0gdGhpcygpO1xuICAgICAgICByZXR1cm4gdW5kZXJseWluZ0FycmF5W21ldGhvZE5hbWVdLmFwcGx5KHVuZGVybHlpbmdBcnJheSwgYXJndW1lbnRzKTtcbiAgICB9O1xufSk7XG5cbmtvLmV4cG9ydFN5bWJvbCgnb2JzZXJ2YWJsZUFycmF5Jywga28ub2JzZXJ2YWJsZUFycmF5KTtcbnZhciBhcnJheUNoYW5nZUV2ZW50TmFtZSA9ICdhcnJheUNoYW5nZSc7XG5rby5leHRlbmRlcnNbJ3RyYWNrQXJyYXlDaGFuZ2VzJ10gPSBmdW5jdGlvbih0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAvLyBVc2UgdGhlIHByb3ZpZGVkIG9wdGlvbnMtLWVhY2ggY2FsbCB0byB0cmFja0FycmF5Q2hhbmdlcyBvdmVyd3JpdGVzIHRoZSBwcmV2aW91c2x5IHNldCBvcHRpb25zXG4gICAgdGFyZ2V0LmNvbXBhcmVBcnJheU9wdGlvbnMgPSB7fTtcbiAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucyA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGtvLnV0aWxzLmV4dGVuZCh0YXJnZXQuY29tcGFyZUFycmF5T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHRhcmdldC5jb21wYXJlQXJyYXlPcHRpb25zWydzcGFyc2UnXSA9IHRydWU7XG5cbiAgICAvLyBPbmx5IG1vZGlmeSB0aGUgdGFyZ2V0IG9ic2VydmFibGUgb25jZVxuICAgIGlmICh0YXJnZXQuY2FjaGVEaWZmRm9yS25vd25PcGVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdHJhY2tpbmdDaGFuZ2VzID0gZmFsc2UsXG4gICAgICAgIGNhY2hlZERpZmYgPSBudWxsLFxuICAgICAgICBhcnJheUNoYW5nZVN1YnNjcmlwdGlvbixcbiAgICAgICAgcGVuZGluZ05vdGlmaWNhdGlvbnMgPSAwLFxuICAgICAgICB1bmRlcmx5aW5nTm90aWZ5U3Vic2NyaWJlcnNGdW5jdGlvbixcbiAgICAgICAgdW5kZXJseWluZ0JlZm9yZVN1YnNjcmlwdGlvbkFkZEZ1bmN0aW9uID0gdGFyZ2V0LmJlZm9yZVN1YnNjcmlwdGlvbkFkZCxcbiAgICAgICAgdW5kZXJseWluZ0FmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlRnVuY3Rpb24gPSB0YXJnZXQuYWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmU7XG5cbiAgICAvLyBXYXRjaCBcInN1YnNjcmliZVwiIGNhbGxzLCBhbmQgZm9yIGFycmF5IGNoYW5nZSBldmVudHMsIGVuc3VyZSBjaGFuZ2UgdHJhY2tpbmcgaXMgZW5hYmxlZFxuICAgIHRhcmdldC5iZWZvcmVTdWJzY3JpcHRpb25BZGQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHVuZGVybHlpbmdCZWZvcmVTdWJzY3JpcHRpb25BZGRGdW5jdGlvbilcbiAgICAgICAgICAgIHVuZGVybHlpbmdCZWZvcmVTdWJzY3JpcHRpb25BZGRGdW5jdGlvbi5jYWxsKHRhcmdldCwgZXZlbnQpO1xuICAgICAgICBpZiAoZXZlbnQgPT09IGFycmF5Q2hhbmdlRXZlbnROYW1lKSB7XG4gICAgICAgICAgICB0cmFja0NoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gV2F0Y2ggXCJkaXNwb3NlXCIgY2FsbHMsIGFuZCBmb3IgYXJyYXkgY2hhbmdlIGV2ZW50cywgZW5zdXJlIGNoYW5nZSB0cmFja2luZyBpcyBkaXNhYmxlZCB3aGVuIGFsbCBhcmUgZGlzcG9zZWRcbiAgICB0YXJnZXQuYWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHVuZGVybHlpbmdBZnRlclN1YnNjcmlwdGlvblJlbW92ZUZ1bmN0aW9uKVxuICAgICAgICAgICAgdW5kZXJseWluZ0FmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlRnVuY3Rpb24uY2FsbCh0YXJnZXQsIGV2ZW50KTtcbiAgICAgICAgaWYgKGV2ZW50ID09PSBhcnJheUNoYW5nZUV2ZW50TmFtZSAmJiAhdGFyZ2V0Lmhhc1N1YnNjcmlwdGlvbnNGb3JFdmVudChhcnJheUNoYW5nZUV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgIGlmICh1bmRlcmx5aW5nTm90aWZ5U3Vic2NyaWJlcnNGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIHRhcmdldFsnbm90aWZ5U3Vic2NyaWJlcnMnXSA9IHVuZGVybHlpbmdOb3RpZnlTdWJzY3JpYmVyc0Z1bmN0aW9uO1xuICAgICAgICAgICAgICAgIHVuZGVybHlpbmdOb3RpZnlTdWJzY3JpYmVyc0Z1bmN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyYXlDaGFuZ2VTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgdHJhY2tpbmdDaGFuZ2VzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdHJhY2tDaGFuZ2VzKCkge1xuICAgICAgICAvLyBDYWxsaW5nICd0cmFja0NoYW5nZXMnIG11bHRpcGxlIHRpbWVzIGlzIHRoZSBzYW1lIGFzIGNhbGxpbmcgaXQgb25jZVxuICAgICAgICBpZiAodHJhY2tpbmdDaGFuZ2VzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cmFja2luZ0NoYW5nZXMgPSB0cnVlO1xuXG4gICAgICAgIC8vIEludGVyY2VwdCBcIm5vdGlmeVN1YnNjcmliZXJzXCIgdG8gdHJhY2sgaG93IG1hbnkgdGltZXMgaXQgd2FzIGNhbGxlZC5cbiAgICAgICAgdW5kZXJseWluZ05vdGlmeVN1YnNjcmliZXJzRnVuY3Rpb24gPSB0YXJnZXRbJ25vdGlmeVN1YnNjcmliZXJzJ107XG4gICAgICAgIHRhcmdldFsnbm90aWZ5U3Vic2NyaWJlcnMnXSA9IGZ1bmN0aW9uKHZhbHVlVG9Ob3RpZnksIGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50IHx8IGV2ZW50ID09PSBkZWZhdWx0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICArK3BlbmRpbmdOb3RpZmljYXRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVybHlpbmdOb3RpZnlTdWJzY3JpYmVyc0Z1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gRWFjaCB0aW1lIHRoZSBhcnJheSBjaGFuZ2VzIHZhbHVlLCBjYXB0dXJlIGEgY2xvbmUgc28gdGhhdCBvbiB0aGUgbmV4dFxuICAgICAgICAvLyBjaGFuZ2UgaXQncyBwb3NzaWJsZSB0byBwcm9kdWNlIGEgZGlmZlxuICAgICAgICB2YXIgcHJldmlvdXNDb250ZW50cyA9IFtdLmNvbmNhdCh0YXJnZXQucGVlaygpIHx8IFtdKTtcbiAgICAgICAgY2FjaGVkRGlmZiA9IG51bGw7XG4gICAgICAgIGFycmF5Q2hhbmdlU3Vic2NyaXB0aW9uID0gdGFyZ2V0LnN1YnNjcmliZShmdW5jdGlvbihjdXJyZW50Q29udGVudHMpIHtcbiAgICAgICAgICAgIC8vIE1ha2UgYSBjb3B5IG9mIHRoZSBjdXJyZW50IGNvbnRlbnRzIGFuZCBlbnN1cmUgaXQncyBhbiBhcnJheVxuICAgICAgICAgICAgY3VycmVudENvbnRlbnRzID0gW10uY29uY2F0KGN1cnJlbnRDb250ZW50cyB8fCBbXSk7XG5cbiAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIGRpZmYgYW5kIGlzc3VlIG5vdGlmaWNhdGlvbnMsIGJ1dCBvbmx5IGlmIHNvbWVvbmUgaXMgbGlzdGVuaW5nXG4gICAgICAgICAgICBpZiAodGFyZ2V0Lmhhc1N1YnNjcmlwdGlvbnNGb3JFdmVudChhcnJheUNoYW5nZUV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlcyA9IGdldENoYW5nZXMocHJldmlvdXNDb250ZW50cywgY3VycmVudENvbnRlbnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRWxpbWluYXRlIHJlZmVyZW5jZXMgdG8gdGhlIG9sZCwgcmVtb3ZlZCBpdGVtcywgc28gdGhleSBjYW4gYmUgR0NlZFxuICAgICAgICAgICAgcHJldmlvdXNDb250ZW50cyA9IGN1cnJlbnRDb250ZW50cztcbiAgICAgICAgICAgIGNhY2hlZERpZmYgPSBudWxsO1xuICAgICAgICAgICAgcGVuZGluZ05vdGlmaWNhdGlvbnMgPSAwO1xuXG4gICAgICAgICAgICBpZiAoY2hhbmdlcyAmJiBjaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRhcmdldFsnbm90aWZ5U3Vic2NyaWJlcnMnXShjaGFuZ2VzLCBhcnJheUNoYW5nZUV2ZW50TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENoYW5nZXMocHJldmlvdXNDb250ZW50cywgY3VycmVudENvbnRlbnRzKSB7XG4gICAgICAgIC8vIFdlIHRyeSB0byByZS11c2UgY2FjaGVkIGRpZmZzLlxuICAgICAgICAvLyBUaGUgc2NlbmFyaW9zIHdoZXJlIHBlbmRpbmdOb3RpZmljYXRpb25zID4gMSBhcmUgd2hlbiB1c2luZyByYXRlLWxpbWl0aW5nIG9yIHRoZSBEZWZlcnJlZCBVcGRhdGVzXG4gICAgICAgIC8vIHBsdWdpbiwgd2hpY2ggd2l0aG91dCB0aGlzIGNoZWNrIHdvdWxkIG5vdCBiZSBjb21wYXRpYmxlIHdpdGggYXJyYXlDaGFuZ2Ugbm90aWZpY2F0aW9ucy4gTm9ybWFsbHksXG4gICAgICAgIC8vIG5vdGlmaWNhdGlvbnMgYXJlIGlzc3VlZCBpbW1lZGlhdGVseSBzbyB3ZSB3b3VsZG4ndCBiZSBxdWV1ZWluZyB1cCBtb3JlIHRoYW4gb25lLlxuICAgICAgICBpZiAoIWNhY2hlZERpZmYgfHwgcGVuZGluZ05vdGlmaWNhdGlvbnMgPiAxKSB7XG4gICAgICAgICAgICBjYWNoZWREaWZmID0ga28udXRpbHMuY29tcGFyZUFycmF5cyhwcmV2aW91c0NvbnRlbnRzLCBjdXJyZW50Q29udGVudHMsIHRhcmdldC5jb21wYXJlQXJyYXlPcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWNoZWREaWZmO1xuICAgIH1cblxuICAgIHRhcmdldC5jYWNoZURpZmZGb3JLbm93bk9wZXJhdGlvbiA9IGZ1bmN0aW9uKHJhd0FycmF5LCBvcGVyYXRpb25OYW1lLCBhcmdzKSB7XG4gICAgICAgIC8vIE9ubHkgcnVuIGlmIHdlJ3JlIGN1cnJlbnRseSB0cmFja2luZyBjaGFuZ2VzIGZvciB0aGlzIG9ic2VydmFibGUgYXJyYXlcbiAgICAgICAgLy8gYW5kIHRoZXJlIGFyZW4ndCBhbnkgcGVuZGluZyBkZWZlcnJlZCBub3RpZmljYXRpb25zLlxuICAgICAgICBpZiAoIXRyYWNraW5nQ2hhbmdlcyB8fCBwZW5kaW5nTm90aWZpY2F0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaWZmID0gW10sXG4gICAgICAgICAgICBhcnJheUxlbmd0aCA9IHJhd0FycmF5Lmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gcHVzaERpZmYoc3RhdHVzLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBkaWZmW2RpZmYubGVuZ3RoXSA9IHsgJ3N0YXR1cyc6IHN0YXR1cywgJ3ZhbHVlJzogdmFsdWUsICdpbmRleCc6IGluZGV4IH07XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChvcGVyYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdwdXNoJzpcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBhcnJheUxlbmd0aDtcbiAgICAgICAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhcmdzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hEaWZmKCdhZGRlZCcsIGFyZ3NbaW5kZXhdLCBvZmZzZXQgKyBpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdwb3AnOlxuICAgICAgICAgICAgICAgIG9mZnNldCA9IGFycmF5TGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGNhc2UgJ3NoaWZ0JzpcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaERpZmYoJ2RlbGV0ZWQnLCByYXdBcnJheVtvZmZzZXRdLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgICAgICAgICAvLyBOZWdhdGl2ZSBzdGFydCBpbmRleCBtZWFucyAnZnJvbSBlbmQgb2YgYXJyYXknLiBBZnRlciB0aGF0IHdlIGNsYW1wIHRvIFswLi4uYXJyYXlMZW5ndGhdLlxuICAgICAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zcGxpY2VcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRJbmRleCA9IE1hdGgubWluKE1hdGgubWF4KDAsIGFyZ3NbMF0gPCAwID8gYXJyYXlMZW5ndGggKyBhcmdzWzBdIDogYXJnc1swXSksIGFycmF5TGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kRGVsZXRlSW5kZXggPSBhcmdzTGVuZ3RoID09PSAxID8gYXJyYXlMZW5ndGggOiBNYXRoLm1pbihzdGFydEluZGV4ICsgKGFyZ3NbMV0gfHwgMCksIGFycmF5TGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kQWRkSW5kZXggPSBzdGFydEluZGV4ICsgYXJnc0xlbmd0aCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIGVuZEluZGV4ID0gTWF0aC5tYXgoZW5kRGVsZXRlSW5kZXgsIGVuZEFkZEluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25zID0gW10sIGRlbGV0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gc3RhcnRJbmRleCwgYXJnc0luZGV4ID0gMjsgaW5kZXggPCBlbmRJbmRleDsgKytpbmRleCwgKythcmdzSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgZW5kRGVsZXRlSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGlvbnMucHVzaChwdXNoRGlmZignZGVsZXRlZCcsIHJhd0FycmF5W2luZGV4XSwgaW5kZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgZW5kQWRkSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbnMucHVzaChwdXNoRGlmZignYWRkZWQnLCBhcmdzW2FyZ3NJbmRleF0sIGluZGV4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGtvLnV0aWxzLmZpbmRNb3Zlc0luQXJyYXlDb21wYXJpc29uKGRlbGV0aW9ucywgYWRkaXRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FjaGVkRGlmZiA9IGRpZmY7XG4gICAgfTtcbn07XG52YXIgY29tcHV0ZWRTdGF0ZSA9IGtvLnV0aWxzLmNyZWF0ZVN5bWJvbE9yU3RyaW5nKCdfc3RhdGUnKTtcblxua28uY29tcHV0ZWQgPSBrby5kZXBlbmRlbnRPYnNlcnZhYmxlID0gZnVuY3Rpb24gKGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zLCBldmFsdWF0b3JGdW5jdGlvblRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgLy8gU2luZ2xlLXBhcmFtZXRlciBzeW50YXggLSBldmVyeXRoaW5nIGlzIG9uIHRoaXMgXCJvcHRpb25zXCIgcGFyYW1cbiAgICAgICAgb3B0aW9ucyA9IGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE11bHRpLXBhcmFtZXRlciBzeW50YXggLSBjb25zdHJ1Y3QgdGhlIG9wdGlvbnMgYWNjb3JkaW5nIHRvIHRoZSBwYXJhbXMgcGFzc2VkXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpZiAoZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnNbXCJyZWFkXCJdID0gZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zW1wicmVhZFwiXSAhPSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRocm93IEVycm9yKFwiUGFzcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGtvLmNvbXB1dGVkXCIpO1xuXG4gICAgdmFyIHdyaXRlRnVuY3Rpb24gPSBvcHRpb25zW1wid3JpdGVcIl07XG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgICBsYXRlc3RWYWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1N0YWxlOiB0cnVlLFxuICAgICAgICBpc0RpcnR5OiB0cnVlLFxuICAgICAgICBpc0JlaW5nRXZhbHVhdGVkOiBmYWxzZSxcbiAgICAgICAgc3VwcHJlc3NEaXNwb3NhbFVudGlsRGlzcG9zZVdoZW5SZXR1cm5zRmFsc2U6IGZhbHNlLFxuICAgICAgICBpc0Rpc3Bvc2VkOiBmYWxzZSxcbiAgICAgICAgcHVyZTogZmFsc2UsXG4gICAgICAgIGlzU2xlZXBpbmc6IGZhbHNlLFxuICAgICAgICByZWFkRnVuY3Rpb246IG9wdGlvbnNbXCJyZWFkXCJdLFxuICAgICAgICBldmFsdWF0b3JGdW5jdGlvblRhcmdldDogZXZhbHVhdG9yRnVuY3Rpb25UYXJnZXQgfHwgb3B0aW9uc1tcIm93bmVyXCJdLFxuICAgICAgICBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IG9wdGlvbnNbXCJkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWRcIl0gfHwgb3B0aW9ucy5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQgfHwgbnVsbCxcbiAgICAgICAgZGlzcG9zZVdoZW46IG9wdGlvbnNbXCJkaXNwb3NlV2hlblwiXSB8fCBvcHRpb25zLmRpc3Bvc2VXaGVuLFxuICAgICAgICBkb21Ob2RlRGlzcG9zYWxDYWxsYmFjazogbnVsbCxcbiAgICAgICAgZGVwZW5kZW5jeVRyYWNraW5nOiB7fSxcbiAgICAgICAgZGVwZW5kZW5jaWVzQ291bnQ6IDAsXG4gICAgICAgIGV2YWx1YXRpb25UaW1lb3V0SW5zdGFuY2U6IG51bGxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY29tcHV0ZWRPYnNlcnZhYmxlKCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd3JpdGVGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgLy8gV3JpdGluZyBhIHZhbHVlXG4gICAgICAgICAgICAgICAgd3JpdGVGdW5jdGlvbi5hcHBseShzdGF0ZS5ldmFsdWF0b3JGdW5jdGlvblRhcmdldCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHdyaXRlIGEgdmFsdWUgdG8gYSBrby5jb21wdXRlZCB1bmxlc3MgeW91IHNwZWNpZnkgYSAnd3JpdGUnIG9wdGlvbi4gSWYgeW91IHdpc2ggdG8gcmVhZCB0aGUgY3VycmVudCB2YWx1ZSwgZG9uJ3QgcGFzcyBhbnkgcGFyYW1ldGVycy5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpczsgLy8gUGVybWl0cyBjaGFpbmVkIGFzc2lnbm1lbnRzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBSZWFkaW5nIHRoZSB2YWx1ZVxuICAgICAgICAgICAga28uZGVwZW5kZW5jeURldGVjdGlvbi5yZWdpc3RlckRlcGVuZGVuY3koY29tcHV0ZWRPYnNlcnZhYmxlKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc0RpcnR5IHx8IChzdGF0ZS5pc1NsZWVwaW5nICYmIGNvbXB1dGVkT2JzZXJ2YWJsZS5oYXZlRGVwZW5kZW5jaWVzQ2hhbmdlZCgpKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZS5ldmFsdWF0ZUltbWVkaWF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmxhdGVzdFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcHV0ZWRPYnNlcnZhYmxlW2NvbXB1dGVkU3RhdGVdID0gc3RhdGU7XG4gICAgY29tcHV0ZWRPYnNlcnZhYmxlLmhhc1dyaXRlRnVuY3Rpb24gPSB0eXBlb2Ygd3JpdGVGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiO1xuXG4gICAgLy8gSW5oZXJpdCBmcm9tICdzdWJzY3JpYmFibGUnXG4gICAgaWYgKCFrby51dGlscy5jYW5TZXRQcm90b3R5cGUpIHtcbiAgICAgICAgLy8gJ3N1YnNjcmliYWJsZScgd29uJ3QgYmUgb24gdGhlIHByb3RvdHlwZSBjaGFpbiB1bmxlc3Mgd2UgcHV0IGl0IHRoZXJlIGRpcmVjdGx5XG4gICAgICAgIGtvLnV0aWxzLmV4dGVuZChjb21wdXRlZE9ic2VydmFibGUsIGtvLnN1YnNjcmliYWJsZVsnZm4nXSk7XG4gICAgfVxuICAgIGtvLnN1YnNjcmliYWJsZVsnZm4nXS5pbml0KGNvbXB1dGVkT2JzZXJ2YWJsZSk7XG5cbiAgICAvLyBJbmhlcml0IGZyb20gJ2NvbXB1dGVkJ1xuICAgIGtvLnV0aWxzLnNldFByb3RvdHlwZU9mT3JFeHRlbmQoY29tcHV0ZWRPYnNlcnZhYmxlLCBjb21wdXRlZEZuKTtcblxuICAgIGlmIChvcHRpb25zWydwdXJlJ10pIHtcbiAgICAgICAgc3RhdGUucHVyZSA9IHRydWU7XG4gICAgICAgIHN0YXRlLmlzU2xlZXBpbmcgPSB0cnVlOyAgICAgLy8gU3RhcnRzIG9mZiBzbGVlcGluZzsgd2lsbCBhd2FrZSBvbiB0aGUgZmlyc3Qgc3Vic2NyaXB0aW9uXG4gICAgICAgIGtvLnV0aWxzLmV4dGVuZChjb21wdXRlZE9ic2VydmFibGUsIHB1cmVDb21wdXRlZE92ZXJyaWRlcyk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zWydkZWZlckV2YWx1YXRpb24nXSkge1xuICAgICAgICBrby51dGlscy5leHRlbmQoY29tcHV0ZWRPYnNlcnZhYmxlLCBkZWZlckV2YWx1YXRpb25PdmVycmlkZXMpO1xuICAgIH1cblxuICAgIGlmIChrby5vcHRpb25zWydkZWZlclVwZGF0ZXMnXSkge1xuICAgICAgICBrby5leHRlbmRlcnNbJ2RlZmVycmVkJ10oY29tcHV0ZWRPYnNlcnZhYmxlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgLy8gIzE3MzEgLSBBaWQgZGVidWdnaW5nIGJ5IGV4cG9zaW5nIHRoZSBjb21wdXRlZCdzIG9wdGlvbnNcbiAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlW1wiX29wdGlvbnNcIl0gPSBvcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQpIHtcbiAgICAgICAgLy8gU2luY2UgdGhpcyBjb21wdXRlZCBpcyBhc3NvY2lhdGVkIHdpdGggYSBET00gbm9kZSwgYW5kIHdlIGRvbid0IHdhbnQgdG8gZGlzcG9zZSB0aGUgY29tcHV0ZWRcbiAgICAgICAgLy8gdW50aWwgdGhlIERPTSBub2RlIGlzICpyZW1vdmVkKiBmcm9tIHRoZSBkb2N1bWVudCAoYXMgb3Bwb3NlZCB0byBuZXZlciBoYXZpbmcgYmVlbiBpbiB0aGUgZG9jdW1lbnQpLFxuICAgICAgICAvLyB3ZSdsbCBwcmV2ZW50IGRpc3Bvc2FsIHVudGlsIFwiZGlzcG9zZVdoZW5cIiBmaXJzdCByZXR1cm5zIGZhbHNlLlxuICAgICAgICBzdGF0ZS5zdXBwcmVzc0Rpc3Bvc2FsVW50aWxEaXNwb3NlV2hlblJldHVybnNGYWxzZSA9IHRydWU7XG5cbiAgICAgICAgLy8gZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiB0cnVlIGNhbiBiZSB1c2VkIHRvIG9wdCBpbnRvIHRoZSBcIm9ubHkgZGlzcG9zZSBhZnRlciBmaXJzdCBmYWxzZSByZXN1bHRcIlxuICAgICAgICAvLyBiZWhhdmlvdXIgZXZlbiBpZiB0aGVyZSdzIG5vIHNwZWNpZmljIG5vZGUgdG8gd2F0Y2guIEluIHRoYXQgY2FzZSwgY2xlYXIgdGhlIG9wdGlvbiBzbyB3ZSBkb24ndCB0cnlcbiAgICAgICAgLy8gdG8gd2F0Y2ggZm9yIGEgbm9uLW5vZGUncyBkaXNwb3NhbC4gVGhpcyB0ZWNobmlxdWUgaXMgaW50ZW5kZWQgZm9yIEtPJ3MgaW50ZXJuYWwgdXNlIG9ubHkgYW5kIHNob3VsZG4ndFxuICAgICAgICAvLyBiZSBkb2N1bWVudGVkIG9yIHVzZWQgYnkgYXBwbGljYXRpb24gY29kZSwgYXMgaXQncyBsaWtlbHkgdG8gY2hhbmdlIGluIGEgZnV0dXJlIHZlcnNpb24gb2YgS08uXG4gICAgICAgIGlmICghc3RhdGUuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICBzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXZhbHVhdGUsIHVubGVzcyBzbGVlcGluZyBvciBkZWZlckV2YWx1YXRpb24gaXMgdHJ1ZVxuICAgIGlmICghc3RhdGUuaXNTbGVlcGluZyAmJiAhb3B0aW9uc1snZGVmZXJFdmFsdWF0aW9uJ10pIHtcbiAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlLmV2YWx1YXRlSW1tZWRpYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGEgRE9NIG5vZGUgZGlzcG9zYWwgY2FsbGJhY2sgc28gdGhhdCB0aGUgY29tcHV0ZWQgd2lsbCBiZSBwcm9hY3RpdmVseSBkaXNwb3NlZCBhcyBzb29uIGFzIHRoZSBub2RlIGlzXG4gICAgLy8gcmVtb3ZlZCB1c2luZyBrby5yZW1vdmVOb2RlLiBCdXQgc2tpcCBpZiBpc0FjdGl2ZSBpcyBmYWxzZSAodGhlcmUgd2lsbCBuZXZlciBiZSBhbnkgZGVwZW5kZW5jaWVzIHRvIGRpc3Bvc2UpLlxuICAgIGlmIChzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQgJiYgY29tcHV0ZWRPYnNlcnZhYmxlLmlzQWN0aXZlKCkpIHtcbiAgICAgICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQsIHN0YXRlLmRvbU5vZGVEaXNwb3NhbENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXB1dGVkT2JzZXJ2YWJsZTtcbn07XG5cbi8vIFV0aWxpdHkgZnVuY3Rpb24gdGhhdCBkaXNwb3NlcyBhIGdpdmVuIGRlcGVuZGVuY3lUcmFja2luZyBlbnRyeVxuZnVuY3Rpb24gY29tcHV0ZWREaXNwb3NlRGVwZW5kZW5jeUNhbGxiYWNrKGlkLCBlbnRyeVRvRGlzcG9zZSkge1xuICAgIGlmIChlbnRyeVRvRGlzcG9zZSAhPT0gbnVsbCAmJiBlbnRyeVRvRGlzcG9zZS5kaXNwb3NlKSB7XG4gICAgICAgIGVudHJ5VG9EaXNwb3NlLmRpc3Bvc2UoKTtcbiAgICB9XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgZWFjaCB0aW1lIGEgZGVwZW5kZW5jeSBpcyBkZXRlY3RlZCB3aGlsZSBldmFsdWF0aW5nIGEgY29tcHV0ZWQuXG4vLyBJdCdzIGZhY3RvcmVkIG91dCBhcyBhIHNoYXJlZCBmdW5jdGlvbiB0byBhdm9pZCBjcmVhdGluZyB1bm5lY2Vzc2FyeSBmdW5jdGlvbiBpbnN0YW5jZXMgZHVyaW5nIGV2YWx1YXRpb24uXG5mdW5jdGlvbiBjb21wdXRlZEJlZ2luRGVwZW5kZW5jeURldGVjdGlvbkNhbGxiYWNrKHN1YnNjcmliYWJsZSwgaWQpIHtcbiAgICB2YXIgY29tcHV0ZWRPYnNlcnZhYmxlID0gdGhpcy5jb21wdXRlZE9ic2VydmFibGUsXG4gICAgICAgIHN0YXRlID0gY29tcHV0ZWRPYnNlcnZhYmxlW2NvbXB1dGVkU3RhdGVdO1xuICAgIGlmICghc3RhdGUuaXNEaXNwb3NlZCkge1xuICAgICAgICBpZiAodGhpcy5kaXNwb3NhbENvdW50ICYmIHRoaXMuZGlzcG9zYWxDYW5kaWRhdGVzW2lkXSkge1xuICAgICAgICAgICAgLy8gRG9uJ3Qgd2FudCB0byBkaXNwb3NlIHRoaXMgc3Vic2NyaXB0aW9uLCBhcyBpdCdzIHN0aWxsIGJlaW5nIHVzZWRcbiAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZS5hZGREZXBlbmRlbmN5VHJhY2tpbmcoaWQsIHN1YnNjcmliYWJsZSwgdGhpcy5kaXNwb3NhbENhbmRpZGF0ZXNbaWRdKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zYWxDYW5kaWRhdGVzW2lkXSA9IG51bGw7IC8vIE5vIG5lZWQgdG8gYWN0dWFsbHkgZGVsZXRlIHRoZSBwcm9wZXJ0eSAtIGRpc3Bvc2FsQ2FuZGlkYXRlcyBpcyBhIHRyYW5zaWVudCBvYmplY3QgYW55d2F5XG4gICAgICAgICAgICAtLXRoaXMuZGlzcG9zYWxDb3VudDtcbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nW2lkXSkge1xuICAgICAgICAgICAgLy8gQnJhbmQgbmV3IHN1YnNjcmlwdGlvbiAtIGFkZCBpdFxuICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlLmFkZERlcGVuZGVuY3lUcmFja2luZyhpZCwgc3Vic2NyaWJhYmxlLCBzdGF0ZS5pc1NsZWVwaW5nID8geyBfdGFyZ2V0OiBzdWJzY3JpYmFibGUgfSA6IGNvbXB1dGVkT2JzZXJ2YWJsZS5zdWJzY3JpYmVUb0RlcGVuZGVuY3koc3Vic2NyaWJhYmxlKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIG9ic2VydmFibGUgd2UndmUgYWNjZXNzZWQgaGFzIGEgcGVuZGluZyBub3RpZmljYXRpb24sIGVuc3VyZSB3ZSBnZXQgbm90aWZpZWQgb2YgdGhlIGFjdHVhbCBmaW5hbCB2YWx1ZSAoYnlwYXNzIGVxdWFsaXR5IGNoZWNrcylcbiAgICAgICAgaWYgKHN1YnNjcmliYWJsZS5fbm90aWZpY2F0aW9uSXNQZW5kaW5nKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmFibGUuX25vdGlmeU5leHRDaGFuZ2VJZlZhbHVlSXNEaWZmZXJlbnQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIGNvbXB1dGVkRm4gPSB7XG4gICAgXCJlcXVhbGl0eUNvbXBhcmVyXCI6IHZhbHVlc0FyZVByaW1pdGl2ZUFuZEVxdWFsLFxuICAgIGdldERlcGVuZGVuY2llc0NvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2NvbXB1dGVkU3RhdGVdLmRlcGVuZGVuY2llc0NvdW50O1xuICAgIH0sXG4gICAgYWRkRGVwZW5kZW5jeVRyYWNraW5nOiBmdW5jdGlvbiAoaWQsIHRhcmdldCwgdHJhY2tpbmdPYmopIHtcbiAgICAgICAgaWYgKHRoaXNbY29tcHV0ZWRTdGF0ZV0ucHVyZSAmJiB0YXJnZXQgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiQSAncHVyZScgY29tcHV0ZWQgbXVzdCBub3QgYmUgY2FsbGVkIHJlY3Vyc2l2ZWx5XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1tjb21wdXRlZFN0YXRlXS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdID0gdHJhY2tpbmdPYmo7XG4gICAgICAgIHRyYWNraW5nT2JqLl9vcmRlciA9IHRoaXNbY29tcHV0ZWRTdGF0ZV0uZGVwZW5kZW5jaWVzQ291bnQrKztcbiAgICAgICAgdHJhY2tpbmdPYmouX3ZlcnNpb24gPSB0YXJnZXQuZ2V0VmVyc2lvbigpO1xuICAgIH0sXG4gICAgaGF2ZURlcGVuZGVuY2llc0NoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlkLCBkZXBlbmRlbmN5LCBkZXBlbmRlbmN5VHJhY2tpbmcgPSB0aGlzW2NvbXB1dGVkU3RhdGVdLmRlcGVuZGVuY3lUcmFja2luZztcbiAgICAgICAgZm9yIChpZCBpbiBkZXBlbmRlbmN5VHJhY2tpbmcpIHtcbiAgICAgICAgICAgIGlmIChkZXBlbmRlbmN5VHJhY2tpbmcuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY3lUcmFja2luZ1tpZF07XG4gICAgICAgICAgICAgICAgaWYgKCh0aGlzLl9ldmFsRGVsYXllZCAmJiBkZXBlbmRlbmN5Ll90YXJnZXQuX25vdGlmaWNhdGlvbklzUGVuZGluZykgfHwgZGVwZW5kZW5jeS5fdGFyZ2V0Lmhhc0NoYW5nZWQoZGVwZW5kZW5jeS5fdmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBtYXJrRGlydHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUHJvY2VzcyBcImRpcnR5XCIgZXZlbnRzIGlmIHdlIGNhbiBoYW5kbGUgZGVsYXllZCBub3RpZmljYXRpb25zXG4gICAgICAgIGlmICh0aGlzLl9ldmFsRGVsYXllZCAmJiAhdGhpc1tjb21wdXRlZFN0YXRlXS5pc0JlaW5nRXZhbHVhdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmFsRGVsYXllZChmYWxzZSAvKmlzQ2hhbmdlKi8pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBpc0FjdGl2ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzW2NvbXB1dGVkU3RhdGVdO1xuICAgICAgICByZXR1cm4gc3RhdGUuaXNEaXJ0eSB8fCBzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudCA+IDA7XG4gICAgfSxcbiAgICByZXNwb25kVG9DaGFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWdub3JlIFwiY2hhbmdlXCIgZXZlbnRzIGlmIHdlJ3ZlIGFscmVhZHkgc2NoZWR1bGVkIGEgZGVsYXllZCBub3RpZmljYXRpb25cbiAgICAgICAgaWYgKCF0aGlzLl9ub3RpZmljYXRpb25Jc1BlbmRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZXZhbHVhdGVQb3NzaWJseUFzeW5jKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpc1tjb21wdXRlZFN0YXRlXS5pc0RpcnR5KSB7XG4gICAgICAgICAgICB0aGlzW2NvbXB1dGVkU3RhdGVdLmlzU3RhbGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzdWJzY3JpYmVUb0RlcGVuZGVuY3k6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldC5fZGVmZXJVcGRhdGVzICYmICF0aGlzW2NvbXB1dGVkU3RhdGVdLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCkge1xuICAgICAgICAgICAgdmFyIGRpcnR5U3ViID0gdGFyZ2V0LnN1YnNjcmliZSh0aGlzLm1hcmtEaXJ0eSwgdGhpcywgJ2RpcnR5JyksXG4gICAgICAgICAgICAgICAgY2hhbmdlU3ViID0gdGFyZ2V0LnN1YnNjcmliZSh0aGlzLnJlc3BvbmRUb0NoYW5nZSwgdGhpcyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIF90YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpcnR5U3ViLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlU3ViLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5zdWJzY3JpYmUodGhpcy5ldmFsdWF0ZVBvc3NpYmx5QXN5bmMsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBldmFsdWF0ZVBvc3NpYmx5QXN5bmM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbXB1dGVkT2JzZXJ2YWJsZSA9IHRoaXMsXG4gICAgICAgICAgICB0aHJvdHRsZUV2YWx1YXRpb25UaW1lb3V0ID0gY29tcHV0ZWRPYnNlcnZhYmxlWyd0aHJvdHRsZUV2YWx1YXRpb24nXTtcbiAgICAgICAgaWYgKHRocm90dGxlRXZhbHVhdGlvblRpbWVvdXQgJiYgdGhyb3R0bGVFdmFsdWF0aW9uVGltZW91dCA+PSAwKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpc1tjb21wdXRlZFN0YXRlXS5ldmFsdWF0aW9uVGltZW91dEluc3RhbmNlKTtcbiAgICAgICAgICAgIHRoaXNbY29tcHV0ZWRTdGF0ZV0uZXZhbHVhdGlvblRpbWVvdXRJbnN0YW5jZSA9IGtvLnV0aWxzLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZS5ldmFsdWF0ZUltbWVkaWF0ZSh0cnVlIC8qbm90aWZ5Q2hhbmdlKi8pO1xuICAgICAgICAgICAgfSwgdGhyb3R0bGVFdmFsdWF0aW9uVGltZW91dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29tcHV0ZWRPYnNlcnZhYmxlLl9ldmFsRGVsYXllZCkge1xuICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlLl9ldmFsRGVsYXllZCh0cnVlIC8qaXNDaGFuZ2UqLyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wdXRlZE9ic2VydmFibGUuZXZhbHVhdGVJbW1lZGlhdGUodHJ1ZSAvKm5vdGlmeUNoYW5nZSovKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZXZhbHVhdGVJbW1lZGlhdGU6IGZ1bmN0aW9uIChub3RpZnlDaGFuZ2UpIHtcbiAgICAgICAgdmFyIGNvbXB1dGVkT2JzZXJ2YWJsZSA9IHRoaXMsXG4gICAgICAgICAgICBzdGF0ZSA9IGNvbXB1dGVkT2JzZXJ2YWJsZVtjb21wdXRlZFN0YXRlXSxcbiAgICAgICAgICAgIGRpc3Bvc2VXaGVuID0gc3RhdGUuZGlzcG9zZVdoZW4sXG4gICAgICAgICAgICBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHN0YXRlLmlzQmVpbmdFdmFsdWF0ZWQpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBldmFsdWF0aW9uIG9mIGEga28uY29tcHV0ZWQgY2F1c2VzIHNpZGUgZWZmZWN0cywgaXQncyBwb3NzaWJsZSB0aGF0IGl0IHdpbGwgdHJpZ2dlciBpdHMgb3duIHJlLWV2YWx1YXRpb24uXG4gICAgICAgICAgICAvLyBUaGlzIGlzIG5vdCBkZXNpcmFibGUgKGl0J3MgaGFyZCBmb3IgYSBkZXZlbG9wZXIgdG8gcmVhbGlzZSBhIGNoYWluIG9mIGRlcGVuZGVuY2llcyBtaWdodCBjYXVzZSB0aGlzLCBhbmQgdGhleSBhbG1vc3RcbiAgICAgICAgICAgIC8vIGNlcnRhaW5seSBkaWRuJ3QgaW50ZW5kIGluZmluaXRlIHJlLWV2YWx1YXRpb25zKS4gU28sIGZvciBwcmVkaWN0YWJpbGl0eSwgd2Ugc2ltcGx5IHByZXZlbnQga28uY29tcHV0ZWRzIGZyb20gY2F1c2luZ1xuICAgICAgICAgICAgLy8gdGhlaXIgb3duIHJlLWV2YWx1YXRpb24uIEZ1cnRoZXIgZGlzY3Vzc2lvbiBhdCBodHRwczovL2dpdGh1Yi5jb20vU3RldmVTYW5kZXJzb24va25vY2tvdXQvcHVsbC8zODdcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvIG5vdCBldmFsdWF0ZSAoYW5kIHBvc3NpYmx5IGNhcHR1cmUgbmV3IGRlcGVuZGVuY2llcykgaWYgZGlzcG9zZWRcbiAgICAgICAgaWYgKHN0YXRlLmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQgJiYgIWtvLnV0aWxzLmRvbU5vZGVJc0F0dGFjaGVkVG9Eb2N1bWVudChzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQpIHx8IGRpc3Bvc2VXaGVuICYmIGRpc3Bvc2VXaGVuKCkpIHtcbiAgICAgICAgICAgIC8vIFNlZSBjb21tZW50IGFib3ZlIGFib3V0IHN1cHByZXNzRGlzcG9zYWxVbnRpbERpc3Bvc2VXaGVuUmV0dXJuc0ZhbHNlXG4gICAgICAgICAgICBpZiAoIXN0YXRlLnN1cHByZXNzRGlzcG9zYWxVbnRpbERpc3Bvc2VXaGVuUmV0dXJuc0ZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJdCBqdXN0IGRpZCByZXR1cm4gZmFsc2UsIHNvIHdlIGNhbiBzdG9wIHN1cHByZXNzaW5nIG5vd1xuICAgICAgICAgICAgc3RhdGUuc3VwcHJlc3NEaXNwb3NhbFVudGlsRGlzcG9zZVdoZW5SZXR1cm5zRmFsc2UgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLmlzQmVpbmdFdmFsdWF0ZWQgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRoaXMuZXZhbHVhdGVJbW1lZGlhdGVfQ2FsbFJlYWRXaXRoRGVwZW5kZW5jeURldGVjdGlvbihub3RpZnlDaGFuZ2UpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgc3RhdGUuaXNCZWluZ0V2YWx1YXRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudCkge1xuICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH0sXG4gICAgZXZhbHVhdGVJbW1lZGlhdGVfQ2FsbFJlYWRXaXRoRGVwZW5kZW5jeURldGVjdGlvbjogZnVuY3Rpb24gKG5vdGlmeUNoYW5nZSkge1xuICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHJlYWxseSBqdXN0IHBhcnQgb2YgdGhlIGV2YWx1YXRlSW1tZWRpYXRlIGxvZ2ljLiBZb3Ugd291bGQgbmV2ZXIgY2FsbCBpdCBmcm9tIGFueXdoZXJlIGVsc2UuXG4gICAgICAgIC8vIEZhY3RvcmluZyBpdCBvdXQgaW50byBhIHNlcGFyYXRlIGZ1bmN0aW9uIG1lYW5zIGl0IGNhbiBiZSBpbmRlcGVuZGVudCBvZiB0aGUgdHJ5L2NhdGNoIGJsb2NrIGluIGV2YWx1YXRlSW1tZWRpYXRlLFxuICAgICAgICAvLyB3aGljaCBjb250cmlidXRlcyB0byBzYXZpbmcgYWJvdXQgNDAlIG9mZiB0aGUgQ1BVIG92ZXJoZWFkIG9mIGNvbXB1dGVkIGV2YWx1YXRpb24gKG9uIFY4IGF0IGxlYXN0KS5cblxuICAgICAgICB2YXIgY29tcHV0ZWRPYnNlcnZhYmxlID0gdGhpcyxcbiAgICAgICAgICAgIHN0YXRlID0gY29tcHV0ZWRPYnNlcnZhYmxlW2NvbXB1dGVkU3RhdGVdLFxuICAgICAgICAgICAgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIEluaXRpYWxseSwgd2UgYXNzdW1lIHRoYXQgbm9uZSBvZiB0aGUgc3Vic2NyaXB0aW9ucyBhcmUgc3RpbGwgYmVpbmcgdXNlZCAoaS5lLiwgYWxsIGFyZSBjYW5kaWRhdGVzIGZvciBkaXNwb3NhbCkuXG4gICAgICAgIC8vIFRoZW4sIGR1cmluZyBldmFsdWF0aW9uLCB3ZSBjcm9zcyBvZmYgYW55IHRoYXQgYXJlIGluIGZhY3Qgc3RpbGwgYmVpbmcgdXNlZC5cbiAgICAgICAgdmFyIGlzSW5pdGlhbCA9IHN0YXRlLnB1cmUgPyB1bmRlZmluZWQgOiAhc3RhdGUuZGVwZW5kZW5jaWVzQ291bnQsICAgLy8gSWYgd2UncmUgZXZhbHVhdGluZyB3aGVuIHRoZXJlIGFyZSBubyBwcmV2aW91cyBkZXBlbmRlbmNpZXMsIGl0IG11c3QgYmUgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgICAgIGRlcGVuZGVuY3lEZXRlY3Rpb25Db250ZXh0ID0ge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZTogY29tcHV0ZWRPYnNlcnZhYmxlLFxuICAgICAgICAgICAgICAgIGRpc3Bvc2FsQ2FuZGlkYXRlczogc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nLFxuICAgICAgICAgICAgICAgIGRpc3Bvc2FsQ291bnQ6IHN0YXRlLmRlcGVuZGVuY2llc0NvdW50XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uYmVnaW4oe1xuICAgICAgICAgICAgY2FsbGJhY2tUYXJnZXQ6IGRlcGVuZGVuY3lEZXRlY3Rpb25Db250ZXh0LFxuICAgICAgICAgICAgY2FsbGJhY2s6IGNvbXB1dGVkQmVnaW5EZXBlbmRlbmN5RGV0ZWN0aW9uQ2FsbGJhY2ssXG4gICAgICAgICAgICBjb21wdXRlZDogY29tcHV0ZWRPYnNlcnZhYmxlLFxuICAgICAgICAgICAgaXNJbml0aWFsOiBpc0luaXRpYWxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nID0ge307XG4gICAgICAgIHN0YXRlLmRlcGVuZGVuY2llc0NvdW50ID0gMDtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSB0aGlzLmV2YWx1YXRlSW1tZWRpYXRlX0NhbGxSZWFkVGhlbkVuZERlcGVuZGVuY3lEZXRlY3Rpb24oc3RhdGUsIGRlcGVuZGVuY3lEZXRlY3Rpb25Db250ZXh0KTtcblxuICAgICAgICBpZiAoY29tcHV0ZWRPYnNlcnZhYmxlLmlzRGlmZmVyZW50KHN0YXRlLmxhdGVzdFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICghc3RhdGUuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZVtcIm5vdGlmeVN1YnNjcmliZXJzXCJdKHN0YXRlLmxhdGVzdFZhbHVlLCBcImJlZm9yZUNoYW5nZVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhdGUubGF0ZXN0VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIGlmIChERUJVRykgY29tcHV0ZWRPYnNlcnZhYmxlLl9sYXRlc3RWYWx1ZSA9IG5ld1ZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZS51cGRhdGVWZXJzaW9uKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGlmeUNoYW5nZSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZVtcIm5vdGlmeVN1YnNjcmliZXJzXCJdKHN0YXRlLmxhdGVzdFZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNJbml0aWFsKSB7XG4gICAgICAgICAgICBjb21wdXRlZE9ic2VydmFibGVbXCJub3RpZnlTdWJzY3JpYmVyc1wiXShzdGF0ZS5sYXRlc3RWYWx1ZSwgXCJhd2FrZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH0sXG4gICAgZXZhbHVhdGVJbW1lZGlhdGVfQ2FsbFJlYWRUaGVuRW5kRGVwZW5kZW5jeURldGVjdGlvbjogZnVuY3Rpb24gKHN0YXRlLCBkZXBlbmRlbmN5RGV0ZWN0aW9uQ29udGV4dCkge1xuICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHJlYWxseSBwYXJ0IG9mIHRoZSBldmFsdWF0ZUltbWVkaWF0ZV9DYWxsUmVhZFdpdGhEZXBlbmRlbmN5RGV0ZWN0aW9uIGxvZ2ljLlxuICAgICAgICAvLyBZb3UnZCBuZXZlciBjYWxsIGl0IGZyb20gYW55d2hlcmUgZWxzZS4gRmFjdG9yaW5nIGl0IG91dCBtZWFucyB0aGF0IGV2YWx1YXRlSW1tZWRpYXRlX0NhbGxSZWFkV2l0aERlcGVuZGVuY3lEZXRlY3Rpb25cbiAgICAgICAgLy8gY2FuIGJlIGluZGVwZW5kZW50IG9mIHRyeS9maW5hbGx5IGJsb2Nrcywgd2hpY2ggY29udHJpYnV0ZXMgdG8gc2F2aW5nIGFib3V0IDQwJSBvZmYgdGhlIENQVVxuICAgICAgICAvLyBvdmVyaGVhZCBvZiBjb21wdXRlZCBldmFsdWF0aW9uIChvbiBWOCBhdCBsZWFzdCkuXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZWFkRnVuY3Rpb24gPSBzdGF0ZS5yZWFkRnVuY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuZXZhbHVhdG9yRnVuY3Rpb25UYXJnZXQgPyByZWFkRnVuY3Rpb24uY2FsbChzdGF0ZS5ldmFsdWF0b3JGdW5jdGlvblRhcmdldCkgOiByZWFkRnVuY3Rpb24oKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uZW5kKCk7XG5cbiAgICAgICAgICAgIC8vIEZvciBlYWNoIHN1YnNjcmlwdGlvbiBubyBsb25nZXIgYmVpbmcgdXNlZCwgcmVtb3ZlIGl0IGZyb20gdGhlIGFjdGl2ZSBzdWJzY3JpcHRpb25zIGxpc3QgYW5kIGRpc3Bvc2UgaXRcbiAgICAgICAgICAgIGlmIChkZXBlbmRlbmN5RGV0ZWN0aW9uQ29udGV4dC5kaXNwb3NhbENvdW50ICYmICFzdGF0ZS5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAga28udXRpbHMub2JqZWN0Rm9yRWFjaChkZXBlbmRlbmN5RGV0ZWN0aW9uQ29udGV4dC5kaXNwb3NhbENhbmRpZGF0ZXMsIGNvbXB1dGVkRGlzcG9zZURlcGVuZGVuY3lDYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXRlLmlzU3RhbGUgPSBzdGF0ZS5pc0RpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHBlZWs6IGZ1bmN0aW9uIChldmFsdWF0ZSkge1xuICAgICAgICAvLyBCeSBkZWZhdWx0LCBwZWVrIHdvbid0IHJlLWV2YWx1YXRlLCBleGNlcHQgd2hpbGUgdGhlIGNvbXB1dGVkIGlzIHNsZWVwaW5nIG9yIHRvIGdldCB0aGUgaW5pdGlhbCB2YWx1ZSB3aGVuIFwiZGVmZXJFdmFsdWF0aW9uXCIgaXMgc2V0LlxuICAgICAgICAvLyBQYXNzIGluIHRydWUgdG8gZXZhbHVhdGUgaWYgbmVlZGVkLlxuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzW2NvbXB1dGVkU3RhdGVdO1xuICAgICAgICBpZiAoKHN0YXRlLmlzRGlydHkgJiYgKGV2YWx1YXRlIHx8ICFzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudCkpIHx8IChzdGF0ZS5pc1NsZWVwaW5nICYmIHRoaXMuaGF2ZURlcGVuZGVuY2llc0NoYW5nZWQoKSkpIHtcbiAgICAgICAgICAgIHRoaXMuZXZhbHVhdGVJbW1lZGlhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGUubGF0ZXN0VmFsdWU7XG4gICAgfSxcbiAgICBsaW1pdDogZnVuY3Rpb24gKGxpbWl0RnVuY3Rpb24pIHtcbiAgICAgICAgLy8gT3ZlcnJpZGUgdGhlIGxpbWl0IGZ1bmN0aW9uIHdpdGggb25lIHRoYXQgZGVsYXlzIGV2YWx1YXRpb24gYXMgd2VsbFxuICAgICAgICBrby5zdWJzY3JpYmFibGVbJ2ZuJ10ubGltaXQuY2FsbCh0aGlzLCBsaW1pdEZ1bmN0aW9uKTtcbiAgICAgICAgdGhpcy5fZXZhbElmQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2NvbXB1dGVkU3RhdGVdLmlzU3RhbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2YWx1YXRlSW1tZWRpYXRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXNbY29tcHV0ZWRTdGF0ZV0uaXNEaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNbY29tcHV0ZWRTdGF0ZV0ubGF0ZXN0VmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2V2YWxEZWxheWVkID0gZnVuY3Rpb24gKGlzQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLl9saW1pdEJlZm9yZUNoYW5nZSh0aGlzW2NvbXB1dGVkU3RhdGVdLmxhdGVzdFZhbHVlKTtcblxuICAgICAgICAgICAgLy8gTWFyayBhcyBkaXJ0eVxuICAgICAgICAgICAgdGhpc1tjb21wdXRlZFN0YXRlXS5pc0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChpc0NoYW5nZSkge1xuICAgICAgICAgICAgICAgIHRoaXNbY29tcHV0ZWRTdGF0ZV0uaXNTdGFsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBhc3MgdGhlIG9ic2VydmFibGUgdG8gdGhlIFwibGltaXRcIiBjb2RlLCB3aGljaCB3aWxsIGV2YWx1YXRlIGl0IHdoZW5cbiAgICAgICAgICAgIC8vIGl0J3MgdGltZSB0byBkbyB0aGUgbm90aWZpY2F0aW9uLlxuICAgICAgICAgICAgdGhpcy5fbGltaXRDaGFuZ2UodGhpcyk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXNbY29tcHV0ZWRTdGF0ZV07XG4gICAgICAgIGlmICghc3RhdGUuaXNTbGVlcGluZyAmJiBzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmcpIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2goc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nLCBmdW5jdGlvbiAoaWQsIGRlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jeS5kaXNwb3NlKVxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQgJiYgc3RhdGUuZG9tTm9kZURpc3Bvc2FsQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5yZW1vdmVEaXNwb3NlQ2FsbGJhY2soc3RhdGUuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkLCBzdGF0ZS5kb21Ob2RlRGlzcG9zYWxDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nID0gbnVsbDtcbiAgICAgICAgc3RhdGUuZGVwZW5kZW5jaWVzQ291bnQgPSAwO1xuICAgICAgICBzdGF0ZS5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUuaXNTdGFsZSA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5pc0RpcnR5ID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmlzU2xlZXBpbmcgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkID0gbnVsbDtcbiAgICB9XG59O1xuXG52YXIgcHVyZUNvbXB1dGVkT3ZlcnJpZGVzID0ge1xuICAgIGJlZm9yZVN1YnNjcmlwdGlvbkFkZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIElmIGFzbGVlcCwgd2FrZSB1cCB0aGUgY29tcHV0ZWQgYnkgc3Vic2NyaWJpbmcgdG8gYW55IGRlcGVuZGVuY2llcy5cbiAgICAgICAgdmFyIGNvbXB1dGVkT2JzZXJ2YWJsZSA9IHRoaXMsXG4gICAgICAgICAgICBzdGF0ZSA9IGNvbXB1dGVkT2JzZXJ2YWJsZVtjb21wdXRlZFN0YXRlXTtcbiAgICAgICAgaWYgKCFzdGF0ZS5pc0Rpc3Bvc2VkICYmIHN0YXRlLmlzU2xlZXBpbmcgJiYgZXZlbnQgPT0gJ2NoYW5nZScpIHtcbiAgICAgICAgICAgIHN0YXRlLmlzU2xlZXBpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc1N0YWxlIHx8IGNvbXB1dGVkT2JzZXJ2YWJsZS5oYXZlRGVwZW5kZW5jaWVzQ2hhbmdlZCgpKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXB1dGVkT2JzZXJ2YWJsZS5ldmFsdWF0ZUltbWVkaWF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZS51cGRhdGVWZXJzaW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGaXJzdCBwdXQgdGhlIGRlcGVuZGVuY2llcyBpbiBvcmRlclxuICAgICAgICAgICAgICAgIHZhciBkZXBlbmRlY2llc09yZGVyID0gW107XG4gICAgICAgICAgICAgICAga28udXRpbHMub2JqZWN0Rm9yRWFjaChzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmcsIGZ1bmN0aW9uIChpZCwgZGVwZW5kZW5jeSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlY2llc09yZGVyW2RlcGVuZGVuY3kuX29yZGVyXSA9IGlkO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIE5leHQsIHN1YnNjcmliZSB0byBlYWNoIG9uZVxuICAgICAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5Rm9yRWFjaChkZXBlbmRlY2llc09yZGVyLCBmdW5jdGlvbiAoaWQsIG9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXBlbmRlbmN5ID0gc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nW2lkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IGNvbXB1dGVkT2JzZXJ2YWJsZS5zdWJzY3JpYmVUb0RlcGVuZGVuY3koZGVwZW5kZW5jeS5fdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9vcmRlciA9IG9yZGVyO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uX3ZlcnNpb24gPSBkZXBlbmRlbmN5Ll92ZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5pc0Rpc3Bvc2VkKSB7ICAgICAvLyB0ZXN0IHNpbmNlIGV2YWx1YXRpbmcgY291bGQgdHJpZ2dlciBkaXNwb3NhbFxuICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZVtcIm5vdGlmeVN1YnNjcmliZXJzXCJdKHN0YXRlLmxhdGVzdFZhbHVlLCBcImF3YWtlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBhZnRlclN1YnNjcmlwdGlvblJlbW92ZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXNbY29tcHV0ZWRTdGF0ZV07XG4gICAgICAgIGlmICghc3RhdGUuaXNEaXNwb3NlZCAmJiBldmVudCA9PSAnY2hhbmdlJyAmJiAhdGhpcy5oYXNTdWJzY3JpcHRpb25zRm9yRXZlbnQoJ2NoYW5nZScpKSB7XG4gICAgICAgICAgICBrby51dGlscy5vYmplY3RGb3JFYWNoKHN0YXRlLmRlcGVuZGVuY3lUcmFja2luZywgZnVuY3Rpb24gKGlkLCBkZXBlbmRlbmN5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlcGVuZGVuY3kuZGlzcG9zZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RhcmdldDogZGVwZW5kZW5jeS5fdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgX29yZGVyOiBkZXBlbmRlbmN5Ll9vcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIF92ZXJzaW9uOiBkZXBlbmRlbmN5Ll92ZXJzaW9uXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3kuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdGUuaXNTbGVlcGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzW1wibm90aWZ5U3Vic2NyaWJlcnNcIl0odW5kZWZpbmVkLCBcImFzbGVlcFwiKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0VmVyc2lvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBCZWNhdXNlIGEgcHVyZSBjb21wdXRlZCBpcyBub3QgYXV0b21hdGljYWxseSB1cGRhdGVkIHdoaWxlIGl0IGlzIHNsZWVwaW5nLCB3ZSBjYW4ndFxuICAgICAgICAvLyBzaW1wbHkgcmV0dXJuIHRoZSB2ZXJzaW9uIG51bWJlci4gSW5zdGVhZCwgd2UgY2hlY2sgaWYgYW55IG9mIHRoZSBkZXBlbmRlbmNpZXMgaGF2ZVxuICAgICAgICAvLyBjaGFuZ2VkIGFuZCBjb25kaXRpb25hbGx5IHJlLWV2YWx1YXRlIHRoZSBjb21wdXRlZCBvYnNlcnZhYmxlLlxuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzW2NvbXB1dGVkU3RhdGVdO1xuICAgICAgICBpZiAoc3RhdGUuaXNTbGVlcGluZyAmJiAoc3RhdGUuaXNTdGFsZSB8fCB0aGlzLmhhdmVEZXBlbmRlbmNpZXNDaGFuZ2VkKCkpKSB7XG4gICAgICAgICAgICB0aGlzLmV2YWx1YXRlSW1tZWRpYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtvLnN1YnNjcmliYWJsZVsnZm4nXS5nZXRWZXJzaW9uLmNhbGwodGhpcyk7XG4gICAgfVxufTtcblxudmFyIGRlZmVyRXZhbHVhdGlvbk92ZXJyaWRlcyA9IHtcbiAgICBiZWZvcmVTdWJzY3JpcHRpb25BZGQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgZm9yY2UgYSBjb21wdXRlZCB3aXRoIGRlZmVyRXZhbHVhdGlvbiB0byBldmFsdWF0ZSB3aGVuIHRoZSBmaXJzdCBzdWJzY3JpcHRpb24gaXMgcmVnaXN0ZXJlZC5cbiAgICAgICAgaWYgKGV2ZW50ID09ICdjaGFuZ2UnIHx8IGV2ZW50ID09ICdiZWZvcmVDaGFuZ2UnKSB7XG4gICAgICAgICAgICB0aGlzLnBlZWsoKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIE5vdGUgdGhhdCBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHByb3RvIGFzc2lnbm1lbnQsIHRoZVxuLy8gaW5oZXJpdGFuY2UgY2hhaW4gaXMgY3JlYXRlZCBtYW51YWxseSBpbiB0aGUga28uY29tcHV0ZWQgY29uc3RydWN0b3JcbmlmIChrby51dGlscy5jYW5TZXRQcm90b3R5cGUpIHtcbiAgICBrby51dGlscy5zZXRQcm90b3R5cGVPZihjb21wdXRlZEZuLCBrby5zdWJzY3JpYmFibGVbJ2ZuJ10pO1xufVxuXG4vLyBTZXQgdGhlIHByb3RvIGNoYWluIHZhbHVlcyBmb3Iga28uaGFzUHJvdG90eXBlXG52YXIgcHJvdG9Qcm9wID0ga28ub2JzZXJ2YWJsZS5wcm90b1Byb3BlcnR5OyAvLyA9PSBcIl9fa29fcHJvdG9fX1wiXG5rby5jb21wdXRlZFtwcm90b1Byb3BdID0ga28ub2JzZXJ2YWJsZTtcbmNvbXB1dGVkRm5bcHJvdG9Qcm9wXSA9IGtvLmNvbXB1dGVkO1xuXG5rby5pc0NvbXB1dGVkID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGtvLmhhc1Byb3RvdHlwZShpbnN0YW5jZSwga28uY29tcHV0ZWQpO1xufTtcblxua28uaXNQdXJlQ29tcHV0ZWQgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4ga28uaGFzUHJvdG90eXBlKGluc3RhbmNlLCBrby5jb21wdXRlZClcbiAgICAgICAgJiYgaW5zdGFuY2VbY29tcHV0ZWRTdGF0ZV0gJiYgaW5zdGFuY2VbY29tcHV0ZWRTdGF0ZV0ucHVyZTtcbn07XG5cbmtvLmV4cG9ydFN5bWJvbCgnY29tcHV0ZWQnLCBrby5jb21wdXRlZCk7XG5rby5leHBvcnRTeW1ib2woJ2RlcGVuZGVudE9ic2VydmFibGUnLCBrby5jb21wdXRlZCk7ICAgIC8vIGV4cG9ydCBrby5kZXBlbmRlbnRPYnNlcnZhYmxlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAoMS54KVxua28uZXhwb3J0U3ltYm9sKCdpc0NvbXB1dGVkJywga28uaXNDb21wdXRlZCk7XG5rby5leHBvcnRTeW1ib2woJ2lzUHVyZUNvbXB1dGVkJywga28uaXNQdXJlQ29tcHV0ZWQpO1xua28uZXhwb3J0U3ltYm9sKCdjb21wdXRlZC5mbicsIGNvbXB1dGVkRm4pO1xua28uZXhwb3J0UHJvcGVydHkoY29tcHV0ZWRGbiwgJ3BlZWsnLCBjb21wdXRlZEZuLnBlZWspO1xua28uZXhwb3J0UHJvcGVydHkoY29tcHV0ZWRGbiwgJ2Rpc3Bvc2UnLCBjb21wdXRlZEZuLmRpc3Bvc2UpO1xua28uZXhwb3J0UHJvcGVydHkoY29tcHV0ZWRGbiwgJ2lzQWN0aXZlJywgY29tcHV0ZWRGbi5pc0FjdGl2ZSk7XG5rby5leHBvcnRQcm9wZXJ0eShjb21wdXRlZEZuLCAnZ2V0RGVwZW5kZW5jaWVzQ291bnQnLCBjb21wdXRlZEZuLmdldERlcGVuZGVuY2llc0NvdW50KTtcblxua28ucHVyZUNvbXB1dGVkID0gZnVuY3Rpb24gKGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zLCBldmFsdWF0b3JGdW5jdGlvblRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGtvLmNvbXB1dGVkKGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zLCBldmFsdWF0b3JGdW5jdGlvblRhcmdldCwgeydwdXJlJzp0cnVlfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnMgPSBrby51dGlscy5leHRlbmQoe30sIGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zKTsgICAvLyBtYWtlIGEgY29weSBvZiB0aGUgcGFyYW1ldGVyIG9iamVjdFxuICAgICAgICBldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9uc1sncHVyZSddID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGtvLmNvbXB1dGVkKGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zLCBldmFsdWF0b3JGdW5jdGlvblRhcmdldCk7XG4gICAgfVxufVxua28uZXhwb3J0U3ltYm9sKCdwdXJlQ29tcHV0ZWQnLCBrby5wdXJlQ29tcHV0ZWQpO1xuXG4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1heE5lc3RlZE9ic2VydmFibGVEZXB0aCA9IDEwOyAvLyBFc2NhcGUgdGhlICh1bmxpa2VseSkgcGF0aGFsb2dpY2FsIGNhc2Ugd2hlcmUgYW4gb2JzZXJ2YWJsZSdzIGN1cnJlbnQgdmFsdWUgaXMgaXRzZWxmIChvciBzaW1pbGFyIHJlZmVyZW5jZSBjeWNsZSlcblxuICAgIGtvLnRvSlMgPSBmdW5jdGlvbihyb290T2JqZWN0KSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXaGVuIGNhbGxpbmcga28udG9KUywgcGFzcyB0aGUgb2JqZWN0IHlvdSB3YW50IHRvIGNvbnZlcnQuXCIpO1xuXG4gICAgICAgIC8vIFdlIGp1c3QgdW53cmFwIGV2ZXJ5dGhpbmcgYXQgZXZlcnkgbGV2ZWwgaW4gdGhlIG9iamVjdCBncmFwaFxuICAgICAgICByZXR1cm4gbWFwSnNPYmplY3RHcmFwaChyb290T2JqZWN0LCBmdW5jdGlvbih2YWx1ZVRvTWFwKSB7XG4gICAgICAgICAgICAvLyBMb29wIGJlY2F1c2UgYW4gb2JzZXJ2YWJsZSdzIHZhbHVlIG1pZ2h0IGluIHR1cm4gYmUgYW5vdGhlciBvYnNlcnZhYmxlIHdyYXBwZXJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBrby5pc09ic2VydmFibGUodmFsdWVUb01hcCkgJiYgKGkgPCBtYXhOZXN0ZWRPYnNlcnZhYmxlRGVwdGgpOyBpKyspXG4gICAgICAgICAgICAgICAgdmFsdWVUb01hcCA9IHZhbHVlVG9NYXAoKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVRvTWFwO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAga28udG9KU09OID0gZnVuY3Rpb24ocm9vdE9iamVjdCwgcmVwbGFjZXIsIHNwYWNlKSB7ICAgICAvLyByZXBsYWNlciBhbmQgc3BhY2UgYXJlIG9wdGlvbmFsXG4gICAgICAgIHZhciBwbGFpbkphdmFTY3JpcHRPYmplY3QgPSBrby50b0pTKHJvb3RPYmplY3QpO1xuICAgICAgICByZXR1cm4ga28udXRpbHMuc3RyaW5naWZ5SnNvbihwbGFpbkphdmFTY3JpcHRPYmplY3QsIHJlcGxhY2VyLCBzcGFjZSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG1hcEpzT2JqZWN0R3JhcGgocm9vdE9iamVjdCwgbWFwSW5wdXRDYWxsYmFjaywgdmlzaXRlZE9iamVjdHMpIHtcbiAgICAgICAgdmlzaXRlZE9iamVjdHMgPSB2aXNpdGVkT2JqZWN0cyB8fCBuZXcgb2JqZWN0TG9va3VwKCk7XG5cbiAgICAgICAgcm9vdE9iamVjdCA9IG1hcElucHV0Q2FsbGJhY2socm9vdE9iamVjdCk7XG4gICAgICAgIHZhciBjYW5IYXZlUHJvcGVydGllcyA9ICh0eXBlb2Ygcm9vdE9iamVjdCA9PSBcIm9iamVjdFwiKSAmJiAocm9vdE9iamVjdCAhPT0gbnVsbCkgJiYgKHJvb3RPYmplY3QgIT09IHVuZGVmaW5lZCkgJiYgKCEocm9vdE9iamVjdCBpbnN0YW5jZW9mIFJlZ0V4cCkpICYmICghKHJvb3RPYmplY3QgaW5zdGFuY2VvZiBEYXRlKSkgJiYgKCEocm9vdE9iamVjdCBpbnN0YW5jZW9mIFN0cmluZykpICYmICghKHJvb3RPYmplY3QgaW5zdGFuY2VvZiBOdW1iZXIpKSAmJiAoIShyb290T2JqZWN0IGluc3RhbmNlb2YgQm9vbGVhbikpO1xuICAgICAgICBpZiAoIWNhbkhhdmVQcm9wZXJ0aWVzKVxuICAgICAgICAgICAgcmV0dXJuIHJvb3RPYmplY3Q7XG5cbiAgICAgICAgdmFyIG91dHB1dFByb3BlcnRpZXMgPSByb290T2JqZWN0IGluc3RhbmNlb2YgQXJyYXkgPyBbXSA6IHt9O1xuICAgICAgICB2aXNpdGVkT2JqZWN0cy5zYXZlKHJvb3RPYmplY3QsIG91dHB1dFByb3BlcnRpZXMpO1xuXG4gICAgICAgIHZpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzKHJvb3RPYmplY3QsIGZ1bmN0aW9uKGluZGV4ZXIpIHtcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eVZhbHVlID0gbWFwSW5wdXRDYWxsYmFjayhyb290T2JqZWN0W2luZGV4ZXJdKTtcblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgcHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0UHJvcGVydGllc1tpbmRleGVyXSA9IHByb3BlcnR5VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c2x5TWFwcGVkVmFsdWUgPSB2aXNpdGVkT2JqZWN0cy5nZXQocHJvcGVydHlWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFByb3BlcnRpZXNbaW5kZXhlcl0gPSAocHJldmlvdXNseU1hcHBlZFZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHByZXZpb3VzbHlNYXBwZWRWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBtYXBKc09iamVjdEdyYXBoKHByb3BlcnR5VmFsdWUsIG1hcElucHV0Q2FsbGJhY2ssIHZpc2l0ZWRPYmplY3RzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvdXRwdXRQcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzKHJvb3RPYmplY3QsIHZpc2l0b3JDYWxsYmFjaykge1xuICAgICAgICBpZiAocm9vdE9iamVjdCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvb3RPYmplY3QubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgdmlzaXRvckNhbGxiYWNrKGkpO1xuXG4gICAgICAgICAgICAvLyBGb3IgYXJyYXlzLCBhbHNvIHJlc3BlY3QgdG9KU09OIHByb3BlcnR5IGZvciBjdXN0b20gbWFwcGluZ3MgKGZpeGVzICMyNzgpXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJvb3RPYmplY3RbJ3RvSlNPTiddID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgdmlzaXRvckNhbGxiYWNrKCd0b0pTT04nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiByb290T2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmlzaXRvckNhbGxiYWNrKHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gb2JqZWN0TG9va3VwKCkge1xuICAgICAgICB0aGlzLmtleXMgPSBbXTtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcbiAgICB9O1xuXG4gICAgb2JqZWN0TG9va3VwLnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IG9iamVjdExvb2t1cCxcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGV4aXN0aW5nSW5kZXggPSBrby51dGlscy5hcnJheUluZGV4T2YodGhpcy5rZXlzLCBrZXkpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nSW5kZXggPj0gMClcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1tleGlzdGluZ0luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciBleGlzdGluZ0luZGV4ID0ga28udXRpbHMuYXJyYXlJbmRleE9mKHRoaXMua2V5cywga2V5KTtcbiAgICAgICAgICAgIHJldHVybiAoZXhpc3RpbmdJbmRleCA+PSAwKSA/IHRoaXMudmFsdWVzW2V4aXN0aW5nSW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgndG9KUycsIGtvLnRvSlMpO1xua28uZXhwb3J0U3ltYm9sKCd0b0pTT04nLCBrby50b0pTT04pO1xuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzRG9tRGF0YUV4cGFuZG9Qcm9wZXJ0eSA9ICdfX2tvX19oYXNEb21EYXRhT3B0aW9uVmFsdWVfXyc7XG5cbiAgICAvLyBOb3JtYWxseSwgU0VMRUNUIGVsZW1lbnRzIGFuZCB0aGVpciBPUFRJT05zIGNhbiBvbmx5IHRha2UgdmFsdWUgb2YgdHlwZSAnc3RyaW5nJyAoYmVjYXVzZSB0aGUgdmFsdWVzXG4gICAgLy8gYXJlIHN0b3JlZCBvbiBET00gYXR0cmlidXRlcykuIGtvLnNlbGVjdEV4dGVuc2lvbnMgcHJvdmlkZXMgYSB3YXkgZm9yIFNFTEVDVHMvT1BUSU9OcyB0byBoYXZlIHZhbHVlc1xuICAgIC8vIHRoYXQgYXJlIGFyYml0cmFyeSBvYmplY3RzLiBUaGlzIGlzIHZlcnkgY29udmVuaWVudCB3aGVuIGltcGxlbWVudGluZyB0aGluZ3MgbGlrZSBjYXNjYWRpbmcgZHJvcGRvd25zLlxuICAgIGtvLnNlbGVjdEV4dGVuc2lvbnMgPSB7XG4gICAgICAgIHJlYWRWYWx1ZSA6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoa28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRbaGFzRG9tRGF0YUV4cGFuZG9Qcm9wZXJ0eV0gPT09IHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga28udXRpbHMuZG9tRGF0YS5nZXQoZWxlbWVudCwga28uYmluZGluZ0hhbmRsZXJzLm9wdGlvbnMub3B0aW9uVmFsdWVEb21EYXRhS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmllVmVyc2lvbiA8PSA3XG4gICAgICAgICAgICAgICAgICAgICAgICA/IChlbGVtZW50LmdldEF0dHJpYnV0ZU5vZGUoJ3ZhbHVlJykgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGVOb2RlKCd2YWx1ZScpLnNwZWNpZmllZCA/IGVsZW1lbnQudmFsdWUgOiBlbGVtZW50LnRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGVsZW1lbnQudmFsdWU7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuc2VsZWN0ZWRJbmRleCA+PSAwID8ga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUoZWxlbWVudC5vcHRpb25zW2VsZW1lbnQuc2VsZWN0ZWRJbmRleF0pIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlVmFsdWU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlLCBhbGxvd1Vuc2V0KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGtvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LCBrby5iaW5kaW5nSGFuZGxlcnMub3B0aW9ucy5vcHRpb25WYWx1ZURvbURhdGFLZXksIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0RvbURhdGFFeHBhbmRvUHJvcGVydHkgaW4gZWxlbWVudCkgeyAvLyBJRSA8PSA4IHRocm93cyBlcnJvcnMgaWYgeW91IGRlbGV0ZSBub24tZXhpc3RlbnQgcHJvcGVydGllcyBmcm9tIGEgRE9NIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVsZW1lbnRbaGFzRG9tRGF0YUV4cGFuZG9Qcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgYXJiaXRyYXJ5IG9iamVjdCB1c2luZyBEb21EYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCwga28uYmluZGluZ0hhbmRsZXJzLm9wdGlvbnMub3B0aW9uVmFsdWVEb21EYXRhS2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFtoYXNEb21EYXRhRXhwYW5kb1Byb3BlcnR5XSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIHRyZWF0bWVudCBvZiBudW1iZXJzIGlzIGp1c3QgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIEtPIDEuMi4xIHdyb3RlIG51bWVyaWNhbCB2YWx1ZXMgdG8gZWxlbWVudC52YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnZhbHVlID0gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiID8gdmFsdWUgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCkgICAgICAgLy8gQSBibGFuayBzdHJpbmcgb3IgbnVsbCB2YWx1ZSB3aWxsIHNlbGVjdCB0aGUgY2FwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBlbGVtZW50Lm9wdGlvbnMubGVuZ3RoLCBvcHRpb25WYWx1ZTsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uVmFsdWUgPSBrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50Lm9wdGlvbnNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5jbHVkZSBzcGVjaWFsIGNoZWNrIHRvIGhhbmRsZSBzZWxlY3RpbmcgYSBjYXB0aW9uIHdpdGggYSBibGFuayBzdHJpbmcgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25WYWx1ZSA9PSB2YWx1ZSB8fCAob3B0aW9uVmFsdWUgPT0gXCJcIiAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbG93VW5zZXQgfHwgc2VsZWN0aW9uID49IDAgfHwgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbWVudC5zaXplID4gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2VsZWN0ZWRJbmRleCA9IHNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoKHZhbHVlID09PSBudWxsKSB8fCAodmFsdWUgPT09IHVuZGVmaW5lZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxua28uZXhwb3J0U3ltYm9sKCdzZWxlY3RFeHRlbnNpb25zJywga28uc2VsZWN0RXh0ZW5zaW9ucyk7XG5rby5leHBvcnRTeW1ib2woJ3NlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlJywga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUpO1xua28uZXhwb3J0U3ltYm9sKCdzZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUnLCBrby5zZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUpO1xua28uZXhwcmVzc2lvblJld3JpdGluZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGphdmFTY3JpcHRSZXNlcnZlZFdvcmRzID0gW1widHJ1ZVwiLCBcImZhbHNlXCIsIFwibnVsbFwiLCBcInVuZGVmaW5lZFwiXTtcblxuICAgIC8vIE1hdGNoZXMgc29tZXRoaW5nIHRoYXQgY2FuIGJlIGFzc2lnbmVkIHRvLS1laXRoZXIgYW4gaXNvbGF0ZWQgaWRlbnRpZmllciBvciBzb21ldGhpbmcgZW5kaW5nIHdpdGggYSBwcm9wZXJ0eSBhY2Nlc3NvclxuICAgIC8vIFRoaXMgaXMgZGVzaWduZWQgdG8gYmUgc2ltcGxlIGFuZCBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMsIGJ1dCBjb3VsZCBwcm9kdWNlIGZhbHNlIHBvc2l0aXZlcyAoZS5nLiwgYStiLmMpLlxuICAgIC8vIFRoaXMgYWxzbyB3aWxsIG5vdCBwcm9wZXJseSBoYW5kbGUgbmVzdGVkIGJyYWNrZXRzIChlLmcuLCBvYmoxW29iajJbJ3Byb3AnXV07IHNlZSAjOTExKS5cbiAgICB2YXIgamF2YVNjcmlwdEFzc2lnbm1lbnRUYXJnZXQgPSAvXig/OlskX2Etel1bJFxcd10qfCguKykoXFwuXFxzKlskX2Etel1bJFxcd10qfFxcWy4rXFxdKSkkL2k7XG5cbiAgICBmdW5jdGlvbiBnZXRXcml0ZWFibGVWYWx1ZShleHByZXNzaW9uKSB7XG4gICAgICAgIGlmIChrby51dGlscy5hcnJheUluZGV4T2YoamF2YVNjcmlwdFJlc2VydmVkV29yZHMsIGV4cHJlc3Npb24pID49IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goamF2YVNjcmlwdEFzc2lnbm1lbnRUYXJnZXQpO1xuICAgICAgICByZXR1cm4gbWF0Y2ggPT09IG51bGwgPyBmYWxzZSA6IG1hdGNoWzFdID8gKCdPYmplY3QoJyArIG1hdGNoWzFdICsgJyknICsgbWF0Y2hbMl0pIDogZXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMgd2lsbCBiZSB1c2VkIHRvIHNwbGl0IGFuIG9iamVjdC1saXRlcmFsIHN0cmluZyBpbnRvIHRva2Vuc1xuXG4gICAgICAgIC8vIFRoZXNlIHR3byBtYXRjaCBzdHJpbmdzLCBlaXRoZXIgd2l0aCBkb3VibGUgcXVvdGVzIG9yIHNpbmdsZSBxdW90ZXNcbiAgICB2YXIgc3RyaW5nRG91YmxlID0gJ1wiKD86W15cIlxcXFxcXFxcXXxcXFxcXFxcXC4pKlwiJyxcbiAgICAgICAgc3RyaW5nU2luZ2xlID0gXCInKD86W14nXFxcXFxcXFxdfFxcXFxcXFxcLikqJ1wiLFxuICAgICAgICAvLyBNYXRjaGVzIGEgcmVndWxhciBleHByZXNzaW9uICh0ZXh0IGVuY2xvc2VkIGJ5IHNsYXNoZXMpLCBidXQgd2lsbCBhbHNvIG1hdGNoIHNldHMgb2YgZGl2aXNpb25zXG4gICAgICAgIC8vIGFzIGEgcmVndWxhciBleHByZXNzaW9uICh0aGlzIGlzIGhhbmRsZWQgYnkgdGhlIHBhcnNpbmcgbG9vcCBiZWxvdykuXG4gICAgICAgIHN0cmluZ1JlZ2V4cCA9ICcvKD86W14vXFxcXFxcXFxdfFxcXFxcXFxcLikqL1xcdyonLFxuICAgICAgICAvLyBUaGVzZSBjaGFyYWN0ZXJzIGhhdmUgc3BlY2lhbCBtZWFuaW5nIHRvIHRoZSBwYXJzZXIgYW5kIG11c3Qgbm90IGFwcGVhciBpbiB0aGUgbWlkZGxlIG9mIGFcbiAgICAgICAgLy8gdG9rZW4sIGV4Y2VwdCBhcyBwYXJ0IG9mIGEgc3RyaW5nLlxuICAgICAgICBzcGVjaWFscyA9ICcsXCJcXCd7fSgpLzpbXFxcXF0nLFxuICAgICAgICAvLyBNYXRjaCB0ZXh0IChhdCBsZWFzdCB0d28gY2hhcmFjdGVycykgdGhhdCBkb2VzIG5vdCBjb250YWluIGFueSBvZiB0aGUgYWJvdmUgc3BlY2lhbCBjaGFyYWN0ZXJzLFxuICAgICAgICAvLyBhbHRob3VnaCBzb21lIG9mIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnMgYXJlIGFsbG93ZWQgdG8gc3RhcnQgaXQgKGFsbCBidXQgdGhlIGNvbG9uIGFuZCBjb21tYSkuXG4gICAgICAgIC8vIFRoZSB0ZXh0IGNhbiBjb250YWluIHNwYWNlcywgYnV0IGxlYWRpbmcgb3IgdHJhaWxpbmcgc3BhY2VzIGFyZSBza2lwcGVkLlxuICAgICAgICBldmVyeVRoaW5nRWxzZSA9ICdbXlxcXFxzOiwvXVteJyArIHNwZWNpYWxzICsgJ10qW15cXFxccycgKyBzcGVjaWFscyArICddJyxcbiAgICAgICAgLy8gTWF0Y2ggYW55IG5vbi1zcGFjZSBjaGFyYWN0ZXIgbm90IG1hdGNoZWQgYWxyZWFkeS4gVGhpcyB3aWxsIG1hdGNoIGNvbG9ucyBhbmQgY29tbWFzLCBzaW5jZSB0aGV5J3JlXG4gICAgICAgIC8vIG5vdCBtYXRjaGVkIGJ5IFwiZXZlcnlUaGluZ0Vsc2VcIiwgYnV0IHdpbGwgYWxzbyBtYXRjaCBhbnkgb3RoZXIgc2luZ2xlIGNoYXJhY3RlciB0aGF0IHdhc24ndCBhbHJlYWR5XG4gICAgICAgIC8vIG1hdGNoZWQgKGZvciBleGFtcGxlOiBpbiBcImE6IDEsIGI6IDJcIiwgZWFjaCBvZiB0aGUgbm9uLXNwYWNlIGNoYXJhY3RlcnMgd2lsbCBiZSBtYXRjaGVkIGJ5IG9uZU5vdFNwYWNlKS5cbiAgICAgICAgb25lTm90U3BhY2UgPSAnW15cXFxcc10nLFxuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgYWN0dWFsIHJlZ3VsYXIgZXhwcmVzc2lvbiBieSBvci1pbmcgdGhlIGFib3ZlIHN0cmluZ3MuIFRoZSBvcmRlciBpcyBpbXBvcnRhbnQuXG4gICAgICAgIGJpbmRpbmdUb2tlbiA9IFJlZ0V4cChzdHJpbmdEb3VibGUgKyAnfCcgKyBzdHJpbmdTaW5nbGUgKyAnfCcgKyBzdHJpbmdSZWdleHAgKyAnfCcgKyBldmVyeVRoaW5nRWxzZSArICd8JyArIG9uZU5vdFNwYWNlLCAnZycpLFxuXG4gICAgICAgIC8vIE1hdGNoIGVuZCBvZiBwcmV2aW91cyB0b2tlbiB0byBkZXRlcm1pbmUgd2hldGhlciBhIHNsYXNoIGlzIGEgZGl2aXNpb24gb3IgcmVnZXguXG4gICAgICAgIGRpdmlzaW9uTG9va0JlaGluZCA9IC9bXFxdKVwiJ0EtWmEtejAtOV8kXSskLyxcbiAgICAgICAga2V5d29yZFJlZ2V4TG9va0JlaGluZCA9IHsnaW4nOjEsJ3JldHVybic6MSwndHlwZW9mJzoxfTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JqZWN0TGl0ZXJhbChvYmplY3RMaXRlcmFsU3RyaW5nKSB7XG4gICAgICAgIC8vIFRyaW0gbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIHN0cmluZ1xuICAgICAgICB2YXIgc3RyID0ga28udXRpbHMuc3RyaW5nVHJpbShvYmplY3RMaXRlcmFsU3RyaW5nKTtcblxuICAgICAgICAvLyBUcmltIGJyYWNlcyAneycgc3Vycm91bmRpbmcgdGhlIHdob2xlIG9iamVjdCBsaXRlcmFsXG4gICAgICAgIGlmIChzdHIuY2hhckNvZGVBdCgwKSA9PT0gMTIzKSBzdHIgPSBzdHIuc2xpY2UoMSwgLTEpO1xuXG4gICAgICAgIC8vIFNwbGl0IGludG8gdG9rZW5zXG4gICAgICAgIHZhciByZXN1bHQgPSBbXSwgdG9rcyA9IHN0ci5tYXRjaChiaW5kaW5nVG9rZW4pLCBrZXksIHZhbHVlcyA9IFtdLCBkZXB0aCA9IDA7XG5cbiAgICAgICAgaWYgKHRva3MpIHtcbiAgICAgICAgICAgIC8vIEFwcGVuZCBhIGNvbW1hIHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCBhIHNlcGFyYXRlIGNvZGUgYmxvY2sgdG8gZGVhbCB3aXRoIHRoZSBsYXN0IGl0ZW1cbiAgICAgICAgICAgIHRva3MucHVzaCgnLCcpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG9rOyB0b2sgPSB0b2tzW2ldOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHRvay5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgIC8vIEEgY29tbWEgc2lnbmFscyB0aGUgZW5kIG9mIGEga2V5L3ZhbHVlIHBhaXIgaWYgZGVwdGggaXMgemVyb1xuICAgICAgICAgICAgICAgIGlmIChjID09PSA0NCkgeyAvLyBcIixcIlxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVwdGggPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goKGtleSAmJiB2YWx1ZXMubGVuZ3RoKSA/IHtrZXk6IGtleSwgdmFsdWU6IHZhbHVlcy5qb2luKCcnKX0gOiB7J3Vua25vd24nOiBrZXkgfHwgdmFsdWVzLmpvaW4oJycpfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBkZXB0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU2ltcGx5IHNraXAgdGhlIGNvbG9uIHRoYXQgc2VwYXJhdGVzIHRoZSBuYW1lIGFuZCB2YWx1ZVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gNTgpIHsgLy8gXCI6XCJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXB0aCAmJiAha2V5ICYmIHZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IHZhbHVlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQSBzZXQgb2Ygc2xhc2hlcyBpcyBpbml0aWFsbHkgbWF0Y2hlZCBhcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgYnV0IGNvdWxkIGJlIGRpdmlzaW9uXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSA0NyAmJiBpICYmIHRvay5sZW5ndGggPiAxKSB7ICAvLyBcIi9cIlxuICAgICAgICAgICAgICAgICAgICAvLyBMb29rIGF0IHRoZSBlbmQgb2YgdGhlIHByZXZpb3VzIHRva2VuIHRvIGRldGVybWluZSBpZiB0aGUgc2xhc2ggaXMgYWN0dWFsbHkgZGl2aXNpb25cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gdG9rc1tpLTFdLm1hdGNoKGRpdmlzaW9uTG9va0JlaGluZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiAha2V5d29yZFJlZ2V4TG9va0JlaGluZFttYXRjaFswXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzbGFzaCBpcyBhY3R1YWxseSBhIGRpdmlzaW9uIHB1bmN0dWF0b3I7IHJlLXBhcnNlIHRoZSByZW1haW5kZXIgb2YgdGhlIHN0cmluZyAobm90IGluY2x1ZGluZyB0aGUgc2xhc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyKHN0ci5pbmRleE9mKHRvaykgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva3MgPSBzdHIubWF0Y2goYmluZGluZ1Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva3MucHVzaCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29udGludWUgd2l0aCBqdXN0IHRoZSBzbGFzaFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rID0gJy8nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSW5jcmVtZW50IGRlcHRoIGZvciBwYXJlbnRoZXNlcywgYnJhY2VzLCBhbmQgYnJhY2tldHMgc28gdGhhdCBpbnRlcmlvciBjb21tYXMgYXJlIGlnbm9yZWRcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDQwIHx8IGMgPT09IDEyMyB8fCBjID09PSA5MSkgeyAvLyAnKCcsICd7JywgJ1snXG4gICAgICAgICAgICAgICAgICAgICsrZGVwdGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSA0MSB8fCBjID09PSAxMjUgfHwgYyA9PT0gOTMpIHsgLy8gJyknLCAnfScsICddJ1xuICAgICAgICAgICAgICAgICAgICAtLWRlcHRoO1xuICAgICAgICAgICAgICAgIC8vIFRoZSBrZXkgd2lsbCBiZSB0aGUgZmlyc3QgdG9rZW47IGlmIGl0J3MgYSBzdHJpbmcsIHRyaW0gdGhlIHF1b3Rlc1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWtleSAmJiAhdmFsdWVzLmxlbmd0aCAmJiAoYyA9PT0gMzQgfHwgYyA9PT0gMzkpKSB7IC8vICdcIicsIFwiJ1wiXG4gICAgICAgICAgICAgICAgICAgIHRvayA9IHRvay5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRvayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBUd28td2F5IGJpbmRpbmdzIGluY2x1ZGUgYSB3cml0ZSBmdW5jdGlvbiB0aGF0IGFsbG93IHRoZSBoYW5kbGVyIHRvIHVwZGF0ZSB0aGUgdmFsdWUgZXZlbiBpZiBpdCdzIG5vdCBhbiBvYnNlcnZhYmxlLlxuICAgIHZhciB0d29XYXlCaW5kaW5ncyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gcHJlUHJvY2Vzc0JpbmRpbmdzKGJpbmRpbmdzU3RyaW5nT3JLZXlWYWx1ZUFycmF5LCBiaW5kaW5nT3B0aW9ucykge1xuICAgICAgICBiaW5kaW5nT3B0aW9ucyA9IGJpbmRpbmdPcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NLZXlWYWx1ZShrZXksIHZhbCkge1xuICAgICAgICAgICAgdmFyIHdyaXRhYmxlVmFsO1xuICAgICAgICAgICAgZnVuY3Rpb24gY2FsbFByZXByb2Nlc3NIb29rKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiAob2JqICYmIG9ialsncHJlcHJvY2VzcyddKSA/ICh2YWwgPSBvYmpbJ3ByZXByb2Nlc3MnXSh2YWwsIGtleSwgcHJvY2Vzc0tleVZhbHVlKSkgOiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFiaW5kaW5nUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWxsUHJlcHJvY2Vzc0hvb2soa29bJ2dldEJpbmRpbmdIYW5kbGVyJ10oa2V5KSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIGlmICh0d29XYXlCaW5kaW5nc1trZXldICYmICh3cml0YWJsZVZhbCA9IGdldFdyaXRlYWJsZVZhbHVlKHZhbCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciB0d28td2F5IGJpbmRpbmdzLCBwcm92aWRlIGEgd3JpdGUgbWV0aG9kIGluIGNhc2UgdGhlIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzbid0IGEgd3JpdGFibGUgb2JzZXJ2YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlBY2Nlc3NvclJlc3VsdFN0cmluZ3MucHVzaChcIidcIiArIGtleSArIFwiJzpmdW5jdGlvbihfeil7XCIgKyB3cml0YWJsZVZhbCArIFwiPV96fVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBWYWx1ZXMgYXJlIHdyYXBwZWQgaW4gYSBmdW5jdGlvbiBzbyB0aGF0IGVhY2ggdmFsdWUgY2FuIGJlIGFjY2Vzc2VkIGluZGVwZW5kZW50bHlcbiAgICAgICAgICAgIGlmIChtYWtlVmFsdWVBY2Nlc3NvcnMpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSAnZnVuY3Rpb24oKXtyZXR1cm4gJyArIHZhbCArICcgfSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRTdHJpbmdzLnB1c2goXCInXCIgKyBrZXkgKyBcIic6XCIgKyB2YWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdFN0cmluZ3MgPSBbXSxcbiAgICAgICAgICAgIHByb3BlcnR5QWNjZXNzb3JSZXN1bHRTdHJpbmdzID0gW10sXG4gICAgICAgICAgICBtYWtlVmFsdWVBY2Nlc3NvcnMgPSBiaW5kaW5nT3B0aW9uc1sndmFsdWVBY2Nlc3NvcnMnXSxcbiAgICAgICAgICAgIGJpbmRpbmdQYXJhbXMgPSBiaW5kaW5nT3B0aW9uc1snYmluZGluZ1BhcmFtcyddLFxuICAgICAgICAgICAga2V5VmFsdWVBcnJheSA9IHR5cGVvZiBiaW5kaW5nc1N0cmluZ09yS2V5VmFsdWVBcnJheSA9PT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgICAgICAgcGFyc2VPYmplY3RMaXRlcmFsKGJpbmRpbmdzU3RyaW5nT3JLZXlWYWx1ZUFycmF5KSA6IGJpbmRpbmdzU3RyaW5nT3JLZXlWYWx1ZUFycmF5O1xuXG4gICAgICAgIGtvLnV0aWxzLmFycmF5Rm9yRWFjaChrZXlWYWx1ZUFycmF5LCBmdW5jdGlvbihrZXlWYWx1ZSkge1xuICAgICAgICAgICAgcHJvY2Vzc0tleVZhbHVlKGtleVZhbHVlLmtleSB8fCBrZXlWYWx1ZVsndW5rbm93biddLCBrZXlWYWx1ZS52YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eUFjY2Vzc29yUmVzdWx0U3RyaW5ncy5sZW5ndGgpXG4gICAgICAgICAgICBwcm9jZXNzS2V5VmFsdWUoJ19rb19wcm9wZXJ0eV93cml0ZXJzJywgXCJ7XCIgKyBwcm9wZXJ0eUFjY2Vzc29yUmVzdWx0U3RyaW5ncy5qb2luKFwiLFwiKSArIFwiIH1cIik7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFN0cmluZ3Muam9pbihcIixcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzOiBbXSxcblxuICAgICAgICB0d29XYXlCaW5kaW5nczogdHdvV2F5QmluZGluZ3MsXG5cbiAgICAgICAgcGFyc2VPYmplY3RMaXRlcmFsOiBwYXJzZU9iamVjdExpdGVyYWwsXG5cbiAgICAgICAgcHJlUHJvY2Vzc0JpbmRpbmdzOiBwcmVQcm9jZXNzQmluZGluZ3MsXG5cbiAgICAgICAga2V5VmFsdWVBcnJheUNvbnRhaW5zS2V5OiBmdW5jdGlvbihrZXlWYWx1ZUFycmF5LCBrZXkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5VmFsdWVBcnJheS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAoa2V5VmFsdWVBcnJheVtpXVsna2V5J10gPT0ga2V5KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBJbnRlcm5hbCwgcHJpdmF0ZSBLTyB1dGlsaXR5IGZvciB1cGRhdGluZyBtb2RlbCBwcm9wZXJ0aWVzIGZyb20gd2l0aGluIGJpbmRpbmdzXG4gICAgICAgIC8vIHByb3BlcnR5OiAgICAgICAgICAgIElmIHRoZSBwcm9wZXJ0eSBiZWluZyB1cGRhdGVkIGlzIChvciBtaWdodCBiZSkgYW4gb2JzZXJ2YWJsZSwgcGFzcyBpdCBoZXJlXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIElmIGl0IHR1cm5zIG91dCB0byBiZSBhIHdyaXRhYmxlIG9ic2VydmFibGUsIGl0IHdpbGwgYmUgd3JpdHRlbiB0byBkaXJlY3RseVxuICAgICAgICAvLyBhbGxCaW5kaW5nczogICAgICAgICBBbiBvYmplY3Qgd2l0aCBhIGdldCBtZXRob2QgdG8gcmV0cmlldmUgYmluZGluZ3MgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGNvbnRleHQuXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIFRoaXMgd2lsbCBiZSBzZWFyY2hlZCBmb3IgYSAnX2tvX3Byb3BlcnR5X3dyaXRlcnMnIHByb3BlcnR5IGluIGNhc2UgeW91J3JlIHdyaXRpbmcgdG8gYSBub24tb2JzZXJ2YWJsZVxuICAgICAgICAvLyBrZXk6ICAgICAgICAgICAgICAgICBUaGUga2V5IGlkZW50aWZ5aW5nIHRoZSBwcm9wZXJ0eSB0byBiZSB3cml0dGVuLiBFeGFtcGxlOiBmb3IgeyBoYXNGb2N1czogbXlWYWx1ZSB9LCB3cml0ZSB0byAnbXlWYWx1ZScgYnkgc3BlY2lmeWluZyB0aGUga2V5ICdoYXNGb2N1cydcbiAgICAgICAgLy8gdmFsdWU6ICAgICAgICAgICAgICAgVGhlIHZhbHVlIHRvIGJlIHdyaXR0ZW5cbiAgICAgICAgLy8gY2hlY2tJZkRpZmZlcmVudDogICAgSWYgdHJ1ZSwgYW5kIGlmIHRoZSBwcm9wZXJ0eSBiZWluZyB3cml0dGVuIGlzIGEgd3JpdGFibGUgb2JzZXJ2YWJsZSwgdGhlIHZhbHVlIHdpbGwgb25seSBiZSB3cml0dGVuIGlmXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIGl0IGlzICE9PSBleGlzdGluZyB2YWx1ZSBvbiB0aGF0IHdyaXRhYmxlIG9ic2VydmFibGVcbiAgICAgICAgd3JpdGVWYWx1ZVRvUHJvcGVydHk6IGZ1bmN0aW9uKHByb3BlcnR5LCBhbGxCaW5kaW5ncywga2V5LCB2YWx1ZSwgY2hlY2tJZkRpZmZlcmVudCkge1xuICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eSB8fCAha28uaXNPYnNlcnZhYmxlKHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wV3JpdGVycyA9IGFsbEJpbmRpbmdzLmdldCgnX2tvX3Byb3BlcnR5X3dyaXRlcnMnKTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcFdyaXRlcnMgJiYgcHJvcFdyaXRlcnNba2V5XSlcbiAgICAgICAgICAgICAgICAgICAgcHJvcFdyaXRlcnNba2V5XSh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZShwcm9wZXJ0eSkgJiYgKCFjaGVja0lmRGlmZmVyZW50IHx8IHByb3BlcnR5LnBlZWsoKSAhPT0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHkodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgnZXhwcmVzc2lvblJld3JpdGluZycsIGtvLmV4cHJlc3Npb25SZXdyaXRpbmcpO1xua28uZXhwb3J0U3ltYm9sKCdleHByZXNzaW9uUmV3cml0aW5nLmJpbmRpbmdSZXdyaXRlVmFsaWRhdG9ycycsIGtvLmV4cHJlc3Npb25SZXdyaXRpbmcuYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzKTtcbmtvLmV4cG9ydFN5bWJvbCgnZXhwcmVzc2lvblJld3JpdGluZy5wYXJzZU9iamVjdExpdGVyYWwnLCBrby5leHByZXNzaW9uUmV3cml0aW5nLnBhcnNlT2JqZWN0TGl0ZXJhbCk7XG5rby5leHBvcnRTeW1ib2woJ2V4cHJlc3Npb25SZXdyaXRpbmcucHJlUHJvY2Vzc0JpbmRpbmdzJywga28uZXhwcmVzc2lvblJld3JpdGluZy5wcmVQcm9jZXNzQmluZGluZ3MpO1xuXG4vLyBNYWtpbmcgYmluZGluZ3MgZXhwbGljaXRseSBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgXCJ0d28gd2F5XCIgaXNuJ3QgaWRlYWwgaW4gdGhlIGxvbmcgdGVybSAoaXQgd291bGQgYmUgYmV0dGVyIGlmXG4vLyBhbGwgYmluZGluZ3MgY291bGQgdXNlIGFuIG9mZmljaWFsICdwcm9wZXJ0eSB3cml0ZXInIEFQSSB3aXRob3V0IG5lZWRpbmcgdG8gZGVjbGFyZSB0aGF0IHRoZXkgbWlnaHQpLiBIb3dldmVyLFxuLy8gc2luY2UgdGhpcyBpcyBub3QsIGFuZCBoYXMgbmV2ZXIgYmVlbiwgYSBwdWJsaWMgQVBJIChfa29fcHJvcGVydHlfd3JpdGVycyB3YXMgbmV2ZXIgZG9jdW1lbnRlZCksIGl0J3MgYWNjZXB0YWJsZVxuLy8gYXMgYW4gaW50ZXJuYWwgaW1wbGVtZW50YXRpb24gZGV0YWlsIGluIHRoZSBzaG9ydCB0ZXJtLlxuLy8gRm9yIHRob3NlIGRldmVsb3BlcnMgd2hvIHJlbHkgb24gX2tvX3Byb3BlcnR5X3dyaXRlcnMgaW4gdGhlaXIgY3VzdG9tIGJpbmRpbmdzLCB3ZSBleHBvc2UgX3R3b1dheUJpbmRpbmdzIGFzIGFuXG4vLyB1bmRvY3VtZW50ZWQgZmVhdHVyZSB0aGF0IG1ha2VzIGl0IHJlbGF0aXZlbHkgZWFzeSB0byB1cGdyYWRlIHRvIEtPIDMuMC4gSG93ZXZlciwgdGhpcyBpcyBzdGlsbCBub3QgYW4gb2ZmaWNpYWxcbi8vIHB1YmxpYyBBUEksIGFuZCB3ZSByZXNlcnZlIHRoZSByaWdodCB0byByZW1vdmUgaXQgYXQgYW55IHRpbWUgaWYgd2UgY3JlYXRlIGEgcmVhbCBwdWJsaWMgcHJvcGVydHkgd3JpdGVycyBBUEkuXG5rby5leHBvcnRTeW1ib2woJ2V4cHJlc3Npb25SZXdyaXRpbmcuX3R3b1dheUJpbmRpbmdzJywga28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5ncyk7XG5cbi8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBkZWZpbmUgdGhlIGZvbGxvd2luZyBhbGlhc2VzLiAoUHJldmlvdXNseSwgdGhlc2UgZnVuY3Rpb24gbmFtZXMgd2VyZSBtaXNsZWFkaW5nIGJlY2F1c2Vcbi8vIHRoZXkgcmVmZXJyZWQgdG8gSlNPTiBzcGVjaWZpY2FsbHksIGV2ZW4gdGhvdWdoIHRoZXkgYWN0dWFsbHkgd29yayB3aXRoIGFyYml0cmFyeSBKYXZhU2NyaXB0IG9iamVjdCBsaXRlcmFsIGV4cHJlc3Npb25zLilcbmtvLmV4cG9ydFN5bWJvbCgnanNvbkV4cHJlc3Npb25SZXdyaXRpbmcnLCBrby5leHByZXNzaW9uUmV3cml0aW5nKTtcbmtvLmV4cG9ydFN5bWJvbCgnanNvbkV4cHJlc3Npb25SZXdyaXRpbmcuaW5zZXJ0UHJvcGVydHlBY2Nlc3NvcnNJbnRvSnNvbicsIGtvLmV4cHJlc3Npb25SZXdyaXRpbmcucHJlUHJvY2Vzc0JpbmRpbmdzKTtcbihmdW5jdGlvbigpIHtcbiAgICAvLyBcIlZpcnR1YWwgZWxlbWVudHNcIiBpcyBhbiBhYnN0cmFjdGlvbiBvbiB0b3Agb2YgdGhlIHVzdWFsIERPTSBBUEkgd2hpY2ggdW5kZXJzdGFuZHMgdGhlIG5vdGlvbiB0aGF0IGNvbW1lbnQgbm9kZXNcbiAgICAvLyBtYXkgYmUgdXNlZCB0byByZXByZXNlbnQgaGllcmFyY2h5IChpbiBhZGRpdGlvbiB0byB0aGUgRE9NJ3MgbmF0dXJhbCBoaWVyYXJjaHkpLlxuICAgIC8vIElmIHlvdSBjYWxsIHRoZSBET00tbWFuaXB1bGF0aW5nIGZ1bmN0aW9ucyBvbiBrby52aXJ0dWFsRWxlbWVudHMsIHlvdSB3aWxsIGJlIGFibGUgdG8gcmVhZCBhbmQgd3JpdGUgdGhlIHN0YXRlXG4gICAgLy8gb2YgdGhhdCB2aXJ0dWFsIGhpZXJhcmNoeVxuICAgIC8vXG4gICAgLy8gVGhlIHBvaW50IG9mIGFsbCB0aGlzIGlzIHRvIHN1cHBvcnQgY29udGFpbmVybGVzcyB0ZW1wbGF0ZXMgKGUuZy4sIDwhLS0ga28gZm9yZWFjaDpzb21lQ29sbGVjdGlvbiAtLT5ibGFoPCEtLSAva28gLS0+KVxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHNjYXR0ZXIgc3BlY2lhbCBjYXNlcyBhbGwgb3ZlciB0aGUgYmluZGluZyBhbmQgdGVtcGxhdGluZyBjb2RlLlxuXG4gICAgLy8gSUUgOSBjYW5ub3QgcmVsaWFibHkgcmVhZCB0aGUgXCJub2RlVmFsdWVcIiBwcm9wZXJ0eSBvZiBhIGNvbW1lbnQgbm9kZSAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9pc3N1ZXMvMTg2KVxuICAgIC8vIGJ1dCBpdCBkb2VzIGdpdmUgdGhlbSBhIG5vbnN0YW5kYXJkIGFsdGVybmF0aXZlIHByb3BlcnR5IGNhbGxlZCBcInRleHRcIiB0aGF0IGl0IGNhbiByZWFkIHJlbGlhYmx5LiBPdGhlciBicm93c2VycyBkb24ndCBoYXZlIHRoYXQgcHJvcGVydHkuXG4gICAgLy8gU28sIHVzZSBub2RlLnRleHQgd2hlcmUgYXZhaWxhYmxlLCBhbmQgbm9kZS5ub2RlVmFsdWUgZWxzZXdoZXJlXG4gICAgdmFyIGNvbW1lbnROb2Rlc0hhdmVUZXh0UHJvcGVydHkgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwidGVzdFwiKS50ZXh0ID09PSBcIjwhLS10ZXN0LS0+XCI7XG5cbiAgICB2YXIgc3RhcnRDb21tZW50UmVnZXggPSBjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5ID8gL148IS0tXFxzKmtvKD86XFxzKyhbXFxzXFxTXSspKT9cXHMqLS0+JC8gOiAvXlxccyprbyg/OlxccysoW1xcc1xcU10rKSk/XFxzKiQvO1xuICAgIHZhciBlbmRDb21tZW50UmVnZXggPSAgIGNvbW1lbnROb2Rlc0hhdmVUZXh0UHJvcGVydHkgPyAvXjwhLS1cXHMqXFwva29cXHMqLS0+JC8gOiAvXlxccypcXC9rb1xccyokLztcbiAgICB2YXIgaHRtbFRhZ3NXaXRoT3B0aW9uYWxseUNsb3NpbmdDaGlsZHJlbiA9IHsgJ3VsJzogdHJ1ZSwgJ29sJzogdHJ1ZSB9O1xuXG4gICAgZnVuY3Rpb24gaXNTdGFydENvbW1lbnQobm9kZSkge1xuICAgICAgICByZXR1cm4gKG5vZGUubm9kZVR5cGUgPT0gOCkgJiYgc3RhcnRDb21tZW50UmVnZXgudGVzdChjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5ID8gbm9kZS50ZXh0IDogbm9kZS5ub2RlVmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRW5kQ29tbWVudChub2RlKSB7XG4gICAgICAgIHJldHVybiAobm9kZS5ub2RlVHlwZSA9PSA4KSAmJiBlbmRDb21tZW50UmVnZXgudGVzdChjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5ID8gbm9kZS50ZXh0IDogbm9kZS5ub2RlVmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFZpcnR1YWxDaGlsZHJlbihzdGFydENvbW1lbnQsIGFsbG93VW5iYWxhbmNlZCkge1xuICAgICAgICB2YXIgY3VycmVudE5vZGUgPSBzdGFydENvbW1lbnQ7XG4gICAgICAgIHZhciBkZXB0aCA9IDE7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgICAgICB3aGlsZSAoY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0U2libGluZykge1xuICAgICAgICAgICAgaWYgKGlzRW5kQ29tbWVudChjdXJyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICAgICAgICAgIGlmIChkZXB0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGN1cnJlbnROb2RlKTtcblxuICAgICAgICAgICAgaWYgKGlzU3RhcnRDb21tZW50KGN1cnJlbnROb2RlKSlcbiAgICAgICAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYWxsb3dVbmJhbGFuY2VkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgY2xvc2luZyBjb21tZW50IHRhZyB0byBtYXRjaDogXCIgKyBzdGFydENvbW1lbnQubm9kZVZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hpbmdFbmRDb21tZW50KHN0YXJ0Q29tbWVudCwgYWxsb3dVbmJhbGFuY2VkKSB7XG4gICAgICAgIHZhciBhbGxWaXJ0dWFsQ2hpbGRyZW4gPSBnZXRWaXJ0dWFsQ2hpbGRyZW4oc3RhcnRDb21tZW50LCBhbGxvd1VuYmFsYW5jZWQpO1xuICAgICAgICBpZiAoYWxsVmlydHVhbENoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoYWxsVmlydHVhbENoaWxkcmVuLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFZpcnR1YWxDaGlsZHJlblthbGxWaXJ0dWFsQ2hpbGRyZW4ubGVuZ3RoIC0gMV0ubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICByZXR1cm4gc3RhcnRDb21tZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBNdXN0IGhhdmUgbm8gbWF0Y2hpbmcgZW5kIGNvbW1lbnQsIGFuZCBhbGxvd1VuYmFsYW5jZWQgaXMgdHJ1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFVuYmFsYW5jZWRDaGlsZFRhZ3Mobm9kZSkge1xuICAgICAgICAvLyBlLmcuLCBmcm9tIDxkaXY+T0s8L2Rpdj48IS0tIGtvIGJsYWggLS0+PHNwYW4+QW5vdGhlcjwvc3Bhbj4sIHJldHVybnM6IDwhLS0ga28gYmxhaCAtLT48c3Bhbj5Bbm90aGVyPC9zcGFuPlxuICAgICAgICAvLyAgICAgICBmcm9tIDxkaXY+T0s8L2Rpdj48IS0tIC9rbyAtLT48IS0tIC9rbyAtLT4sICAgICAgICAgICAgIHJldHVybnM6IDwhLS0gL2tvIC0tPjwhLS0gL2tvIC0tPlxuICAgICAgICB2YXIgY2hpbGROb2RlID0gbm9kZS5maXJzdENoaWxkLCBjYXB0dXJlUmVtYWluaW5nID0gbnVsbDtcbiAgICAgICAgaWYgKGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmIChjYXB0dXJlUmVtYWluaW5nKSAgICAgICAgICAgICAgICAgICAvLyBXZSBhbHJlYWR5IGhpdCBhbiB1bmJhbGFuY2VkIG5vZGUgYW5kIGFyZSBub3cganVzdCBzY29vcGluZyB1cCBhbGwgc3Vic2VxdWVudCBub2Rlc1xuICAgICAgICAgICAgICAgICAgICBjYXB0dXJlUmVtYWluaW5nLnB1c2goY2hpbGROb2RlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc1N0YXJ0Q29tbWVudChjaGlsZE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ0VuZENvbW1lbnQgPSBnZXRNYXRjaGluZ0VuZENvbW1lbnQoY2hpbGROb2RlLCAvKiBhbGxvd1VuYmFsYW5jZWQ6ICovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hpbmdFbmRDb21tZW50KSAgICAgICAgICAgICAvLyBJdCdzIGEgYmFsYW5jZWQgdGFnLCBzbyBza2lwIGltbWVkaWF0ZWx5IHRvIHRoZSBlbmQgb2YgdGhpcyB2aXJ0dWFsIHNldFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlID0gbWF0Y2hpbmdFbmRDb21tZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlUmVtYWluaW5nID0gW2NoaWxkTm9kZV07IC8vIEl0J3MgdW5iYWxhbmNlZCwgc28gc3RhcnQgY2FwdHVyaW5nIGZyb20gdGhpcyBwb2ludFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNFbmRDb21tZW50KGNoaWxkTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FwdHVyZVJlbWFpbmluZyA9IFtjaGlsZE5vZGVdOyAgICAgLy8gSXQncyB1bmJhbGFuY2VkIChpZiBpdCB3YXNuJ3QsIHdlJ2QgaGF2ZSBza2lwcGVkIG92ZXIgaXQgYWxyZWFkeSksIHNvIHN0YXJ0IGNhcHR1cmluZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhcHR1cmVSZW1haW5pbmc7XG4gICAgfVxuXG4gICAga28udmlydHVhbEVsZW1lbnRzID0ge1xuICAgICAgICBhbGxvd2VkQmluZGluZ3M6IHt9LFxuXG4gICAgICAgIGNoaWxkTm9kZXM6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1N0YXJ0Q29tbWVudChub2RlKSA/IGdldFZpcnR1YWxDaGlsZHJlbihub2RlKSA6IG5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgfSxcblxuICAgICAgICBlbXB0eU5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghaXNTdGFydENvbW1lbnQobm9kZSkpXG4gICAgICAgICAgICAgICAga28udXRpbHMuZW1wdHlEb21Ob2RlKG5vZGUpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZpcnR1YWxDaGlsZHJlbiA9IGtvLnZpcnR1YWxFbGVtZW50cy5jaGlsZE5vZGVzKG5vZGUpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gdmlydHVhbENoaWxkcmVuLmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICAgICAga28ucmVtb3ZlTm9kZSh2aXJ0dWFsQ2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNldERvbU5vZGVDaGlsZHJlbjogZnVuY3Rpb24obm9kZSwgY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgaWYgKCFpc1N0YXJ0Q29tbWVudChub2RlKSlcbiAgICAgICAgICAgICAgICBrby51dGlscy5zZXREb21Ob2RlQ2hpbGRyZW4obm9kZSwgY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMuZW1wdHlOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciBlbmRDb21tZW50Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7IC8vIE11c3QgYmUgdGhlIG5leHQgc2libGluZywgYXMgd2UganVzdCBlbXB0aWVkIHRoZSBjaGlsZHJlblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGVuZENvbW1lbnROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZXNbaV0sIGVuZENvbW1lbnROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwcmVwZW5kOiBmdW5jdGlvbihjb250YWluZXJOb2RlLCBub2RlVG9QcmVwZW5kKSB7XG4gICAgICAgICAgICBpZiAoIWlzU3RhcnRDb21tZW50KGNvbnRhaW5lck5vZGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lck5vZGUuZmlyc3RDaGlsZClcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyTm9kZS5pbnNlcnRCZWZvcmUobm9kZVRvUHJlcGVuZCwgY29udGFpbmVyTm9kZS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQobm9kZVRvUHJlcGVuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFN0YXJ0IGNvbW1lbnRzIG11c3QgYWx3YXlzIGhhdmUgYSBwYXJlbnQgYW5kIGF0IGxlYXN0IG9uZSBmb2xsb3dpbmcgc2libGluZyAodGhlIGVuZCBjb21tZW50KVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lck5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZVRvUHJlcGVuZCwgY29udGFpbmVyTm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5zZXJ0QWZ0ZXI6IGZ1bmN0aW9uKGNvbnRhaW5lck5vZGUsIG5vZGVUb0luc2VydCwgaW5zZXJ0QWZ0ZXJOb2RlKSB7XG4gICAgICAgICAgICBpZiAoIWluc2VydEFmdGVyTm9kZSkge1xuICAgICAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5wcmVwZW5kKGNvbnRhaW5lck5vZGUsIG5vZGVUb0luc2VydCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc1N0YXJ0Q29tbWVudChjb250YWluZXJOb2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIEluc2VydCBhZnRlciBpbnNlcnRpb24gcG9pbnRcbiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0QWZ0ZXJOb2RlLm5leHRTaWJsaW5nKVxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJOb2RlLmluc2VydEJlZm9yZShub2RlVG9JbnNlcnQsIGluc2VydEFmdGVyTm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJOb2RlLmFwcGVuZENoaWxkKG5vZGVUb0luc2VydCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENoaWxkcmVuIG9mIHN0YXJ0IGNvbW1lbnRzIG11c3QgYWx3YXlzIGhhdmUgYSBwYXJlbnQgYW5kIGF0IGxlYXN0IG9uZSBmb2xsb3dpbmcgc2libGluZyAodGhlIGVuZCBjb21tZW50KVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lck5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZVRvSW5zZXJ0LCBpbnNlcnRBZnRlck5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGZpcnN0Q2hpbGQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghaXNTdGFydENvbW1lbnQobm9kZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGlmICghbm9kZS5uZXh0U2libGluZyB8fCBpc0VuZENvbW1lbnQobm9kZS5uZXh0U2libGluZykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSxcblxuICAgICAgICBuZXh0U2libGluZzogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgaWYgKGlzU3RhcnRDb21tZW50KG5vZGUpKVxuICAgICAgICAgICAgICAgIG5vZGUgPSBnZXRNYXRjaGluZ0VuZENvbW1lbnQobm9kZSk7XG4gICAgICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZyAmJiBpc0VuZENvbW1lbnQobm9kZS5uZXh0U2libGluZykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNCaW5kaW5nVmFsdWU6IGlzU3RhcnRDb21tZW50LFxuXG4gICAgICAgIHZpcnR1YWxOb2RlQmluZGluZ1ZhbHVlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICB2YXIgcmVnZXhNYXRjaCA9IChjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5ID8gbm9kZS50ZXh0IDogbm9kZS5ub2RlVmFsdWUpLm1hdGNoKHN0YXJ0Q29tbWVudFJlZ2V4KTtcbiAgICAgICAgICAgIHJldHVybiByZWdleE1hdGNoID8gcmVnZXhNYXRjaFsxXSA6IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbm9ybWFsaXNlVmlydHVhbEVsZW1lbnREb21TdHJ1Y3R1cmU6IGZ1bmN0aW9uKGVsZW1lbnRWZXJpZmllZCkge1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy8xNTVcbiAgICAgICAgICAgIC8vIChJRSA8PSA4IG9yIElFIDkgcXVpcmtzIG1vZGUgcGFyc2VzIHlvdXIgSFRNTCB3ZWlyZGx5LCB0cmVhdGluZyBjbG9zaW5nIDwvbGk+IHRhZ3MgYXMgaWYgdGhleSBkb24ndCBleGlzdCwgdGhlcmVieSBtb3ZpbmcgY29tbWVudCBub2Rlc1xuICAgICAgICAgICAgLy8gdGhhdCBhcmUgZGlyZWN0IGRlc2NlbmRhbnRzIG9mIDx1bD4gaW50byB0aGUgcHJlY2VkaW5nIDxsaT4pXG4gICAgICAgICAgICBpZiAoIWh0bWxUYWdzV2l0aE9wdGlvbmFsbHlDbG9zaW5nQ2hpbGRyZW5ba28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnRWZXJpZmllZCldKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgLy8gU2NhbiBpbW1lZGlhdGUgY2hpbGRyZW4gdG8gc2VlIGlmIHRoZXkgY29udGFpbiB1bmJhbGFuY2VkIGNvbW1lbnQgdGFncy4gSWYgdGhleSBkbywgdGhvc2UgY29tbWVudCB0YWdzXG4gICAgICAgICAgICAvLyBtdXN0IGJlIGludGVuZGVkIHRvIGFwcGVhciAqYWZ0ZXIqIHRoYXQgY2hpbGQsIHNvIG1vdmUgdGhlbSB0aGVyZS5cbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbGVtZW50VmVyaWZpZWQuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bmJhbGFuY2VkVGFncyA9IGdldFVuYmFsYW5jZWRDaGlsZFRhZ3MoY2hpbGROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmJhbGFuY2VkVGFncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpeCB1cCB0aGUgRE9NIGJ5IG1vdmluZyB0aGUgdW5iYWxhbmNlZCB0YWdzIHRvIHdoZXJlIHRoZXkgbW9zdCBsaWtlbHkgd2VyZSBpbnRlbmRlZCB0byBiZSBwbGFjZWQgLSAqYWZ0ZXIqIHRoZSBjaGlsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlVG9JbnNlcnRCZWZvcmUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmJhbGFuY2VkVGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZVRvSW5zZXJ0QmVmb3JlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFZlcmlmaWVkLmluc2VydEJlZm9yZSh1bmJhbGFuY2VkVGFnc1tpXSwgbm9kZVRvSW5zZXJ0QmVmb3JlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFZlcmlmaWVkLmFwcGVuZENoaWxkKHVuYmFsYW5jZWRUYWdzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IHdoaWxlIChjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5rby5leHBvcnRTeW1ib2woJ3ZpcnR1YWxFbGVtZW50cycsIGtvLnZpcnR1YWxFbGVtZW50cyk7XG5rby5leHBvcnRTeW1ib2woJ3ZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3MnLCBrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzKTtcbmtvLmV4cG9ydFN5bWJvbCgndmlydHVhbEVsZW1lbnRzLmVtcHR5Tm9kZScsIGtvLnZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGUpO1xuLy9rby5leHBvcnRTeW1ib2woJ3ZpcnR1YWxFbGVtZW50cy5maXJzdENoaWxkJywga28udmlydHVhbEVsZW1lbnRzLmZpcnN0Q2hpbGQpOyAgICAgLy8gZmlyc3RDaGlsZCBpcyBub3QgbWluaWZpZWRcbmtvLmV4cG9ydFN5bWJvbCgndmlydHVhbEVsZW1lbnRzLmluc2VydEFmdGVyJywga28udmlydHVhbEVsZW1lbnRzLmluc2VydEFmdGVyKTtcbi8va28uZXhwb3J0U3ltYm9sKCd2aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcnLCBrby52aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcpOyAgIC8vIG5leHRTaWJsaW5nIGlzIG5vdCBtaW5pZmllZFxua28uZXhwb3J0U3ltYm9sKCd2aXJ0dWFsRWxlbWVudHMucHJlcGVuZCcsIGtvLnZpcnR1YWxFbGVtZW50cy5wcmVwZW5kKTtcbmtvLmV4cG9ydFN5bWJvbCgndmlydHVhbEVsZW1lbnRzLnNldERvbU5vZGVDaGlsZHJlbicsIGtvLnZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW4pO1xuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZhdWx0QmluZGluZ0F0dHJpYnV0ZU5hbWUgPSBcImRhdGEtYmluZFwiO1xuXG4gICAga28uYmluZGluZ1Byb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ0NhY2hlID0ge307XG4gICAgfTtcblxuICAgIGtvLnV0aWxzLmV4dGVuZChrby5iaW5kaW5nUHJvdmlkZXIucHJvdG90eXBlLCB7XG4gICAgICAgICdub2RlSGFzQmluZGluZ3MnOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IC8vIEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKGRlZmF1bHRCaW5kaW5nQXR0cmlidXRlTmFtZSkgIT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfHwga28uY29tcG9uZW50c1snZ2V0Q29tcG9uZW50TmFtZUZvck5vZGUnXShub2RlKTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IC8vIENvbW1lbnQgbm9kZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga28udmlydHVhbEVsZW1lbnRzLmhhc0JpbmRpbmdWYWx1ZShub2RlKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ2dldEJpbmRpbmdzJzogZnVuY3Rpb24obm9kZSwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBiaW5kaW5nc1N0cmluZyA9IHRoaXNbJ2dldEJpbmRpbmdzU3RyaW5nJ10obm9kZSwgYmluZGluZ0NvbnRleHQpLFxuICAgICAgICAgICAgICAgIHBhcnNlZEJpbmRpbmdzID0gYmluZGluZ3NTdHJpbmcgPyB0aGlzWydwYXJzZUJpbmRpbmdzU3RyaW5nJ10oYmluZGluZ3NTdHJpbmcsIGJpbmRpbmdDb250ZXh0LCBub2RlKSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4ga28uY29tcG9uZW50cy5hZGRCaW5kaW5nc0ZvckN1c3RvbUVsZW1lbnQocGFyc2VkQmluZGluZ3MsIG5vZGUsIGJpbmRpbmdDb250ZXh0LCAvKiB2YWx1ZUFjY2Vzc29ycyAqLyBmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ2dldEJpbmRpbmdBY2Nlc3NvcnMnOiBmdW5jdGlvbihub2RlLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGJpbmRpbmdzU3RyaW5nID0gdGhpc1snZ2V0QmluZGluZ3NTdHJpbmcnXShub2RlLCBiaW5kaW5nQ29udGV4dCksXG4gICAgICAgICAgICAgICAgcGFyc2VkQmluZGluZ3MgPSBiaW5kaW5nc1N0cmluZyA/IHRoaXNbJ3BhcnNlQmluZGluZ3NTdHJpbmcnXShiaW5kaW5nc1N0cmluZywgYmluZGluZ0NvbnRleHQsIG5vZGUsIHsgJ3ZhbHVlQWNjZXNzb3JzJzogdHJ1ZSB9KSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4ga28uY29tcG9uZW50cy5hZGRCaW5kaW5nc0ZvckN1c3RvbUVsZW1lbnQocGFyc2VkQmluZGluZ3MsIG5vZGUsIGJpbmRpbmdDb250ZXh0LCAvKiB2YWx1ZUFjY2Vzc29ycyAqLyB0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9uIGlzIG9ubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoaXMgZGVmYXVsdCBwcm92aWRlci5cbiAgICAgICAgLy8gSXQncyBub3QgcGFydCBvZiB0aGUgaW50ZXJmYWNlIGRlZmluaXRpb24gZm9yIGEgZ2VuZXJhbCBiaW5kaW5nIHByb3ZpZGVyLlxuICAgICAgICAnZ2V0QmluZGluZ3NTdHJpbmcnOiBmdW5jdGlvbihub2RlLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoZGVmYXVsdEJpbmRpbmdBdHRyaWJ1dGVOYW1lKTsgICAvLyBFbGVtZW50XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4ga28udmlydHVhbEVsZW1lbnRzLnZpcnR1YWxOb2RlQmluZGluZ1ZhbHVlKG5vZGUpOyAvLyBDb21tZW50IG5vZGVcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9uIGlzIG9ubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoaXMgZGVmYXVsdCBwcm92aWRlci5cbiAgICAgICAgLy8gSXQncyBub3QgcGFydCBvZiB0aGUgaW50ZXJmYWNlIGRlZmluaXRpb24gZm9yIGEgZ2VuZXJhbCBiaW5kaW5nIHByb3ZpZGVyLlxuICAgICAgICAncGFyc2VCaW5kaW5nc1N0cmluZyc6IGZ1bmN0aW9uKGJpbmRpbmdzU3RyaW5nLCBiaW5kaW5nQ29udGV4dCwgbm9kZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ0Z1bmN0aW9uID0gY3JlYXRlQmluZGluZ3NTdHJpbmdFdmFsdWF0b3JWaWFDYWNoZShiaW5kaW5nc1N0cmluZywgdGhpcy5iaW5kaW5nQ2FjaGUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kaW5nRnVuY3Rpb24oYmluZGluZ0NvbnRleHQsIG5vZGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICBleC5tZXNzYWdlID0gXCJVbmFibGUgdG8gcGFyc2UgYmluZGluZ3MuXFxuQmluZGluZ3MgdmFsdWU6IFwiICsgYmluZGluZ3NTdHJpbmcgKyBcIlxcbk1lc3NhZ2U6IFwiICsgZXgubWVzc2FnZTtcbiAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAga28uYmluZGluZ1Byb3ZpZGVyWydpbnN0YW5jZSddID0gbmV3IGtvLmJpbmRpbmdQcm92aWRlcigpO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZGluZ3NTdHJpbmdFdmFsdWF0b3JWaWFDYWNoZShiaW5kaW5nc1N0cmluZywgY2FjaGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNhY2hlS2V5ID0gYmluZGluZ3NTdHJpbmcgKyAob3B0aW9ucyAmJiBvcHRpb25zWyd2YWx1ZUFjY2Vzc29ycyddIHx8ICcnKTtcbiAgICAgICAgcmV0dXJuIGNhY2hlW2NhY2hlS2V5XVxuICAgICAgICAgICAgfHwgKGNhY2hlW2NhY2hlS2V5XSA9IGNyZWF0ZUJpbmRpbmdzU3RyaW5nRXZhbHVhdG9yKGJpbmRpbmdzU3RyaW5nLCBvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZGluZ3NTdHJpbmdFdmFsdWF0b3IoYmluZGluZ3NTdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gQnVpbGQgdGhlIHNvdXJjZSBmb3IgYSBmdW5jdGlvbiB0aGF0IGV2YWx1YXRlcyBcImV4cHJlc3Npb25cIlxuICAgICAgICAvLyBGb3IgZWFjaCBzY29wZSB2YXJpYWJsZSwgYWRkIGFuIGV4dHJhIGxldmVsIG9mIFwid2l0aFwiIG5lc3RpbmdcbiAgICAgICAgLy8gRXhhbXBsZSByZXN1bHQ6IHdpdGgoc2MxKSB7IHdpdGgoc2MwKSB7IHJldHVybiAoZXhwcmVzc2lvbikgfSB9XG4gICAgICAgIHZhciByZXdyaXR0ZW5CaW5kaW5ncyA9IGtvLmV4cHJlc3Npb25SZXdyaXRpbmcucHJlUHJvY2Vzc0JpbmRpbmdzKGJpbmRpbmdzU3RyaW5nLCBvcHRpb25zKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uQm9keSA9IFwid2l0aCgkY29udGV4dCl7d2l0aCgkZGF0YXx8e30pe3JldHVybntcIiArIHJld3JpdHRlbkJpbmRpbmdzICsgXCJ9fX1cIjtcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcIiRjb250ZXh0XCIsIFwiJGVsZW1lbnRcIiwgZnVuY3Rpb25Cb2R5KTtcbiAgICB9XG59KSgpO1xuXG5rby5leHBvcnRTeW1ib2woJ2JpbmRpbmdQcm92aWRlcicsIGtvLmJpbmRpbmdQcm92aWRlcik7XG4oZnVuY3Rpb24gKCkge1xuICAgIGtvLmJpbmRpbmdIYW5kbGVycyA9IHt9O1xuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBlbGVtZW50IHR5cGVzIHdpbGwgbm90IGJlIHJlY3Vyc2VkIGludG8gZHVyaW5nIGJpbmRpbmcuXG4gICAgdmFyIGJpbmRpbmdEb2VzTm90UmVjdXJzZUludG9FbGVtZW50VHlwZXMgPSB7XG4gICAgICAgIC8vIERvbid0IHdhbnQgYmluZGluZ3MgdGhhdCBvcGVyYXRlIG9uIHRleHQgbm9kZXMgdG8gbXV0YXRlIDxzY3JpcHQ+IGFuZCA8dGV4dGFyZWE+IGNvbnRlbnRzLFxuICAgICAgICAvLyBiZWNhdXNlIGl0J3MgdW5leHBlY3RlZCBhbmQgYSBwb3RlbnRpYWwgWFNTIGlzc3VlLlxuICAgICAgICAvLyBBbHNvIGJpbmRpbmdzIHNob3VsZCBub3Qgb3BlcmF0ZSBvbiA8dGVtcGxhdGU+IGVsZW1lbnRzIHNpbmNlIHRoaXMgYnJlYWtzIGluIEludGVybmV0IEV4cGxvcmVyXG4gICAgICAgIC8vIGFuZCBiZWNhdXNlIHN1Y2ggZWxlbWVudHMnIGNvbnRlbnRzIGFyZSBhbHdheXMgaW50ZW5kZWQgdG8gYmUgYm91bmQgaW4gYSBkaWZmZXJlbnQgY29udGV4dFxuICAgICAgICAvLyBmcm9tIHdoZXJlIHRoZXkgYXBwZWFyIGluIHRoZSBkb2N1bWVudC5cbiAgICAgICAgJ3NjcmlwdCc6IHRydWUsXG4gICAgICAgICd0ZXh0YXJlYSc6IHRydWUsXG4gICAgICAgICd0ZW1wbGF0ZSc6IHRydWVcbiAgICB9O1xuXG4gICAgLy8gVXNlIGFuIG92ZXJyaWRhYmxlIG1ldGhvZCBmb3IgcmV0cmlldmluZyBiaW5kaW5nIGhhbmRsZXJzIHNvIHRoYXQgYSBwbHVnaW5zIG1heSBzdXBwb3J0IGR5bmFtaWNhbGx5IGNyZWF0ZWQgaGFuZGxlcnNcbiAgICBrb1snZ2V0QmluZGluZ0hhbmRsZXInXSA9IGZ1bmN0aW9uKGJpbmRpbmdLZXkpIHtcbiAgICAgICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1tiaW5kaW5nS2V5XTtcbiAgICB9O1xuXG4gICAgLy8gVGhlIGtvLmJpbmRpbmdDb250ZXh0IGNvbnN0cnVjdG9yIGlzIG9ubHkgY2FsbGVkIGRpcmVjdGx5IHRvIGNyZWF0ZSB0aGUgcm9vdCBjb250ZXh0LiBGb3IgY2hpbGRcbiAgICAvLyBjb250ZXh0cywgdXNlIGJpbmRpbmdDb250ZXh0LmNyZWF0ZUNoaWxkQ29udGV4dCBvciBiaW5kaW5nQ29udGV4dC5leHRlbmQuXG4gICAga28uYmluZGluZ0NvbnRleHQgPSBmdW5jdGlvbihkYXRhSXRlbU9yQWNjZXNzb3IsIHBhcmVudENvbnRleHQsIGRhdGFJdGVtQWxpYXMsIGV4dGVuZENhbGxiYWNrLCBvcHRpb25zKSB7XG5cbiAgICAgICAgLy8gVGhlIGJpbmRpbmcgY29udGV4dCBvYmplY3QgaW5jbHVkZXMgc3RhdGljIHByb3BlcnRpZXMgZm9yIHRoZSBjdXJyZW50LCBwYXJlbnQsIGFuZCByb290IHZpZXcgbW9kZWxzLlxuICAgICAgICAvLyBJZiBhIHZpZXcgbW9kZWwgaXMgYWN0dWFsbHkgc3RvcmVkIGluIGFuIG9ic2VydmFibGUsIHRoZSBjb3JyZXNwb25kaW5nIGJpbmRpbmcgY29udGV4dCBvYmplY3QsIGFuZFxuICAgICAgICAvLyBhbnkgY2hpbGQgY29udGV4dHMsIG11c3QgYmUgdXBkYXRlZCB3aGVuIHRoZSB2aWV3IG1vZGVsIGlzIGNoYW5nZWQuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbnRleHQoKSB7XG4gICAgICAgICAgICAvLyBNb3N0IG9mIHRoZSB0aW1lLCB0aGUgY29udGV4dCB3aWxsIGRpcmVjdGx5IGdldCBhIHZpZXcgbW9kZWwgb2JqZWN0LCBidXQgaWYgYSBmdW5jdGlvbiBpcyBnaXZlbixcbiAgICAgICAgICAgIC8vIHdlIGNhbGwgdGhlIGZ1bmN0aW9uIHRvIHJldHJpZXZlIHRoZSB2aWV3IG1vZGVsLiBJZiB0aGUgZnVuY3Rpb24gYWNjZXNzZXMgYW55IG9ic2VydmFibGVzIG9yIHJldHVybnNcbiAgICAgICAgICAgIC8vIGFuIG9ic2VydmFibGUsIHRoZSBkZXBlbmRlbmN5IGlzIHRyYWNrZWQsIGFuZCB0aG9zZSBvYnNlcnZhYmxlcyBjYW4gbGF0ZXIgY2F1c2UgdGhlIGJpbmRpbmdcbiAgICAgICAgICAgIC8vIGNvbnRleHQgdG8gYmUgdXBkYXRlZC5cbiAgICAgICAgICAgIHZhciBkYXRhSXRlbU9yT2JzZXJ2YWJsZSA9IGlzRnVuYyA/IGRhdGFJdGVtT3JBY2Nlc3NvcigpIDogZGF0YUl0ZW1PckFjY2Vzc29yLFxuICAgICAgICAgICAgICAgIGRhdGFJdGVtID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShkYXRhSXRlbU9yT2JzZXJ2YWJsZSk7XG5cbiAgICAgICAgICAgIGlmIChwYXJlbnRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiBhIFwicGFyZW50XCIgY29udGV4dCBpcyBnaXZlbiwgcmVnaXN0ZXIgYSBkZXBlbmRlbmN5IG9uIHRoZSBwYXJlbnQgY29udGV4dC4gVGh1cyB3aGVuZXZlciB0aGVcbiAgICAgICAgICAgICAgICAvLyBwYXJlbnQgY29udGV4dCBpcyB1cGRhdGVkLCB0aGlzIGNvbnRleHQgd2lsbCBhbHNvIGJlIHVwZGF0ZWQuXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbnRleHQuX3N1YnNjcmliYWJsZSlcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29udGV4dC5fc3Vic2NyaWJhYmxlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBDb3B5ICRyb290IGFuZCBhbnkgY3VzdG9tIHByb3BlcnRpZXMgZnJvbSB0aGUgcGFyZW50IGNvbnRleHRcbiAgICAgICAgICAgICAgICBrby51dGlscy5leHRlbmQoc2VsZiwgcGFyZW50Q29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIHRoZSBhYm92ZSBjb3B5IG92ZXJ3cml0ZXMgb3VyIG93biBwcm9wZXJ0aWVzLCB3ZSBuZWVkIHRvIHJlc2V0IHRoZW0uXG4gICAgICAgICAgICAgICAgc2VsZi5fc3Vic2NyaWJhYmxlID0gc3Vic2NyaWJhYmxlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmWyckcGFyZW50cyddID0gW107XG4gICAgICAgICAgICAgICAgc2VsZlsnJHJvb3QnXSA9IGRhdGFJdGVtO1xuXG4gICAgICAgICAgICAgICAgLy8gRXhwb3J0ICdrbycgaW4gdGhlIGJpbmRpbmcgY29udGV4dCBzbyBpdCB3aWxsIGJlIGF2YWlsYWJsZSBpbiBiaW5kaW5ncyBhbmQgdGVtcGxhdGVzXG4gICAgICAgICAgICAgICAgLy8gZXZlbiBpZiAna28nIGlzbid0IGV4cG9ydGVkIGFzIGEgZ2xvYmFsLCBzdWNoIGFzIHdoZW4gdXNpbmcgYW4gQU1EIGxvYWRlci5cbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy80OTBcbiAgICAgICAgICAgICAgICBzZWxmWydrbyddID0ga287XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmWyckcmF3RGF0YSddID0gZGF0YUl0ZW1Pck9ic2VydmFibGU7XG4gICAgICAgICAgICBzZWxmWyckZGF0YSddID0gZGF0YUl0ZW07XG4gICAgICAgICAgICBpZiAoZGF0YUl0ZW1BbGlhcylcbiAgICAgICAgICAgICAgICBzZWxmW2RhdGFJdGVtQWxpYXNdID0gZGF0YUl0ZW07XG5cbiAgICAgICAgICAgIC8vIFRoZSBleHRlbmRDYWxsYmFjayBmdW5jdGlvbiBpcyBwcm92aWRlZCB3aGVuIGNyZWF0aW5nIGEgY2hpbGQgY29udGV4dCBvciBleHRlbmRpbmcgYSBjb250ZXh0LlxuICAgICAgICAgICAgLy8gSXQgaGFuZGxlcyB0aGUgc3BlY2lmaWMgYWN0aW9ucyBuZWVkZWQgdG8gZmluaXNoIHNldHRpbmcgdXAgdGhlIGJpbmRpbmcgY29udGV4dC4gQWN0aW9ucyBpbiB0aGlzXG4gICAgICAgICAgICAvLyBmdW5jdGlvbiBjb3VsZCBhbHNvIGFkZCBkZXBlbmRlbmNpZXMgdG8gdGhpcyBiaW5kaW5nIGNvbnRleHQuXG4gICAgICAgICAgICBpZiAoZXh0ZW5kQ2FsbGJhY2spXG4gICAgICAgICAgICAgICAgZXh0ZW5kQ2FsbGJhY2soc2VsZiwgcGFyZW50Q29udGV4dCwgZGF0YUl0ZW0pO1xuXG4gICAgICAgICAgICByZXR1cm4gc2VsZlsnJGRhdGEnXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkaXNwb3NlV2hlbigpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlcyAmJiAha28udXRpbHMuYW55RG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50KG5vZGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZihkYXRhSXRlbU9yQWNjZXNzb3IpID09IFwiZnVuY3Rpb25cIiAmJiAha28uaXNPYnNlcnZhYmxlKGRhdGFJdGVtT3JBY2Nlc3NvciksXG4gICAgICAgICAgICBub2RlcyxcbiAgICAgICAgICAgIHN1YnNjcmliYWJsZTtcblxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zWydleHBvcnREZXBlbmRlbmNpZXMnXSkge1xuICAgICAgICAgICAgLy8gVGhlIFwiZXhwb3J0RGVwZW5kZW5jaWVzXCIgb3B0aW9uIG1lYW5zIHRoYXQgdGhlIGNhbGxpbmcgY29kZSB3aWxsIHRyYWNrIGFueSBkZXBlbmRlbmNpZXMgYW5kIHJlLWNyZWF0ZVxuICAgICAgICAgICAgLy8gdGhlIGJpbmRpbmcgY29udGV4dCB3aGVuIHRoZXkgY2hhbmdlLlxuICAgICAgICAgICAgdXBkYXRlQ29udGV4dCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3Vic2NyaWJhYmxlID0ga28uZGVwZW5kZW50T2JzZXJ2YWJsZSh1cGRhdGVDb250ZXh0LCBudWxsLCB7IGRpc3Bvc2VXaGVuOiBkaXNwb3NlV2hlbiwgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiB0cnVlIH0pO1xuXG4gICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgYmluZGluZyBjb250ZXh0IGhhcyBiZWVuIGluaXRpYWxpemVkLCBhbmQgdGhlIFwic3Vic2NyaWJhYmxlXCIgY29tcHV0ZWQgb2JzZXJ2YWJsZSBpc1xuICAgICAgICAgICAgLy8gc3Vic2NyaWJlZCB0byBhbnkgb2JzZXJ2YWJsZXMgdGhhdCB3ZXJlIGFjY2Vzc2VkIGluIHRoZSBwcm9jZXNzLiBJZiB0aGVyZSBpcyBub3RoaW5nIHRvIHRyYWNrLCB0aGVcbiAgICAgICAgICAgIC8vIGNvbXB1dGVkIHdpbGwgYmUgaW5hY3RpdmUsIGFuZCB3ZSBjYW4gc2FmZWx5IHRocm93IGl0IGF3YXkuIElmIGl0J3MgYWN0aXZlLCB0aGUgY29tcHV0ZWQgaXMgc3RvcmVkIGluXG4gICAgICAgICAgICAvLyB0aGUgY29udGV4dCBvYmplY3QuXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJhYmxlLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9zdWJzY3JpYmFibGUgPSBzdWJzY3JpYmFibGU7XG5cbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgbm90aWZ5IGJlY2F1c2UgZXZlbiBpZiB0aGUgbW9kZWwgKCRkYXRhKSBoYXNuJ3QgY2hhbmdlZCwgb3RoZXIgY29udGV4dCBwcm9wZXJ0aWVzIG1pZ2h0IGhhdmUgY2hhbmdlZFxuICAgICAgICAgICAgICAgIHN1YnNjcmliYWJsZVsnZXF1YWxpdHlDb21wYXJlciddID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gYmUgYWJsZSB0byBkaXNwb3NlIG9mIHRoaXMgY29tcHV0ZWQgb2JzZXJ2YWJsZSB3aGVuIGl0J3Mgbm8gbG9uZ2VyIG5lZWRlZC4gVGhpcyB3b3VsZCBiZVxuICAgICAgICAgICAgICAgIC8vIGVhc3kgaWYgd2UgaGFkIGEgc2luZ2xlIG5vZGUgdG8gd2F0Y2gsIGJ1dCBiaW5kaW5nIGNvbnRleHRzIGNhbiBiZSB1c2VkIGJ5IG1hbnkgZGlmZmVyZW50IG5vZGVzLCBhbmRcbiAgICAgICAgICAgICAgICAvLyB3ZSBjYW5ub3QgYXNzdW1lIHRoYXQgdGhvc2Ugbm9kZXMgaGF2ZSBhbnkgcmVsYXRpb24gdG8gZWFjaCBvdGhlci4gU28gaW5zdGVhZCB3ZSB0cmFjayBhbnkgbm9kZSB0aGF0XG4gICAgICAgICAgICAgICAgLy8gdGhlIGNvbnRleHQgaXMgYXR0YWNoZWQgdG8sIGFuZCBkaXNwb3NlIHRoZSBjb21wdXRlZCB3aGVuIGFsbCBvZiB0aG9zZSBub2RlcyBoYXZlIGJlZW4gY2xlYW5lZC5cblxuICAgICAgICAgICAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvICpzdWJzY3JpYmFibGUqIGluc3RlYWQgb2YgKnNlbGYqIGJlY2F1c2UgYW55IHByb3BlcnRpZXMgYWRkZWQgdG8gKnNlbGYqIG1heSBiZSBvdmVyd3JpdHRlbiBvbiB1cGRhdGVzXG4gICAgICAgICAgICAgICAgbm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmFibGUuX2FkZE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2sobm9kZSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAga28udXRpbHMuYXJyYXlSZW1vdmVJdGVtKG5vZGVzLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zdWJzY3JpYmFibGUgPSBzdWJzY3JpYmFibGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJpbmRpbmcgY29udGV4dCBoaWVyYXJjaHkgd2l0aCBhIG5ldyB2aWV3IG1vZGVsIG9iamVjdC4gSWYgdGhlIHBhcmVudCBjb250ZXh0IGlzIHdhdGNoaW5nXG4gICAgLy8gYW55IG9ic2VydmFibGVzLCB0aGUgbmV3IGNoaWxkIGNvbnRleHQgd2lsbCBhdXRvbWF0aWNhbGx5IGdldCBhIGRlcGVuZGVuY3kgb24gdGhlIHBhcmVudCBjb250ZXh0LlxuICAgIC8vIEJ1dCB0aGlzIGRvZXMgbm90IG1lYW4gdGhhdCB0aGUgJGRhdGEgdmFsdWUgb2YgdGhlIGNoaWxkIGNvbnRleHQgd2lsbCBhbHNvIGdldCB1cGRhdGVkLiBJZiB0aGUgY2hpbGRcbiAgICAvLyB2aWV3IG1vZGVsIGFsc28gZGVwZW5kcyBvbiB0aGUgcGFyZW50IHZpZXcgbW9kZWwsIHlvdSBtdXN0IHByb3ZpZGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNvcnJlY3RcbiAgICAvLyB2aWV3IG1vZGVsIG9uIGVhY2ggdXBkYXRlLlxuICAgIGtvLmJpbmRpbmdDb250ZXh0LnByb3RvdHlwZVsnY3JlYXRlQ2hpbGRDb250ZXh0J10gPSBmdW5jdGlvbiAoZGF0YUl0ZW1PckFjY2Vzc29yLCBkYXRhSXRlbUFsaWFzLCBleHRlbmRDYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IGtvLmJpbmRpbmdDb250ZXh0KGRhdGFJdGVtT3JBY2Nlc3NvciwgdGhpcywgZGF0YUl0ZW1BbGlhcywgZnVuY3Rpb24oc2VsZiwgcGFyZW50Q29udGV4dCkge1xuICAgICAgICAgICAgLy8gRXh0ZW5kIHRoZSBjb250ZXh0IGhpZXJhcmNoeSBieSBzZXR0aW5nIHRoZSBhcHByb3ByaWF0ZSBwb2ludGVyc1xuICAgICAgICAgICAgc2VsZlsnJHBhcmVudENvbnRleHQnXSA9IHBhcmVudENvbnRleHQ7XG4gICAgICAgICAgICBzZWxmWyckcGFyZW50J10gPSBwYXJlbnRDb250ZXh0WyckZGF0YSddO1xuICAgICAgICAgICAgc2VsZlsnJHBhcmVudHMnXSA9IChwYXJlbnRDb250ZXh0WyckcGFyZW50cyddIHx8IFtdKS5zbGljZSgwKTtcbiAgICAgICAgICAgIHNlbGZbJyRwYXJlbnRzJ10udW5zaGlmdChzZWxmWyckcGFyZW50J10pO1xuICAgICAgICAgICAgaWYgKGV4dGVuZENhbGxiYWNrKVxuICAgICAgICAgICAgICAgIGV4dGVuZENhbGxiYWNrKHNlbGYpO1xuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBiaW5kaW5nIGNvbnRleHQgd2l0aCBuZXcgY3VzdG9tIHByb3BlcnRpZXMuIFRoaXMgZG9lc24ndCBjaGFuZ2UgdGhlIGNvbnRleHQgaGllcmFyY2h5LlxuICAgIC8vIFNpbWlsYXJseSB0byBcImNoaWxkXCIgY29udGV4dHMsIHByb3ZpZGUgYSBmdW5jdGlvbiBoZXJlIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBjb3JyZWN0IHZhbHVlcyBhcmUgc2V0XG4gICAgLy8gd2hlbiBhbiBvYnNlcnZhYmxlIHZpZXcgbW9kZWwgaXMgdXBkYXRlZC5cbiAgICBrby5iaW5kaW5nQ29udGV4dC5wcm90b3R5cGVbJ2V4dGVuZCddID0gZnVuY3Rpb24ocHJvcGVydGllcykge1xuICAgICAgICAvLyBJZiB0aGUgcGFyZW50IGNvbnRleHQgcmVmZXJlbmNlcyBhbiBvYnNlcnZhYmxlIHZpZXcgbW9kZWwsIFwiX3N1YnNjcmliYWJsZVwiIHdpbGwgYWx3YXlzIGJlIHRoZVxuICAgICAgICAvLyBsYXRlc3QgdmlldyBtb2RlbCBvYmplY3QuIElmIG5vdCwgXCJfc3Vic2NyaWJhYmxlXCIgaXNuJ3Qgc2V0LCBhbmQgd2UgY2FuIHVzZSB0aGUgc3RhdGljIFwiJGRhdGFcIiB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG5ldyBrby5iaW5kaW5nQ29udGV4dCh0aGlzLl9zdWJzY3JpYmFibGUgfHwgdGhpc1snJGRhdGEnXSwgdGhpcywgbnVsbCwgZnVuY3Rpb24oc2VsZiwgcGFyZW50Q29udGV4dCkge1xuICAgICAgICAgICAgLy8gVGhpcyBcImNoaWxkXCIgY29udGV4dCBkb2Vzbid0IGRpcmVjdGx5IHRyYWNrIGEgcGFyZW50IG9ic2VydmFibGUgdmlldyBtb2RlbCxcbiAgICAgICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gbWFudWFsbHkgc2V0IHRoZSAkcmF3RGF0YSB2YWx1ZSB0byBtYXRjaCB0aGUgcGFyZW50LlxuICAgICAgICAgICAgc2VsZlsnJHJhd0RhdGEnXSA9IHBhcmVudENvbnRleHRbJyRyYXdEYXRhJ107XG4gICAgICAgICAgICBrby51dGlscy5leHRlbmQoc2VsZiwgdHlwZW9mKHByb3BlcnRpZXMpID09IFwiZnVuY3Rpb25cIiA/IHByb3BlcnRpZXMoKSA6IHByb3BlcnRpZXMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAga28uYmluZGluZ0NvbnRleHQucHJvdG90eXBlLmNyZWF0ZVN0YXRpY0NoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIChkYXRhSXRlbU9yQWNjZXNzb3IsIGRhdGFJdGVtQWxpYXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJ2NyZWF0ZUNoaWxkQ29udGV4dCddKGRhdGFJdGVtT3JBY2Nlc3NvciwgZGF0YUl0ZW1BbGlhcywgbnVsbCwgeyBcImV4cG9ydERlcGVuZGVuY2llc1wiOiB0cnVlIH0pO1xuICAgIH07XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB2YWx1ZUFjY2Vzb3IgZnVuY3Rpb24gZm9yIGEgYmluZGluZyB2YWx1ZVxuICAgIGZ1bmN0aW9uIG1ha2VWYWx1ZUFjY2Vzc29yKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlQWNjZXNzb3IgZnVuY3Rpb25cbiAgICBmdW5jdGlvbiBldmFsdWF0ZVZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3Nvcikge1xuICAgICAgICByZXR1cm4gdmFsdWVBY2Nlc3NvcigpO1xuICAgIH1cblxuICAgIC8vIEdpdmVuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGJpbmRpbmdzLCBjcmVhdGUgYW5kIHJldHVybiBhIG5ldyBvYmplY3QgdGhhdCBjb250YWluc1xuICAgIC8vIGJpbmRpbmcgdmFsdWUtYWNjZXNzb3JzIGZ1bmN0aW9ucy4gRWFjaCBhY2Nlc3NvciBmdW5jdGlvbiBjYWxscyB0aGUgb3JpZ2luYWwgZnVuY3Rpb25cbiAgICAvLyBzbyB0aGF0IGl0IGFsd2F5cyBnZXRzIHRoZSBsYXRlc3QgdmFsdWUgYW5kIGFsbCBkZXBlbmRlbmNpZXMgYXJlIGNhcHR1cmVkLiBUaGlzIGlzIHVzZWRcbiAgICAvLyBieSBrby5hcHBseUJpbmRpbmdzVG9Ob2RlIGFuZCBnZXRCaW5kaW5nc0FuZE1ha2VBY2Nlc3NvcnMuXG4gICAgZnVuY3Rpb24gbWFrZUFjY2Vzc29yc0Zyb21GdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4ga28udXRpbHMub2JqZWN0TWFwKGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGNhbGxiYWNrKSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpW2tleV07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBHaXZlbiBhIGJpbmRpbmdzIGZ1bmN0aW9uIG9yIG9iamVjdCwgY3JlYXRlIGFuZCByZXR1cm4gYSBuZXcgb2JqZWN0IHRoYXQgY29udGFpbnNcbiAgICAvLyBiaW5kaW5nIHZhbHVlLWFjY2Vzc29ycyBmdW5jdGlvbnMuIFRoaXMgaXMgdXNlZCBieSBrby5hcHBseUJpbmRpbmdzVG9Ob2RlLlxuICAgIGZ1bmN0aW9uIG1ha2VCaW5kaW5nQWNjZXNzb3JzKGJpbmRpbmdzLCBjb250ZXh0LCBub2RlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYmluZGluZ3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBtYWtlQWNjZXNzb3JzRnJvbUZ1bmN0aW9uKGJpbmRpbmdzLmJpbmQobnVsbCwgY29udGV4dCwgbm9kZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLm9iamVjdE1hcChiaW5kaW5ncywgbWFrZVZhbHVlQWNjZXNzb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGlmIHRoZSBiaW5kaW5nIHByb3ZpZGVyIGRvZXNuJ3QgaW5jbHVkZSBhIGdldEJpbmRpbmdBY2Nlc3NvcnMgZnVuY3Rpb24uXG4gICAgLy8gSXQgbXVzdCBiZSBjYWxsZWQgd2l0aCAndGhpcycgc2V0IHRvIHRoZSBwcm92aWRlciBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBnZXRCaW5kaW5nc0FuZE1ha2VBY2Nlc3NvcnMobm9kZSwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gbWFrZUFjY2Vzc29yc0Zyb21GdW5jdGlvbih0aGlzWydnZXRCaW5kaW5ncyddLmJpbmQodGhpcywgbm9kZSwgY29udGV4dCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlVGhhdEJpbmRpbmdJc0FsbG93ZWRGb3JWaXJ0dWFsRWxlbWVudHMoYmluZGluZ05hbWUpIHtcbiAgICAgICAgdmFyIHZhbGlkYXRvciA9IGtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbYmluZGluZ05hbWVdO1xuICAgICAgICBpZiAoIXZhbGlkYXRvcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBiaW5kaW5nICdcIiArIGJpbmRpbmdOYW1lICsgXCInIGNhbm5vdCBiZSB1c2VkIHdpdGggdmlydHVhbCBlbGVtZW50c1wiKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzSW50ZXJuYWwgKGJpbmRpbmdDb250ZXh0LCBlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgYmluZGluZ0NvbnRleHRzTWF5RGlmZmVyRnJvbURvbVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRDaGlsZCxcbiAgICAgICAgICAgIG5leHRJblF1ZXVlID0ga28udmlydHVhbEVsZW1lbnRzLmZpcnN0Q2hpbGQoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQpLFxuICAgICAgICAgICAgcHJvdmlkZXIgPSBrby5iaW5kaW5nUHJvdmlkZXJbJ2luc3RhbmNlJ10sXG4gICAgICAgICAgICBwcmVwcm9jZXNzTm9kZSA9IHByb3ZpZGVyWydwcmVwcm9jZXNzTm9kZSddO1xuXG4gICAgICAgIC8vIFByZXByb2Nlc3NpbmcgYWxsb3dzIGEgYmluZGluZyBwcm92aWRlciB0byBtdXRhdGUgYSBub2RlIGJlZm9yZSBiaW5kaW5ncyBhcmUgYXBwbGllZCB0byBpdC4gRm9yIGV4YW1wbGUgaXQnc1xuICAgICAgICAvLyBwb3NzaWJsZSB0byBpbnNlcnQgbmV3IHNpYmxpbmdzIGFmdGVyIGl0LCBhbmQvb3IgcmVwbGFjZSB0aGUgbm9kZSB3aXRoIGEgZGlmZmVyZW50IG9uZS4gVGhpcyBjYW4gYmUgdXNlZCB0b1xuICAgICAgICAvLyBpbXBsZW1lbnQgY3VzdG9tIGJpbmRpbmcgc3ludGF4ZXMsIHN1Y2ggYXMge3sgdmFsdWUgfX0gZm9yIHN0cmluZyBpbnRlcnBvbGF0aW9uLCBvciBjdXN0b20gZWxlbWVudCB0eXBlcyB0aGF0XG4gICAgICAgIC8vIHRyaWdnZXIgaW5zZXJ0aW9uIG9mIDx0ZW1wbGF0ZT4gY29udGVudHMgYXQgdGhhdCBwb2ludCBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICAgIGlmIChwcmVwcm9jZXNzTm9kZSkge1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnRDaGlsZCA9IG5leHRJblF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluUXVldWUgPSBrby52aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcoY3VycmVudENoaWxkKTtcbiAgICAgICAgICAgICAgICBwcmVwcm9jZXNzTm9kZS5jYWxsKHByb3ZpZGVyLCBjdXJyZW50Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVzZXQgbmV4dEluUXVldWUgZm9yIHRoZSBuZXh0IGxvb3BcbiAgICAgICAgICAgIG5leHRJblF1ZXVlID0ga28udmlydHVhbEVsZW1lbnRzLmZpcnN0Q2hpbGQoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGN1cnJlbnRDaGlsZCA9IG5leHRJblF1ZXVlKSB7XG4gICAgICAgICAgICAvLyBLZWVwIGEgcmVjb3JkIG9mIHRoZSBuZXh0IGNoaWxkICpiZWZvcmUqIGFwcGx5aW5nIGJpbmRpbmdzLCBpbiBjYXNlIHRoZSBiaW5kaW5nIHJlbW92ZXMgdGhlIGN1cnJlbnQgY2hpbGQgZnJvbSBpdHMgcG9zaXRpb25cbiAgICAgICAgICAgIG5leHRJblF1ZXVlID0ga28udmlydHVhbEVsZW1lbnRzLm5leHRTaWJsaW5nKGN1cnJlbnRDaGlsZCk7XG4gICAgICAgICAgICBhcHBseUJpbmRpbmdzVG9Ob2RlQW5kRGVzY2VuZGFudHNJbnRlcm5hbChiaW5kaW5nQ29udGV4dCwgY3VycmVudENoaWxkLCBiaW5kaW5nQ29udGV4dHNNYXlEaWZmZXJGcm9tRG9tUGFyZW50RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseUJpbmRpbmdzVG9Ob2RlQW5kRGVzY2VuZGFudHNJbnRlcm5hbCAoYmluZGluZ0NvbnRleHQsIG5vZGVWZXJpZmllZCwgYmluZGluZ0NvbnRleHRNYXlEaWZmZXJGcm9tRG9tUGFyZW50RWxlbWVudCkge1xuICAgICAgICB2YXIgc2hvdWxkQmluZERlc2NlbmRhbnRzID0gdHJ1ZTtcblxuICAgICAgICAvLyBQZXJmIG9wdGltaXNhdGlvbjogQXBwbHkgYmluZGluZ3Mgb25seSBpZi4uLlxuICAgICAgICAvLyAoMSkgV2UgbmVlZCB0byBzdG9yZSB0aGUgYmluZGluZyBjb250ZXh0IG9uIHRoaXMgbm9kZSAoYmVjYXVzZSBpdCBtYXkgZGlmZmVyIGZyb20gdGhlIERPTSBwYXJlbnQgbm9kZSdzIGJpbmRpbmcgY29udGV4dClcbiAgICAgICAgLy8gICAgIE5vdGUgdGhhdCB3ZSBjYW4ndCBzdG9yZSBiaW5kaW5nIGNvbnRleHRzIG9uIG5vbi1lbGVtZW50cyAoZS5nLiwgdGV4dCBub2RlcyksIGFzIElFIGRvZXNuJ3QgYWxsb3cgZXhwYW5kbyBwcm9wZXJ0aWVzIGZvciB0aG9zZVxuICAgICAgICAvLyAoMikgSXQgbWlnaHQgaGF2ZSBiaW5kaW5ncyAoZS5nLiwgaXQgaGFzIGEgZGF0YS1iaW5kIGF0dHJpYnV0ZSwgb3IgaXQncyBhIG1hcmtlciBmb3IgYSBjb250YWluZXJsZXNzIHRlbXBsYXRlKVxuICAgICAgICB2YXIgaXNFbGVtZW50ID0gKG5vZGVWZXJpZmllZC5ub2RlVHlwZSA9PT0gMSk7XG4gICAgICAgIGlmIChpc0VsZW1lbnQpIC8vIFdvcmthcm91bmQgSUUgPD0gOCBIVE1MIHBhcnNpbmcgd2VpcmRuZXNzXG4gICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMubm9ybWFsaXNlVmlydHVhbEVsZW1lbnREb21TdHJ1Y3R1cmUobm9kZVZlcmlmaWVkKTtcblxuICAgICAgICB2YXIgc2hvdWxkQXBwbHlCaW5kaW5ncyA9IChpc0VsZW1lbnQgJiYgYmluZGluZ0NvbnRleHRNYXlEaWZmZXJGcm9tRG9tUGFyZW50RWxlbWVudCkgICAgICAgICAgICAgLy8gQ2FzZSAoMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBrby5iaW5kaW5nUHJvdmlkZXJbJ2luc3RhbmNlJ11bJ25vZGVIYXNCaW5kaW5ncyddKG5vZGVWZXJpZmllZCk7ICAgICAgIC8vIENhc2UgKDIpXG4gICAgICAgIGlmIChzaG91bGRBcHBseUJpbmRpbmdzKVxuICAgICAgICAgICAgc2hvdWxkQmluZERlc2NlbmRhbnRzID0gYXBwbHlCaW5kaW5nc1RvTm9kZUludGVybmFsKG5vZGVWZXJpZmllZCwgbnVsbCwgYmluZGluZ0NvbnRleHQsIGJpbmRpbmdDb250ZXh0TWF5RGlmZmVyRnJvbURvbVBhcmVudEVsZW1lbnQpWydzaG91bGRCaW5kRGVzY2VuZGFudHMnXTtcblxuICAgICAgICBpZiAoc2hvdWxkQmluZERlc2NlbmRhbnRzICYmICFiaW5kaW5nRG9lc05vdFJlY3Vyc2VJbnRvRWxlbWVudFR5cGVzW2tvLnV0aWxzLnRhZ05hbWVMb3dlcihub2RlVmVyaWZpZWQpXSkge1xuICAgICAgICAgICAgLy8gV2UncmUgcmVjdXJzaW5nIGF1dG9tYXRpY2FsbHkgaW50byAocmVhbCBvciB2aXJ0dWFsKSBjaGlsZCBub2RlcyB3aXRob3V0IGNoYW5naW5nIGJpbmRpbmcgY29udGV4dHMuIFNvLFxuICAgICAgICAgICAgLy8gICogRm9yIGNoaWxkcmVuIG9mIGEgKnJlYWwqIGVsZW1lbnQsIHRoZSBiaW5kaW5nIGNvbnRleHQgaXMgY2VydGFpbmx5IHRoZSBzYW1lIGFzIG9uIHRoZWlyIERPTSAucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIC8vICAgIGhlbmNlIGJpbmRpbmdDb250ZXh0c01heURpZmZlckZyb21Eb21QYXJlbnRFbGVtZW50IGlzIGZhbHNlXG4gICAgICAgICAgICAvLyAgKiBGb3IgY2hpbGRyZW4gb2YgYSAqdmlydHVhbCogZWxlbWVudCwgd2UgY2FuJ3QgYmUgc3VyZS4gRXZhbHVhdGluZyAucGFyZW50Tm9kZSBvbiB0aG9zZSBjaGlsZHJlbiBtYXlcbiAgICAgICAgICAgIC8vICAgIHNraXAgb3ZlciBhbnkgbnVtYmVyIG9mIGludGVybWVkaWF0ZSB2aXJ0dWFsIGVsZW1lbnRzLCBhbnkgb2Ygd2hpY2ggbWlnaHQgZGVmaW5lIGEgY3VzdG9tIGJpbmRpbmcgY29udGV4dCxcbiAgICAgICAgICAgIC8vICAgIGhlbmNlIGJpbmRpbmdDb250ZXh0c01heURpZmZlckZyb21Eb21QYXJlbnRFbGVtZW50IGlzIHRydWVcbiAgICAgICAgICAgIGFwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzSW50ZXJuYWwoYmluZGluZ0NvbnRleHQsIG5vZGVWZXJpZmllZCwgLyogYmluZGluZ0NvbnRleHRzTWF5RGlmZmVyRnJvbURvbVBhcmVudEVsZW1lbnQ6ICovICFpc0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJvdW5kRWxlbWVudERvbURhdGFLZXkgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKTtcblxuXG4gICAgZnVuY3Rpb24gdG9wb2xvZ2ljYWxTb3J0QmluZGluZ3MoYmluZGluZ3MpIHtcbiAgICAgICAgLy8gRGVwdGgtZmlyc3Qgc29ydFxuICAgICAgICB2YXIgcmVzdWx0ID0gW10sICAgICAgICAgICAgICAgIC8vIFRoZSBsaXN0IG9mIGtleS9oYW5kbGVyIHBhaXJzIHRoYXQgd2Ugd2lsbCByZXR1cm5cbiAgICAgICAgICAgIGJpbmRpbmdzQ29uc2lkZXJlZCA9IHt9LCAgICAvLyBBIHRlbXBvcmFyeSByZWNvcmQgb2Ygd2hpY2ggYmluZGluZ3MgYXJlIGFscmVhZHkgaW4gJ3Jlc3VsdCdcbiAgICAgICAgICAgIGN5Y2xpY0RlcGVuZGVuY3lTdGFjayA9IFtdOyAvLyBLZWVwcyB0cmFjayBvZiBhIGRlcHRoLXNlYXJjaCBzbyB0aGF0LCBpZiB0aGVyZSdzIGEgY3ljbGUsIHdlIGtub3cgd2hpY2ggYmluZGluZ3MgY2F1c2VkIGl0XG4gICAgICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2goYmluZGluZ3MsIGZ1bmN0aW9uIHB1c2hCaW5kaW5nKGJpbmRpbmdLZXkpIHtcbiAgICAgICAgICAgIGlmICghYmluZGluZ3NDb25zaWRlcmVkW2JpbmRpbmdLZXldKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBrb1snZ2V0QmluZGluZ0hhbmRsZXInXShiaW5kaW5nS2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoYmluZGluZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXJzdCBhZGQgZGVwZW5kZW5jaWVzIChpZiBhbnkpIG9mIHRoZSBjdXJyZW50IGJpbmRpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdbJ2FmdGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN5Y2xpY0RlcGVuZGVuY3lTdGFjay5wdXNoKGJpbmRpbmdLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKGJpbmRpbmdbJ2FmdGVyJ10sIGZ1bmN0aW9uKGJpbmRpbmdEZXBlbmRlbmN5S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdzW2JpbmRpbmdEZXBlbmRlbmN5S2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa28udXRpbHMuYXJyYXlJbmRleE9mKGN5Y2xpY0RlcGVuZGVuY3lTdGFjaywgYmluZGluZ0RlcGVuZGVuY3lLZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDYW5ub3QgY29tYmluZSB0aGUgZm9sbG93aW5nIGJpbmRpbmdzLCBiZWNhdXNlIHRoZXkgaGF2ZSBhIGN5Y2xpYyBkZXBlbmRlbmN5OiBcIiArIGN5Y2xpY0RlcGVuZGVuY3lTdGFjay5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVzaEJpbmRpbmcoYmluZGluZ0RlcGVuZGVuY3lLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjeWNsaWNEZXBlbmRlbmN5U3RhY2subGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gTmV4dCBhZGQgdGhlIGN1cnJlbnQgYmluZGluZ1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IGtleTogYmluZGluZ0tleSwgaGFuZGxlcjogYmluZGluZyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmluZGluZ3NDb25zaWRlcmVkW2JpbmRpbmdLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseUJpbmRpbmdzVG9Ob2RlSW50ZXJuYWwobm9kZSwgc291cmNlQmluZGluZ3MsIGJpbmRpbmdDb250ZXh0LCBiaW5kaW5nQ29udGV4dE1heURpZmZlckZyb21Eb21QYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIC8vIFByZXZlbnQgbXVsdGlwbGUgYXBwbHlCaW5kaW5ncyBjYWxscyBmb3IgdGhlIHNhbWUgbm9kZSwgZXhjZXB0IHdoZW4gYSBiaW5kaW5nIHZhbHVlIGlzIHNwZWNpZmllZFxuICAgICAgICB2YXIgYWxyZWFkeUJvdW5kID0ga28udXRpbHMuZG9tRGF0YS5nZXQobm9kZSwgYm91bmRFbGVtZW50RG9tRGF0YUtleSk7XG4gICAgICAgIGlmICghc291cmNlQmluZGluZ3MpIHtcbiAgICAgICAgICAgIGlmIChhbHJlYWR5Qm91bmQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIllvdSBjYW5ub3QgYXBwbHkgYmluZGluZ3MgbXVsdGlwbGUgdGltZXMgdG8gdGhlIHNhbWUgZWxlbWVudC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChub2RlLCBib3VuZEVsZW1lbnREb21EYXRhS2V5LCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9wdGltaXphdGlvbjogRG9uJ3Qgc3RvcmUgdGhlIGJpbmRpbmcgY29udGV4dCBvbiB0aGlzIG5vZGUgaWYgaXQncyBkZWZpbml0ZWx5IHRoZSBzYW1lIGFzIG9uIG5vZGUucGFyZW50Tm9kZSwgYmVjYXVzZVxuICAgICAgICAvLyB3ZSBjYW4gZWFzaWx5IHJlY292ZXIgaXQganVzdCBieSBzY2FubmluZyB1cCB0aGUgbm9kZSdzIGFuY2VzdG9ycyBpbiB0aGUgRE9NXG4gICAgICAgIC8vIChub3RlOiBoZXJlLCBwYXJlbnQgbm9kZSBtZWFucyBcInJlYWwgRE9NIHBhcmVudFwiIG5vdCBcInZpcnR1YWwgcGFyZW50XCIsIGFzIHRoZXJlJ3Mgbm8gTygxKSB3YXkgdG8gZmluZCB0aGUgdmlydHVhbCBwYXJlbnQpXG4gICAgICAgIGlmICghYWxyZWFkeUJvdW5kICYmIGJpbmRpbmdDb250ZXh0TWF5RGlmZmVyRnJvbURvbVBhcmVudEVsZW1lbnQpXG4gICAgICAgICAgICBrby5zdG9yZWRCaW5kaW5nQ29udGV4dEZvck5vZGUobm9kZSwgYmluZGluZ0NvbnRleHQpO1xuXG4gICAgICAgIC8vIFVzZSBiaW5kaW5ncyBpZiBnaXZlbiwgb3RoZXJ3aXNlIGZhbGwgYmFjayBvbiBhc2tpbmcgdGhlIGJpbmRpbmdzIHByb3ZpZGVyIHRvIGdpdmUgdXMgc29tZSBiaW5kaW5nc1xuICAgICAgICB2YXIgYmluZGluZ3M7XG4gICAgICAgIGlmIChzb3VyY2VCaW5kaW5ncyAmJiB0eXBlb2Ygc291cmNlQmluZGluZ3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGJpbmRpbmdzID0gc291cmNlQmluZGluZ3M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBrby5iaW5kaW5nUHJvdmlkZXJbJ2luc3RhbmNlJ10sXG4gICAgICAgICAgICAgICAgZ2V0QmluZGluZ3MgPSBwcm92aWRlclsnZ2V0QmluZGluZ0FjY2Vzc29ycyddIHx8IGdldEJpbmRpbmdzQW5kTWFrZUFjY2Vzc29ycztcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBiaW5kaW5nIGZyb20gdGhlIHByb3ZpZGVyIHdpdGhpbiBhIGNvbXB1dGVkIG9ic2VydmFibGUgc28gdGhhdCB3ZSBjYW4gdXBkYXRlIHRoZSBiaW5kaW5ncyB3aGVuZXZlclxuICAgICAgICAgICAgLy8gdGhlIGJpbmRpbmcgY29udGV4dCBpcyB1cGRhdGVkIG9yIGlmIHRoZSBiaW5kaW5nIHByb3ZpZGVyIGFjY2Vzc2VzIG9ic2VydmFibGVzLlxuICAgICAgICAgICAgdmFyIGJpbmRpbmdzVXBkYXRlciA9IGtvLmRlcGVuZGVudE9ic2VydmFibGUoXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmdzID0gc291cmNlQmluZGluZ3MgPyBzb3VyY2VCaW5kaW5ncyhiaW5kaW5nQ29udGV4dCwgbm9kZSkgOiBnZXRCaW5kaW5ncy5jYWxsKHByb3ZpZGVyLCBub2RlLCBiaW5kaW5nQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlZ2lzdGVyIGEgZGVwZW5kZW5jeSBvbiB0aGUgYmluZGluZyBjb250ZXh0IHRvIHN1cHBvcnQgb2JzZXJ2YWJsZSB2aWV3IG1vZGVscy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdzICYmIGJpbmRpbmdDb250ZXh0Ll9zdWJzY3JpYmFibGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nQ29udGV4dC5fc3Vic2NyaWJhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiaW5kaW5ncztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBub2RlIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmICghYmluZGluZ3MgfHwgIWJpbmRpbmdzVXBkYXRlci5pc0FjdGl2ZSgpKVxuICAgICAgICAgICAgICAgIGJpbmRpbmdzVXBkYXRlciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmluZGluZ0hhbmRsZXJUaGF0Q29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M7XG4gICAgICAgIGlmIChiaW5kaW5ncykge1xuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBhY2Nlc3NvciBmb3IgYSBnaXZlbiBiaW5kaW5nLiBXaGVuIGJpbmRpbmdzIGFyZSBzdGF0aWMgKHdvbid0IGJlIHVwZGF0ZWQgYmVjYXVzZSBvZiBhIGJpbmRpbmdcbiAgICAgICAgICAgIC8vIGNvbnRleHQgdXBkYXRlKSwganVzdCByZXR1cm4gdGhlIHZhbHVlIGFjY2Vzc29yIGZyb20gdGhlIGJpbmRpbmcuIE90aGVyd2lzZSwgcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCBhbHdheXMgZ2V0c1xuICAgICAgICAgICAgLy8gdGhlIGxhdGVzdCBiaW5kaW5nIHZhbHVlIGFuZCByZWdpc3RlcnMgYSBkZXBlbmRlbmN5IG9uIHRoZSBiaW5kaW5nIHVwZGF0ZXIuXG4gICAgICAgICAgICB2YXIgZ2V0VmFsdWVBY2Nlc3NvciA9IGJpbmRpbmdzVXBkYXRlclxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oYmluZGluZ0tleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZhbHVhdGVWYWx1ZUFjY2Vzc29yKGJpbmRpbmdzVXBkYXRlcigpW2JpbmRpbmdLZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24oYmluZGluZ0tleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmluZGluZ3NbYmluZGluZ0tleV07XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gVXNlIG9mIGFsbEJpbmRpbmdzIGFzIGEgZnVuY3Rpb24gaXMgbWFpbnRhaW5lZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIGJ1dCBpdHMgdXNlIGlzIGRlcHJlY2F0ZWRcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFsbEJpbmRpbmdzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrby51dGlscy5vYmplY3RNYXAoYmluZGluZ3NVcGRhdGVyID8gYmluZGluZ3NVcGRhdGVyKCkgOiBiaW5kaW5ncywgZXZhbHVhdGVWYWx1ZUFjY2Vzc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgaXMgdGhlIDMueCBhbGxCaW5kaW5ncyBBUElcbiAgICAgICAgICAgIGFsbEJpbmRpbmdzWydnZXQnXSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kaW5nc1trZXldICYmIGV2YWx1YXRlVmFsdWVBY2Nlc3NvcihnZXRWYWx1ZUFjY2Vzc29yKGtleSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFsbEJpbmRpbmdzWydoYXMnXSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXkgaW4gYmluZGluZ3M7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBGaXJzdCBwdXQgdGhlIGJpbmRpbmdzIGludG8gdGhlIHJpZ2h0IG9yZGVyXG4gICAgICAgICAgICB2YXIgb3JkZXJlZEJpbmRpbmdzID0gdG9wb2xvZ2ljYWxTb3J0QmluZGluZ3MoYmluZGluZ3MpO1xuXG4gICAgICAgICAgICAvLyBHbyB0aHJvdWdoIHRoZSBzb3J0ZWQgYmluZGluZ3MsIGNhbGxpbmcgaW5pdCBhbmQgdXBkYXRlIGZvciBlYWNoXG4gICAgICAgICAgICBrby51dGlscy5hcnJheUZvckVhY2gob3JkZXJlZEJpbmRpbmdzLCBmdW5jdGlvbihiaW5kaW5nS2V5QW5kSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0b3BvbG9naWNhbFNvcnRCaW5kaW5ncyBoYXMgYWxyZWFkeSBmaWx0ZXJlZCBvdXQgYW55IG5vbmV4aXN0ZW50IGJpbmRpbmcgaGFuZGxlcnMsXG4gICAgICAgICAgICAgICAgLy8gc28gYmluZGluZ0tleUFuZEhhbmRsZXIuaGFuZGxlciB3aWxsIGFsd2F5cyBiZSBub25udWxsLlxuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVySW5pdEZuID0gYmluZGluZ0tleUFuZEhhbmRsZXIuaGFuZGxlcltcImluaXRcIl0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXJVcGRhdGVGbiA9IGJpbmRpbmdLZXlBbmRIYW5kbGVyLmhhbmRsZXJbXCJ1cGRhdGVcIl0sXG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmdLZXkgPSBiaW5kaW5nS2V5QW5kSGFuZGxlci5rZXk7XG5cbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZVRoYXRCaW5kaW5nSXNBbGxvd2VkRm9yVmlydHVhbEVsZW1lbnRzKGJpbmRpbmdLZXkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biBpbml0LCBpZ25vcmluZyBhbnkgZGVwZW5kZW5jaWVzXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlckluaXRGbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbml0UmVzdWx0ID0gaGFuZGxlckluaXRGbihub2RlLCBnZXRWYWx1ZUFjY2Vzc29yKGJpbmRpbmdLZXkpLCBhbGxCaW5kaW5ncywgYmluZGluZ0NvbnRleHRbJyRkYXRhJ10sIGJpbmRpbmdDb250ZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgYmluZGluZyBoYW5kbGVyIGNsYWltcyB0byBjb250cm9sIGRlc2NlbmRhbnQgYmluZGluZ3MsIG1ha2UgYSBub3RlIG9mIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdFJlc3VsdCAmJiBpbml0UmVzdWx0Wydjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiaW5kaW5nSGFuZGxlclRoYXRDb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVsdGlwbGUgYmluZGluZ3MgKFwiICsgYmluZGluZ0hhbmRsZXJUaGF0Q29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MgKyBcIiBhbmQgXCIgKyBiaW5kaW5nS2V5ICsgXCIpIGFyZSB0cnlpbmcgdG8gY29udHJvbCBkZXNjZW5kYW50IGJpbmRpbmdzIG9mIHRoZSBzYW1lIGVsZW1lbnQuIFlvdSBjYW5ub3QgdXNlIHRoZXNlIGJpbmRpbmdzIHRvZ2V0aGVyIG9uIHRoZSBzYW1lIGVsZW1lbnQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nSGFuZGxlclRoYXRDb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyA9IGJpbmRpbmdLZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSdW4gdXBkYXRlIGluIGl0cyBvd24gY29tcHV0ZWQgd3JhcHBlclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXJVcGRhdGVGbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLmRlcGVuZGVudE9ic2VydmFibGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJVcGRhdGVGbihub2RlLCBnZXRWYWx1ZUFjY2Vzc29yKGJpbmRpbmdLZXkpLCBhbGxCaW5kaW5ncywgYmluZGluZ0NvbnRleHRbJyRkYXRhJ10sIGJpbmRpbmdDb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IG5vZGUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGV4Lm1lc3NhZ2UgPSBcIlVuYWJsZSB0byBwcm9jZXNzIGJpbmRpbmcgXFxcIlwiICsgYmluZGluZ0tleSArIFwiOiBcIiArIGJpbmRpbmdzW2JpbmRpbmdLZXldICsgXCJcXFwiXFxuTWVzc2FnZTogXCIgKyBleC5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnc2hvdWxkQmluZERlc2NlbmRhbnRzJzogYmluZGluZ0hhbmRsZXJUaGF0Q29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MgPT09IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgc3RvcmVkQmluZGluZ0NvbnRleHREb21EYXRhS2V5ID0ga28udXRpbHMuZG9tRGF0YS5uZXh0S2V5KCk7XG4gICAga28uc3RvcmVkQmluZGluZ0NvbnRleHRGb3JOb2RlID0gZnVuY3Rpb24gKG5vZGUsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KG5vZGUsIHN0b3JlZEJpbmRpbmdDb250ZXh0RG9tRGF0YUtleSwgYmluZGluZ0NvbnRleHQpO1xuICAgICAgICAgICAgaWYgKGJpbmRpbmdDb250ZXh0Ll9zdWJzY3JpYmFibGUpXG4gICAgICAgICAgICAgICAgYmluZGluZ0NvbnRleHQuX3N1YnNjcmliYWJsZS5fYWRkTm9kZShub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBrby51dGlscy5kb21EYXRhLmdldChub2RlLCBzdG9yZWRCaW5kaW5nQ29udGV4dERvbURhdGFLZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QmluZGluZ0NvbnRleHQodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gdmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCAmJiAodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCBpbnN0YW5jZW9mIGtvLmJpbmRpbmdDb250ZXh0KVxuICAgICAgICAgICAgPyB2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0XG4gICAgICAgICAgICA6IG5ldyBrby5iaW5kaW5nQ29udGV4dCh2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0KTtcbiAgICB9XG5cbiAgICBrby5hcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUgPSBmdW5jdGlvbiAobm9kZSwgYmluZGluZ3MsIHZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIC8vIElmIGl0J3MgYW4gZWxlbWVudCwgd29ya2Fyb3VuZCBJRSA8PSA4IEhUTUwgcGFyc2luZyB3ZWlyZG5lc3NcbiAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5ub3JtYWxpc2VWaXJ0dWFsRWxlbWVudERvbVN0cnVjdHVyZShub2RlKTtcbiAgICAgICAgcmV0dXJuIGFwcGx5QmluZGluZ3NUb05vZGVJbnRlcm5hbChub2RlLCBiaW5kaW5ncywgZ2V0QmluZGluZ0NvbnRleHQodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCksIHRydWUpO1xuICAgIH07XG5cbiAgICBrby5hcHBseUJpbmRpbmdzVG9Ob2RlID0gZnVuY3Rpb24gKG5vZGUsIGJpbmRpbmdzLCB2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gZ2V0QmluZGluZ0NvbnRleHQodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCk7XG4gICAgICAgIHJldHVybiBrby5hcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUobm9kZSwgbWFrZUJpbmRpbmdBY2Nlc3NvcnMoYmluZGluZ3MsIGNvbnRleHQsIG5vZGUpLCBjb250ZXh0KTtcbiAgICB9O1xuXG4gICAga28uYXBwbHlCaW5kaW5nc1RvRGVzY2VuZGFudHMgPSBmdW5jdGlvbih2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0LCByb290Tm9kZSkge1xuICAgICAgICBpZiAocm9vdE5vZGUubm9kZVR5cGUgPT09IDEgfHwgcm9vdE5vZGUubm9kZVR5cGUgPT09IDgpXG4gICAgICAgICAgICBhcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50c0ludGVybmFsKGdldEJpbmRpbmdDb250ZXh0KHZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQpLCByb290Tm9kZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIGtvLmFwcGx5QmluZGluZ3MgPSBmdW5jdGlvbiAodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCwgcm9vdE5vZGUpIHtcbiAgICAgICAgLy8gSWYgalF1ZXJ5IGlzIGxvYWRlZCBhZnRlciBLbm9ja291dCwgd2Ugd29uJ3QgaW5pdGlhbGx5IGhhdmUgYWNjZXNzIHRvIGl0LiBTbyBzYXZlIGl0IGhlcmUuXG4gICAgICAgIGlmICghalF1ZXJ5SW5zdGFuY2UgJiYgd2luZG93WydqUXVlcnknXSkge1xuICAgICAgICAgICAgalF1ZXJ5SW5zdGFuY2UgPSB3aW5kb3dbJ2pRdWVyeSddO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvb3ROb2RlICYmIChyb290Tm9kZS5ub2RlVHlwZSAhPT0gMSkgJiYgKHJvb3ROb2RlLm5vZGVUeXBlICE9PSA4KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImtvLmFwcGx5QmluZGluZ3M6IGZpcnN0IHBhcmFtZXRlciBzaG91bGQgYmUgeW91ciB2aWV3IG1vZGVsOyBzZWNvbmQgcGFyYW1ldGVyIHNob3VsZCBiZSBhIERPTSBub2RlXCIpO1xuICAgICAgICByb290Tm9kZSA9IHJvb3ROb2RlIHx8IHdpbmRvdy5kb2N1bWVudC5ib2R5OyAvLyBNYWtlIFwicm9vdE5vZGVcIiBwYXJhbWV0ZXIgb3B0aW9uYWxcblxuICAgICAgICBhcHBseUJpbmRpbmdzVG9Ob2RlQW5kRGVzY2VuZGFudHNJbnRlcm5hbChnZXRCaW5kaW5nQ29udGV4dCh2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0KSwgcm9vdE5vZGUsIHRydWUpO1xuICAgIH07XG5cbiAgICAvLyBSZXRyaWV2aW5nIGJpbmRpbmcgY29udGV4dCBmcm9tIGFyYml0cmFyeSBub2Rlc1xuICAgIGtvLmNvbnRleHRGb3IgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIC8vIFdlIGNhbiBvbmx5IGRvIHNvbWV0aGluZyBtZWFuaW5nZnVsIGZvciBlbGVtZW50cyBhbmQgY29tbWVudCBub2RlcyAoaW4gcGFydGljdWxhciwgbm90IHRleHQgbm9kZXMsIGFzIElFIGNhbid0IHN0b3JlIGRvbWRhdGEgZm9yIHRoZW0pXG4gICAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0ga28uc3RvcmVkQmluZGluZ0NvbnRleHRGb3JOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0KSByZXR1cm4gY29udGV4dDtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSByZXR1cm4ga28uY29udGV4dEZvcihub2RlLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBrby5kYXRhRm9yID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgY29udGV4dCA9IGtvLmNvbnRleHRGb3Iobm9kZSk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8gY29udGV4dFsnJGRhdGEnXSA6IHVuZGVmaW5lZDtcbiAgICB9O1xuXG4gICAga28uZXhwb3J0U3ltYm9sKCdiaW5kaW5nSGFuZGxlcnMnLCBrby5iaW5kaW5nSGFuZGxlcnMpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnYXBwbHlCaW5kaW5ncycsIGtvLmFwcGx5QmluZGluZ3MpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnYXBwbHlCaW5kaW5nc1RvRGVzY2VuZGFudHMnLCBrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyk7XG4gICAga28uZXhwb3J0U3ltYm9sKCdhcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUnLCBrby5hcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnYXBwbHlCaW5kaW5nc1RvTm9kZScsIGtvLmFwcGx5QmluZGluZ3NUb05vZGUpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnY29udGV4dEZvcicsIGtvLmNvbnRleHRGb3IpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnZGF0YUZvcicsIGtvLmRhdGFGb3IpO1xufSkoKTtcbihmdW5jdGlvbih1bmRlZmluZWQpIHtcbiAgICB2YXIgbG9hZGluZ1N1YnNjcmliYWJsZXNDYWNoZSA9IHt9LCAvLyBUcmFja3MgY29tcG9uZW50IGxvYWRzIHRoYXQgYXJlIGN1cnJlbnRseSBpbiBmbGlnaHRcbiAgICAgICAgbG9hZGVkRGVmaW5pdGlvbnNDYWNoZSA9IHt9OyAgICAvLyBUcmFja3MgY29tcG9uZW50IGxvYWRzIHRoYXQgaGF2ZSBhbHJlYWR5IGNvbXBsZXRlZFxuXG4gICAga28uY29tcG9uZW50cyA9IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbihjb21wb25lbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGNhY2hlZERlZmluaXRpb24gPSBnZXRPYmplY3RPd25Qcm9wZXJ0eShsb2FkZWREZWZpbml0aW9uc0NhY2hlLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIGlmIChjYWNoZWREZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBhbHJlYWR5IGxvYWRlZCBhbmQgY2FjaGVkLiBSZXVzZSB0aGUgc2FtZSBkZWZpbml0aW9uIG9iamVjdC5cbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgZm9yIEFQSSBjb25zaXN0ZW5jeSwgZXZlbiBjYWNoZSBoaXRzIGNvbXBsZXRlIGFzeW5jaHJvbm91c2x5IGJ5IGRlZmF1bHQuXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBieXBhc3MgdGhpcyBieSBwdXR0aW5nIHN5bmNocm9ub3VzOnRydWUgb24geW91ciBjb21wb25lbnQgY29uZmlnLlxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWREZWZpbml0aW9uLmlzU3luY2hyb25vdXNDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAga28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUoZnVuY3Rpb24oKSB7IC8vIFNlZSBjb21tZW50IGluIGxvYWRlclJlZ2lzdHJ5QmVoYXZpb3JzLmpzIGZvciByZWFzb25pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNhY2hlZERlZmluaXRpb24uZGVmaW5pdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGtvLnRhc2tzLnNjaGVkdWxlKGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhjYWNoZWREZWZpbml0aW9uLmRlZmluaXRpb24pOyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEpvaW4gdGhlIGxvYWRpbmcgcHJvY2VzcyB0aGF0IGlzIGFscmVhZHkgdW5kZXJ3YXksIG9yIHN0YXJ0IGEgbmV3IG9uZS5cbiAgICAgICAgICAgICAgICBsb2FkQ29tcG9uZW50QW5kTm90aWZ5KGNvbXBvbmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhckNhY2hlZERlZmluaXRpb246IGZ1bmN0aW9uKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsb2FkZWREZWZpbml0aW9uc0NhY2hlW2NvbXBvbmVudE5hbWVdO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9nZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzOiBnZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldE9iamVjdE93blByb3BlcnR5KG9iaiwgcHJvcE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgPyBvYmpbcHJvcE5hbWVdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRDb21wb25lbnRBbmROb3RpZnkoY29tcG9uZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHN1YnNjcmliYWJsZSA9IGdldE9iamVjdE93blByb3BlcnR5KGxvYWRpbmdTdWJzY3JpYmFibGVzQ2FjaGUsIGNvbXBvbmVudE5hbWUpLFxuICAgICAgICAgICAgY29tcGxldGVkQXN5bmM7XG4gICAgICAgIGlmICghc3Vic2NyaWJhYmxlKSB7XG4gICAgICAgICAgICAvLyBJdCdzIG5vdCBzdGFydGVkIGxvYWRpbmcgeWV0LiBTdGFydCBsb2FkaW5nLCBhbmQgd2hlbiBpdCdzIGRvbmUsIG1vdmUgaXQgdG8gbG9hZGVkRGVmaW5pdGlvbnNDYWNoZS5cbiAgICAgICAgICAgIHN1YnNjcmliYWJsZSA9IGxvYWRpbmdTdWJzY3JpYmFibGVzQ2FjaGVbY29tcG9uZW50TmFtZV0gPSBuZXcga28uc3Vic2NyaWJhYmxlKCk7XG4gICAgICAgICAgICBzdWJzY3JpYmFibGUuc3Vic2NyaWJlKGNhbGxiYWNrKTtcblxuICAgICAgICAgICAgYmVnaW5Mb2FkaW5nQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGZ1bmN0aW9uKGRlZmluaXRpb24sIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciBpc1N5bmNocm9ub3VzQ29tcG9uZW50ID0gISEoY29uZmlnICYmIGNvbmZpZ1snc3luY2hyb25vdXMnXSk7XG4gICAgICAgICAgICAgICAgbG9hZGVkRGVmaW5pdGlvbnNDYWNoZVtjb21wb25lbnROYW1lXSA9IHsgZGVmaW5pdGlvbjogZGVmaW5pdGlvbiwgaXNTeW5jaHJvbm91c0NvbXBvbmVudDogaXNTeW5jaHJvbm91c0NvbXBvbmVudCB9O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2FkaW5nU3Vic2NyaWJhYmxlc0NhY2hlW2NvbXBvbmVudE5hbWVdO1xuXG4gICAgICAgICAgICAgICAgLy8gRm9yIEFQSSBjb25zaXN0ZW5jeSwgYWxsIGxvYWRzIGNvbXBsZXRlIGFzeW5jaHJvbm91c2x5LiBIb3dldmVyIHdlIHdhbnQgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyBhZGRpbmcgYW4gZXh0cmEgdGFzayBzY2hlZHVsZSBpZiBpdCdzIHVubmVjZXNzYXJ5IChpLmUuLCB0aGUgY29tcGxldGlvbiBpcyBhbHJlYWR5XG4gICAgICAgICAgICAgICAgLy8gYXN5bmMpLlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBieXBhc3MgdGhlICdhbHdheXMgYXN5bmNocm9ub3VzJyBmZWF0dXJlIGJ5IHB1dHRpbmcgdGhlIHN5bmNocm9ub3VzOnRydWVcbiAgICAgICAgICAgICAgICAvLyBmbGFnIG9uIHlvdXIgY29tcG9uZW50IGNvbmZpZ3VyYXRpb24gd2hlbiB5b3UgcmVnaXN0ZXIgaXQuXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZEFzeW5jIHx8IGlzU3luY2hyb25vdXNDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG5vdGlmeVN1YnNjcmliZXJzIGlnbm9yZXMgYW55IGRlcGVuZGVuY2llcyByZWFkIHdpdGhpbiB0aGUgY2FsbGJhY2suXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZSBjb21tZW50IGluIGxvYWRlclJlZ2lzdHJ5QmVoYXZpb3JzLmpzIGZvciByZWFzb25pbmdcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJhYmxlWydub3RpZnlTdWJzY3JpYmVycyddKGRlZmluaXRpb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGtvLnRhc2tzLnNjaGVkdWxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJhYmxlWydub3RpZnlTdWJzY3JpYmVycyddKGRlZmluaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbXBsZXRlZEFzeW5jID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1YnNjcmliYWJsZS5zdWJzY3JpYmUoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmVnaW5Mb2FkaW5nQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGdldEZpcnN0UmVzdWx0RnJvbUxvYWRlcnMoJ2dldENvbmZpZycsIFtjb21wb25lbnROYW1lXSwgZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIGNvbmZpZywgc28gbm93IGxvYWQgaXRzIGRlZmluaXRpb25cbiAgICAgICAgICAgICAgICBnZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzKCdsb2FkQ29tcG9uZW50JywgW2NvbXBvbmVudE5hbWUsIGNvbmZpZ10sIGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGVmaW5pdGlvbiwgY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGNvbXBvbmVudCBoYXMgbm8gY29uZmlnIC0gaXQncyB1bmtub3duIHRvIGFsbCB0aGUgbG9hZGVycy5cbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBpcyBub3QgYW4gZXJyb3IgKGUuZy4sIGEgbW9kdWxlIGxvYWRpbmcgZXJyb3IpIC0gdGhhdCB3b3VsZCBhYm9ydCB0aGVcbiAgICAgICAgICAgICAgICAvLyBwcm9jZXNzIGFuZCB0aGlzIGNhbGxiYWNrIHdvdWxkIG5vdCBydW4uIEZvciB0aGlzIGNhbGxiYWNrIHRvIHJ1biwgYWxsIGxvYWRlcnMgbXVzdFxuICAgICAgICAgICAgICAgIC8vIGhhdmUgY29uZmlybWVkIHRoZXkgZG9uJ3Qga25vdyBhYm91dCB0aGlzIGNvbXBvbmVudC5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycyhtZXRob2ROYW1lLCBhcmdzRXhjZXB0Q2FsbGJhY2ssIGNhbGxiYWNrLCBjYW5kaWRhdGVMb2FkZXJzKSB7XG4gICAgICAgIC8vIE9uIHRoZSBmaXJzdCBjYWxsIGluIHRoZSBzdGFjaywgc3RhcnQgd2l0aCB0aGUgZnVsbCBzZXQgb2YgbG9hZGVyc1xuICAgICAgICBpZiAoIWNhbmRpZGF0ZUxvYWRlcnMpIHtcbiAgICAgICAgICAgIGNhbmRpZGF0ZUxvYWRlcnMgPSBrby5jb21wb25lbnRzWydsb2FkZXJzJ10uc2xpY2UoMCk7IC8vIFVzZSBhIGNvcHksIGJlY2F1c2Ugd2UnbGwgYmUgbXV0YXRpbmcgdGhpcyBhcnJheVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJ5IHRoZSBuZXh0IGNhbmRpZGF0ZVxuICAgICAgICB2YXIgY3VycmVudENhbmRpZGF0ZUxvYWRlciA9IGNhbmRpZGF0ZUxvYWRlcnMuc2hpZnQoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRDYW5kaWRhdGVMb2FkZXIpIHtcbiAgICAgICAgICAgIHZhciBtZXRob2RJbnN0YW5jZSA9IGN1cnJlbnRDYW5kaWRhdGVMb2FkZXJbbWV0aG9kTmFtZV07XG4gICAgICAgICAgICBpZiAobWV0aG9kSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2FzQWJvcnRlZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzeW5jaHJvbm91c1JldHVyblZhbHVlID0gbWV0aG9kSW5zdGFuY2UuYXBwbHkoY3VycmVudENhbmRpZGF0ZUxvYWRlciwgYXJnc0V4Y2VwdENhbGxiYWNrLmNvbmNhdChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXNBYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FuZGlkYXRlIHJldHVybmVkIGEgdmFsdWUuIFVzZSBpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdGhlIG5leHQgY2FuZGlkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycyhtZXRob2ROYW1lLCBhcmdzRXhjZXB0Q2FsbGJhY2ssIGNhbGxiYWNrLCBjYW5kaWRhdGVMb2FkZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ3VycmVudGx5LCBsb2FkZXJzIG1heSBub3QgcmV0dXJuIGFueXRoaW5nIHN5bmNocm9ub3VzbHkuIFRoaXMgbGVhdmVzIG9wZW4gdGhlIHBvc3NpYmlsaXR5XG4gICAgICAgICAgICAgICAgLy8gdGhhdCB3ZSdsbCBleHRlbmQgdGhlIEFQSSB0byBzdXBwb3J0IHN5bmNocm9ub3VzIHJldHVybiB2YWx1ZXMgaW4gdGhlIGZ1dHVyZS4gSXQgd29uJ3QgYmVcbiAgICAgICAgICAgICAgICAvLyBhIGJyZWFraW5nIGNoYW5nZSwgYmVjYXVzZSBjdXJyZW50bHkgbm8gbG9hZGVyIGlzIGFsbG93ZWQgdG8gcmV0dXJuIGFueXRoaW5nIGV4Y2VwdCB1bmRlZmluZWQuXG4gICAgICAgICAgICAgICAgaWYgKHN5bmNocm9ub3VzUmV0dXJuVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB3YXNBYm9ydGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBNZXRob2QgdG8gc3VwcHJlc3MgZXhjZXB0aW9ucyB3aWxsIHJlbWFpbiB1bmRvY3VtZW50ZWQuIFRoaXMgaXMgb25seSB0byBrZWVwXG4gICAgICAgICAgICAgICAgICAgIC8vIEtPJ3Mgc3BlY3MgcnVubmluZyB0aWRpbHksIHNpbmNlIHdlIGNhbiBvYnNlcnZlIHRoZSBsb2FkaW5nIGdvdCBhYm9ydGVkIHdpdGhvdXRcbiAgICAgICAgICAgICAgICAgICAgLy8gaGF2aW5nIGV4Y2VwdGlvbnMgY2x1dHRlcmluZyB1cCB0aGUgY29uc29sZSB0b28uXG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudENhbmRpZGF0ZUxvYWRlclsnc3VwcHJlc3NMb2FkZXJFeGNlcHRpb25zJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IGxvYWRlcnMgbXVzdCBzdXBwbHkgdmFsdWVzIGJ5IGludm9raW5nIHRoZSBjYWxsYmFjaywgbm90IGJ5IHJldHVybmluZyB2YWx1ZXMgc3luY2hyb25vdXNseS4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjYW5kaWRhdGUgZG9lc24ndCBoYXZlIHRoZSByZWxldmFudCBoYW5kbGVyLiBTeW5jaHJvbm91c2x5IG1vdmUgb24gdG8gdGhlIG5leHQgb25lLlxuICAgICAgICAgICAgICAgIGdldEZpcnN0UmVzdWx0RnJvbUxvYWRlcnMobWV0aG9kTmFtZSwgYXJnc0V4Y2VwdENhbGxiYWNrLCBjYWxsYmFjaywgY2FuZGlkYXRlTG9hZGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBObyBjYW5kaWRhdGVzIHJldHVybmVkIGEgdmFsdWVcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVmZXJlbmNlIHRoZSBsb2FkZXJzIHZpYSBzdHJpbmcgbmFtZSBzbyBpdCdzIHBvc3NpYmxlIGZvciBkZXZlbG9wZXJzXG4gICAgLy8gdG8gcmVwbGFjZSB0aGUgd2hvbGUgYXJyYXkgYnkgYXNzaWduaW5nIHRvIGtvLmNvbXBvbmVudHMubG9hZGVyc1xuICAgIGtvLmNvbXBvbmVudHNbJ2xvYWRlcnMnXSA9IFtdO1xuXG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzJywga28uY29tcG9uZW50cyk7XG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLmdldCcsIGtvLmNvbXBvbmVudHMuZ2V0KTtcbiAgICBrby5leHBvcnRTeW1ib2woJ2NvbXBvbmVudHMuY2xlYXJDYWNoZWREZWZpbml0aW9uJywga28uY29tcG9uZW50cy5jbGVhckNhY2hlZERlZmluaXRpb24pO1xufSkoKTtcbihmdW5jdGlvbih1bmRlZmluZWQpIHtcblxuICAgIC8vIFRoZSBkZWZhdWx0IGxvYWRlciBpcyByZXNwb25zaWJsZSBmb3IgdHdvIHRoaW5nczpcbiAgICAvLyAxLiBNYWludGFpbmluZyB0aGUgZGVmYXVsdCBpbi1tZW1vcnkgcmVnaXN0cnkgb2YgY29tcG9uZW50IGNvbmZpZ3VyYXRpb24gb2JqZWN0c1xuICAgIC8vICAgIChpLmUuLCB0aGUgdGhpbmcgeW91J3JlIHdyaXRpbmcgdG8gd2hlbiB5b3UgY2FsbCBrby5jb21wb25lbnRzLnJlZ2lzdGVyKHNvbWVOYW1lLCAuLi4pKVxuICAgIC8vIDIuIEFuc3dlcmluZyByZXF1ZXN0cyBmb3IgY29tcG9uZW50cyBieSBmZXRjaGluZyBjb25maWd1cmF0aW9uIG9iamVjdHNcbiAgICAvLyAgICBmcm9tIHRoYXQgZGVmYXVsdCBpbi1tZW1vcnkgcmVnaXN0cnkgYW5kIHJlc29sdmluZyB0aGVtIGludG8gc3RhbmRhcmRcbiAgICAvLyAgICBjb21wb25lbnQgZGVmaW5pdGlvbiBvYmplY3RzIChvZiB0aGUgZm9ybSB7IGNyZWF0ZVZpZXdNb2RlbDogLi4uLCB0ZW1wbGF0ZTogLi4uIH0pXG4gICAgLy8gQ3VzdG9tIGxvYWRlcnMgbWF5IG92ZXJyaWRlIGVpdGhlciBvZiB0aGVzZSBmYWNpbGl0aWVzLCBpLmUuLFxuICAgIC8vIDEuIFRvIHN1cHBseSBjb25maWd1cmF0aW9uIG9iamVjdHMgZnJvbSBzb21lIG90aGVyIHNvdXJjZSAoZS5nLiwgY29udmVudGlvbnMpXG4gICAgLy8gMi4gT3IsIHRvIHJlc29sdmUgY29uZmlndXJhdGlvbiBvYmplY3RzIGJ5IGxvYWRpbmcgdmlld21vZGVscy90ZW1wbGF0ZXMgdmlhIGFyYml0cmFyeSBsb2dpYy5cblxuICAgIHZhciBkZWZhdWx0Q29uZmlnUmVnaXN0cnkgPSB7fTtcblxuICAgIGtvLmNvbXBvbmVudHMucmVnaXN0ZXIgPSBmdW5jdGlvbihjb21wb25lbnROYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb25maWd1cmF0aW9uIGZvciAnICsgY29tcG9uZW50TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa28uY29tcG9uZW50cy5pc1JlZ2lzdGVyZWQoY29tcG9uZW50TmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50ICcgKyBjb21wb25lbnROYW1lICsgJyBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHRDb25maWdSZWdpc3RyeVtjb21wb25lbnROYW1lXSA9IGNvbmZpZztcbiAgICB9O1xuXG4gICAga28uY29tcG9uZW50cy5pc1JlZ2lzdGVyZWQgPSBmdW5jdGlvbihjb21wb25lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29uZmlnUmVnaXN0cnkuaGFzT3duUHJvcGVydHkoY29tcG9uZW50TmFtZSk7XG4gICAgfTtcblxuICAgIGtvLmNvbXBvbmVudHMudW5yZWdpc3RlciA9IGZ1bmN0aW9uKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgZGVsZXRlIGRlZmF1bHRDb25maWdSZWdpc3RyeVtjb21wb25lbnROYW1lXTtcbiAgICAgICAga28uY29tcG9uZW50cy5jbGVhckNhY2hlZERlZmluaXRpb24oY29tcG9uZW50TmFtZSk7XG4gICAgfTtcblxuICAgIGtvLmNvbXBvbmVudHMuZGVmYXVsdExvYWRlciA9IHtcbiAgICAgICAgJ2dldENvbmZpZyc6IGZ1bmN0aW9uKGNvbXBvbmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZGVmYXVsdENvbmZpZ1JlZ2lzdHJ5Lmhhc093blByb3BlcnR5KGNvbXBvbmVudE5hbWUpXG4gICAgICAgICAgICAgICAgPyBkZWZhdWx0Q29uZmlnUmVnaXN0cnlbY29tcG9uZW50TmFtZV1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICB9LFxuXG4gICAgICAgICdsb2FkQ29tcG9uZW50JzogZnVuY3Rpb24oY29tcG9uZW50TmFtZSwgY29uZmlnLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGVycm9yQ2FsbGJhY2sgPSBtYWtlRXJyb3JDYWxsYmFjayhjb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIHBvc3NpYmx5R2V0Q29uZmlnRnJvbUFtZChlcnJvckNhbGxiYWNrLCBjb25maWcsIGZ1bmN0aW9uKGxvYWRlZENvbmZpZykge1xuICAgICAgICAgICAgICAgIHJlc29sdmVDb25maWcoY29tcG9uZW50TmFtZSwgZXJyb3JDYWxsYmFjaywgbG9hZGVkQ29uZmlnLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAnbG9hZFRlbXBsYXRlJzogZnVuY3Rpb24oY29tcG9uZW50TmFtZSwgdGVtcGxhdGVDb25maWcsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXNvbHZlVGVtcGxhdGUobWFrZUVycm9yQ2FsbGJhY2soY29tcG9uZW50TmFtZSksIHRlbXBsYXRlQ29uZmlnLCBjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ2xvYWRWaWV3TW9kZWwnOiBmdW5jdGlvbihjb21wb25lbnROYW1lLCB2aWV3TW9kZWxDb25maWcsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXNvbHZlVmlld01vZGVsKG1ha2VFcnJvckNhbGxiYWNrKGNvbXBvbmVudE5hbWUpLCB2aWV3TW9kZWxDb25maWcsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgY3JlYXRlVmlld01vZGVsS2V5ID0gJ2NyZWF0ZVZpZXdNb2RlbCc7XG5cbiAgICAvLyBUYWtlcyBhIGNvbmZpZyBvYmplY3Qgb2YgdGhlIGZvcm0geyB0ZW1wbGF0ZTogLi4uLCB2aWV3TW9kZWw6IC4uLiB9LCBhbmQgYXN5bmNocm9ub3VzbHkgY29udmVydCBpdFxuICAgIC8vIGludG8gdGhlIHN0YW5kYXJkIGNvbXBvbmVudCBkZWZpbml0aW9uIGZvcm1hdDpcbiAgICAvLyAgICB7IHRlbXBsYXRlOiA8QXJyYXlPZkRvbU5vZGVzPiwgY3JlYXRlVmlld01vZGVsOiBmdW5jdGlvbihwYXJhbXMsIGNvbXBvbmVudEluZm8pIHsgLi4uIH0gfS5cbiAgICAvLyBTaW5jZSBib3RoIHRlbXBsYXRlIGFuZCB2aWV3TW9kZWwgbWF5IG5lZWQgdG8gYmUgcmVzb2x2ZWQgYXN5bmNocm9ub3VzbHksIGJvdGggdGFza3MgYXJlIHBlcmZvcm1lZFxuICAgIC8vIGluIHBhcmFsbGVsLCBhbmQgdGhlIHJlc3VsdHMgam9pbmVkIHdoZW4gYm90aCBhcmUgcmVhZHkuIFdlIGRvbid0IGRlcGVuZCBvbiBhbnkgcHJvbWlzZXMgaW5mcmFzdHJ1Y3R1cmUsXG4gICAgLy8gc28gdGhpcyBpcyBpbXBsZW1lbnRlZCBtYW51YWxseSBiZWxvdy5cbiAgICBmdW5jdGlvbiByZXNvbHZlQ29uZmlnKGNvbXBvbmVudE5hbWUsIGVycm9yQ2FsbGJhY2ssIGNvbmZpZywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9LFxuICAgICAgICAgICAgbWFrZUNhbGxCYWNrV2hlblplcm8gPSAyLFxuICAgICAgICAgICAgdHJ5SXNzdWVDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICgtLW1ha2VDYWxsQmFja1doZW5aZXJvID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlQ29uZmlnID0gY29uZmlnWyd0ZW1wbGF0ZSddLFxuICAgICAgICAgICAgdmlld01vZGVsQ29uZmlnID0gY29uZmlnWyd2aWV3TW9kZWwnXTtcblxuICAgICAgICBpZiAodGVtcGxhdGVDb25maWcpIHtcbiAgICAgICAgICAgIHBvc3NpYmx5R2V0Q29uZmlnRnJvbUFtZChlcnJvckNhbGxiYWNrLCB0ZW1wbGF0ZUNvbmZpZywgZnVuY3Rpb24obG9hZGVkQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAga28uY29tcG9uZW50cy5fZ2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycygnbG9hZFRlbXBsYXRlJywgW2NvbXBvbmVudE5hbWUsIGxvYWRlZENvbmZpZ10sIGZ1bmN0aW9uKHJlc29sdmVkVGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Wyd0ZW1wbGF0ZSddID0gcmVzb2x2ZWRUZW1wbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5SXNzdWVDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnlJc3N1ZUNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmlld01vZGVsQ29uZmlnKSB7XG4gICAgICAgICAgICBwb3NzaWJseUdldENvbmZpZ0Zyb21BbWQoZXJyb3JDYWxsYmFjaywgdmlld01vZGVsQ29uZmlnLCBmdW5jdGlvbihsb2FkZWRDb25maWcpIHtcbiAgICAgICAgICAgICAgICBrby5jb21wb25lbnRzLl9nZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzKCdsb2FkVmlld01vZGVsJywgW2NvbXBvbmVudE5hbWUsIGxvYWRlZENvbmZpZ10sIGZ1bmN0aW9uKHJlc29sdmVkVmlld01vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtjcmVhdGVWaWV3TW9kZWxLZXldID0gcmVzb2x2ZWRWaWV3TW9kZWw7XG4gICAgICAgICAgICAgICAgICAgIHRyeUlzc3VlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5SXNzdWVDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVRlbXBsYXRlKGVycm9yQ2FsbGJhY2ssIHRlbXBsYXRlQ29uZmlnLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlQ29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gTWFya3VwIC0gcGFyc2UgaXRcbiAgICAgICAgICAgIGNhbGxiYWNrKGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50KHRlbXBsYXRlQ29uZmlnKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGVDb25maWcgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgLy8gQXNzdW1lIGFscmVhZHkgYW4gYXJyYXkgb2YgRE9NIG5vZGVzIC0gcGFzcyB0aHJvdWdoIHVuY2hhbmdlZFxuICAgICAgICAgICAgY2FsbGJhY2sodGVtcGxhdGVDb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRG9jdW1lbnRGcmFnbWVudCh0ZW1wbGF0ZUNvbmZpZykpIHtcbiAgICAgICAgICAgIC8vIERvY3VtZW50IGZyYWdtZW50IC0gdXNlIGl0cyBjaGlsZCBub2Rlc1xuICAgICAgICAgICAgY2FsbGJhY2soa28udXRpbHMubWFrZUFycmF5KHRlbXBsYXRlQ29uZmlnLmNoaWxkTm9kZXMpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZUNvbmZpZ1snZWxlbWVudCddKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRlbXBsYXRlQ29uZmlnWydlbGVtZW50J107XG4gICAgICAgICAgICBpZiAoaXNEb21FbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgLy8gRWxlbWVudCBpbnN0YW5jZSAtIGNvcHkgaXRzIGNoaWxkIG5vZGVzXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY2xvbmVOb2Rlc0Zyb21UZW1wbGF0ZVNvdXJjZUVsZW1lbnQoZWxlbWVudCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAvLyBFbGVtZW50IElEIC0gZmluZCBpdCwgdGhlbiBjb3B5IGl0cyBjaGlsZCBub2Rlc1xuICAgICAgICAgICAgICAgIHZhciBlbGVtSW5zdGFuY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbUluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNsb25lTm9kZXNGcm9tVGVtcGxhdGVTb3VyY2VFbGVtZW50KGVsZW1JbnN0YW5jZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soJ0Nhbm5vdCBmaW5kIGVsZW1lbnQgd2l0aCBJRCAnICsgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKCdVbmtub3duIGVsZW1lbnQgdHlwZTogJyArIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3JDYWxsYmFjaygnVW5rbm93biB0ZW1wbGF0ZSB2YWx1ZTogJyArIHRlbXBsYXRlQ29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVWaWV3TW9kZWwoZXJyb3JDYWxsYmFjaywgdmlld01vZGVsQ29uZmlnLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHZpZXdNb2RlbENvbmZpZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gQ29uc3RydWN0b3IgLSBjb252ZXJ0IHRvIHN0YW5kYXJkIGZhY3RvcnkgZnVuY3Rpb24gZm9ybWF0XG4gICAgICAgICAgICAvLyBCeSBkZXNpZ24sIHRoaXMgZG9lcyAqbm90KiBzdXBwbHkgY29tcG9uZW50SW5mbyB0byB0aGUgY29uc3RydWN0b3IsIGFzIHRoZSBpbnRlbnQgaXMgdGhhdFxuICAgICAgICAgICAgLy8gY29tcG9uZW50SW5mbyBjb250YWlucyBub24tdmlld21vZGVsIGRhdGEgKGUuZy4sIHRoZSBjb21wb25lbnQncyBlbGVtZW50KSB0aGF0IHNob3VsZCBvbmx5XG4gICAgICAgICAgICAvLyBiZSB1c2VkIGluIGZhY3RvcnkgZnVuY3Rpb25zLCBub3Qgdmlld21vZGVsIGNvbnN0cnVjdG9ycy5cbiAgICAgICAgICAgIGNhbGxiYWNrKGZ1bmN0aW9uIChwYXJhbXMgLyosIGNvbXBvbmVudEluZm8gKi8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHZpZXdNb2RlbENvbmZpZyhwYXJhbXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZpZXdNb2RlbENvbmZpZ1tjcmVhdGVWaWV3TW9kZWxLZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBBbHJlYWR5IGEgZmFjdG9yeSBmdW5jdGlvbiAtIHVzZSBpdCBhcy1pc1xuICAgICAgICAgICAgY2FsbGJhY2sodmlld01vZGVsQ29uZmlnW2NyZWF0ZVZpZXdNb2RlbEtleV0pO1xuICAgICAgICB9IGVsc2UgaWYgKCdpbnN0YW5jZScgaW4gdmlld01vZGVsQ29uZmlnKSB7XG4gICAgICAgICAgICAvLyBGaXhlZCBvYmplY3QgaW5zdGFuY2UgLSBwcm9tb3RlIHRvIGNyZWF0ZVZpZXdNb2RlbCBmb3JtYXQgZm9yIEFQSSBjb25zaXN0ZW5jeVxuICAgICAgICAgICAgdmFyIGZpeGVkSW5zdGFuY2UgPSB2aWV3TW9kZWxDb25maWdbJ2luc3RhbmNlJ107XG4gICAgICAgICAgICBjYWxsYmFjayhmdW5jdGlvbiAocGFyYW1zLCBjb21wb25lbnRJbmZvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpeGVkSW5zdGFuY2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgndmlld01vZGVsJyBpbiB2aWV3TW9kZWxDb25maWcpIHtcbiAgICAgICAgICAgIC8vIFJlc29sdmVkIEFNRCBtb2R1bGUgd2hvc2UgdmFsdWUgaXMgb2YgdGhlIGZvcm0geyB2aWV3TW9kZWw6IC4uLiB9XG4gICAgICAgICAgICByZXNvbHZlVmlld01vZGVsKGVycm9yQ2FsbGJhY2ssIHZpZXdNb2RlbENvbmZpZ1sndmlld01vZGVsJ10sIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soJ1Vua25vd24gdmlld01vZGVsIHZhbHVlOiAnICsgdmlld01vZGVsQ29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lTm9kZXNGcm9tVGVtcGxhdGVTb3VyY2VFbGVtZW50KGVsZW1JbnN0YW5jZSkge1xuICAgICAgICBzd2l0Y2ggKGtvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtSW5zdGFuY2UpKSB7XG4gICAgICAgICAgICBjYXNlICdzY3JpcHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBrby51dGlscy5wYXJzZUh0bWxGcmFnbWVudChlbGVtSW5zdGFuY2UudGV4dCk7XG4gICAgICAgICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50KGVsZW1JbnN0YW5jZS52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlICd0ZW1wbGF0ZSc6XG4gICAgICAgICAgICAgICAgLy8gRm9yIGJyb3dzZXJzIHdpdGggcHJvcGVyIDx0ZW1wbGF0ZT4gZWxlbWVudCBzdXBwb3J0IChpLmUuLCB3aGVyZSB0aGUgLmNvbnRlbnQgcHJvcGVydHlcbiAgICAgICAgICAgICAgICAvLyBnaXZlcyBhIGRvY3VtZW50IGZyYWdtZW50KSwgdXNlIHRoYXQgZG9jdW1lbnQgZnJhZ21lbnQuXG4gICAgICAgICAgICAgICAgaWYgKGlzRG9jdW1lbnRGcmFnbWVudChlbGVtSW5zdGFuY2UuY29udGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmNsb25lTm9kZXMoZWxlbUluc3RhbmNlLmNvbnRlbnQuY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVndWxhciBlbGVtZW50cyBzdWNoIGFzIDxkaXY+LCBhbmQgPHRlbXBsYXRlPiBlbGVtZW50cyBvbiBvbGQgYnJvd3NlcnMgdGhhdCBkb24ndCByZWFsbHlcbiAgICAgICAgLy8gdW5kZXJzdGFuZCA8dGVtcGxhdGU+IGFuZCBqdXN0IHRyZWF0IGl0IGFzIGEgcmVndWxhciBjb250YWluZXJcbiAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmNsb25lTm9kZXMoZWxlbUluc3RhbmNlLmNoaWxkTm9kZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRG9tRWxlbWVudChvYmopIHtcbiAgICAgICAgaWYgKHdpbmRvd1snSFRNTEVsZW1lbnQnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmoudGFnTmFtZSAmJiBvYmoubm9kZVR5cGUgPT09IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RvY3VtZW50RnJhZ21lbnQob2JqKSB7XG4gICAgICAgIGlmICh3aW5kb3dbJ0RvY3VtZW50RnJhZ21lbnQnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMTE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NzaWJseUdldENvbmZpZ0Zyb21BbWQoZXJyb3JDYWxsYmFjaywgY29uZmlnLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZ1sncmVxdWlyZSddID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gVGhlIGNvbmZpZyBpcyB0aGUgdmFsdWUgb2YgYW4gQU1EIG1vZHVsZVxuICAgICAgICAgICAgaWYgKGFtZFJlcXVpcmUgfHwgd2luZG93WydyZXF1aXJlJ10pIHtcbiAgICAgICAgICAgICAgICAoYW1kUmVxdWlyZSB8fCB3aW5kb3dbJ3JlcXVpcmUnXSkoW2NvbmZpZ1sncmVxdWlyZSddXSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKCdVc2VzIHJlcXVpcmUsIGJ1dCBubyBBTUQgbG9hZGVyIGlzIHByZXNlbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRXJyb3JDYWxsYmFjayhjb21wb25lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgXFwnJyArIGNvbXBvbmVudE5hbWUgKyAnXFwnOiAnICsgbWVzc2FnZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLnJlZ2lzdGVyJywga28uY29tcG9uZW50cy5yZWdpc3Rlcik7XG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLmlzUmVnaXN0ZXJlZCcsIGtvLmNvbXBvbmVudHMuaXNSZWdpc3RlcmVkKTtcbiAgICBrby5leHBvcnRTeW1ib2woJ2NvbXBvbmVudHMudW5yZWdpc3RlcicsIGtvLmNvbXBvbmVudHMudW5yZWdpc3Rlcik7XG5cbiAgICAvLyBFeHBvc2UgdGhlIGRlZmF1bHQgbG9hZGVyIHNvIHRoYXQgZGV2ZWxvcGVycyBjYW4gZGlyZWN0bHkgYXNrIGl0IGZvciBjb25maWd1cmF0aW9uXG4gICAgLy8gb3IgdG8gcmVzb2x2ZSBjb25maWd1cmF0aW9uXG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLmRlZmF1bHRMb2FkZXInLCBrby5jb21wb25lbnRzLmRlZmF1bHRMb2FkZXIpO1xuXG4gICAgLy8gQnkgZGVmYXVsdCwgdGhlIGRlZmF1bHQgbG9hZGVyIGlzIHRoZSBvbmx5IHJlZ2lzdGVyZWQgY29tcG9uZW50IGxvYWRlclxuICAgIGtvLmNvbXBvbmVudHNbJ2xvYWRlcnMnXS5wdXNoKGtvLmNvbXBvbmVudHMuZGVmYXVsdExvYWRlcik7XG5cbiAgICAvLyBQcml2YXRlbHkgZXhwb3NlIHRoZSB1bmRlcmx5aW5nIGNvbmZpZyByZWdpc3RyeSBmb3IgdXNlIGluIG9sZC1JRSBzaGltXG4gICAga28uY29tcG9uZW50cy5fYWxsUmVnaXN0ZXJlZENvbXBvbmVudHMgPSBkZWZhdWx0Q29uZmlnUmVnaXN0cnk7XG59KSgpO1xuKGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcbiAgICAvLyBPdmVycmlkYWJsZSBBUEkgZm9yIGRldGVybWluaW5nIHdoaWNoIGNvbXBvbmVudCBuYW1lIGFwcGxpZXMgdG8gYSBnaXZlbiBub2RlLiBCeSBvdmVycmlkaW5nIHRoaXMsXG4gICAgLy8geW91IGNhbiBmb3IgZXhhbXBsZSBtYXAgc3BlY2lmaWMgdGFnTmFtZXMgdG8gY29tcG9uZW50cyB0aGF0IGFyZSBub3QgcHJlcmVnaXN0ZXJlZC5cbiAgICBrby5jb21wb25lbnRzWydnZXRDb21wb25lbnROYW1lRm9yTm9kZSddID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgdGFnTmFtZUxvd2VyID0ga28udXRpbHMudGFnTmFtZUxvd2VyKG5vZGUpO1xuICAgICAgICBpZiAoa28uY29tcG9uZW50cy5pc1JlZ2lzdGVyZWQodGFnTmFtZUxvd2VyKSkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIGRldGVybWluZSB0aGF0IHRoaXMgbm9kZSBjYW4gYmUgY29uc2lkZXJlZCBhICpjdXN0b20qIGVsZW1lbnQ7IHNlZSBodHRwczovL2dpdGh1Yi5jb20va25vY2tvdXQva25vY2tvdXQvaXNzdWVzLzE2MDNcbiAgICAgICAgICAgIGlmICh0YWdOYW1lTG93ZXIuaW5kZXhPZignLScpICE9IC0xIHx8ICgnJyArIG5vZGUpID09IFwiW29iamVjdCBIVE1MVW5rbm93bkVsZW1lbnRdXCIgfHwgKGtvLnV0aWxzLmllVmVyc2lvbiA8PSA4ICYmIG5vZGUudGFnTmFtZSA9PT0gdGFnTmFtZUxvd2VyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWdOYW1lTG93ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAga28uY29tcG9uZW50cy5hZGRCaW5kaW5nc0ZvckN1c3RvbUVsZW1lbnQgPSBmdW5jdGlvbihhbGxCaW5kaW5ncywgbm9kZSwgYmluZGluZ0NvbnRleHQsIHZhbHVlQWNjZXNzb3JzKSB7XG4gICAgICAgIC8vIERldGVybWluZSBpZiBpdCdzIHJlYWxseSBhIGN1c3RvbSBlbGVtZW50IG1hdGNoaW5nIGEgY29tcG9uZW50XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGtvLmNvbXBvbmVudHNbJ2dldENvbXBvbmVudE5hbWVGb3JOb2RlJ10obm9kZSk7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIEl0IGRvZXMgcmVwcmVzZW50IGEgY29tcG9uZW50LCBzbyBhZGQgYSBjb21wb25lbnQgYmluZGluZyBmb3IgaXRcbiAgICAgICAgICAgICAgICBhbGxCaW5kaW5ncyA9IGFsbEJpbmRpbmdzIHx8IHt9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGFsbEJpbmRpbmdzWydjb21wb25lbnQnXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBzaWxlbnRseSBvdmVyd3JpdGluZyBzb21lIG90aGVyICdjb21wb25lbnQnIGJpbmRpbmcgdGhhdCBtYXkgYWxyZWFkeSBiZSBvbiB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB1c2UgdGhlIFwiY29tcG9uZW50XCIgYmluZGluZyBvbiBhIGN1c3RvbSBlbGVtZW50IG1hdGNoaW5nIGEgY29tcG9uZW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudEJpbmRpbmdWYWx1ZSA9IHsgJ25hbWUnOiBjb21wb25lbnROYW1lLCAncGFyYW1zJzogZ2V0Q29tcG9uZW50UGFyYW1zRnJvbUN1c3RvbUVsZW1lbnQobm9kZSwgYmluZGluZ0NvbnRleHQpIH07XG5cbiAgICAgICAgICAgICAgICBhbGxCaW5kaW5nc1snY29tcG9uZW50J10gPSB2YWx1ZUFjY2Vzc29yc1xuICAgICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tcG9uZW50QmluZGluZ1ZhbHVlOyB9XG4gICAgICAgICAgICAgICAgICAgIDogY29tcG9uZW50QmluZGluZ1ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFsbEJpbmRpbmdzO1xuICAgIH1cblxuICAgIHZhciBuYXRpdmVCaW5kaW5nUHJvdmlkZXJJbnN0YW5jZSA9IG5ldyBrby5iaW5kaW5nUHJvdmlkZXIoKTtcblxuICAgIGZ1bmN0aW9uIGdldENvbXBvbmVudFBhcmFtc0Zyb21DdXN0b21FbGVtZW50KGVsZW0sIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciBwYXJhbXNBdHRyaWJ1dGUgPSBlbGVtLmdldEF0dHJpYnV0ZSgncGFyYW1zJyk7XG5cbiAgICAgICAgaWYgKHBhcmFtc0F0dHJpYnV0ZSkge1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IG5hdGl2ZUJpbmRpbmdQcm92aWRlckluc3RhbmNlWydwYXJzZUJpbmRpbmdzU3RyaW5nJ10ocGFyYW1zQXR0cmlidXRlLCBiaW5kaW5nQ29udGV4dCwgZWxlbSwgeyAndmFsdWVBY2Nlc3NvcnMnOiB0cnVlLCAnYmluZGluZ1BhcmFtcyc6IHRydWUgfSksXG4gICAgICAgICAgICAgICAgcmF3UGFyYW1Db21wdXRlZFZhbHVlcyA9IGtvLnV0aWxzLm9iamVjdE1hcChwYXJhbXMsIGZ1bmN0aW9uKHBhcmFtVmFsdWUsIHBhcmFtTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga28uY29tcHV0ZWQocGFyYW1WYWx1ZSwgbnVsbCwgeyBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGVsZW0gfSk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0ga28udXRpbHMub2JqZWN0TWFwKHJhd1BhcmFtQ29tcHV0ZWRWYWx1ZXMsIGZ1bmN0aW9uKHBhcmFtVmFsdWVDb21wdXRlZCwgcGFyYW1OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbVZhbHVlID0gcGFyYW1WYWx1ZUNvbXB1dGVkLnBlZWsoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9lcyB0aGUgZXZhbHVhdGlvbiBvZiB0aGUgcGFyYW1ldGVyIHZhbHVlIHVud3JhcCBhbnkgb2JzZXJ2YWJsZXM/XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyYW1WYWx1ZUNvbXB1dGVkLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGl0IGRvZXNuJ3QsIHNvIHRoZXJlJ3Mgbm8gbmVlZCBmb3IgYW55IGNvbXB1dGVkIHdyYXBwZXIuIEp1c3QgcGFzcyB0aHJvdWdoIHRoZSBzdXBwbGllZCB2YWx1ZSBkaXJlY3RseS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4YW1wbGU6IFwic29tZVZhbDogZmlyc3ROYW1lLCBhZ2U6IDEyM1wiICh3aGV0aGVyIG9yIG5vdCBmaXJzdE5hbWUgaXMgYW4gb2JzZXJ2YWJsZS9jb21wdXRlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWWVzIGl0IGRvZXMuIFN1cHBseSBhIGNvbXB1dGVkIHByb3BlcnR5IHRoYXQgdW53cmFwcyBib3RoIHRoZSBvdXRlciAoYmluZGluZyBleHByZXNzaW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV2ZWwgb2Ygb2JzZXJ2YWJpbGl0eSwgYW5kIGFueSBpbm5lciAocmVzdWx0aW5nIG1vZGVsIHZhbHVlKSBsZXZlbCBvZiBvYnNlcnZhYmlsaXR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBtZWFucyB0aGUgY29tcG9uZW50IGRvZXNuJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBtdWx0aXBsZSB1bndyYXBwaW5nLiBJZiB0aGUgdmFsdWUgaXMgYVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd3JpdGFibGUgb2JzZXJ2YWJsZSwgdGhlIGNvbXB1dGVkIHdpbGwgYWxzbyBiZSB3cml0YWJsZSBhbmQgcGFzcyB0aGUgdmFsdWUgb24gdG8gdGhlIG9ic2VydmFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga28uY29tcHV0ZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWFkJzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHBhcmFtVmFsdWVDb21wdXRlZCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3cml0ZSc6IGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZShwYXJhbVZhbHVlKSAmJiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVZhbHVlQ29tcHV0ZWQoKSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGVsZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEdpdmUgYWNjZXNzIHRvIHRoZSByYXcgY29tcHV0ZWRzLCBhcyBsb25nIGFzIHRoYXQgd291bGRuJ3Qgb3ZlcndyaXRlIGFueSBjdXN0b20gcGFyYW0gYWxzbyBjYWxsZWQgJyRyYXcnXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGluIGNhc2UgdGhlIGRldmVsb3BlciB3YW50cyB0byByZWFjdCB0byBvdXRlciAoYmluZGluZykgb2JzZXJ2YWJpbGl0eSBzZXBhcmF0ZWx5IGZyb20gaW5uZXJcbiAgICAgICAgICAgIC8vIChtb2RlbCB2YWx1ZSkgb2JzZXJ2YWJpbGl0eSwgb3IgaW4gY2FzZSB0aGUgbW9kZWwgdmFsdWUgb2JzZXJ2YWJsZSBoYXMgc3Vib2JzZXJ2YWJsZXMuXG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnJHJhdycpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0WyckcmF3J10gPSByYXdQYXJhbUNvbXB1dGVkVmFsdWVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRm9yIGNvbnNpc3RlbmN5LCBhYnNlbmNlIG9mIGEgXCJwYXJhbXNcIiBhdHRyaWJ1dGUgaXMgdHJlYXRlZCB0aGUgc2FtZSBhcyB0aGUgcHJlc2VuY2Ugb2ZcbiAgICAgICAgICAgIC8vIGFueSBlbXB0eSBvbmUuIE90aGVyd2lzZSBjb21wb25lbnQgdmlld21vZGVscyBuZWVkIHNwZWNpYWwgY29kZSB0byBjaGVjayB3aGV0aGVyIG9yIG5vdFxuICAgICAgICAgICAgLy8gJ3BhcmFtcycgb3IgJ3BhcmFtcy4kcmF3JyBpcyBudWxsL3VuZGVmaW5lZCBiZWZvcmUgcmVhZGluZyBzdWJwcm9wZXJ0aWVzLCB3aGljaCBpcyBhbm5veWluZy5cbiAgICAgICAgICAgIHJldHVybiB7ICckcmF3Jzoge30gfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gQ29tcGF0aWJpbGl0eSBjb2RlIGZvciBvbGRlciAocHJlLUhUTUw1KSBJRSBicm93c2Vyc1xuXG4gICAgaWYgKGtvLnV0aWxzLmllVmVyc2lvbiA8IDkpIHtcbiAgICAgICAgLy8gV2hlbmV2ZXIgeW91IHByZXJlZ2lzdGVyIGEgY29tcG9uZW50LCBlbmFibGUgaXQgYXMgYSBjdXN0b20gZWxlbWVudCBpbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICAgICAgICBrby5jb21wb25lbnRzWydyZWdpc3RlciddID0gKGZ1bmN0aW9uKG9yaWdpbmFsRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjb21wb25lbnROYW1lKTsgLy8gQWxsb3dzIElFPDkgdG8gcGFyc2UgbWFya3VwIGNvbnRhaW5pbmcgdGhlIGN1c3RvbSBlbGVtZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoa28uY29tcG9uZW50c1sncmVnaXN0ZXInXSk7XG5cbiAgICAgICAgLy8gV2hlbmV2ZXIgeW91IGNyZWF0ZSBhIGRvY3VtZW50IGZyYWdtZW50LCBlbmFibGUgYWxsIHByZXJlZ2lzdGVyZWQgY29tcG9uZW50IG5hbWVzIGFzIGN1c3RvbSBlbGVtZW50c1xuICAgICAgICAvLyBUaGlzIGlzIG5lZWRlZCB0byBtYWtlIGlubmVyU2hpdi9qUXVlcnkgSFRNTCBwYXJzaW5nIGNvcnJlY3RseSBoYW5kbGUgdGhlIGN1c3RvbSBlbGVtZW50c1xuICAgICAgICBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50ID0gKGZ1bmN0aW9uKG9yaWdpbmFsRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3RG9jRnJhZyA9IG9yaWdpbmFsRnVuY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgYWxsQ29tcG9uZW50cyA9IGtvLmNvbXBvbmVudHMuX2FsbFJlZ2lzdGVyZWRDb21wb25lbnRzO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbXBvbmVudE5hbWUgaW4gYWxsQ29tcG9uZW50cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsQ29tcG9uZW50cy5oYXNPd25Qcm9wZXJ0eShjb21wb25lbnROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RG9jRnJhZy5jcmVhdGVFbGVtZW50KGNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdEb2NGcmFnO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkoZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCk7XG4gICAgfVxufSkoKTsoZnVuY3Rpb24odW5kZWZpbmVkKSB7XG5cbiAgICB2YXIgY29tcG9uZW50TG9hZGluZ09wZXJhdGlvblVuaXF1ZUlkID0gMDtcblxuICAgIGtvLmJpbmRpbmdIYW5kbGVyc1snY29tcG9uZW50J10gPSB7XG4gICAgICAgICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgaWdub3JlZDEsIGlnbm9yZWQyLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWaWV3TW9kZWwsXG4gICAgICAgICAgICAgICAgY3VycmVudExvYWRpbmdPcGVyYXRpb25JZCxcbiAgICAgICAgICAgICAgICBkaXNwb3NlQXNzb2NpYXRlZENvbXBvbmVudFZpZXdNb2RlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWaWV3TW9kZWxEaXNwb3NlID0gY3VycmVudFZpZXdNb2RlbCAmJiBjdXJyZW50Vmlld01vZGVsWydkaXNwb3NlJ107XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudFZpZXdNb2RlbERpc3Bvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3TW9kZWxEaXNwb3NlLmNhbGwoY3VycmVudFZpZXdNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZpZXdNb2RlbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFueSBpbi1mbGlnaHQgbG9hZGluZyBvcGVyYXRpb24gaXMgbm8gbG9uZ2VyIHJlbGV2YW50LCBzbyBtYWtlIHN1cmUgd2UgaWdub3JlIGl0cyBjb21wbGV0aW9uXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMb2FkaW5nT3BlcmF0aW9uSWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxDaGlsZE5vZGVzID0ga28udXRpbHMubWFrZUFycmF5KGtvLnZpcnR1YWxFbGVtZW50cy5jaGlsZE5vZGVzKGVsZW1lbnQpKTtcblxuICAgICAgICAgICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlbGVtZW50LCBkaXNwb3NlQXNzb2NpYXRlZENvbXBvbmVudFZpZXdNb2RlbCk7XG5cbiAgICAgICAgICAgIGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudFBhcmFtcztcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnROYW1lID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZVsnbmFtZSddKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50UGFyYW1zID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZVsncGFyYW1zJ10pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvbXBvbmVudCBuYW1lIHNwZWNpZmllZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBsb2FkaW5nT3BlcmF0aW9uSWQgPSBjdXJyZW50TG9hZGluZ09wZXJhdGlvbklkID0gKytjb21wb25lbnRMb2FkaW5nT3BlcmF0aW9uVW5pcXVlSWQ7XG4gICAgICAgICAgICAgICAga28uY29tcG9uZW50cy5nZXQoY29tcG9uZW50TmFtZSwgZnVuY3Rpb24oY29tcG9uZW50RGVmaW5pdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCB0aGUgY3VycmVudCBsb2FkIG9wZXJhdGlvbiBmb3IgdGhpcyBlbGVtZW50LCBpZ25vcmUgaXQuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TG9hZGluZ09wZXJhdGlvbklkICE9PSBsb2FkaW5nT3BlcmF0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIHByZXZpb3VzIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2VBc3NvY2lhdGVkQ29tcG9uZW50Vmlld01vZGVsKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW5zdGFudGlhdGUgYW5kIGJpbmQgbmV3IGNvbXBvbmVudC4gSW1wbGljaXRseSB0aGlzIGNsZWFucyBhbnkgb2xkIERPTSBub2Rlcy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wb25lbnREZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY29tcG9uZW50IFxcJycgKyBjb21wb25lbnROYW1lICsgJ1xcJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNsb25lVGVtcGxhdGVJbnRvRWxlbWVudChjb21wb25lbnROYW1lLCBjb21wb25lbnREZWZpbml0aW9uLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudFZpZXdNb2RlbCA9IGNyZWF0ZVZpZXdNb2RlbChjb21wb25lbnREZWZpbml0aW9uLCBlbGVtZW50LCBvcmlnaW5hbENoaWxkTm9kZXMsIGNvbXBvbmVudFBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEJpbmRpbmdDb250ZXh0ID0gYmluZGluZ0NvbnRleHRbJ2NyZWF0ZUNoaWxkQ29udGV4dCddKGNvbXBvbmVudFZpZXdNb2RlbCwgLyogZGF0YUl0ZW1BbGlhcyAqLyB1bmRlZmluZWQsIGZ1bmN0aW9uKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eFsnJGNvbXBvbmVudCddID0gY29tcG9uZW50Vmlld01vZGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eFsnJGNvbXBvbmVudFRlbXBsYXRlTm9kZXMnXSA9IG9yaWdpbmFsQ2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Vmlld01vZGVsID0gY29tcG9uZW50Vmlld01vZGVsO1xuICAgICAgICAgICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyhjaGlsZEJpbmRpbmdDb250ZXh0LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBlbGVtZW50IH0pO1xuXG4gICAgICAgICAgICByZXR1cm4geyAnY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MnOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAga28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snY29tcG9uZW50J10gPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gY2xvbmVUZW1wbGF0ZUludG9FbGVtZW50KGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudERlZmluaXRpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gY29tcG9uZW50RGVmaW5pdGlvblsndGVtcGxhdGUnXTtcbiAgICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgXFwnJyArIGNvbXBvbmVudE5hbWUgKyAnXFwnIGhhcyBubyB0ZW1wbGF0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsb25lZE5vZGVzQXJyYXkgPSBrby51dGlscy5jbG9uZU5vZGVzKHRlbXBsYXRlKTtcbiAgICAgICAga28udmlydHVhbEVsZW1lbnRzLnNldERvbU5vZGVDaGlsZHJlbihlbGVtZW50LCBjbG9uZWROb2Rlc0FycmF5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVWaWV3TW9kZWwoY29tcG9uZW50RGVmaW5pdGlvbiwgZWxlbWVudCwgb3JpZ2luYWxDaGlsZE5vZGVzLCBjb21wb25lbnRQYXJhbXMpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudFZpZXdNb2RlbEZhY3RvcnkgPSBjb21wb25lbnREZWZpbml0aW9uWydjcmVhdGVWaWV3TW9kZWwnXTtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFZpZXdNb2RlbEZhY3RvcnlcbiAgICAgICAgICAgID8gY29tcG9uZW50Vmlld01vZGVsRmFjdG9yeS5jYWxsKGNvbXBvbmVudERlZmluaXRpb24sIGNvbXBvbmVudFBhcmFtcywgeyAnZWxlbWVudCc6IGVsZW1lbnQsICd0ZW1wbGF0ZU5vZGVzJzogb3JpZ2luYWxDaGlsZE5vZGVzIH0pXG4gICAgICAgICAgICA6IGNvbXBvbmVudFBhcmFtczsgLy8gVGVtcGxhdGUtb25seSBjb21wb25lbnRcbiAgICB9XG5cbn0pKCk7XG52YXIgYXR0ckh0bWxUb0phdmFzY3JpcHRNYXAgPSB7ICdjbGFzcyc6ICdjbGFzc05hbWUnLCAnZm9yJzogJ2h0bWxGb3InIH07XG5rby5iaW5kaW5nSGFuZGxlcnNbJ2F0dHInXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpIHx8IHt9O1xuICAgICAgICBrby51dGlscy5vYmplY3RGb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihhdHRyTmFtZSwgYXR0clZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyVmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGF0dHJWYWx1ZSk7XG5cbiAgICAgICAgICAgIC8vIFRvIGNvdmVyIGNhc2VzIGxpa2UgXCJhdHRyOiB7IGNoZWNrZWQ6c29tZVByb3AgfVwiLCB3ZSB3YW50IHRvIHJlbW92ZSB0aGUgYXR0cmlidXRlIGVudGlyZWx5XG4gICAgICAgICAgICAvLyB3aGVuIHNvbWVQcm9wIGlzIGEgXCJubyB2YWx1ZVwiLWxpa2UgdmFsdWUgKHN0cmljdGx5IG51bGwsIGZhbHNlLCBvciB1bmRlZmluZWQpXG4gICAgICAgICAgICAvLyAoYmVjYXVzZSB0aGUgYWJzZW5jZSBvZiB0aGUgXCJjaGVja2VkXCIgYXR0ciBpcyBob3cgdG8gbWFyayBhbiBlbGVtZW50IGFzIG5vdCBjaGVja2VkLCBldGMuKVxuICAgICAgICAgICAgdmFyIHRvUmVtb3ZlID0gKGF0dHJWYWx1ZSA9PT0gZmFsc2UpIHx8IChhdHRyVmFsdWUgPT09IG51bGwpIHx8IChhdHRyVmFsdWUgPT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBpZiAodG9SZW1vdmUpXG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuXG4gICAgICAgICAgICAvLyBJbiBJRSA8PSA3IGFuZCBJRTggUXVpcmtzIE1vZGUsIHlvdSBoYXZlIHRvIHVzZSB0aGUgSmF2YXNjcmlwdCBwcm9wZXJ0eSBuYW1lIGluc3RlYWQgb2YgdGhlXG4gICAgICAgICAgICAvLyBIVE1MIGF0dHJpYnV0ZSBuYW1lIGZvciBjZXJ0YWluIGF0dHJpYnV0ZXMuIElFOCBTdGFuZGFyZHMgTW9kZSBzdXBwb3J0cyB0aGUgY29ycmVjdCBiZWhhdmlvcixcbiAgICAgICAgICAgIC8vIGJ1dCBpbnN0ZWFkIG9mIGZpZ3VyaW5nIG91dCB0aGUgbW9kZSwgd2UnbGwganVzdCBzZXQgdGhlIGF0dHJpYnV0ZSB0aHJvdWdoIHRoZSBKYXZhc2NyaXB0XG4gICAgICAgICAgICAvLyBwcm9wZXJ0eSBmb3IgSUUgPD0gOC5cbiAgICAgICAgICAgIGlmIChrby51dGlscy5pZVZlcnNpb24gPD0gOCAmJiBhdHRyTmFtZSBpbiBhdHRySHRtbFRvSmF2YXNjcmlwdE1hcCkge1xuICAgICAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ckh0bWxUb0phdmFzY3JpcHRNYXBbYXR0ck5hbWVdO1xuICAgICAgICAgICAgICAgIGlmICh0b1JlbW92ZSlcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFthdHRyTmFtZV0gPSBhdHRyVmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0b1JlbW92ZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyZWF0IFwibmFtZVwiIHNwZWNpYWxseSAtIGFsdGhvdWdoIHlvdSBjYW4gdGhpbmsgb2YgaXQgYXMgYW4gYXR0cmlidXRlLCBpdCBhbHNvIG5lZWRzXG4gICAgICAgICAgICAvLyBzcGVjaWFsIGhhbmRsaW5nIG9uIG9sZGVyIHZlcnNpb25zIG9mIElFIChodHRwczovL2dpdGh1Yi5jb20vU3RldmVTYW5kZXJzb24va25vY2tvdXQvcHVsbC8zMzMpXG4gICAgICAgICAgICAvLyBEZWxpYmVyYXRlbHkgYmVpbmcgY2FzZS1zZW5zaXRpdmUgaGVyZSBiZWNhdXNlIFhIVE1MIHdvdWxkIHJlZ2FyZCBcIk5hbWVcIiBhcyBhIGRpZmZlcmVudCB0aGluZ1xuICAgICAgICAgICAgLy8gZW50aXJlbHksIGFuZCB0aGVyZSdzIG5vIHN0cm9uZyByZWFzb24gdG8gYWxsb3cgZm9yIHN1Y2ggY2FzaW5nIGluIEhUTUwuXG4gICAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09IFwibmFtZVwiKSB7XG4gICAgICAgICAgICAgICAga28udXRpbHMuc2V0RWxlbWVudE5hbWUoZWxlbWVudCwgdG9SZW1vdmUgPyBcIlwiIDogYXR0clZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuKGZ1bmN0aW9uKCkge1xuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2NoZWNrZWQnXSA9IHtcbiAgICAnYWZ0ZXInOiBbJ3ZhbHVlJywgJ2F0dHInXSxcbiAgICAnaW5pdCc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xuICAgICAgICB2YXIgY2hlY2tlZFZhbHVlID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gVHJlYXQgXCJ2YWx1ZVwiIGxpa2UgXCJjaGVja2VkVmFsdWVcIiB3aGVuIGl0IGlzIGluY2x1ZGVkIHdpdGggXCJjaGVja2VkXCIgYmluZGluZ1xuICAgICAgICAgICAgaWYgKGFsbEJpbmRpbmdzWydoYXMnXSgnY2hlY2tlZFZhbHVlJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShhbGxCaW5kaW5ncy5nZXQoJ2NoZWNrZWRWYWx1ZScpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsQmluZGluZ3NbJ2hhcyddKCd2YWx1ZScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYWxsQmluZGluZ3MuZ2V0KCd2YWx1ZScpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQudmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU1vZGVsKCkge1xuICAgICAgICAgICAgLy8gVGhpcyB1cGRhdGVzIHRoZSBtb2RlbCB2YWx1ZSBmcm9tIHRoZSB2aWV3IHZhbHVlLlxuICAgICAgICAgICAgLy8gSXQgcnVucyBpbiByZXNwb25zZSB0byBET00gZXZlbnRzIChjbGljaykgYW5kIGNoYW5nZXMgaW4gY2hlY2tlZFZhbHVlLlxuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZCA9IGVsZW1lbnQuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICBlbGVtVmFsdWUgPSB1c2VDaGVja2VkVmFsdWUgPyBjaGVja2VkVmFsdWUoKSA6IGlzQ2hlY2tlZDtcblxuICAgICAgICAgICAgLy8gV2hlbiB3ZSdyZSBmaXJzdCBzZXR0aW5nIHVwIHRoaXMgY29tcHV0ZWQsIGRvbid0IGNoYW5nZSBhbnkgbW9kZWwgc3RhdGUuXG4gICAgICAgICAgICBpZiAoa28uY29tcHV0ZWRDb250ZXh0LmlzSW5pdGlhbCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSBjYW4gaWdub3JlIHVuY2hlY2tlZCByYWRpbyBidXR0b25zLCBiZWNhdXNlIHNvbWUgb3RoZXIgcmFkaW9cbiAgICAgICAgICAgIC8vIGJ1dHRvbiB3aWxsIGJlIGdldHRpbmcgY2hlY2tlZCwgYW5kIHRoYXQgb25lIGNhbiB0YWtlIGNhcmUgb2YgdXBkYXRpbmcgc3RhdGUuXG4gICAgICAgICAgICBpZiAoaXNSYWRpbyAmJiAhaXNDaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbW9kZWxWYWx1ZSA9IGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKHZhbHVlQWNjZXNzb3IpO1xuICAgICAgICAgICAgaWYgKHZhbHVlSXNBcnJheSkge1xuICAgICAgICAgICAgICAgIHZhciB3cml0YWJsZVZhbHVlID0gcmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZSA/IG1vZGVsVmFsdWUucGVlaygpIDogbW9kZWxWYWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAob2xkRWxlbVZhbHVlICE9PSBlbGVtVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSdyZSByZXNwb25kaW5nIHRvIHRoZSBjaGVja2VkVmFsdWUgY2hhbmdpbmcsIGFuZCB0aGUgZWxlbWVudCBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50bHkgY2hlY2tlZCwgcmVwbGFjZSB0aGUgb2xkIGVsZW0gdmFsdWUgd2l0aCB0aGUgbmV3IGVsZW0gdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhlIG1vZGVsIGFycmF5LlxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrby51dGlscy5hZGRPclJlbW92ZUl0ZW0od3JpdGFibGVWYWx1ZSwgZWxlbVZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLmFkZE9yUmVtb3ZlSXRlbSh3cml0YWJsZVZhbHVlLCBvbGRFbGVtVmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG9sZEVsZW1WYWx1ZSA9IGVsZW1WYWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHdlJ3JlIHJlc3BvbmRpbmcgdG8gdGhlIHVzZXIgaGF2aW5nIGNoZWNrZWQvdW5jaGVja2VkIGEgY2hlY2tib3gsXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZC9yZW1vdmUgdGhlIGVsZW1lbnQgdmFsdWUgdG8gdGhlIG1vZGVsIGFycmF5LlxuICAgICAgICAgICAgICAgICAgICBrby51dGlscy5hZGRPclJlbW92ZUl0ZW0od3JpdGFibGVWYWx1ZSwgZWxlbVZhbHVlLCBpc0NoZWNrZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZSAmJiBrby5pc1dyaXRlYWJsZU9ic2VydmFibGUobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxWYWx1ZSh3cml0YWJsZVZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGtvLmV4cHJlc3Npb25SZXdyaXRpbmcud3JpdGVWYWx1ZVRvUHJvcGVydHkobW9kZWxWYWx1ZSwgYWxsQmluZGluZ3MsICdjaGVja2VkJywgZWxlbVZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVWaWV3KCkge1xuICAgICAgICAgICAgLy8gVGhpcyB1cGRhdGVzIHRoZSB2aWV3IHZhbHVlIGZyb20gdGhlIG1vZGVsIHZhbHVlLlxuICAgICAgICAgICAgLy8gSXQgcnVucyBpbiByZXNwb25zZSB0byBjaGFuZ2VzIGluIHRoZSBib3VuZCAoY2hlY2tlZCkgdmFsdWUuXG4gICAgICAgICAgICB2YXIgbW9kZWxWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlSXNBcnJheSkge1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gYSBjaGVja2JveCBpcyBib3VuZCB0byBhbiBhcnJheSwgYmVpbmcgY2hlY2tlZCByZXByZXNlbnRzIGl0cyB2YWx1ZSBiZWluZyBwcmVzZW50IGluIHRoYXQgYXJyYXlcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNoZWNrZWQgPSBrby51dGlscy5hcnJheUluZGV4T2YobW9kZWxWYWx1ZSwgY2hlY2tlZFZhbHVlKCkpID49IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2hlY2tib3gpIHtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIGEgY2hlY2tib3ggaXMgYm91bmQgdG8gYW55IG90aGVyIHZhbHVlIChub3QgYW4gYXJyYXkpLCBiZWluZyBjaGVja2VkIHJlcHJlc2VudHMgdGhlIHZhbHVlIGJlaW5nIHRydWVpc2hcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNoZWNrZWQgPSBtb2RlbFZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgcmFkaW8gYnV0dG9ucywgYmVpbmcgY2hlY2tlZCBtZWFucyB0aGF0IHRoZSByYWRpbyBidXR0b24ncyB2YWx1ZSBjb3JyZXNwb25kcyB0byB0aGUgbW9kZWwgdmFsdWVcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNoZWNrZWQgPSAoY2hlY2tlZFZhbHVlKCkgPT09IG1vZGVsVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpc0NoZWNrYm94ID0gZWxlbWVudC50eXBlID09IFwiY2hlY2tib3hcIixcbiAgICAgICAgICAgIGlzUmFkaW8gPSBlbGVtZW50LnR5cGUgPT0gXCJyYWRpb1wiO1xuXG4gICAgICAgIC8vIE9ubHkgYmluZCB0byBjaGVjayBib3hlcyBhbmQgcmFkaW8gYnV0dG9uc1xuICAgICAgICBpZiAoIWlzQ2hlY2tib3ggJiYgIWlzUmFkaW8pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByYXdWYWx1ZSA9IHZhbHVlQWNjZXNzb3IoKSxcbiAgICAgICAgICAgIHZhbHVlSXNBcnJheSA9IGlzQ2hlY2tib3ggJiYgKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocmF3VmFsdWUpIGluc3RhbmNlb2YgQXJyYXkpLFxuICAgICAgICAgICAgcmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZSA9ICEodmFsdWVJc0FycmF5ICYmIHJhd1ZhbHVlLnB1c2ggJiYgcmF3VmFsdWUuc3BsaWNlKSxcbiAgICAgICAgICAgIG9sZEVsZW1WYWx1ZSA9IHZhbHVlSXNBcnJheSA/IGNoZWNrZWRWYWx1ZSgpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdXNlQ2hlY2tlZFZhbHVlID0gaXNSYWRpbyB8fCB2YWx1ZUlzQXJyYXk7XG5cbiAgICAgICAgLy8gSUUgNiB3b24ndCBhbGxvdyByYWRpbyBidXR0b25zIHRvIGJlIHNlbGVjdGVkIHVubGVzcyB0aGV5IGhhdmUgYSBuYW1lXG4gICAgICAgIGlmIChpc1JhZGlvICYmICFlbGVtZW50Lm5hbWUpXG4gICAgICAgICAgICBrby5iaW5kaW5nSGFuZGxlcnNbJ3VuaXF1ZU5hbWUnXVsnaW5pdCddKGVsZW1lbnQsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZSB9KTtcblxuICAgICAgICAvLyBTZXQgdXAgdHdvIGNvbXB1dGVkcyB0byB1cGRhdGUgdGhlIGJpbmRpbmc6XG5cbiAgICAgICAgLy8gVGhlIGZpcnN0IHJlc3BvbmRzIHRvIGNoYW5nZXMgaW4gdGhlIGNoZWNrZWRWYWx1ZSB2YWx1ZSBhbmQgdG8gZWxlbWVudCBjbGlja3NcbiAgICAgICAga28uY29tcHV0ZWQodXBkYXRlTW9kZWwsIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBlbGVtZW50IH0pO1xuICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcImNsaWNrXCIsIHVwZGF0ZU1vZGVsKTtcblxuICAgICAgICAvLyBUaGUgc2Vjb25kIHJlc3BvbmRzIHRvIGNoYW5nZXMgaW4gdGhlIG1vZGVsIHZhbHVlICh0aGUgb25lIGFzc29jaWF0ZWQgd2l0aCB0aGUgY2hlY2tlZCBiaW5kaW5nKVxuICAgICAgICBrby5jb21wdXRlZCh1cGRhdGVWaWV3LCBudWxsLCB7IGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDogZWxlbWVudCB9KTtcblxuICAgICAgICByYXdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG59O1xua28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5nc1snY2hlY2tlZCddID0gdHJ1ZTtcblxua28uYmluZGluZ0hhbmRsZXJzWydjaGVja2VkVmFsdWUnXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgZWxlbWVudC52YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICB9XG59O1xuXG59KSgpO3ZhciBjbGFzc2VzV3JpdHRlbkJ5QmluZGluZ0tleSA9ICdfX2tvX19jc3NWYWx1ZSc7XG5rby5iaW5kaW5nSGFuZGxlcnNbJ2NzcyddID0ge1xuICAgICd1cGRhdGUnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgICAgICB2YXIgdmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAga28udXRpbHMub2JqZWN0Rm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24oY2xhc3NOYW1lLCBzaG91bGRIYXZlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRIYXZlQ2xhc3MgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHNob3VsZEhhdmVDbGFzcyk7XG4gICAgICAgICAgICAgICAga28udXRpbHMudG9nZ2xlRG9tTm9kZUNzc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgc2hvdWxkSGF2ZUNsYXNzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBrby51dGlscy5zdHJpbmdUcmltKFN0cmluZyh2YWx1ZSB8fCAnJykpOyAvLyBNYWtlIHN1cmUgd2UgZG9uJ3QgdHJ5IHRvIHN0b3JlIG9yIHNldCBhIG5vbi1zdHJpbmcgdmFsdWVcbiAgICAgICAgICAgIGtvLnV0aWxzLnRvZ2dsZURvbU5vZGVDc3NDbGFzcyhlbGVtZW50LCBlbGVtZW50W2NsYXNzZXNXcml0dGVuQnlCaW5kaW5nS2V5XSwgZmFsc2UpO1xuICAgICAgICAgICAgZWxlbWVudFtjbGFzc2VzV3JpdHRlbkJ5QmluZGluZ0tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGtvLnV0aWxzLnRvZ2dsZURvbU5vZGVDc3NDbGFzcyhlbGVtZW50LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xua28uYmluZGluZ0hhbmRsZXJzWydlbmFibGUnXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpO1xuICAgICAgICBpZiAodmFsdWUgJiYgZWxlbWVudC5kaXNhYmxlZClcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIGVsc2UgaWYgKCghdmFsdWUpICYmICghZWxlbWVudC5kaXNhYmxlZCkpXG4gICAgICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG59O1xuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2Rpc2FibGUnXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAga28uYmluZGluZ0hhbmRsZXJzWydlbmFibGUnXVsndXBkYXRlJ10oZWxlbWVudCwgZnVuY3Rpb24oKSB7IHJldHVybiAha28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpIH0pO1xuICAgIH1cbn07XG4vLyBGb3IgY2VydGFpbiBjb21tb24gZXZlbnRzIChjdXJyZW50bHkganVzdCAnY2xpY2snKSwgYWxsb3cgYSBzaW1wbGlmaWVkIGRhdGEtYmluZGluZyBzeW50YXhcbi8vIGUuZy4gY2xpY2s6aGFuZGxlciBpbnN0ZWFkIG9mIHRoZSB1c3VhbCBmdWxsLWxlbmd0aCBldmVudDp7Y2xpY2s6aGFuZGxlcn1cbmZ1bmN0aW9uIG1ha2VFdmVudEhhbmRsZXJTaG9ydGN1dChldmVudE5hbWUpIHtcbiAgICBrby5iaW5kaW5nSGFuZGxlcnNbZXZlbnROYW1lXSA9IHtcbiAgICAgICAgJ2luaXQnOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncywgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlQWNjZXNzb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgICAgIHJlc3VsdFtldmVudE5hbWVdID0gdmFsdWVBY2Nlc3NvcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1snZXZlbnQnXVsnaW5pdCddLmNhbGwodGhpcywgZWxlbWVudCwgbmV3VmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2V2ZW50J10gPSB7XG4gICAgJ2luaXQnIDogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciBldmVudHNUb0hhbmRsZSA9IHZhbHVlQWNjZXNzb3IoKSB8fCB7fTtcbiAgICAgICAga28udXRpbHMub2JqZWN0Rm9yRWFjaChldmVudHNUb0hhbmRsZSwgZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50TmFtZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnROYW1lLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXJSZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXJGdW5jdGlvbiA9IHZhbHVlQWNjZXNzb3IoKVtldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhbmRsZXJGdW5jdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGFrZSBhbGwgdGhlIGV2ZW50IGFyZ3MsIGFuZCBwcmVmaXggd2l0aCB0aGUgdmlld21vZGVsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJnc0ZvckhhbmRsZXIgPSBrby51dGlscy5tYWtlQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlbCA9IGJpbmRpbmdDb250ZXh0WyckZGF0YSddO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc0ZvckhhbmRsZXIudW5zaGlmdCh2aWV3TW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlclJldHVyblZhbHVlID0gaGFuZGxlckZ1bmN0aW9uLmFwcGx5KHZpZXdNb2RlbCwgYXJnc0ZvckhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJSZXR1cm5WYWx1ZSAhPT0gdHJ1ZSkgeyAvLyBOb3JtYWxseSB3ZSB3YW50IHRvIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uIERldmVsb3BlciBjYW4gb3ZlcnJpZGUgdGhpcyBiZSBleHBsaWNpdGx5IHJldHVybmluZyB0cnVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgYnViYmxlID0gYWxsQmluZGluZ3MuZ2V0KGV2ZW50TmFtZSArICdCdWJibGUnKSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYnViYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuLy8gXCJmb3JlYWNoOiBzb21lRXhwcmVzc2lvblwiIGlzIGVxdWl2YWxlbnQgdG8gXCJ0ZW1wbGF0ZTogeyBmb3JlYWNoOiBzb21lRXhwcmVzc2lvbiB9XCJcbi8vIFwiZm9yZWFjaDogeyBkYXRhOiBzb21lRXhwcmVzc2lvbiwgYWZ0ZXJBZGQ6IG15Zm4gfVwiIGlzIGVxdWl2YWxlbnQgdG8gXCJ0ZW1wbGF0ZTogeyBmb3JlYWNoOiBzb21lRXhwcmVzc2lvbiwgYWZ0ZXJBZGQ6IG15Zm4gfVwiXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2ZvcmVhY2gnXSA9IHtcbiAgICBtYWtlVGVtcGxhdGVWYWx1ZUFjY2Vzc29yOiBmdW5jdGlvbih2YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbFZhbHVlID0gdmFsdWVBY2Nlc3NvcigpLFxuICAgICAgICAgICAgICAgIHVud3JhcHBlZFZhbHVlID0ga28udXRpbHMucGVla09ic2VydmFibGUobW9kZWxWYWx1ZSk7ICAgIC8vIFVud3JhcCB3aXRob3V0IHNldHRpbmcgYSBkZXBlbmRlbmN5IGhlcmVcblxuICAgICAgICAgICAgLy8gSWYgdW53cmFwcGVkVmFsdWUgaXMgdGhlIGFycmF5LCBwYXNzIGluIHRoZSB3cmFwcGVkIHZhbHVlIG9uIGl0cyBvd25cbiAgICAgICAgICAgIC8vIFRoZSB2YWx1ZSB3aWxsIGJlIHVud3JhcHBlZCBhbmQgdHJhY2tlZCB3aXRoaW4gdGhlIHRlbXBsYXRlIGJpbmRpbmdcbiAgICAgICAgICAgIC8vIChTZWUgaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy81MjMpXG4gICAgICAgICAgICBpZiAoKCF1bndyYXBwZWRWYWx1ZSkgfHwgdHlwZW9mIHVud3JhcHBlZFZhbHVlLmxlbmd0aCA9PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIHJldHVybiB7ICdmb3JlYWNoJzogbW9kZWxWYWx1ZSwgJ3RlbXBsYXRlRW5naW5lJzoga28ubmF0aXZlVGVtcGxhdGVFbmdpbmUuaW5zdGFuY2UgfTtcblxuICAgICAgICAgICAgLy8gSWYgdW53cmFwcGVkVmFsdWUuZGF0YSBpcyB0aGUgYXJyYXksIHByZXNlcnZlIGFsbCByZWxldmFudCBvcHRpb25zIGFuZCB1bndyYXAgYWdhaW4gdmFsdWUgc28gd2UgZ2V0IHVwZGF0ZXNcbiAgICAgICAgICAgIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobW9kZWxWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICdmb3JlYWNoJzogdW53cmFwcGVkVmFsdWVbJ2RhdGEnXSxcbiAgICAgICAgICAgICAgICAnYXMnOiB1bndyYXBwZWRWYWx1ZVsnYXMnXSxcbiAgICAgICAgICAgICAgICAnaW5jbHVkZURlc3Ryb3llZCc6IHVud3JhcHBlZFZhbHVlWydpbmNsdWRlRGVzdHJveWVkJ10sXG4gICAgICAgICAgICAgICAgJ2FmdGVyQWRkJzogdW53cmFwcGVkVmFsdWVbJ2FmdGVyQWRkJ10sXG4gICAgICAgICAgICAgICAgJ2JlZm9yZVJlbW92ZSc6IHVud3JhcHBlZFZhbHVlWydiZWZvcmVSZW1vdmUnXSxcbiAgICAgICAgICAgICAgICAnYWZ0ZXJSZW5kZXInOiB1bndyYXBwZWRWYWx1ZVsnYWZ0ZXJSZW5kZXInXSxcbiAgICAgICAgICAgICAgICAnYmVmb3JlTW92ZSc6IHVud3JhcHBlZFZhbHVlWydiZWZvcmVNb3ZlJ10sXG4gICAgICAgICAgICAgICAgJ2FmdGVyTW92ZSc6IHVud3JhcHBlZFZhbHVlWydhZnRlck1vdmUnXSxcbiAgICAgICAgICAgICAgICAndGVtcGxhdGVFbmdpbmUnOiBrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZS5pbnN0YW5jZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1sndGVtcGxhdGUnXVsnaW5pdCddKGVsZW1lbnQsIGtvLmJpbmRpbmdIYW5kbGVyc1snZm9yZWFjaCddLm1ha2VUZW1wbGF0ZVZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3NvcikpO1xuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBrby5iaW5kaW5nSGFuZGxlcnNbJ3RlbXBsYXRlJ11bJ3VwZGF0ZSddKGVsZW1lbnQsIGtvLmJpbmRpbmdIYW5kbGVyc1snZm9yZWFjaCddLm1ha2VUZW1wbGF0ZVZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3NvciksIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KTtcbiAgICB9XG59O1xua28uZXhwcmVzc2lvblJld3JpdGluZy5iaW5kaW5nUmV3cml0ZVZhbGlkYXRvcnNbJ2ZvcmVhY2gnXSA9IGZhbHNlOyAvLyBDYW4ndCByZXdyaXRlIGNvbnRyb2wgZmxvdyBiaW5kaW5nc1xua28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snZm9yZWFjaCddID0gdHJ1ZTtcbnZhciBoYXNmb2N1c1VwZGF0aW5nUHJvcGVydHkgPSAnX19rb19oYXNmb2N1c1VwZGF0aW5nJztcbnZhciBoYXNmb2N1c0xhc3RWYWx1ZSA9ICdfX2tvX2hhc2ZvY3VzTGFzdFZhbHVlJztcbmtvLmJpbmRpbmdIYW5kbGVyc1snaGFzZm9jdXMnXSA9IHtcbiAgICAnaW5pdCc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzKSB7XG4gICAgICAgIHZhciBoYW5kbGVFbGVtZW50Rm9jdXNDaGFuZ2UgPSBmdW5jdGlvbihpc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgIC8vIFdoZXJlIHBvc3NpYmxlLCBpZ25vcmUgd2hpY2ggZXZlbnQgd2FzIHJhaXNlZCBhbmQgZGV0ZXJtaW5lIGZvY3VzIHN0YXRlIHVzaW5nIGFjdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAvLyBhcyB0aGlzIGF2b2lkcyBwaGFudG9tIGZvY3VzL2JsdXIgZXZlbnRzIHJhaXNlZCB3aGVuIGNoYW5naW5nIHRhYnMgaW4gbW9kZXJuIGJyb3dzZXJzLlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgbm90IGFsbCBLTy10YXJnZXRlZCBicm93c2VycyAoRmlyZWZveCAyKSBzdXBwb3J0IGFjdGl2ZUVsZW1lbnQuIEZvciB0aG9zZSBicm93c2VycyxcbiAgICAgICAgICAgIC8vIHByZXZlbnQgYSBsb3NzIG9mIGZvY3VzIHdoZW4gY2hhbmdpbmcgdGFicy93aW5kb3dzIGJ5IHNldHRpbmcgYSBmbGFnIHRoYXQgcHJldmVudHMgaGFzZm9jdXNcbiAgICAgICAgICAgIC8vIGZyb20gY2FsbGluZyAnYmx1cigpJyBvbiB0aGUgZWxlbWVudCB3aGVuIGl0IGxvc2VzIGZvY3VzLlxuICAgICAgICAgICAgLy8gRGlzY3Vzc2lvbiBhdCBodHRwczovL2dpdGh1Yi5jb20vU3RldmVTYW5kZXJzb24va25vY2tvdXQvcHVsbC8zNTJcbiAgICAgICAgICAgIGVsZW1lbnRbaGFzZm9jdXNVcGRhdGluZ1Byb3BlcnR5XSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb3duZXJEb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgICAgICBpZiAoXCJhY3RpdmVFbGVtZW50XCIgaW4gb3duZXJEb2MpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IG93bmVyRG9jLmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElFOSB0aHJvd3MgaWYgeW91IGFjY2VzcyBhY3RpdmVFbGVtZW50IGR1cmluZyBwYWdlIGxvYWQgKHNlZSBpc3N1ZSAjNzAzKVxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBvd25lckRvYy5ib2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpc0ZvY3VzZWQgPSAoYWN0aXZlID09PSBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtb2RlbFZhbHVlID0gdmFsdWVBY2Nlc3NvcigpO1xuICAgICAgICAgICAga28uZXhwcmVzc2lvblJld3JpdGluZy53cml0ZVZhbHVlVG9Qcm9wZXJ0eShtb2RlbFZhbHVlLCBhbGxCaW5kaW5ncywgJ2hhc2ZvY3VzJywgaXNGb2N1c2VkLCB0cnVlKTtcblxuICAgICAgICAgICAgLy9jYWNoZSB0aGUgbGF0ZXN0IHZhbHVlLCBzbyB3ZSBjYW4gYXZvaWQgdW5uZWNlc3NhcmlseSBjYWxsaW5nIGZvY3VzL2JsdXIgaW4gdGhlIHVwZGF0ZSBmdW5jdGlvblxuICAgICAgICAgICAgZWxlbWVudFtoYXNmb2N1c0xhc3RWYWx1ZV0gPSBpc0ZvY3VzZWQ7XG4gICAgICAgICAgICBlbGVtZW50W2hhc2ZvY3VzVXBkYXRpbmdQcm9wZXJ0eV0gPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhhbmRsZUVsZW1lbnRGb2N1c0luID0gaGFuZGxlRWxlbWVudEZvY3VzQ2hhbmdlLmJpbmQobnVsbCwgdHJ1ZSk7XG4gICAgICAgIHZhciBoYW5kbGVFbGVtZW50Rm9jdXNPdXQgPSBoYW5kbGVFbGVtZW50Rm9jdXNDaGFuZ2UuYmluZChudWxsLCBmYWxzZSk7XG5cbiAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgXCJmb2N1c1wiLCBoYW5kbGVFbGVtZW50Rm9jdXNJbik7XG4gICAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsIFwiZm9jdXNpblwiLCBoYW5kbGVFbGVtZW50Rm9jdXNJbik7IC8vIEZvciBJRVxuICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcImJsdXJcIiwgIGhhbmRsZUVsZW1lbnRGb2N1c091dCk7XG4gICAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsIFwiZm9jdXNvdXRcIiwgIGhhbmRsZUVsZW1lbnRGb2N1c091dCk7IC8vIEZvciBJRVxuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gISFrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50W2hhc2ZvY3VzVXBkYXRpbmdQcm9wZXJ0eV0gJiYgZWxlbWVudFtoYXNmb2N1c0xhc3RWYWx1ZV0gIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA/IGVsZW1lbnQuZm9jdXMoKSA6IGVsZW1lbnQuYmx1cigpO1xuXG4gICAgICAgICAgICAvLyBJbiBJRSwgdGhlIGJsdXIgbWV0aG9kIGRvZXNuJ3QgYWx3YXlzIGNhdXNlIHRoZSBlbGVtZW50IHRvIGxvc2UgZm9jdXMgKGZvciBleGFtcGxlLCBpZiB0aGUgd2luZG93IGlzIG5vdCBpbiBmb2N1cykuXG4gICAgICAgICAgICAvLyBTZXR0aW5nIGZvY3VzIHRvIHRoZSBib2R5IGVsZW1lbnQgZG9lcyBzZWVtIHRvIGJlIHJlbGlhYmxlIGluIElFLCBidXQgc2hvdWxkIG9ubHkgYmUgdXNlZCBpZiB3ZSBrbm93IHRoYXQgdGhlIGN1cnJlbnRcbiAgICAgICAgICAgIC8vIGVsZW1lbnQgd2FzIGZvY3VzZWQgYWxyZWFkeS5cbiAgICAgICAgICAgIGlmICghdmFsdWUgJiYgZWxlbWVudFtoYXNmb2N1c0xhc3RWYWx1ZV0pIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGb3IgSUUsIHdoaWNoIGRvZXNuJ3QgcmVsaWFibHkgZmlyZSBcImZvY3VzXCIgb3IgXCJibHVyXCIgZXZlbnRzIHN5bmNocm9ub3VzbHlcbiAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGtvLnV0aWxzLnRyaWdnZXJFdmVudCwgbnVsbCwgW2VsZW1lbnQsIHZhbHVlID8gXCJmb2N1c2luXCIgOiBcImZvY3Vzb3V0XCJdKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5rby5leHByZXNzaW9uUmV3cml0aW5nLnR3b1dheUJpbmRpbmdzWydoYXNmb2N1cyddID0gdHJ1ZTtcblxua28uYmluZGluZ0hhbmRsZXJzWydoYXNGb2N1cyddID0ga28uYmluZGluZ0hhbmRsZXJzWydoYXNmb2N1cyddOyAvLyBNYWtlIFwiaGFzRm9jdXNcIiBhbiBhbGlhc1xua28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5nc1snaGFzRm9jdXMnXSA9IHRydWU7XG5rby5iaW5kaW5nSGFuZGxlcnNbJ2h0bWwnXSA9IHtcbiAgICAnaW5pdCc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBQcmV2ZW50IGJpbmRpbmcgb24gdGhlIGR5bmFtaWNhbGx5LWluamVjdGVkIEhUTUwgKGFzIGRldmVsb3BlcnMgYXJlIHVubGlrZWx5IHRvIGV4cGVjdCB0aGF0LCBhbmQgaXQgaGFzIHNlY3VyaXR5IGltcGxpY2F0aW9ucylcbiAgICAgICAgcmV0dXJuIHsgJ2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzogdHJ1ZSB9O1xuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgIC8vIHNldEh0bWwgd2lsbCB1bndyYXAgdGhlIHZhbHVlIGlmIG5lZWRlZFxuICAgICAgICBrby51dGlscy5zZXRIdG1sKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgfVxufTtcbi8vIE1ha2VzIGEgYmluZGluZyBsaWtlIHdpdGggb3IgaWZcbmZ1bmN0aW9uIG1ha2VXaXRoSWZCaW5kaW5nKGJpbmRpbmdLZXksIGlzV2l0aCwgaXNOb3QsIG1ha2VDb250ZXh0Q2FsbGJhY2spIHtcbiAgICBrby5iaW5kaW5nSGFuZGxlcnNbYmluZGluZ0tleV0gPSB7XG4gICAgICAgICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBkaWREaXNwbGF5T25MYXN0VXBkYXRlLFxuICAgICAgICAgICAgICAgIHNhdmVkTm9kZXM7XG4gICAgICAgICAgICBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmF3VmFsdWUgPSB2YWx1ZUFjY2Vzc29yKCksXG4gICAgICAgICAgICAgICAgICAgIGRhdGFWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocmF3VmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICBzaG91bGREaXNwbGF5ID0gIWlzTm90ICE9PSAhZGF0YVZhbHVlLCAvLyBlcXVpdmFsZW50IHRvIGlzTm90ID8gIWRhdGFWYWx1ZSA6ICEhZGF0YVZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlzRmlyc3RSZW5kZXIgPSAhc2F2ZWROb2RlcyxcbiAgICAgICAgICAgICAgICAgICAgbmVlZHNSZWZyZXNoID0gaXNGaXJzdFJlbmRlciB8fCBpc1dpdGggfHwgKHNob3VsZERpc3BsYXkgIT09IGRpZERpc3BsYXlPbkxhc3RVcGRhdGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5lZWRzUmVmcmVzaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTYXZlIGEgY29weSBvZiB0aGUgaW5uZXIgbm9kZXMgb24gdGhlIGluaXRpYWwgdXBkYXRlLCBidXQgb25seSBpZiB3ZSBoYXZlIGRlcGVuZGVuY2llcy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmlyc3RSZW5kZXIgJiYga28uY29tcHV0ZWRDb250ZXh0LmdldERlcGVuZGVuY2llc0NvdW50KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkTm9kZXMgPSBrby51dGlscy5jbG9uZU5vZGVzKGtvLnZpcnR1YWxFbGVtZW50cy5jaGlsZE5vZGVzKGVsZW1lbnQpLCB0cnVlIC8qIHNob3VsZENsZWFuTm9kZXMgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZERpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNGaXJzdFJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW4oZWxlbWVudCwga28udXRpbHMuY2xvbmVOb2RlcyhzYXZlZE5vZGVzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyhtYWtlQ29udGV4dENhbGxiYWNrID8gbWFrZUNvbnRleHRDYWxsYmFjayhiaW5kaW5nQ29udGV4dCwgcmF3VmFsdWUpIDogYmluZGluZ0NvbnRleHQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAga28udmlydHVhbEVsZW1lbnRzLmVtcHR5Tm9kZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRpZERpc3BsYXlPbkxhc3RVcGRhdGUgPSBzaG91bGREaXNwbGF5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBlbGVtZW50IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgJ2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBrby5leHByZXNzaW9uUmV3cml0aW5nLmJpbmRpbmdSZXdyaXRlVmFsaWRhdG9yc1tiaW5kaW5nS2V5XSA9IGZhbHNlOyAvLyBDYW4ndCByZXdyaXRlIGNvbnRyb2wgZmxvdyBiaW5kaW5nc1xuICAgIGtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbYmluZGluZ0tleV0gPSB0cnVlO1xufVxuXG4vLyBDb25zdHJ1Y3QgdGhlIGFjdHVhbCBiaW5kaW5nIGhhbmRsZXJzXG5tYWtlV2l0aElmQmluZGluZygnaWYnKTtcbm1ha2VXaXRoSWZCaW5kaW5nKCdpZm5vdCcsIGZhbHNlIC8qIGlzV2l0aCAqLywgdHJ1ZSAvKiBpc05vdCAqLyk7XG5tYWtlV2l0aElmQmluZGluZygnd2l0aCcsIHRydWUgLyogaXNXaXRoICovLCBmYWxzZSAvKiBpc05vdCAqLyxcbiAgICBmdW5jdGlvbihiaW5kaW5nQ29udGV4dCwgZGF0YVZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiaW5kaW5nQ29udGV4dC5jcmVhdGVTdGF0aWNDaGlsZENvbnRleHQoZGF0YVZhbHVlKTtcbiAgICB9XG4pO1xudmFyIGNhcHRpb25QbGFjZWhvbGRlciA9IHt9O1xua28uYmluZGluZ0hhbmRsZXJzWydvcHRpb25zJ10gPSB7XG4gICAgJ2luaXQnOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIGlmIChrby51dGlscy50YWdOYW1lTG93ZXIoZWxlbWVudCkgIT09IFwic2VsZWN0XCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvcHRpb25zIGJpbmRpbmcgYXBwbGllcyBvbmx5IHRvIFNFTEVDVCBlbGVtZW50c1wiKTtcblxuICAgICAgICAvLyBSZW1vdmUgYWxsIGV4aXN0aW5nIDxvcHRpb24+cy5cbiAgICAgICAgd2hpbGUgKGVsZW1lbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmUoMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbnN1cmVzIHRoYXQgdGhlIGJpbmRpbmcgcHJvY2Vzc29yIGRvZXNuJ3QgdHJ5IHRvIGJpbmQgdGhlIG9wdGlvbnNcbiAgICAgICAgcmV0dXJuIHsgJ2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzogdHJ1ZSB9O1xuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xuICAgICAgICBmdW5jdGlvbiBzZWxlY3RlZE9wdGlvbnMoKSB7XG4gICAgICAgICAgICByZXR1cm4ga28udXRpbHMuYXJyYXlGaWx0ZXIoZWxlbWVudC5vcHRpb25zLCBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS5zZWxlY3RlZDsgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VsZWN0V2FzUHJldmlvdXNseUVtcHR5ID0gZWxlbWVudC5sZW5ndGggPT0gMCxcbiAgICAgICAgICAgIG11bHRpcGxlID0gZWxlbWVudC5tdWx0aXBsZSxcbiAgICAgICAgICAgIHByZXZpb3VzU2Nyb2xsVG9wID0gKCFzZWxlY3RXYXNQcmV2aW91c2x5RW1wdHkgJiYgbXVsdGlwbGUpID8gZWxlbWVudC5zY3JvbGxUb3AgOiBudWxsLFxuICAgICAgICAgICAgdW53cmFwcGVkQXJyYXkgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSksXG4gICAgICAgICAgICB2YWx1ZUFsbG93VW5zZXQgPSBhbGxCaW5kaW5ncy5nZXQoJ3ZhbHVlQWxsb3dVbnNldCcpICYmIGFsbEJpbmRpbmdzWydoYXMnXSgndmFsdWUnKSxcbiAgICAgICAgICAgIGluY2x1ZGVEZXN0cm95ZWQgPSBhbGxCaW5kaW5ncy5nZXQoJ29wdGlvbnNJbmNsdWRlRGVzdHJveWVkJyksXG4gICAgICAgICAgICBhcnJheVRvRG9tTm9kZUNoaWxkcmVuT3B0aW9ucyA9IHt9LFxuICAgICAgICAgICAgY2FwdGlvblZhbHVlLFxuICAgICAgICAgICAgZmlsdGVyZWRBcnJheSxcbiAgICAgICAgICAgIHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMgPSBbXTtcblxuICAgICAgICBpZiAoIXZhbHVlQWxsb3dVbnNldCkge1xuICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNTZWxlY3RlZFZhbHVlcyA9IGtvLnV0aWxzLmFycmF5TWFwKHNlbGVjdGVkT3B0aW9ucygpLCBrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuc2VsZWN0ZWRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNTZWxlY3RlZFZhbHVlcy5wdXNoKGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKGVsZW1lbnQub3B0aW9uc1tlbGVtZW50LnNlbGVjdGVkSW5kZXhdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW53cmFwcGVkQXJyYXkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdW53cmFwcGVkQXJyYXkubGVuZ3RoID09IFwidW5kZWZpbmVkXCIpIC8vIENvZXJjZSBzaW5nbGUgdmFsdWUgaW50byBhcnJheVxuICAgICAgICAgICAgICAgIHVud3JhcHBlZEFycmF5ID0gW3Vud3JhcHBlZEFycmF5XTtcblxuICAgICAgICAgICAgLy8gRmlsdGVyIG91dCBhbnkgZW50cmllcyBtYXJrZWQgYXMgZGVzdHJveWVkXG4gICAgICAgICAgICBmaWx0ZXJlZEFycmF5ID0ga28udXRpbHMuYXJyYXlGaWx0ZXIodW53cmFwcGVkQXJyYXksIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZURlc3Ryb3llZCB8fCBpdGVtID09PSB1bmRlZmluZWQgfHwgaXRlbSA9PT0gbnVsbCB8fCAha28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShpdGVtWydfZGVzdHJveSddKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBJZiBjYXB0aW9uIGlzIGluY2x1ZGVkLCBhZGQgaXQgdG8gdGhlIGFycmF5XG4gICAgICAgICAgICBpZiAoYWxsQmluZGluZ3NbJ2hhcyddKCdvcHRpb25zQ2FwdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgY2FwdGlvblZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShhbGxCaW5kaW5ncy5nZXQoJ29wdGlvbnNDYXB0aW9uJykpO1xuICAgICAgICAgICAgICAgIC8vIElmIGNhcHRpb24gdmFsdWUgaXMgbnVsbCBvciB1bmRlZmluZWQsIGRvbid0IHNob3cgYSBjYXB0aW9uXG4gICAgICAgICAgICAgICAgaWYgKGNhcHRpb25WYWx1ZSAhPT0gbnVsbCAmJiBjYXB0aW9uVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEFycmF5LnVuc2hpZnQoY2FwdGlvblBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiBhIGZhbHN5IHZhbHVlIGlzIHByb3ZpZGVkIChlLmcuIG51bGwpLCB3ZSdsbCBzaW1wbHkgZW1wdHkgdGhlIHNlbGVjdCBlbGVtZW50XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhcHBseVRvT2JqZWN0KG9iamVjdCwgcHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBwcmVkaWNhdGVUeXBlID0gdHlwZW9mIHByZWRpY2F0ZTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGVUeXBlID09IFwiZnVuY3Rpb25cIikgICAgLy8gR2l2ZW4gYSBmdW5jdGlvbjsgcnVuIGl0IGFnYWluc3QgdGhlIGRhdGEgdmFsdWVcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZGljYXRlKG9iamVjdCk7XG4gICAgICAgICAgICBlbHNlIGlmIChwcmVkaWNhdGVUeXBlID09IFwic3RyaW5nXCIpIC8vIEdpdmVuIGEgc3RyaW5nOyB0cmVhdCBpdCBhcyBhIHByb3BlcnR5IG5hbWUgb24gdGhlIGRhdGEgdmFsdWVcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0W3ByZWRpY2F0ZV07XG4gICAgICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHaXZlbiBubyBvcHRpb25zVGV4dCBhcmc7IHVzZSB0aGUgZGF0YSB2YWx1ZSBpdHNlbGZcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgY2FuIHJ1biBhdCB0d28gZGlmZmVyZW50IHRpbWVzOlxuICAgICAgICAvLyBUaGUgZmlyc3QgaXMgd2hlbiB0aGUgd2hvbGUgYXJyYXkgaXMgYmVpbmcgdXBkYXRlZCBkaXJlY3RseSBmcm9tIHRoaXMgYmluZGluZyBoYW5kbGVyLlxuICAgICAgICAvLyBUaGUgc2Vjb25kIGlzIHdoZW4gYW4gb2JzZXJ2YWJsZSB2YWx1ZSBmb3IgYSBzcGVjaWZpYyBhcnJheSBlbnRyeSBpcyB1cGRhdGVkLlxuICAgICAgICAvLyBvbGRPcHRpb25zIHdpbGwgYmUgZW1wdHkgaW4gdGhlIGZpcnN0IGNhc2UsIGJ1dCB3aWxsIGJlIGZpbGxlZCB3aXRoIHRoZSBwcmV2aW91c2x5IGdlbmVyYXRlZCBvcHRpb24gaW4gdGhlIHNlY29uZC5cbiAgICAgICAgdmFyIGl0ZW1VcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgZnVuY3Rpb24gb3B0aW9uRm9yQXJyYXlJdGVtKGFycmF5RW50cnksIGluZGV4LCBvbGRPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob2xkT3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBwcmV2aW91c1NlbGVjdGVkVmFsdWVzID0gIXZhbHVlQWxsb3dVbnNldCAmJiBvbGRPcHRpb25zWzBdLnNlbGVjdGVkID8gWyBrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShvbGRPcHRpb25zWzBdKSBdIDogW107XG4gICAgICAgICAgICAgICAgaXRlbVVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgICAgICBpZiAoYXJyYXlFbnRyeSA9PT0gY2FwdGlvblBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAga28udXRpbHMuc2V0VGV4dENvbnRlbnQob3B0aW9uLCBhbGxCaW5kaW5ncy5nZXQoJ29wdGlvbnNDYXB0aW9uJykpO1xuICAgICAgICAgICAgICAgIGtvLnNlbGVjdEV4dGVuc2lvbnMud3JpdGVWYWx1ZShvcHRpb24sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5IGEgdmFsdWUgdG8gdGhlIG9wdGlvbiBlbGVtZW50XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvblZhbHVlID0gYXBwbHlUb09iamVjdChhcnJheUVudHJ5LCBhbGxCaW5kaW5ncy5nZXQoJ29wdGlvbnNWYWx1ZScpLCBhcnJheUVudHJ5KTtcbiAgICAgICAgICAgICAgICBrby5zZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUob3B0aW9uLCBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG9wdGlvblZhbHVlKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBcHBseSBzb21lIHRleHQgdG8gdGhlIG9wdGlvbiBlbGVtZW50XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvblRleHQgPSBhcHBseVRvT2JqZWN0KGFycmF5RW50cnksIGFsbEJpbmRpbmdzLmdldCgnb3B0aW9uc1RleHQnKSwgb3B0aW9uVmFsdWUpO1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLnNldFRleHRDb250ZW50KG9wdGlvbiwgb3B0aW9uVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW29wdGlvbl07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCeSB1c2luZyBhIGJlZm9yZVJlbW92ZSBjYWxsYmFjaywgd2UgZGVsYXkgdGhlIHJlbW92YWwgdW50aWwgYWZ0ZXIgbmV3IGl0ZW1zIGFyZSBhZGRlZC4gVGhpcyBmaXhlcyBhIHNlbGVjdGlvblxuICAgICAgICAvLyBwcm9ibGVtIGluIElFPD04IGFuZCBGaXJlZm94LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2tub2Nrb3V0L2tub2Nrb3V0L2lzc3Vlcy8xMjA4XG4gICAgICAgIGFycmF5VG9Eb21Ob2RlQ2hpbGRyZW5PcHRpb25zWydiZWZvcmVSZW1vdmUnXSA9XG4gICAgICAgICAgICBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChvcHRpb24pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBzZXRTZWxlY3Rpb25DYWxsYmFjayhhcnJheUVudHJ5LCBuZXdPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoaXRlbVVwZGF0ZSAmJiB2YWx1ZUFsbG93VW5zZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgbW9kZWwgdmFsdWUgaXMgYXV0aG9yaXRhdGl2ZSwgc28gbWFrZSBzdXJlIGl0cyB2YWx1ZSBpcyB0aGUgb25lIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gbmVlZCB0byB1c2UgZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUgc2luY2Ugc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZyBkb2VzIHNvIGFscmVhZHkuXG4gICAgICAgICAgICAgICAga28uc2VsZWN0RXh0ZW5zaW9ucy53cml0ZVZhbHVlKGVsZW1lbnQsIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYWxsQmluZGluZ3MuZ2V0KCd2YWx1ZScpKSwgdHJ1ZSAvKiBhbGxvd1Vuc2V0ICovKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNTZWxlY3RlZFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAvLyBJRTYgZG9lc24ndCBsaWtlIHVzIHRvIGFzc2lnbiBzZWxlY3Rpb24gdG8gT1BUSU9OIG5vZGVzIGJlZm9yZSB0aGV5J3JlIGFkZGVkIHRvIHRoZSBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICAvLyBUaGF0J3Mgd2h5IHdlIGZpcnN0IGFkZGVkIHRoZW0gd2l0aG91dCBzZWxlY3Rpb24uIE5vdyBpdCdzIHRpbWUgdG8gc2V0IHRoZSBzZWxlY3Rpb24uXG4gICAgICAgICAgICAgICAgdmFyIGlzU2VsZWN0ZWQgPSBrby51dGlscy5hcnJheUluZGV4T2YocHJldmlvdXNTZWxlY3RlZFZhbHVlcywga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUobmV3T3B0aW9uc1swXSkpID49IDA7XG4gICAgICAgICAgICAgICAga28udXRpbHMuc2V0T3B0aW9uTm9kZVNlbGVjdGlvblN0YXRlKG5ld09wdGlvbnNbMF0sIGlzU2VsZWN0ZWQpO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBvcHRpb24gd2FzIGNoYW5nZWQgZnJvbSBiZWluZyBzZWxlY3RlZCBkdXJpbmcgYSBzaW5nbGUtaXRlbSB1cGRhdGUsIG5vdGlmeSB0aGUgY2hhbmdlXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1VcGRhdGUgJiYgIWlzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAga28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUoa28udXRpbHMudHJpZ2dlckV2ZW50LCBudWxsLCBbZWxlbWVudCwgXCJjaGFuZ2VcIl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYWxsYmFjayA9IHNldFNlbGVjdGlvbkNhbGxiYWNrO1xuICAgICAgICBpZiAoYWxsQmluZGluZ3NbJ2hhcyddKCdvcHRpb25zQWZ0ZXJSZW5kZXInKSAmJiB0eXBlb2YgYWxsQmluZGluZ3MuZ2V0KCdvcHRpb25zQWZ0ZXJSZW5kZXInKSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oYXJyYXlFbnRyeSwgbmV3T3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHNldFNlbGVjdGlvbkNhbGxiYWNrKGFycmF5RW50cnksIG5ld09wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGFsbEJpbmRpbmdzLmdldCgnb3B0aW9uc0FmdGVyUmVuZGVyJyksIG51bGwsIFtuZXdPcHRpb25zWzBdLCBhcnJheUVudHJ5ICE9PSBjYXB0aW9uUGxhY2Vob2xkZXIgPyBhcnJheUVudHJ5IDogdW5kZWZpbmVkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrby51dGlscy5zZXREb21Ob2RlQ2hpbGRyZW5Gcm9tQXJyYXlNYXBwaW5nKGVsZW1lbnQsIGZpbHRlcmVkQXJyYXksIG9wdGlvbkZvckFycmF5SXRlbSwgYXJyYXlUb0RvbU5vZGVDaGlsZHJlbk9wdGlvbnMsIGNhbGxiYWNrKTtcblxuICAgICAgICBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmlnbm9yZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVBbGxvd1Vuc2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIG1vZGVsIHZhbHVlIGlzIGF1dGhvcml0YXRpdmUsIHNvIG1ha2Ugc3VyZSBpdHMgdmFsdWUgaXMgdGhlIG9uZSBzZWxlY3RlZFxuICAgICAgICAgICAgICAgIGtvLnNlbGVjdEV4dGVuc2lvbnMud3JpdGVWYWx1ZShlbGVtZW50LCBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGFsbEJpbmRpbmdzLmdldCgndmFsdWUnKSksIHRydWUgLyogYWxsb3dVbnNldCAqLyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSBpZiB0aGUgc2VsZWN0aW9uIGhhcyBjaGFuZ2VkIGFzIGEgcmVzdWx0IG9mIHVwZGF0aW5nIHRoZSBvcHRpb25zIGxpc3RcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9uQ2hhbmdlZDtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGEgbXVsdGlwbGUtc2VsZWN0IGJveCwgY29tcGFyZSB0aGUgbmV3IHNlbGVjdGlvbiBjb3VudCB0byB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgICAgICAgICAgICAgIC8vIEJ1dCBpZiBub3RoaW5nIHdhcyBzZWxlY3RlZCBiZWZvcmUsIHRoZSBzZWxlY3Rpb24gY2FuJ3QgaGF2ZSBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbkNoYW5nZWQgPSBwcmV2aW91c1NlbGVjdGVkVmFsdWVzLmxlbmd0aCAmJiBzZWxlY3RlZE9wdGlvbnMoKS5sZW5ndGggPCBwcmV2aW91c1NlbGVjdGVkVmFsdWVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgYSBzaW5nbGUtc2VsZWN0IGJveCwgY29tcGFyZSB0aGUgY3VycmVudCB2YWx1ZSB0byB0aGUgcHJldmlvdXMgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgLy8gQnV0IGlmIG5vdGhpbmcgd2FzIHNlbGVjdGVkIGJlZm9yZSBvciBub3RoaW5nIGlzIHNlbGVjdGVkIG5vdywganVzdCBsb29rIGZvciBhIGNoYW5nZSBpbiBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uQ2hhbmdlZCA9IChwcmV2aW91c1NlbGVjdGVkVmFsdWVzLmxlbmd0aCAmJiBlbGVtZW50LnNlbGVjdGVkSW5kZXggPj0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKGVsZW1lbnQub3B0aW9uc1tlbGVtZW50LnNlbGVjdGVkSW5kZXhdKSAhPT0gcHJldmlvdXNTZWxlY3RlZFZhbHVlc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMubGVuZ3RoIHx8IGVsZW1lbnQuc2VsZWN0ZWRJbmRleCA+PSAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgY29uc2lzdGVuY3kgYmV0d2VlbiBtb2RlbCB2YWx1ZSBhbmQgc2VsZWN0ZWQgb3B0aW9uLlxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBkcm9wZG93biB3YXMgY2hhbmdlZCBzbyB0aGF0IHNlbGVjdGlvbiBpcyBubyBsb25nZXIgdGhlIHNhbWUsXG4gICAgICAgICAgICAgICAgLy8gbm90aWZ5IHRoZSB2YWx1ZSBvciBzZWxlY3RlZE9wdGlvbnMgYmluZGluZy5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICBrby51dGlscy50cmlnZ2VyRXZlbnQoZWxlbWVudCwgXCJjaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBJRSBidWdcbiAgICAgICAga28udXRpbHMuZW5zdXJlU2VsZWN0RWxlbWVudElzUmVuZGVyZWRDb3JyZWN0bHkoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHByZXZpb3VzU2Nyb2xsVG9wICYmIE1hdGguYWJzKHByZXZpb3VzU2Nyb2xsVG9wIC0gZWxlbWVudC5zY3JvbGxUb3ApID4gMjApXG4gICAgICAgICAgICBlbGVtZW50LnNjcm9sbFRvcCA9IHByZXZpb3VzU2Nyb2xsVG9wO1xuICAgIH1cbn07XG5rby5iaW5kaW5nSGFuZGxlcnNbJ29wdGlvbnMnXS5vcHRpb25WYWx1ZURvbURhdGFLZXkgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKTtcbmtvLmJpbmRpbmdIYW5kbGVyc1snc2VsZWN0ZWRPcHRpb25zJ10gPSB7XG4gICAgJ2FmdGVyJzogWydvcHRpb25zJywgJ2ZvcmVhY2gnXSxcbiAgICAnaW5pdCc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xuICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZUFjY2Vzc29yKCksIHZhbHVlVG9Xcml0ZSA9IFtdO1xuICAgICAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJvcHRpb25cIiksIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5zZWxlY3RlZClcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUb1dyaXRlLnB1c2goa28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUobm9kZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBrby5leHByZXNzaW9uUmV3cml0aW5nLndyaXRlVmFsdWVUb1Byb3BlcnR5KHZhbHVlLCBhbGxCaW5kaW5ncywgJ3NlbGVjdGVkT3B0aW9ucycsIHZhbHVlVG9Xcml0ZSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgIGlmIChrby51dGlscy50YWdOYW1lTG93ZXIoZWxlbWVudCkgIT0gXCJzZWxlY3RcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInZhbHVlcyBiaW5kaW5nIGFwcGxpZXMgb25seSB0byBTRUxFQ1QgZWxlbWVudHNcIik7XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpLFxuICAgICAgICAgICAgcHJldmlvdXNTY3JvbGxUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgJiYgdHlwZW9mIG5ld1ZhbHVlLmxlbmd0aCA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBrby51dGlscy5hcnJheUZvckVhY2goZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIm9wdGlvblwiKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBpc1NlbGVjdGVkID0ga28udXRpbHMuYXJyYXlJbmRleE9mKG5ld1ZhbHVlLCBrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShub2RlKSkgPj0gMDtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5zZWxlY3RlZCAhPSBpc1NlbGVjdGVkKSB7ICAgICAgLy8gVGhpcyBjaGVjayBwcmV2ZW50cyBmbGFzaGluZyBvZiB0aGUgc2VsZWN0IGVsZW1lbnQgaW4gSUVcbiAgICAgICAgICAgICAgICAgICAga28udXRpbHMuc2V0T3B0aW9uTm9kZVNlbGVjdGlvblN0YXRlKG5vZGUsIGlzU2VsZWN0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSBwcmV2aW91c1Njcm9sbFRvcDtcbiAgICB9XG59O1xua28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5nc1snc2VsZWN0ZWRPcHRpb25zJ10gPSB0cnVlO1xua28uYmluZGluZ0hhbmRsZXJzWydzdHlsZSddID0ge1xuICAgICd1cGRhdGUnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgICAgICB2YXIgdmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSB8fCB7fSk7XG4gICAgICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSkge1xuICAgICAgICAgICAgc3R5bGVWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoc3R5bGVWYWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChzdHlsZVZhbHVlID09PSBudWxsIHx8IHN0eWxlVmFsdWUgPT09IHVuZGVmaW5lZCB8fCBzdHlsZVZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIC8vIEVtcHR5IHN0cmluZyByZW1vdmVzIHRoZSB2YWx1ZSwgd2hlcmVhcyBudWxsL3VuZGVmaW5lZCBoYXZlIG5vIGVmZmVjdFxuICAgICAgICAgICAgICAgIHN0eWxlVmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xua28uYmluZGluZ0hhbmRsZXJzWydzdWJtaXQnXSA9IHtcbiAgICAnaW5pdCc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncywgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlQWNjZXNzb3IoKSAhPSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgdmFsdWUgZm9yIGEgc3VibWl0IGJpbmRpbmcgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcInN1Ym1pdFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVyUmV0dXJuVmFsdWU7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZUFjY2Vzc29yKCk7XG4gICAgICAgICAgICB0cnkgeyBoYW5kbGVyUmV0dXJuVmFsdWUgPSB2YWx1ZS5jYWxsKGJpbmRpbmdDb250ZXh0WyckZGF0YSddLCBlbGVtZW50KTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJSZXR1cm5WYWx1ZSAhPT0gdHJ1ZSkgeyAvLyBOb3JtYWxseSB3ZSB3YW50IHRvIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uIERldmVsb3BlciBjYW4gb3ZlcnJpZGUgdGhpcyBiZSBleHBsaWNpdGx5IHJldHVybmluZyB0cnVlLlxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQucHJldmVudERlZmF1bHQpXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufTtcbmtvLmJpbmRpbmdIYW5kbGVyc1sndGV4dCddID0ge1xuICAgICdpbml0JzogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFByZXZlbnQgYmluZGluZyBvbiB0aGUgZHluYW1pY2FsbHktaW5qZWN0ZWQgdGV4dCBub2RlIChhcyBkZXZlbG9wZXJzIGFyZSB1bmxpa2VseSB0byBleHBlY3QgdGhhdCwgYW5kIGl0IGhhcyBzZWN1cml0eSBpbXBsaWNhdGlvbnMpLlxuICAgICAgICAvLyBJdCBzaG91bGQgYWxzbyBtYWtlIHRoaW5ncyBmYXN0ZXIsIGFzIHdlIG5vIGxvbmdlciBoYXZlIHRvIGNvbnNpZGVyIHdoZXRoZXIgdGhlIHRleHQgbm9kZSBtaWdodCBiZSBiaW5kYWJsZS5cbiAgICAgICAgcmV0dXJuIHsgJ2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzogdHJ1ZSB9O1xuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgIGtvLnV0aWxzLnNldFRleHRDb250ZW50KGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgfVxufTtcbmtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbJ3RleHQnXSA9IHRydWU7XG4oZnVuY3Rpb24gKCkge1xuXG5pZiAod2luZG93ICYmIHdpbmRvdy5uYXZpZ2F0b3IpIHtcbiAgICB2YXIgcGFyc2VWZXJzaW9uID0gZnVuY3Rpb24gKG1hdGNoZXMpIHtcbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG1hdGNoZXNbMV0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIERldGVjdCB2YXJpb3VzIGJyb3dzZXIgdmVyc2lvbnMgYmVjYXVzZSBzb21lIG9sZCB2ZXJzaW9ucyBkb24ndCBmdWxseSBzdXBwb3J0IHRoZSAnaW5wdXQnIGV2ZW50XG4gICAgdmFyIG9wZXJhVmVyc2lvbiA9IHdpbmRvdy5vcGVyYSAmJiB3aW5kb3cub3BlcmEudmVyc2lvbiAmJiBwYXJzZUludCh3aW5kb3cub3BlcmEudmVyc2lvbigpKSxcbiAgICAgICAgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIHNhZmFyaVZlcnNpb24gPSBwYXJzZVZlcnNpb24odXNlckFnZW50Lm1hdGNoKC9eKD86KD8hY2hyb21lKS4pKnZlcnNpb25cXC8oW14gXSopIHNhZmFyaS9pKSksXG4gICAgICAgIGZpcmVmb3hWZXJzaW9uID0gcGFyc2VWZXJzaW9uKHVzZXJBZ2VudC5tYXRjaCgvRmlyZWZveFxcLyhbXiBdKikvKSk7XG59XG5cbi8vIElFIDggYW5kIDkgaGF2ZSBidWdzIHRoYXQgcHJldmVudCB0aGUgbm9ybWFsIGV2ZW50cyBmcm9tIGZpcmluZyB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuLy8gQnV0IGl0IGRvZXMgZmlyZSB0aGUgJ3NlbGVjdGlvbmNoYW5nZScgZXZlbnQgb24gbWFueSBvZiB0aG9zZSwgcHJlc3VtYWJseSBiZWNhdXNlIHRoZVxuLy8gY3Vyc29yIGlzIG1vdmluZyBhbmQgdGhhdCBjb3VudHMgYXMgdGhlIHNlbGVjdGlvbiBjaGFuZ2luZy4gVGhlICdzZWxlY3Rpb25jaGFuZ2UnIGV2ZW50IGlzXG4vLyBmaXJlZCBhdCB0aGUgZG9jdW1lbnQgbGV2ZWwgb25seSBhbmQgZG9lc24ndCBkaXJlY3RseSBpbmRpY2F0ZSB3aGljaCBlbGVtZW50IGNoYW5nZWQuIFdlXG4vLyBzZXQgdXAganVzdCBvbmUgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGRvY3VtZW50IGFuZCB1c2UgJ2FjdGl2ZUVsZW1lbnQnIHRvIGRldGVybWluZSB3aGljaFxuLy8gZWxlbWVudCB3YXMgY2hhbmdlZC5cbmlmIChrby51dGlscy5pZVZlcnNpb24gPCAxMCkge1xuICAgIHZhciBzZWxlY3Rpb25DaGFuZ2VSZWdpc3RlcmVkTmFtZSA9IGtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpLFxuICAgICAgICBzZWxlY3Rpb25DaGFuZ2VIYW5kbGVyTmFtZSA9IGtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpO1xuICAgIHZhciBzZWxlY3Rpb25DaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuYWN0aXZlRWxlbWVudCxcbiAgICAgICAgICAgIGhhbmRsZXIgPSB0YXJnZXQgJiYga28udXRpbHMuZG9tRGF0YS5nZXQodGFyZ2V0LCBzZWxlY3Rpb25DaGFuZ2VIYW5kbGVyTmFtZSk7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICBoYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlZ2lzdGVyRm9yU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgaGFuZGxlcikge1xuICAgICAgICB2YXIgb3duZXJEb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIGlmICgha28udXRpbHMuZG9tRGF0YS5nZXQob3duZXJEb2MsIHNlbGVjdGlvbkNoYW5nZVJlZ2lzdGVyZWROYW1lKSkge1xuICAgICAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQob3duZXJEb2MsIHNlbGVjdGlvbkNoYW5nZVJlZ2lzdGVyZWROYW1lLCB0cnVlKTtcbiAgICAgICAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKG93bmVyRG9jLCAnc2VsZWN0aW9uY2hhbmdlJywgc2VsZWN0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCwgc2VsZWN0aW9uQ2hhbmdlSGFuZGxlck5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG59XG5cbmtvLmJpbmRpbmdIYW5kbGVyc1sndGV4dElucHV0J10gPSB7XG4gICAgJ2luaXQnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MpIHtcblxuICAgICAgICB2YXIgcHJldmlvdXNFbGVtZW50VmFsdWUgPSBlbGVtZW50LnZhbHVlLFxuICAgICAgICAgICAgdGltZW91dEhhbmRsZSxcbiAgICAgICAgICAgIGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50O1xuXG4gICAgICAgIHZhciB1cGRhdGVNb2RlbCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpO1xuICAgICAgICAgICAgZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQgPSB0aW1lb3V0SGFuZGxlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB2YXIgZWxlbWVudFZhbHVlID0gZWxlbWVudC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnRWYWx1ZSAhPT0gZWxlbWVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJvdmlkZSBhIHdheSBmb3IgdGVzdHMgdG8ga25vdyBleGFjdGx5IHdoaWNoIGV2ZW50IHdhcyBwcm9jZXNzZWRcbiAgICAgICAgICAgICAgICBpZiAoREVCVUcgJiYgZXZlbnQpIGVsZW1lbnRbJ19rb190ZXh0SW5wdXRQcm9jZXNzZWRFdmVudCddID0gZXZlbnQudHlwZTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRWYWx1ZSA9IGVsZW1lbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICBrby5leHByZXNzaW9uUmV3cml0aW5nLndyaXRlVmFsdWVUb1Byb3BlcnR5KHZhbHVlQWNjZXNzb3IoKSwgYWxsQmluZGluZ3MsICd0ZXh0SW5wdXQnLCBlbGVtZW50VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkZWZlclVwZGF0ZU1vZGVsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoIXRpbWVvdXRIYW5kbGUpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQgdmFyaWFibGUgaXMgc2V0ICpvbmx5KiBkdXJpbmcgdGhlIGJyaWVmIGdhcCBiZXR3ZWVuIGFuXG4gICAgICAgICAgICAgICAgLy8gZXZlbnQgZmlyaW5nIGFuZCB0aGUgdXBkYXRlTW9kZWwgZnVuY3Rpb24gcnVubmluZy4gVGhpcyBhbGxvd3MgdXMgdG8gaWdub3JlIG1vZGVsXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlcyB0aGF0IGFyZSBmcm9tIHRoZSBwcmV2aW91cyBzdGF0ZSBvZiB0aGUgZWxlbWVudCwgdXN1YWxseSBkdWUgdG8gdGVjaG5pcXVlc1xuICAgICAgICAgICAgICAgIC8vIHN1Y2ggYXMgcmF0ZUxpbWl0LiBTdWNoIHVwZGF0ZXMsIGlmIG5vdCBpZ25vcmVkLCBjYW4gY2F1c2Uga2V5c3Ryb2tlcyB0byBiZSBsb3N0LlxuICAgICAgICAgICAgICAgIGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50ID0gZWxlbWVudC52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IERFQlVHID8gdXBkYXRlTW9kZWwuYmluZChlbGVtZW50LCB7dHlwZTogZXZlbnQudHlwZX0pIDogdXBkYXRlTW9kZWw7XG4gICAgICAgICAgICAgICAgdGltZW91dEhhbmRsZSA9IGtvLnV0aWxzLnNldFRpbWVvdXQoaGFuZGxlciwgNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSUU5IHdpbGwgbWVzcyB1cCB0aGUgRE9NIGlmIHlvdSBoYW5kbGUgZXZlbnRzIHN5bmNocm9ub3VzbHkgd2hpY2ggcmVzdWx0cyBpbiBET00gY2hhbmdlcyAoc3VjaCBhcyBvdGhlciBiaW5kaW5ncyk7XG4gICAgICAgIC8vIHNvIHdlJ2xsIG1ha2Ugc3VyZSBhbGwgdXBkYXRlcyBhcmUgYXN5bmNocm9ub3VzXG4gICAgICAgIHZhciBpZVVwZGF0ZU1vZGVsID0ga28udXRpbHMuaWVWZXJzaW9uID09IDkgPyBkZWZlclVwZGF0ZU1vZGVsIDogdXBkYXRlTW9kZWw7XG5cbiAgICAgICAgdmFyIHVwZGF0ZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbW9kZWxWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcblxuICAgICAgICAgICAgaWYgKG1vZGVsVmFsdWUgPT09IG51bGwgfHwgbW9kZWxWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbW9kZWxWYWx1ZSA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBtb2RlbFZhbHVlID09PSBlbGVtZW50VmFsdWVCZWZvcmVFdmVudCkge1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLnNldFRpbWVvdXQodXBkYXRlVmlldywgNCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGVsZW1lbnQgb25seSBpZiB0aGUgZWxlbWVudCBhbmQgbW9kZWwgYXJlIGRpZmZlcmVudC4gT24gc29tZSBicm93c2VycywgdXBkYXRpbmcgdGhlIHZhbHVlXG4gICAgICAgICAgICAvLyB3aWxsIG1vdmUgdGhlIGN1cnNvciB0byB0aGUgZW5kIG9mIHRoZSBpbnB1dCwgd2hpY2ggd291bGQgYmUgYmFkIHdoaWxlIHRoZSB1c2VyIGlzIHR5cGluZy5cbiAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlICE9PSBtb2RlbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50VmFsdWUgPSBtb2RlbFZhbHVlOyAgLy8gTWFrZSBzdXJlIHdlIGlnbm9yZSBldmVudHMgKHByb3BlcnR5Y2hhbmdlKSB0aGF0IHJlc3VsdCBmcm9tIHVwZGF0aW5nIHRoZSB2YWx1ZVxuICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSBtb2RlbFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvbkV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudCwgaGFuZGxlcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKERFQlVHICYmIGtvLmJpbmRpbmdIYW5kbGVyc1sndGV4dElucHV0J11bJ19mb3JjZVVwZGF0ZU9uJ10pIHtcbiAgICAgICAgICAgIC8vIFByb3ZpZGUgYSB3YXkgZm9yIHRlc3RzIHRvIHNwZWNpZnkgZXhhY3RseSB3aGljaCBldmVudHMgYXJlIGJvdW5kXG4gICAgICAgICAgICBrby51dGlscy5hcnJheUZvckVhY2goa28uYmluZGluZ0hhbmRsZXJzWyd0ZXh0SW5wdXQnXVsnX2ZvcmNlVXBkYXRlT24nXSwgZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZS5zbGljZSgwLDUpID09ICdhZnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FdmVudChldmVudE5hbWUuc2xpY2UoNSksIGRlZmVyVXBkYXRlTW9kZWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXZlbnQoZXZlbnROYW1lLCB1cGRhdGVNb2RlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoa28udXRpbHMuaWVWZXJzaW9uIDwgMTApIHtcbiAgICAgICAgICAgICAgICAvLyBJbnRlcm5ldCBFeHBsb3JlciA8PSA4IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgJ2lucHV0JyBldmVudCwgYnV0IGRvZXMgaW5jbHVkZSAncHJvcGVydHljaGFuZ2UnIHRoYXQgZmlyZXMgd2hlbmV2ZXJcbiAgICAgICAgICAgICAgICAvLyBhbnkgcHJvcGVydHkgb2YgYW4gZWxlbWVudCBjaGFuZ2VzLiBVbmxpa2UgJ2lucHV0JywgaXQgYWxzbyBmaXJlcyBpZiBhIHByb3BlcnR5IGlzIGNoYW5nZWQgZnJvbSBKYXZhU2NyaXB0IGNvZGUsXG4gICAgICAgICAgICAgICAgLy8gYnV0IHRoYXQncyBhbiBhY2NlcHRhYmxlIGNvbXByb21pc2UgZm9yIHRoaXMgYmluZGluZy4gSUUgOSBkb2VzIHN1cHBvcnQgJ2lucHV0JywgYnV0IHNpbmNlIGl0IGRvZXNuJ3QgZmlyZSBpdFxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdXNpbmcgYXV0b2NvbXBsZXRlLCB3ZSdsbCB1c2UgJ3Byb3BlcnR5Y2hhbmdlJyBmb3IgaXQgYWxzby5cbiAgICAgICAgICAgICAgICBvbkV2ZW50KCdwcm9wZXJ0eWNoYW5nZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5wcm9wZXJ0eU5hbWUgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGllVXBkYXRlTW9kZWwoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoa28udXRpbHMuaWVWZXJzaW9uID09IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgOCBoYXMgYSBidWcgd2hlcmUgaXQgZmFpbHMgdG8gZmlyZSAncHJvcGVydHljaGFuZ2UnIG9uIHRoZSBmaXJzdCB1cGRhdGUgZm9sbG93aW5nIGEgdmFsdWUgY2hhbmdlIGZyb21cbiAgICAgICAgICAgICAgICAgICAgLy8gSmF2YVNjcmlwdCBjb2RlLiBJdCBhbHNvIGRvZXNuJ3QgZmlyZSBpZiB5b3UgY2xlYXIgdGhlIGVudGlyZSB2YWx1ZS4gVG8gZml4IHRoaXMsIHdlIGJpbmQgdG8gdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMgdG9vLlxuICAgICAgICAgICAgICAgICAgICBvbkV2ZW50KCdrZXl1cCcsIHVwZGF0ZU1vZGVsKTsgICAgICAvLyBBIHNpbmdsZSBrZXlzdG9rZVxuICAgICAgICAgICAgICAgICAgICBvbkV2ZW50KCdrZXlkb3duJywgdXBkYXRlTW9kZWwpOyAgICAvLyBUaGUgZmlyc3QgY2hhcmFjdGVyIHdoZW4gYSBrZXkgaXMgaGVsZCBkb3duXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrby51dGlscy5pZVZlcnNpb24gPj0gOCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbnRlcm5ldCBFeHBsb3JlciA5IGRvZXNuJ3QgZmlyZSB0aGUgJ2lucHV0JyBldmVudCB3aGVuIGRlbGV0aW5nIHRleHQsIGluY2x1ZGluZyB1c2luZ1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYmFja3NwYWNlLCBkZWxldGUsIG9yIGN0cmwteCBrZXlzLCBjbGlja2luZyB0aGUgJ3gnIHRvIGNsZWFyIHRoZSBpbnB1dCwgZHJhZ2dpbmcgdGV4dFxuICAgICAgICAgICAgICAgICAgICAvLyBvdXQgb2YgdGhlIGZpZWxkLCBhbmQgY3V0dGluZyBvciBkZWxldGluZyB0ZXh0IHVzaW5nIHRoZSBjb250ZXh0IG1lbnUuICdzZWxlY3Rpb25jaGFuZ2UnXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbiBkZXRlY3QgYWxsIG9mIHRob3NlIGV4Y2VwdCBkcmFnZ2luZyB0ZXh0IG91dCBvZiB0aGUgZmllbGQsIGZvciB3aGljaCB3ZSB1c2UgJ2RyYWdlbmQnLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBhcmUgYWxzbyBuZWVkZWQgaW4gSUU4IGJlY2F1c2Ugb2YgdGhlIGJ1ZyBkZXNjcmliZWQgYWJvdmUuXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyRm9yU2VsZWN0aW9uQ2hhbmdlRXZlbnQoZWxlbWVudCwgaWVVcGRhdGVNb2RlbCk7ICAvLyAnc2VsZWN0aW9uY2hhbmdlJyBjb3ZlcnMgY3V0LCBwYXN0ZSwgZHJvcCwgZGVsZXRlLCBldGMuXG4gICAgICAgICAgICAgICAgICAgIG9uRXZlbnQoJ2RyYWdlbmQnLCBkZWZlclVwZGF0ZU1vZGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFsbCBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMgc3VwcG9ydCB0aGUgJ2lucHV0JyBldmVudCwgd2hpY2ggZmlyZXMgd2hlbmV2ZXIgdGhlIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgaXMgY2hhbmdlZFxuICAgICAgICAgICAgICAgIC8vIHRocm91Z2ggdGhlIHVzZXIgaW50ZXJmYWNlLlxuICAgICAgICAgICAgICAgIG9uRXZlbnQoJ2lucHV0JywgdXBkYXRlTW9kZWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNhZmFyaVZlcnNpb24gPCA1ICYmIGtvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtZW50KSA9PT0gXCJ0ZXh0YXJlYVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8NSBkb2Vzbid0IGZpcmUgdGhlICdpbnB1dCcgZXZlbnQgZm9yIDx0ZXh0YXJlYT4gZWxlbWVudHMgKGl0IGRvZXMgZmlyZSAndGV4dElucHV0J1xuICAgICAgICAgICAgICAgICAgICAvLyBidXQgb25seSB3aGVuIHR5cGluZykuIFNvIHdlJ2xsIGp1c3QgY2F0Y2ggYXMgbXVjaCBhcyB3ZSBjYW4gd2l0aCBrZXlkb3duLCBjdXQsIGFuZCBwYXN0ZS5cbiAgICAgICAgICAgICAgICAgICAgb25FdmVudCgna2V5ZG93bicsIGRlZmVyVXBkYXRlTW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICBvbkV2ZW50KCdwYXN0ZScsIGRlZmVyVXBkYXRlTW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICBvbkV2ZW50KCdjdXQnLCBkZWZlclVwZGF0ZU1vZGVsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wZXJhVmVyc2lvbiA8IDExKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIDEwIGRvZXNuJ3QgYWx3YXlzIGZpcmUgdGhlICdpbnB1dCcgZXZlbnQgZm9yIGN1dCwgcGFzdGUsIHVuZG8gJiBkcm9wIG9wZXJhdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbiB0cnkgdG8gY2F0Y2ggc29tZSBvZiB0aG9zZSB1c2luZyAna2V5ZG93bicuXG4gICAgICAgICAgICAgICAgICAgIG9uRXZlbnQoJ2tleWRvd24nLCBkZWZlclVwZGF0ZU1vZGVsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpcmVmb3hWZXJzaW9uIDwgNC4wKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggPD0gMy42IGRvZXNuJ3QgZmlyZSB0aGUgJ2lucHV0JyBldmVudCB3aGVuIHRleHQgaXMgZmlsbGVkIGluIHRocm91Z2ggYXV0b2NvbXBsZXRlXG4gICAgICAgICAgICAgICAgICAgIG9uRXZlbnQoJ0RPTUF1dG9Db21wbGV0ZScsIHVwZGF0ZU1vZGVsKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94IDw9My41IGRvZXNuJ3QgZmlyZSB0aGUgJ2lucHV0JyBldmVudCB3aGVuIHRleHQgaXMgZHJvcHBlZCBpbnRvIHRoZSBpbnB1dC5cbiAgICAgICAgICAgICAgICAgICAgb25FdmVudCgnZHJhZ2Ryb3AnLCB1cGRhdGVNb2RlbCk7ICAgICAgIC8vIDwzLjVcbiAgICAgICAgICAgICAgICAgICAgb25FdmVudCgnZHJvcCcsIHVwZGF0ZU1vZGVsKTsgICAgICAgICAgIC8vIDMuNVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJpbmQgdG8gdGhlIGNoYW5nZSBldmVudCBzbyB0aGF0IHdlIGNhbiBjYXRjaCBwcm9ncmFtbWF0aWMgdXBkYXRlcyBvZiB0aGUgdmFsdWUgdGhhdCBmaXJlIHRoaXMgZXZlbnQuXG4gICAgICAgIG9uRXZlbnQoJ2NoYW5nZScsIHVwZGF0ZU1vZGVsKTtcblxuICAgICAgICBrby5jb21wdXRlZCh1cGRhdGVWaWV3LCBudWxsLCB7IGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDogZWxlbWVudCB9KTtcbiAgICB9XG59O1xua28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5nc1sndGV4dElucHV0J10gPSB0cnVlO1xuXG4vLyB0ZXh0aW5wdXQgaXMgYW4gYWxpYXMgZm9yIHRleHRJbnB1dFxua28uYmluZGluZ0hhbmRsZXJzWyd0ZXh0aW5wdXQnXSA9IHtcbiAgICAvLyBwcmVwcm9jZXNzIGlzIHRoZSBvbmx5IHdheSB0byBzZXQgdXAgYSBmdWxsIGFsaWFzXG4gICAgJ3ByZXByb2Nlc3MnOiBmdW5jdGlvbiAodmFsdWUsIG5hbWUsIGFkZEJpbmRpbmcpIHtcbiAgICAgICAgYWRkQmluZGluZygndGV4dElucHV0JywgdmFsdWUpO1xuICAgIH1cbn07XG5cbn0pKCk7a28uYmluZGluZ0hhbmRsZXJzWyd1bmlxdWVOYW1lJ10gPSB7XG4gICAgJ2luaXQnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgICAgICBpZiAodmFsdWVBY2Nlc3NvcigpKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IFwia29fdW5pcXVlX1wiICsgKCsra28uYmluZGluZ0hhbmRsZXJzWyd1bmlxdWVOYW1lJ10uY3VycmVudEluZGV4KTtcbiAgICAgICAgICAgIGtvLnV0aWxzLnNldEVsZW1lbnROYW1lKGVsZW1lbnQsIG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmtvLmJpbmRpbmdIYW5kbGVyc1sndW5pcXVlTmFtZSddLmN1cnJlbnRJbmRleCA9IDA7XG5rby5iaW5kaW5nSGFuZGxlcnNbJ3ZhbHVlJ10gPSB7XG4gICAgJ2FmdGVyJzogWydvcHRpb25zJywgJ2ZvcmVhY2gnXSxcbiAgICAnaW5pdCc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgYmluZGluZyBpcyBwbGFjZWQgb24gYSByYWRpby9jaGVja2JveCwgdGhlbiBqdXN0IHBhc3MgdGhyb3VnaCB0byBjaGVja2VkVmFsdWUgYW5kIHF1aXRcbiAgICAgICAgaWYgKGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09IFwiaW5wdXRcIiAmJiAoZWxlbWVudC50eXBlID09IFwiY2hlY2tib3hcIiB8fCBlbGVtZW50LnR5cGUgPT0gXCJyYWRpb1wiKSkge1xuICAgICAgICAgICAga28uYXBwbHlCaW5kaW5nQWNjZXNzb3JzVG9Ob2RlKGVsZW1lbnQsIHsgJ2NoZWNrZWRWYWx1ZSc6IHZhbHVlQWNjZXNzb3IgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbHdheXMgY2F0Y2ggXCJjaGFuZ2VcIiBldmVudDsgcG9zc2libHkgb3RoZXIgZXZlbnRzIHRvbyBpZiBhc2tlZFxuICAgICAgICB2YXIgZXZlbnRzVG9DYXRjaCA9IFtcImNoYW5nZVwiXTtcbiAgICAgICAgdmFyIHJlcXVlc3RlZEV2ZW50c1RvQ2F0Y2ggPSBhbGxCaW5kaW5ncy5nZXQoXCJ2YWx1ZVVwZGF0ZVwiKTtcbiAgICAgICAgdmFyIHByb3BlcnR5Q2hhbmdlZEZpcmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBlbGVtZW50VmFsdWVCZWZvcmVFdmVudCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHJlcXVlc3RlZEV2ZW50c1RvQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdGVkRXZlbnRzVG9DYXRjaCA9PSBcInN0cmluZ1wiKSAvLyBBbGxvdyBib3RoIGluZGl2aWR1YWwgZXZlbnQgbmFtZXMsIGFuZCBhcnJheXMgb2YgZXZlbnQgbmFtZXNcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWRFdmVudHNUb0NhdGNoID0gW3JlcXVlc3RlZEV2ZW50c1RvQ2F0Y2hdO1xuICAgICAgICAgICAga28udXRpbHMuYXJyYXlQdXNoQWxsKGV2ZW50c1RvQ2F0Y2gsIHJlcXVlc3RlZEV2ZW50c1RvQ2F0Y2gpO1xuICAgICAgICAgICAgZXZlbnRzVG9DYXRjaCA9IGtvLnV0aWxzLmFycmF5R2V0RGlzdGluY3RWYWx1ZXMoZXZlbnRzVG9DYXRjaCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFsdWVVcGRhdGVIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbGVtZW50VmFsdWVCZWZvcmVFdmVudCA9IG51bGw7XG4gICAgICAgICAgICBwcm9wZXJ0eUNoYW5nZWRGaXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIG1vZGVsVmFsdWUgPSB2YWx1ZUFjY2Vzc29yKCk7XG4gICAgICAgICAgICB2YXIgZWxlbWVudFZhbHVlID0ga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUoZWxlbWVudCk7XG4gICAgICAgICAgICBrby5leHByZXNzaW9uUmV3cml0aW5nLndyaXRlVmFsdWVUb1Byb3BlcnR5KG1vZGVsVmFsdWUsIGFsbEJpbmRpbmdzLCAndmFsdWUnLCBlbGVtZW50VmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy8xMjJcbiAgICAgICAgLy8gSUUgZG9lc24ndCBmaXJlIFwiY2hhbmdlXCIgZXZlbnRzIG9uIHRleHRib3hlcyBpZiB0aGUgdXNlciBzZWxlY3RzIGEgdmFsdWUgZnJvbSBpdHMgYXV0b2NvbXBsZXRlIGxpc3RcbiAgICAgICAgdmFyIGllQXV0b0NvbXBsZXRlSGFja05lZWRlZCA9IGtvLnV0aWxzLmllVmVyc2lvbiAmJiBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSBcImlucHV0XCIgJiYgZWxlbWVudC50eXBlID09IFwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBlbGVtZW50LmF1dG9jb21wbGV0ZSAhPSBcIm9mZlwiICYmICghZWxlbWVudC5mb3JtIHx8IGVsZW1lbnQuZm9ybS5hdXRvY29tcGxldGUgIT0gXCJvZmZcIik7XG4gICAgICAgIGlmIChpZUF1dG9Db21wbGV0ZUhhY2tOZWVkZWQgJiYga28udXRpbHMuYXJyYXlJbmRleE9mKGV2ZW50c1RvQ2F0Y2gsIFwicHJvcGVydHljaGFuZ2VcIikgPT0gLTEpIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsIFwicHJvcGVydHljaGFuZ2VcIiwgZnVuY3Rpb24gKCkgeyBwcm9wZXJ0eUNoYW5nZWRGaXJlZCA9IHRydWUgfSk7XG4gICAgICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcImZvY3VzXCIsIGZ1bmN0aW9uICgpIHsgcHJvcGVydHlDaGFuZ2VkRmlyZWQgPSBmYWxzZSB9KTtcbiAgICAgICAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsIFwiYmx1clwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlDaGFuZ2VkRmlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVVcGRhdGVIYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBrby51dGlscy5hcnJheUZvckVhY2goZXZlbnRzVG9DYXRjaCwgZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAvLyBUaGUgc3ludGF4IFwiYWZ0ZXI8ZXZlbnRuYW1lPlwiIG1lYW5zIFwicnVuIHRoZSBoYW5kbGVyIGFzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSBldmVudFwiXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHVzZWZ1bCwgZm9yIGV4YW1wbGUsIHRvIGNhdGNoIFwia2V5ZG93blwiIGV2ZW50cyBhZnRlciB0aGUgYnJvd3NlciBoYXMgdXBkYXRlZCB0aGUgY29udHJvbFxuICAgICAgICAgICAgLy8gKG90aGVyd2lzZSwga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUodGhpcykgd2lsbCByZWNlaXZlIHRoZSBjb250cm9sJ3MgdmFsdWUgKmJlZm9yZSogdGhlIGtleSBldmVudClcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gdmFsdWVVcGRhdGVIYW5kbGVyO1xuICAgICAgICAgICAgaWYgKGtvLnV0aWxzLnN0cmluZ1N0YXJ0c1dpdGgoZXZlbnROYW1lLCBcImFmdGVyXCIpKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQgdmFyaWFibGUgaXMgbm9uLW51bGwgKm9ubHkqIGR1cmluZyB0aGUgYnJpZWYgZ2FwIGJldHdlZW5cbiAgICAgICAgICAgICAgICAgICAgLy8gYSBrZXlYIGV2ZW50IGZpcmluZyBhbmQgdGhlIHZhbHVlVXBkYXRlSGFuZGxlciBydW5uaW5nLCB3aGljaCBpcyBzY2hlZHVsZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICAgICAgICAgIC8vIGF0IHRoZSBlYXJsaWVzdCBhc3luY2hyb25vdXMgb3Bwb3J0dW5pdHkuIFdlIHN0b3JlIHRoaXMgdGVtcG9yYXJ5IGluZm9ybWF0aW9uIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYsIGJldHdlZW4ga2V5WCBhbmQgdmFsdWVVcGRhdGVIYW5kbGVyLCB0aGUgdW5kZXJseWluZyBtb2RlbCB2YWx1ZSBjaGFuZ2VzIHNlcGFyYXRlbHksXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGNhbiBvdmVyd3JpdGUgdGhhdCBtb2RlbCB2YWx1ZSBjaGFuZ2Ugd2l0aCB0aGUgdmFsdWUgdGhlIHVzZXIganVzdCB0eXBlZC4gT3RoZXJ3aXNlLFxuICAgICAgICAgICAgICAgICAgICAvLyB0ZWNobmlxdWVzIGxpa2UgcmF0ZUxpbWl0IGNhbiB0cmlnZ2VyIG1vZGVsIGNoYW5nZXMgYXQgY3JpdGljYWwgbW9tZW50cyB0aGF0IHdpbGxcbiAgICAgICAgICAgICAgICAgICAgLy8gb3ZlcnJpZGUgdGhlIHVzZXIncyBpbnB1dHMsIGNhdXNpbmcga2V5c3Ryb2tlcyB0byBiZSBsb3N0LlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50VmFsdWVCZWZvcmVFdmVudCA9IGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBrby51dGlscy5zZXRUaW1lb3V0KHZhbHVlVXBkYXRlSGFuZGxlciwgMCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBldmVudE5hbWUuc3Vic3RyaW5nKFwiYWZ0ZXJcIi5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHVwZGF0ZUZyb21Nb2RlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50VmFsdWUgPSBrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50KTtcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50ICE9PSBudWxsICYmIG5ld1ZhbHVlID09PSBlbGVtZW50VmFsdWVCZWZvcmVFdmVudCkge1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLnNldFRpbWVvdXQodXBkYXRlRnJvbU1vZGVsLCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZUhhc0NoYW5nZWQgPSAobmV3VmFsdWUgIT09IGVsZW1lbnRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZUhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoa28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnQpID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGxvd1Vuc2V0ID0gYWxsQmluZGluZ3MuZ2V0KCd2YWx1ZUFsbG93VW5zZXQnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFwcGx5VmFsdWVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrby5zZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUoZWxlbWVudCwgbmV3VmFsdWUsIGFsbG93VW5zZXQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBhcHBseVZhbHVlQWN0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxvd1Vuc2V0ICYmIG5ld1ZhbHVlICE9PSBrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgeW91IHRyeSB0byBzZXQgYSBtb2RlbCB2YWx1ZSB0aGF0IGNhbid0IGJlIHJlcHJlc2VudGVkIGluIGFuIGFscmVhZHktcG9wdWxhdGVkIGRyb3Bkb3duLCByZWplY3QgdGhhdCBjaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHlvdSdyZSBub3QgYWxsb3dlZCB0byBoYXZlIGEgbW9kZWwgdmFsdWUgdGhhdCBkaXNhZ3JlZXMgd2l0aCBhIHZpc2libGUgVUkgc2VsZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAga28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUoa28udXRpbHMudHJpZ2dlckV2ZW50LCBudWxsLCBbZWxlbWVudCwgXCJjaGFuZ2VcIl0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgSUU2IGJ1ZzogSXQgd29uJ3QgcmVsaWFibHkgYXBwbHkgdmFsdWVzIHRvIFNFTEVDVCBub2RlcyBkdXJpbmcgdGhlIHNhbWUgZXhlY3V0aW9uIHRocmVhZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmlnaHQgYWZ0ZXIgeW91J3ZlIGNoYW5nZWQgdGhlIHNldCBvZiBPUFRJT04gbm9kZXMgb24gaXQuIFNvIGZvciB0aGF0IG5vZGUgdHlwZSwgd2UnbGwgc2NoZWR1bGUgYSBzZWNvbmQgdGhyZWFkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhcHBseSB0aGUgdmFsdWUgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLnNldFRpbWVvdXQoYXBwbHlWYWx1ZUFjdGlvbiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBrby5zZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUoZWxlbWVudCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBrby5jb21wdXRlZCh1cGRhdGVGcm9tTW9kZWwsIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBlbGVtZW50IH0pO1xuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uKCkge30gLy8gS2VlcCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBjb2RlIHRoYXQgbWF5IGhhdmUgd3JhcHBlZCB2YWx1ZSBiaW5kaW5nXG59O1xua28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5nc1sndmFsdWUnXSA9IHRydWU7XG5rby5iaW5kaW5nSGFuZGxlcnNbJ3Zpc2libGUnXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpO1xuICAgICAgICB2YXIgaXNDdXJyZW50bHlWaXNpYmxlID0gIShlbGVtZW50LnN0eWxlLmRpc3BsYXkgPT0gXCJub25lXCIpO1xuICAgICAgICBpZiAodmFsdWUgJiYgIWlzQ3VycmVudGx5VmlzaWJsZSlcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgICAgIGVsc2UgaWYgKCghdmFsdWUpICYmIGlzQ3VycmVudGx5VmlzaWJsZSlcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cbn07XG4vLyAnY2xpY2snIGlzIGp1c3QgYSBzaG9ydGhhbmQgZm9yIHRoZSB1c3VhbCBmdWxsLWxlbmd0aCBldmVudDp7Y2xpY2s6aGFuZGxlcn1cbm1ha2VFdmVudEhhbmRsZXJTaG9ydGN1dCgnY2xpY2snKTtcbi8vIElmIHlvdSB3YW50IHRvIG1ha2UgYSBjdXN0b20gdGVtcGxhdGUgZW5naW5lLFxuLy9cbi8vIFsxXSBJbmhlcml0IGZyb20gdGhpcyBjbGFzcyAobGlrZSBrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZSBkb2VzKVxuLy8gWzJdIE92ZXJyaWRlICdyZW5kZXJUZW1wbGF0ZVNvdXJjZScsIHN1cHBseWluZyBhIGZ1bmN0aW9uIHdpdGggdGhpcyBzaWduYXR1cmU6XG4vL1xuLy8gICAgICAgIGZ1bmN0aW9uICh0ZW1wbGF0ZVNvdXJjZSwgYmluZGluZ0NvbnRleHQsIG9wdGlvbnMpIHtcbi8vICAgICAgICAgICAgLy8gLSB0ZW1wbGF0ZVNvdXJjZS50ZXh0KCkgaXMgdGhlIHRleHQgb2YgdGhlIHRlbXBsYXRlIHlvdSBzaG91bGQgcmVuZGVyXG4vLyAgICAgICAgICAgIC8vIC0gYmluZGluZ0NvbnRleHQuJGRhdGEgaXMgdGhlIGRhdGEgeW91IHNob3VsZCBwYXNzIGludG8gdGhlIHRlbXBsYXRlXG4vLyAgICAgICAgICAgIC8vICAgLSB5b3UgbWlnaHQgYWxzbyB3YW50IHRvIG1ha2UgYmluZGluZ0NvbnRleHQuJHBhcmVudCwgYmluZGluZ0NvbnRleHQuJHBhcmVudHMsXG4vLyAgICAgICAgICAgIC8vICAgICBhbmQgYmluZGluZ0NvbnRleHQuJHJvb3QgYXZhaWxhYmxlIGluIHRoZSB0ZW1wbGF0ZSB0b29cbi8vICAgICAgICAgICAgLy8gLSBvcHRpb25zIGdpdmVzIHlvdSBhY2Nlc3MgdG8gYW55IG90aGVyIHByb3BlcnRpZXMgc2V0IG9uIFwiZGF0YS1iaW5kOiB7IHRlbXBsYXRlOiBvcHRpb25zIH1cIlxuLy8gICAgICAgICAgICAvLyAtIHRlbXBsYXRlRG9jdW1lbnQgaXMgdGhlIGRvY3VtZW50IG9iamVjdCBvZiB0aGUgdGVtcGxhdGVcbi8vICAgICAgICAgICAgLy9cbi8vICAgICAgICAgICAgLy8gUmV0dXJuIHZhbHVlOiBhbiBhcnJheSBvZiBET00gbm9kZXNcbi8vICAgICAgICB9XG4vL1xuLy8gWzNdIE92ZXJyaWRlICdjcmVhdGVKYXZhU2NyaXB0RXZhbHVhdG9yQmxvY2snLCBzdXBwbHlpbmcgYSBmdW5jdGlvbiB3aXRoIHRoaXMgc2lnbmF0dXJlOlxuLy9cbi8vICAgICAgICBmdW5jdGlvbiAoc2NyaXB0KSB7XG4vLyAgICAgICAgICAgIC8vIFJldHVybiB2YWx1ZTogV2hhdGV2ZXIgc3ludGF4IG1lYW5zIFwiRXZhbHVhdGUgdGhlIEphdmFTY3JpcHQgc3RhdGVtZW50ICdzY3JpcHQnIGFuZCBvdXRwdXQgdGhlIHJlc3VsdFwiXG4vLyAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgRm9yIGV4YW1wbGUsIHRoZSBqcXVlcnkudG1wbCB0ZW1wbGF0ZSBlbmdpbmUgY29udmVydHMgJ3NvbWVTY3JpcHQnIHRvICckeyBzb21lU2NyaXB0IH0nXG4vLyAgICAgICAgfVxuLy9cbi8vICAgICBUaGlzIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIHlvdSB3YW50IHRvIGFsbG93IGRhdGEtYmluZCBhdHRyaWJ1dGVzIHRvIHJlZmVyZW5jZSBhcmJpdHJhcnkgdGVtcGxhdGUgdmFyaWFibGVzLlxuLy8gICAgIElmIHlvdSBkb24ndCB3YW50IHRvIGFsbG93IHRoYXQsIHlvdSBjYW4gc2V0IHRoZSBwcm9wZXJ0eSAnYWxsb3dUZW1wbGF0ZVJld3JpdGluZycgdG8gZmFsc2UgKGxpa2Uga28ubmF0aXZlVGVtcGxhdGVFbmdpbmUgZG9lcylcbi8vICAgICBhbmQgdGhlbiB5b3UgZG9uJ3QgbmVlZCB0byBvdmVycmlkZSAnY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrJy5cblxua28udGVtcGxhdGVFbmdpbmUgPSBmdW5jdGlvbiAoKSB7IH07XG5cbmtvLnRlbXBsYXRlRW5naW5lLnByb3RvdHlwZVsncmVuZGVyVGVtcGxhdGVTb3VyY2UnXSA9IGZ1bmN0aW9uICh0ZW1wbGF0ZVNvdXJjZSwgYmluZGluZ0NvbnRleHQsIG9wdGlvbnMsIHRlbXBsYXRlRG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPdmVycmlkZSByZW5kZXJUZW1wbGF0ZVNvdXJjZVwiKTtcbn07XG5cbmtvLnRlbXBsYXRlRW5naW5lLnByb3RvdHlwZVsnY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrJ10gPSBmdW5jdGlvbiAoc2NyaXB0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3ZlcnJpZGUgY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrXCIpO1xufTtcblxua28udGVtcGxhdGVFbmdpbmUucHJvdG90eXBlWydtYWtlVGVtcGxhdGVTb3VyY2UnXSA9IGZ1bmN0aW9uKHRlbXBsYXRlLCB0ZW1wbGF0ZURvY3VtZW50KSB7XG4gICAgLy8gTmFtZWQgdGVtcGxhdGVcbiAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGVtcGxhdGVEb2N1bWVudCA9IHRlbXBsYXRlRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG4gICAgICAgIHZhciBlbGVtID0gdGVtcGxhdGVEb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0ZW1wbGF0ZSk7XG4gICAgICAgIGlmICghZWxlbSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHRlbXBsYXRlIHdpdGggSUQgXCIgKyB0ZW1wbGF0ZSk7XG4gICAgICAgIHJldHVybiBuZXcga28udGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQoZWxlbSk7XG4gICAgfSBlbHNlIGlmICgodGVtcGxhdGUubm9kZVR5cGUgPT0gMSkgfHwgKHRlbXBsYXRlLm5vZGVUeXBlID09IDgpKSB7XG4gICAgICAgIC8vIEFub255bW91cyB0ZW1wbGF0ZVxuICAgICAgICByZXR1cm4gbmV3IGtvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgfSBlbHNlXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdGVtcGxhdGUgdHlwZTogXCIgKyB0ZW1wbGF0ZSk7XG59O1xuXG5rby50ZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGVbJ3JlbmRlclRlbXBsYXRlJ10gPSBmdW5jdGlvbiAodGVtcGxhdGUsIGJpbmRpbmdDb250ZXh0LCBvcHRpb25zLCB0ZW1wbGF0ZURvY3VtZW50KSB7XG4gICAgdmFyIHRlbXBsYXRlU291cmNlID0gdGhpc1snbWFrZVRlbXBsYXRlU291cmNlJ10odGVtcGxhdGUsIHRlbXBsYXRlRG9jdW1lbnQpO1xuICAgIHJldHVybiB0aGlzWydyZW5kZXJUZW1wbGF0ZVNvdXJjZSddKHRlbXBsYXRlU291cmNlLCBiaW5kaW5nQ29udGV4dCwgb3B0aW9ucywgdGVtcGxhdGVEb2N1bWVudCk7XG59O1xuXG5rby50ZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGVbJ2lzVGVtcGxhdGVSZXdyaXR0ZW4nXSA9IGZ1bmN0aW9uICh0ZW1wbGF0ZSwgdGVtcGxhdGVEb2N1bWVudCkge1xuICAgIC8vIFNraXAgcmV3cml0aW5nIGlmIHJlcXVlc3RlZFxuICAgIGlmICh0aGlzWydhbGxvd1RlbXBsYXRlUmV3cml0aW5nJ10gPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gdGhpc1snbWFrZVRlbXBsYXRlU291cmNlJ10odGVtcGxhdGUsIHRlbXBsYXRlRG9jdW1lbnQpWydkYXRhJ10oXCJpc1Jld3JpdHRlblwiKTtcbn07XG5cbmtvLnRlbXBsYXRlRW5naW5lLnByb3RvdHlwZVsncmV3cml0ZVRlbXBsYXRlJ10gPSBmdW5jdGlvbiAodGVtcGxhdGUsIHJld3JpdGVyQ2FsbGJhY2ssIHRlbXBsYXRlRG9jdW1lbnQpIHtcbiAgICB2YXIgdGVtcGxhdGVTb3VyY2UgPSB0aGlzWydtYWtlVGVtcGxhdGVTb3VyY2UnXSh0ZW1wbGF0ZSwgdGVtcGxhdGVEb2N1bWVudCk7XG4gICAgdmFyIHJld3JpdHRlbiA9IHJld3JpdGVyQ2FsbGJhY2sodGVtcGxhdGVTb3VyY2VbJ3RleHQnXSgpKTtcbiAgICB0ZW1wbGF0ZVNvdXJjZVsndGV4dCddKHJld3JpdHRlbik7XG4gICAgdGVtcGxhdGVTb3VyY2VbJ2RhdGEnXShcImlzUmV3cml0dGVuXCIsIHRydWUpO1xufTtcblxua28uZXhwb3J0U3ltYm9sKCd0ZW1wbGF0ZUVuZ2luZScsIGtvLnRlbXBsYXRlRW5naW5lKTtcblxua28udGVtcGxhdGVSZXdyaXRpbmcgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBtZW1vaXplRGF0YUJpbmRpbmdBdHRyaWJ1dGVTeW50YXhSZWdleCA9IC8oPChbYS16XStcXGQqKSg/OlxccysoPyFkYXRhLWJpbmRcXHMqPVxccyopW2EtejAtOVxcLV0rKD86PSg/OlxcXCJbXlxcXCJdKlxcXCJ8XFwnW15cXCddKlxcJ3xbXj5dKikpPykqXFxzKylkYXRhLWJpbmRcXHMqPVxccyooW1wiJ10pKFtcXHNcXFNdKj8pXFwzL2dpO1xuICAgIHZhciBtZW1vaXplVmlydHVhbENvbnRhaW5lckJpbmRpbmdTeW50YXhSZWdleCA9IC88IS0tXFxzKmtvXFxiXFxzKihbXFxzXFxTXSo/KVxccyotLT4vZztcblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRGF0YUJpbmRWYWx1ZXNGb3JSZXdyaXRpbmcoa2V5VmFsdWVBcnJheSkge1xuICAgICAgICB2YXIgYWxsVmFsaWRhdG9ycyA9IGtvLmV4cHJlc3Npb25SZXdyaXRpbmcuYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleVZhbHVlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlWYWx1ZUFycmF5W2ldWydrZXknXTtcbiAgICAgICAgICAgIGlmIChhbGxWYWxpZGF0b3JzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsaWRhdG9yID0gYWxsVmFsaWRhdG9yc1trZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWxpZGF0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zc2libGVFcnJvck1lc3NhZ2UgPSB2YWxpZGF0b3Ioa2V5VmFsdWVBcnJheVtpXVsndmFsdWUnXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NzaWJsZUVycm9yTWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwb3NzaWJsZUVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdmFsaWRhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgdGVtcGxhdGUgZW5naW5lIGRvZXMgbm90IHN1cHBvcnQgdGhlICdcIiArIGtleSArIFwiJyBiaW5kaW5nIHdpdGhpbiBpdHMgdGVtcGxhdGVzXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN0cnVjdE1lbW9pemVkVGFnUmVwbGFjZW1lbnQoZGF0YUJpbmRBdHRyaWJ1dGVWYWx1ZSwgdGFnVG9SZXRhaW4sIG5vZGVOYW1lLCB0ZW1wbGF0ZUVuZ2luZSkge1xuICAgICAgICB2YXIgZGF0YUJpbmRLZXlWYWx1ZUFycmF5ID0ga28uZXhwcmVzc2lvblJld3JpdGluZy5wYXJzZU9iamVjdExpdGVyYWwoZGF0YUJpbmRBdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICAgIHZhbGlkYXRlRGF0YUJpbmRWYWx1ZXNGb3JSZXdyaXRpbmcoZGF0YUJpbmRLZXlWYWx1ZUFycmF5KTtcbiAgICAgICAgdmFyIHJld3JpdHRlbkRhdGFCaW5kQXR0cmlidXRlVmFsdWUgPSBrby5leHByZXNzaW9uUmV3cml0aW5nLnByZVByb2Nlc3NCaW5kaW5ncyhkYXRhQmluZEtleVZhbHVlQXJyYXksIHsndmFsdWVBY2Nlc3NvcnMnOnRydWV9KTtcblxuICAgICAgICAvLyBGb3Igbm8gb2J2aW91cyByZWFzb24sIE9wZXJhIGZhaWxzIHRvIGV2YWx1YXRlIHJld3JpdHRlbkRhdGFCaW5kQXR0cmlidXRlVmFsdWUgdW5sZXNzIGl0J3Mgd3JhcHBlZCBpbiBhbiBhZGRpdGlvbmFsXG4gICAgICAgIC8vIGFub255bW91cyBmdW5jdGlvbiwgZXZlbiB0aG91Z2ggT3BlcmEncyBidWlsdC1pbiBkZWJ1Z2dlciBjYW4gZXZhbHVhdGUgaXQgYW55d2F5LiBObyBvdGhlciBicm93c2VyIHJlcXVpcmVzIHRoaXNcbiAgICAgICAgLy8gZXh0cmEgaW5kaXJlY3Rpb24uXG4gICAgICAgIHZhciBhcHBseUJpbmRpbmdzVG9OZXh0U2libGluZ1NjcmlwdCA9XG4gICAgICAgICAgICBcImtvLl9fdHJfYW1idG5zKGZ1bmN0aW9uKCRjb250ZXh0LCRlbGVtZW50KXtyZXR1cm4oZnVuY3Rpb24oKXtyZXR1cm57IFwiICsgcmV3cml0dGVuRGF0YUJpbmRBdHRyaWJ1dGVWYWx1ZSArIFwiIH0gfSkoKX0sJ1wiICsgbm9kZU5hbWUudG9Mb3dlckNhc2UoKSArIFwiJylcIjtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlRW5naW5lWydjcmVhdGVKYXZhU2NyaXB0RXZhbHVhdG9yQmxvY2snXShhcHBseUJpbmRpbmdzVG9OZXh0U2libGluZ1NjcmlwdCkgKyB0YWdUb1JldGFpbjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBlbnN1cmVUZW1wbGF0ZUlzUmV3cml0dGVuOiBmdW5jdGlvbiAodGVtcGxhdGUsIHRlbXBsYXRlRW5naW5lLCB0ZW1wbGF0ZURvY3VtZW50KSB7XG4gICAgICAgICAgICBpZiAoIXRlbXBsYXRlRW5naW5lWydpc1RlbXBsYXRlUmV3cml0dGVuJ10odGVtcGxhdGUsIHRlbXBsYXRlRG9jdW1lbnQpKVxuICAgICAgICAgICAgICAgIHRlbXBsYXRlRW5naW5lWydyZXdyaXRlVGVtcGxhdGUnXSh0ZW1wbGF0ZSwgZnVuY3Rpb24gKGh0bWxTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtvLnRlbXBsYXRlUmV3cml0aW5nLm1lbW9pemVCaW5kaW5nQXR0cmlidXRlU3ludGF4KGh0bWxTdHJpbmcsIHRlbXBsYXRlRW5naW5lKTtcbiAgICAgICAgICAgICAgICB9LCB0ZW1wbGF0ZURvY3VtZW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICBtZW1vaXplQmluZGluZ0F0dHJpYnV0ZVN5bnRheDogZnVuY3Rpb24gKGh0bWxTdHJpbmcsIHRlbXBsYXRlRW5naW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbFN0cmluZy5yZXBsYWNlKG1lbW9pemVEYXRhQmluZGluZ0F0dHJpYnV0ZVN5bnRheFJlZ2V4LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdE1lbW9pemVkVGFnUmVwbGFjZW1lbnQoLyogZGF0YUJpbmRBdHRyaWJ1dGVWYWx1ZTogKi8gYXJndW1lbnRzWzRdLCAvKiB0YWdUb1JldGFpbjogKi8gYXJndW1lbnRzWzFdLCAvKiBub2RlTmFtZTogKi8gYXJndW1lbnRzWzJdLCB0ZW1wbGF0ZUVuZ2luZSk7XG4gICAgICAgICAgICB9KS5yZXBsYWNlKG1lbW9pemVWaXJ0dWFsQ29udGFpbmVyQmluZGluZ1N5bnRheFJlZ2V4LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RydWN0TWVtb2l6ZWRUYWdSZXBsYWNlbWVudCgvKiBkYXRhQmluZEF0dHJpYnV0ZVZhbHVlOiAqLyBhcmd1bWVudHNbMV0sIC8qIHRhZ1RvUmV0YWluOiAqLyBcIjwhLS0ga28gLS0+XCIsIC8qIG5vZGVOYW1lOiAqLyBcIiNjb21tZW50XCIsIHRlbXBsYXRlRW5naW5lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGx5TWVtb2l6ZWRCaW5kaW5nc1RvTmV4dFNpYmxpbmc6IGZ1bmN0aW9uIChiaW5kaW5ncywgbm9kZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBrby5tZW1vaXphdGlvbi5tZW1vaXplKGZ1bmN0aW9uIChkb21Ob2RlLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHZhciBub2RlVG9CaW5kID0gZG9tTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICBpZiAobm9kZVRvQmluZCAmJiBub2RlVG9CaW5kLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGtvLmFwcGx5QmluZGluZ0FjY2Vzc29yc1RvTm9kZShub2RlVG9CaW5kLCBiaW5kaW5ncywgYmluZGluZ0NvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSkoKTtcblxuXG4vLyBFeHBvcnRlZCBvbmx5IGJlY2F1c2UgaXQgaGFzIHRvIGJlIHJlZmVyZW5jZWQgYnkgc3RyaW5nIGxvb2t1cCBmcm9tIHdpdGhpbiByZXdyaXR0ZW4gdGVtcGxhdGVcbmtvLmV4cG9ydFN5bWJvbCgnX190cl9hbWJ0bnMnLCBrby50ZW1wbGF0ZVJld3JpdGluZy5hcHBseU1lbW9pemVkQmluZGluZ3NUb05leHRTaWJsaW5nKTtcbihmdW5jdGlvbigpIHtcbiAgICAvLyBBIHRlbXBsYXRlIHNvdXJjZSByZXByZXNlbnRzIGEgcmVhZC93cml0ZSB3YXkgb2YgYWNjZXNzaW5nIGEgdGVtcGxhdGUuIFRoaXMgaXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciB0ZW1wbGF0ZSBsb2FkaW5nL3NhdmluZ1xuICAgIC8vIGxvZ2ljIHRvIGJlIGR1cGxpY2F0ZWQgaW4gZXZlcnkgdGVtcGxhdGUgZW5naW5lIChhbmQgbWVhbnMgdGhleSBjYW4gYWxsIHdvcmsgd2l0aCBhbm9ueW1vdXMgdGVtcGxhdGVzLCBldGMuKVxuICAgIC8vXG4gICAgLy8gVHdvIGFyZSBwcm92aWRlZCBieSBkZWZhdWx0OlxuICAgIC8vICAxLiBrby50ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudCAgICAgICAtIHJlYWRzL3dyaXRlcyB0aGUgdGV4dCBjb250ZW50IG9mIGFuIGFyYml0cmFyeSBET00gZWxlbWVudFxuICAgIC8vICAyLiBrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzRWxlbWVudCAtIHVzZXMga28udXRpbHMuZG9tRGF0YSB0byByZWFkL3dyaXRlIHRleHQgKmFzc29jaWF0ZWQqIHdpdGggdGhlIERPTSBlbGVtZW50LCBidXRcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHJlYWRpbmcvd3JpdGluZyB0aGUgYWN0dWFsIGVsZW1lbnQgdGV4dCBjb250ZW50LCBzaW5jZSBpdCB3aWxsIGJlIG92ZXJ3cml0dGVuXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgcmVuZGVyZWQgdGVtcGxhdGUgb3V0cHV0LlxuICAgIC8vIFlvdSBjYW4gaW1wbGVtZW50IHlvdXIgb3duIHRlbXBsYXRlIHNvdXJjZSBpZiB5b3Ugd2FudCB0byBmZXRjaC9zdG9yZSB0ZW1wbGF0ZXMgc29tZXdoZXJlIG90aGVyIHRoYW4gaW4gRE9NIGVsZW1lbnRzLlxuICAgIC8vIFRlbXBsYXRlIHNvdXJjZXMgbmVlZCB0byBoYXZlIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOlxuICAgIC8vICAgdGV4dCgpIFx0XHRcdC0gcmV0dXJucyB0aGUgdGVtcGxhdGUgdGV4dCBmcm9tIHlvdXIgc3RvcmFnZSBsb2NhdGlvblxuICAgIC8vICAgdGV4dCh2YWx1ZSlcdFx0LSB3cml0ZXMgdGhlIHN1cHBsaWVkIHRlbXBsYXRlIHRleHQgdG8geW91ciBzdG9yYWdlIGxvY2F0aW9uXG4gICAgLy8gICBkYXRhKGtleSlcdFx0XHQtIHJlYWRzIHZhbHVlcyBzdG9yZWQgdXNpbmcgZGF0YShrZXksIHZhbHVlKSAtIHNlZSBiZWxvd1xuICAgIC8vICAgZGF0YShrZXksIHZhbHVlKVx0LSBhc3NvY2lhdGVzIFwidmFsdWVcIiB3aXRoIHRoaXMgdGVtcGxhdGUgYW5kIHRoZSBrZXkgXCJrZXlcIi4gSXMgdXNlZCB0byBzdG9yZSBpbmZvcm1hdGlvbiBsaWtlIFwiaXNSZXdyaXR0ZW5cIi5cbiAgICAvL1xuICAgIC8vIE9wdGlvbmFsbHksIHRlbXBsYXRlIHNvdXJjZXMgY2FuIGFsc28gaGF2ZSB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uczpcbiAgICAvLyAgIG5vZGVzKCkgICAgICAgICAgICAtIHJldHVybnMgYSBET00gZWxlbWVudCBjb250YWluaW5nIHRoZSBub2RlcyBvZiB0aGlzIHRlbXBsYXRlLCB3aGVyZSBhdmFpbGFibGVcbiAgICAvLyAgIG5vZGVzKHZhbHVlKSAgICAgICAtIHdyaXRlcyB0aGUgZ2l2ZW4gRE9NIGVsZW1lbnQgdG8geW91ciBzdG9yYWdlIGxvY2F0aW9uXG4gICAgLy8gSWYgYSBET00gZWxlbWVudCBpcyBhdmFpbGFibGUgZm9yIGEgZ2l2ZW4gdGVtcGxhdGUgc291cmNlLCB0ZW1wbGF0ZSBlbmdpbmVzIGFyZSBlbmNvdXJhZ2VkIHRvIHVzZSBpdCBpbiBwcmVmZXJlbmNlIG92ZXIgdGV4dCgpXG4gICAgLy8gZm9yIGltcHJvdmVkIHNwZWVkLiBIb3dldmVyLCBhbGwgdGVtcGxhdGVTb3VyY2VzIG11c3Qgc3VwcGx5IHRleHQoKSBldmVuIGlmIHRoZXkgZG9uJ3Qgc3VwcGx5IG5vZGVzKCkuXG4gICAgLy9cbiAgICAvLyBPbmNlIHlvdSd2ZSBpbXBsZW1lbnRlZCBhIHRlbXBsYXRlU291cmNlLCBtYWtlIHlvdXIgdGVtcGxhdGUgZW5naW5lIHVzZSBpdCBieSBzdWJjbGFzc2luZyB3aGF0ZXZlciB0ZW1wbGF0ZSBlbmdpbmUgeW91IHdlcmVcbiAgICAvLyB1c2luZyBhbmQgb3ZlcnJpZGluZyBcIm1ha2VUZW1wbGF0ZVNvdXJjZVwiIHRvIHJldHVybiBhbiBpbnN0YW5jZSBvZiB5b3VyIGN1c3RvbSB0ZW1wbGF0ZSBzb3VyY2UuXG5cbiAgICBrby50ZW1wbGF0ZVNvdXJjZXMgPSB7fTtcblxuICAgIC8vIC0tLS0ga28udGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQgLS0tLS1cblxuICAgIC8vIHRlbXBsYXRlIHR5cGVzXG4gICAgdmFyIHRlbXBsYXRlU2NyaXB0ID0gMSxcbiAgICAgICAgdGVtcGxhdGVUZXh0QXJlYSA9IDIsXG4gICAgICAgIHRlbXBsYXRlVGVtcGxhdGUgPSAzLFxuICAgICAgICB0ZW1wbGF0ZUVsZW1lbnQgPSA0O1xuXG4gICAga28udGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZG9tRWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciB0YWdOYW1lTG93ZXIgPSBrby51dGlscy50YWdOYW1lTG93ZXIoZWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlVHlwZSA9XG4gICAgICAgICAgICAgICAgdGFnTmFtZUxvd2VyID09PSBcInNjcmlwdFwiID8gdGVtcGxhdGVTY3JpcHQgOlxuICAgICAgICAgICAgICAgIHRhZ05hbWVMb3dlciA9PT0gXCJ0ZXh0YXJlYVwiID8gdGVtcGxhdGVUZXh0QXJlYSA6XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBicm93c2VycyB3aXRoIHByb3BlciA8dGVtcGxhdGU+IGVsZW1lbnQgc3VwcG9ydCwgd2hlcmUgdGhlIC5jb250ZW50IHByb3BlcnR5IGdpdmVzIGEgZG9jdW1lbnQgZnJhZ21lbnRcbiAgICAgICAgICAgICAgICB0YWdOYW1lTG93ZXIgPT0gXCJ0ZW1wbGF0ZVwiICYmIGVsZW1lbnQuY29udGVudCAmJiBlbGVtZW50LmNvbnRlbnQubm9kZVR5cGUgPT09IDExID8gdGVtcGxhdGVUZW1wbGF0ZSA6XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVFbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAga28udGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQucHJvdG90eXBlWyd0ZXh0J10gPSBmdW5jdGlvbigvKiB2YWx1ZVRvV3JpdGUgKi8pIHtcbiAgICAgICAgdmFyIGVsZW1Db250ZW50c1Byb3BlcnR5ID0gdGhpcy50ZW1wbGF0ZVR5cGUgPT09IHRlbXBsYXRlU2NyaXB0ID8gXCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy50ZW1wbGF0ZVR5cGUgPT09IHRlbXBsYXRlVGV4dEFyZWEgPyBcInZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJpbm5lckhUTUxcIjtcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb21FbGVtZW50W2VsZW1Db250ZW50c1Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZVRvV3JpdGUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICBpZiAoZWxlbUNvbnRlbnRzUHJvcGVydHkgPT09IFwiaW5uZXJIVE1MXCIpXG4gICAgICAgICAgICAgICAga28udXRpbHMuc2V0SHRtbCh0aGlzLmRvbUVsZW1lbnQsIHZhbHVlVG9Xcml0ZSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5kb21FbGVtZW50W2VsZW1Db250ZW50c1Byb3BlcnR5XSA9IHZhbHVlVG9Xcml0ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgZGF0YURvbURhdGFQcmVmaXggPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKSArIFwiX1wiO1xuICAgIGtvLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50LnByb3RvdHlwZVsnZGF0YSddID0gZnVuY3Rpb24oa2V5IC8qLCB2YWx1ZVRvV3JpdGUgKi8pIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBrby51dGlscy5kb21EYXRhLmdldCh0aGlzLmRvbUVsZW1lbnQsIGRhdGFEb21EYXRhUHJlZml4ICsga2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KHRoaXMuZG9tRWxlbWVudCwgZGF0YURvbURhdGFQcmVmaXggKyBrZXksIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHRlbXBsYXRlc0RvbURhdGFLZXkgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKTtcbiAgICBmdW5jdGlvbiBnZXRUZW1wbGF0ZURvbURhdGEoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4ga28udXRpbHMuZG9tRGF0YS5nZXQoZWxlbWVudCwgdGVtcGxhdGVzRG9tRGF0YUtleSkgfHwge307XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFRlbXBsYXRlRG9tRGF0YShlbGVtZW50LCBkYXRhKSB7XG4gICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KGVsZW1lbnQsIHRlbXBsYXRlc0RvbURhdGFLZXksIGRhdGEpO1xuICAgIH1cblxuICAgIGtvLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50LnByb3RvdHlwZVsnbm9kZXMnXSA9IGZ1bmN0aW9uKC8qIHZhbHVlVG9Xcml0ZSAqLykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZG9tRWxlbWVudDtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGF0YSA9IGdldFRlbXBsYXRlRG9tRGF0YShlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBjb250YWluZXJEYXRhID0gdGVtcGxhdGVEYXRhLmNvbnRhaW5lckRhdGE7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyRGF0YSB8fCAoXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVR5cGUgPT09IHRlbXBsYXRlVGVtcGxhdGUgPyBlbGVtZW50LmNvbnRlbnQgOlxuICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVUeXBlID09PSB0ZW1wbGF0ZUVsZW1lbnQgPyBlbGVtZW50IDpcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHZhbHVlVG9Xcml0ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHNldFRlbXBsYXRlRG9tRGF0YShlbGVtZW50LCB7Y29udGFpbmVyRGF0YTogdmFsdWVUb1dyaXRlfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gLS0tLSBrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGUgLS0tLS1cbiAgICAvLyBBbm9ueW1vdXMgdGVtcGxhdGVzIGFyZSBub3JtYWxseSBzYXZlZC9yZXRyaWV2ZWQgYXMgRE9NIG5vZGVzIHRocm91Z2ggXCJub2Rlc1wiLlxuICAgIC8vIEZvciBjb21wYXRpYmlsaXR5LCB5b3UgY2FuIGFsc28gcmVhZCBcInRleHRcIjsgaXQgd2lsbCBiZSBzZXJpYWxpemVkIGZyb20gdGhlIG5vZGVzIG9uIGRlbWFuZC5cbiAgICAvLyBXcml0aW5nIHRvIFwidGV4dFwiIGlzIHN0aWxsIHN1cHBvcnRlZCwgYnV0IHRoZW4gdGhlIHRlbXBsYXRlIGRhdGEgd2lsbCBub3QgYmUgYXZhaWxhYmxlIGFzIERPTSBub2Rlcy5cblxuICAgIGtvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5kb21FbGVtZW50ID0gZWxlbWVudDtcbiAgICB9XG4gICAga28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlLnByb3RvdHlwZSA9IG5ldyBrby50ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudCgpO1xuICAgIGtvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGU7XG4gICAga28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlLnByb3RvdHlwZVsndGV4dCddID0gZnVuY3Rpb24oLyogdmFsdWVUb1dyaXRlICovKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZURhdGEgPSBnZXRUZW1wbGF0ZURvbURhdGEodGhpcy5kb21FbGVtZW50KTtcbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZURhdGEudGV4dERhdGEgPT09IHVuZGVmaW5lZCAmJiB0ZW1wbGF0ZURhdGEuY29udGFpbmVyRGF0YSlcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZURhdGEudGV4dERhdGEgPSB0ZW1wbGF0ZURhdGEuY29udGFpbmVyRGF0YS5pbm5lckhUTUw7XG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVEYXRhLnRleHREYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHZhbHVlVG9Xcml0ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHNldFRlbXBsYXRlRG9tRGF0YSh0aGlzLmRvbUVsZW1lbnQsIHt0ZXh0RGF0YTogdmFsdWVUb1dyaXRlfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAga28uZXhwb3J0U3ltYm9sKCd0ZW1wbGF0ZVNvdXJjZXMnLCBrby50ZW1wbGF0ZVNvdXJjZXMpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgndGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQnLCBrby50ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudCk7XG4gICAga28uZXhwb3J0U3ltYm9sKCd0ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGUnLCBrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGUpO1xufSkoKTtcbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90ZW1wbGF0ZUVuZ2luZTtcbiAgICBrby5zZXRUZW1wbGF0ZUVuZ2luZSA9IGZ1bmN0aW9uICh0ZW1wbGF0ZUVuZ2luZSkge1xuICAgICAgICBpZiAoKHRlbXBsYXRlRW5naW5lICE9IHVuZGVmaW5lZCkgJiYgISh0ZW1wbGF0ZUVuZ2luZSBpbnN0YW5jZW9mIGtvLnRlbXBsYXRlRW5naW5lKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRlbXBsYXRlRW5naW5lIG11c3QgaW5oZXJpdCBmcm9tIGtvLnRlbXBsYXRlRW5naW5lXCIpO1xuICAgICAgICBfdGVtcGxhdGVFbmdpbmUgPSB0ZW1wbGF0ZUVuZ2luZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZva2VGb3JFYWNoTm9kZUluQ29udGludW91c1JhbmdlKGZpcnN0Tm9kZSwgbGFzdE5vZGUsIGFjdGlvbikge1xuICAgICAgICB2YXIgbm9kZSwgbmV4dEluUXVldWUgPSBmaXJzdE5vZGUsIGZpcnN0T3V0T2ZSYW5nZU5vZGUgPSBrby52aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcobGFzdE5vZGUpO1xuICAgICAgICB3aGlsZSAobmV4dEluUXVldWUgJiYgKChub2RlID0gbmV4dEluUXVldWUpICE9PSBmaXJzdE91dE9mUmFuZ2VOb2RlKSkge1xuICAgICAgICAgICAgbmV4dEluUXVldWUgPSBrby52aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICBhY3Rpb24obm9kZSwgbmV4dEluUXVldWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGVCaW5kaW5nc09uQ29udGludW91c05vZGVBcnJheShjb250aW51b3VzTm9kZUFycmF5LCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAvLyBUbyBiZSB1c2VkIG9uIGFueSBub2RlcyB0aGF0IGhhdmUgYmVlbiByZW5kZXJlZCBieSBhIHRlbXBsYXRlIGFuZCBoYXZlIGJlZW4gaW5zZXJ0ZWQgaW50byBzb21lIHBhcmVudCBlbGVtZW50XG4gICAgICAgIC8vIFdhbGtzIHRocm91Z2ggY29udGludW91c05vZGVBcnJheSAod2hpY2ggKm11c3QqIGJlIGNvbnRpbnVvdXMsIGkuZS4sIGFuIHVuaW50ZXJydXB0ZWQgc2VxdWVuY2Ugb2Ygc2libGluZyBub2RlcywgYmVjYXVzZVxuICAgICAgICAvLyB0aGUgYWxnb3JpdGhtIGZvciB3YWxraW5nIHRoZW0gcmVsaWVzIG9uIHRoaXMpLCBhbmQgZm9yIGVhY2ggdG9wLWxldmVsIGl0ZW0gaW4gdGhlIHZpcnR1YWwtZWxlbWVudCBzZW5zZSxcbiAgICAgICAgLy8gKDEpIERvZXMgYSByZWd1bGFyIFwiYXBwbHlCaW5kaW5nc1wiIHRvIGFzc29jaWF0ZSBiaW5kaW5nQ29udGV4dCB3aXRoIHRoaXMgbm9kZSBhbmQgdG8gYWN0aXZhdGUgYW55IG5vbi1tZW1vaXplZCBiaW5kaW5nc1xuICAgICAgICAvLyAoMikgVW5tZW1vaXplcyBhbnkgbWVtb3MgaW4gdGhlIERPTSBzdWJ0cmVlIChlLmcuLCB0byBhY3RpdmF0ZSBiaW5kaW5ncyB0aGF0IGhhZCBiZWVuIG1lbW9pemVkIGR1cmluZyB0ZW1wbGF0ZSByZXdyaXRpbmcpXG5cbiAgICAgICAgaWYgKGNvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3ROb2RlID0gY29udGludW91c05vZGVBcnJheVswXSxcbiAgICAgICAgICAgICAgICBsYXN0Tm9kZSA9IGNvbnRpbnVvdXNOb2RlQXJyYXlbY29udGludW91c05vZGVBcnJheS5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gZmlyc3ROb2RlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXIgPSBrby5iaW5kaW5nUHJvdmlkZXJbJ2luc3RhbmNlJ10sXG4gICAgICAgICAgICAgICAgcHJlcHJvY2Vzc05vZGUgPSBwcm92aWRlclsncHJlcHJvY2Vzc05vZGUnXTtcblxuICAgICAgICAgICAgaWYgKHByZXByb2Nlc3NOb2RlKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlRm9yRWFjaE5vZGVJbkNvbnRpbnVvdXNSYW5nZShmaXJzdE5vZGUsIGxhc3ROb2RlLCBmdW5jdGlvbihub2RlLCBuZXh0Tm9kZUluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVQcmV2aW91c1NpYmxpbmcgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld05vZGVzID0gcHJlcHJvY2Vzc05vZGUuY2FsbChwcm92aWRlciwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IGZpcnN0Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5vZGUgPSBuZXdOb2Rlc1swXSB8fCBuZXh0Tm9kZUluUmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gbGFzdE5vZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5vZGUgPSBuZXdOb2Rlc1tuZXdOb2Rlcy5sZW5ndGggLSAxXSB8fCBub2RlUHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIHByZXByb2Nlc3NOb2RlIGNhbiBjaGFuZ2UgdGhlIG5vZGVzLCBpbmNsdWRpbmcgdGhlIGZpcnN0IGFuZCBsYXN0IG5vZGVzLCB1cGRhdGUgY29udGludW91c05vZGVBcnJheSB0byBtYXRjaC5cbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRoZSBmdWxsIHNldCwgaW5jbHVkaW5nIGlubmVyIG5vZGVzLCBiZWNhdXNlIHRoZSB1bm1lbW9pemUgc3RlcCBtaWdodCByZW1vdmUgdGhlIGZpcnN0IG5vZGUgKGFuZCBzbyB0aGUgcmVhbFxuICAgICAgICAgICAgICAgIC8vIGZpcnN0IG5vZGUgbmVlZHMgdG8gYmUgaW4gdGhlIGFycmF5KS5cbiAgICAgICAgICAgICAgICBjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdE5vZGUpIHsgLy8gcHJlcHJvY2Vzc05vZGUgbWlnaHQgaGF2ZSByZW1vdmVkIGFsbCB0aGUgbm9kZXMsIGluIHdoaWNoIGNhc2UgdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG9cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlyc3ROb2RlID09PSBsYXN0Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51b3VzTm9kZUFycmF5LnB1c2goZmlyc3ROb2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51b3VzTm9kZUFycmF5LnB1c2goZmlyc3ROb2RlLCBsYXN0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLmZpeFVwQ29udGludW91c05vZGVBcnJheShjb250aW51b3VzTm9kZUFycmF5LCBwYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5lZWQgdG8gYXBwbHlCaW5kaW5ncyAqYmVmb3JlKiB1bm1lbW96aWF0aW9uLCBiZWNhdXNlIHVubWVtb2l6YXRpb24gbWlnaHQgaW50cm9kdWNlIGV4dHJhIG5vZGVzICh0aGF0IHdlIGRvbid0IHdhbnQgdG8gcmUtYmluZClcbiAgICAgICAgICAgIC8vIHdoZXJlYXMgYSByZWd1bGFyIGFwcGx5QmluZGluZ3Mgd29uJ3QgaW50cm9kdWNlIG5ldyBtZW1vaXplZCBub2Rlc1xuICAgICAgICAgICAgaW52b2tlRm9yRWFjaE5vZGVJbkNvbnRpbnVvdXNSYW5nZShmaXJzdE5vZGUsIGxhc3ROb2RlLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgfHwgbm9kZS5ub2RlVHlwZSA9PT0gOClcbiAgICAgICAgICAgICAgICAgICAga28uYXBwbHlCaW5kaW5ncyhiaW5kaW5nQ29udGV4dCwgbm9kZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGludm9rZUZvckVhY2hOb2RlSW5Db250aW51b3VzUmFuZ2UoZmlyc3ROb2RlLCBsYXN0Tm9kZSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDgpXG4gICAgICAgICAgICAgICAgICAgIGtvLm1lbW9pemF0aW9uLnVubWVtb2l6ZURvbU5vZGVBbmREZXNjZW5kYW50cyhub2RlLCBbYmluZGluZ0NvbnRleHRdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgYW55IGNoYW5nZXMgZG9uZSBieSBhcHBseUJpbmRpbmdzIG9yIHVubWVtb2l6ZSBhcmUgcmVmbGVjdGVkIGluIHRoZSBhcnJheVxuICAgICAgICAgICAga28udXRpbHMuZml4VXBDb250aW51b3VzTm9kZUFycmF5KGNvbnRpbnVvdXNOb2RlQXJyYXksIHBhcmVudE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3ROb2RlRnJvbVBvc3NpYmxlQXJyYXkobm9kZU9yTm9kZUFycmF5KSB7XG4gICAgICAgIHJldHVybiBub2RlT3JOb2RlQXJyYXkubm9kZVR5cGUgPyBub2RlT3JOb2RlQXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5vZGVPck5vZGVBcnJheS5sZW5ndGggPiAwID8gbm9kZU9yTm9kZUFycmF5WzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWN1dGVUZW1wbGF0ZSh0YXJnZXROb2RlT3JOb2RlQXJyYXksIHJlbmRlck1vZGUsIHRlbXBsYXRlLCBiaW5kaW5nQ29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIGZpcnN0VGFyZ2V0Tm9kZSA9IHRhcmdldE5vZGVPck5vZGVBcnJheSAmJiBnZXRGaXJzdE5vZGVGcm9tUG9zc2libGVBcnJheSh0YXJnZXROb2RlT3JOb2RlQXJyYXkpO1xuICAgICAgICB2YXIgdGVtcGxhdGVEb2N1bWVudCA9IChmaXJzdFRhcmdldE5vZGUgfHwgdGVtcGxhdGUgfHwge30pLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciB0ZW1wbGF0ZUVuZ2luZVRvVXNlID0gKG9wdGlvbnNbJ3RlbXBsYXRlRW5naW5lJ10gfHwgX3RlbXBsYXRlRW5naW5lKTtcbiAgICAgICAga28udGVtcGxhdGVSZXdyaXRpbmcuZW5zdXJlVGVtcGxhdGVJc1Jld3JpdHRlbih0ZW1wbGF0ZSwgdGVtcGxhdGVFbmdpbmVUb1VzZSwgdGVtcGxhdGVEb2N1bWVudCk7XG4gICAgICAgIHZhciByZW5kZXJlZE5vZGVzQXJyYXkgPSB0ZW1wbGF0ZUVuZ2luZVRvVXNlWydyZW5kZXJUZW1wbGF0ZSddKHRlbXBsYXRlLCBiaW5kaW5nQ29udGV4dCwgb3B0aW9ucywgdGVtcGxhdGVEb2N1bWVudCk7XG5cbiAgICAgICAgLy8gTG9vc2VseSBjaGVjayByZXN1bHQgaXMgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gICAgICAgIGlmICgodHlwZW9mIHJlbmRlcmVkTm9kZXNBcnJheS5sZW5ndGggIT0gXCJudW1iZXJcIikgfHwgKHJlbmRlcmVkTm9kZXNBcnJheS5sZW5ndGggPiAwICYmIHR5cGVvZiByZW5kZXJlZE5vZGVzQXJyYXlbMF0ubm9kZVR5cGUgIT0gXCJudW1iZXJcIikpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUZW1wbGF0ZSBlbmdpbmUgbXVzdCByZXR1cm4gYW4gYXJyYXkgb2YgRE9NIG5vZGVzXCIpO1xuXG4gICAgICAgIHZhciBoYXZlQWRkZWROb2Rlc1RvUGFyZW50ID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAocmVuZGVyTW9kZSkge1xuICAgICAgICAgICAgY2FzZSBcInJlcGxhY2VDaGlsZHJlblwiOlxuICAgICAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW4odGFyZ2V0Tm9kZU9yTm9kZUFycmF5LCByZW5kZXJlZE5vZGVzQXJyYXkpO1xuICAgICAgICAgICAgICAgIGhhdmVBZGRlZE5vZGVzVG9QYXJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJlcGxhY2VOb2RlXCI6XG4gICAgICAgICAgICAgICAga28udXRpbHMucmVwbGFjZURvbU5vZGVzKHRhcmdldE5vZGVPck5vZGVBcnJheSwgcmVuZGVyZWROb2Rlc0FycmF5KTtcbiAgICAgICAgICAgICAgICBoYXZlQWRkZWROb2Rlc1RvUGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJpZ25vcmVUYXJnZXROb2RlXCI6IGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHJlbmRlck1vZGU6IFwiICsgcmVuZGVyTW9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGF2ZUFkZGVkTm9kZXNUb1BhcmVudCkge1xuICAgICAgICAgICAgYWN0aXZhdGVCaW5kaW5nc09uQ29udGludW91c05vZGVBcnJheShyZW5kZXJlZE5vZGVzQXJyYXksIGJpbmRpbmdDb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zWydhZnRlclJlbmRlciddKVxuICAgICAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKG9wdGlvbnNbJ2FmdGVyUmVuZGVyJ10sIG51bGwsIFtyZW5kZXJlZE5vZGVzQXJyYXksIGJpbmRpbmdDb250ZXh0WyckZGF0YSddXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWROb2Rlc0FycmF5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVUZW1wbGF0ZU5hbWUodGVtcGxhdGUsIGRhdGEsIGNvbnRleHQpIHtcbiAgICAgICAgLy8gVGhlIHRlbXBsYXRlIGNhbiBiZSBzcGVjaWZpZWQgYXM6XG4gICAgICAgIGlmIChrby5pc09ic2VydmFibGUodGVtcGxhdGUpKSB7XG4gICAgICAgICAgICAvLyAxLiBBbiBvYnNlcnZhYmxlLCB3aXRoIHN0cmluZyB2YWx1ZVxuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyAyLiBBIGZ1bmN0aW9uIG9mIChkYXRhLCBjb250ZXh0KSByZXR1cm5pbmcgYSBzdHJpbmdcbiAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZShkYXRhLCBjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIDMuIEEgc3RyaW5nXG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBrby5yZW5kZXJUZW1wbGF0ZSA9IGZ1bmN0aW9uICh0ZW1wbGF0ZSwgZGF0YU9yQmluZGluZ0NvbnRleHQsIG9wdGlvbnMsIHRhcmdldE5vZGVPck5vZGVBcnJheSwgcmVuZGVyTW9kZSkge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgaWYgKChvcHRpb25zWyd0ZW1wbGF0ZUVuZ2luZSddIHx8IF90ZW1wbGF0ZUVuZ2luZSkgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2V0IGEgdGVtcGxhdGUgZW5naW5lIGJlZm9yZSBjYWxsaW5nIHJlbmRlclRlbXBsYXRlXCIpO1xuICAgICAgICByZW5kZXJNb2RlID0gcmVuZGVyTW9kZSB8fCBcInJlcGxhY2VDaGlsZHJlblwiO1xuXG4gICAgICAgIGlmICh0YXJnZXROb2RlT3JOb2RlQXJyYXkpIHtcbiAgICAgICAgICAgIHZhciBmaXJzdFRhcmdldE5vZGUgPSBnZXRGaXJzdE5vZGVGcm9tUG9zc2libGVBcnJheSh0YXJnZXROb2RlT3JOb2RlQXJyYXkpO1xuXG4gICAgICAgICAgICB2YXIgd2hlblRvRGlzcG9zZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICghZmlyc3RUYXJnZXROb2RlKSB8fCAha28udXRpbHMuZG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50KGZpcnN0VGFyZ2V0Tm9kZSk7IH07IC8vIFBhc3NpdmUgZGlzcG9zYWwgKG9uIG5leHQgZXZhbHVhdGlvbilcbiAgICAgICAgICAgIHZhciBhY3RpdmVseURpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCA9IChmaXJzdFRhcmdldE5vZGUgJiYgcmVuZGVyTW9kZSA9PSBcInJlcGxhY2VOb2RlXCIpID8gZmlyc3RUYXJnZXROb2RlLnBhcmVudE5vZGUgOiBmaXJzdFRhcmdldE5vZGU7XG5cbiAgICAgICAgICAgIHJldHVybiBrby5kZXBlbmRlbnRPYnNlcnZhYmxlKCAvLyBTbyB0aGUgRE9NIGlzIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCB3aGVuIGFueSBkZXBlbmRlbmN5IGNoYW5nZXNcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB3ZSd2ZSBnb3QgYSBwcm9wZXIgYmluZGluZyBjb250ZXh0IHRvIHdvcmsgd2l0aFxuICAgICAgICAgICAgICAgICAgICB2YXIgYmluZGluZ0NvbnRleHQgPSAoZGF0YU9yQmluZGluZ0NvbnRleHQgJiYgKGRhdGFPckJpbmRpbmdDb250ZXh0IGluc3RhbmNlb2Yga28uYmluZGluZ0NvbnRleHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBkYXRhT3JCaW5kaW5nQ29udGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcga28uYmluZGluZ0NvbnRleHQoZGF0YU9yQmluZGluZ0NvbnRleHQsIG51bGwsIG51bGwsIG51bGwsIHsgXCJleHBvcnREZXBlbmRlbmNpZXNcIjogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVOYW1lID0gcmVzb2x2ZVRlbXBsYXRlTmFtZSh0ZW1wbGF0ZSwgYmluZGluZ0NvbnRleHRbJyRkYXRhJ10sIGJpbmRpbmdDb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkTm9kZXNBcnJheSA9IGV4ZWN1dGVUZW1wbGF0ZSh0YXJnZXROb2RlT3JOb2RlQXJyYXksIHJlbmRlck1vZGUsIHRlbXBsYXRlTmFtZSwgYmluZGluZ0NvbnRleHQsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXJNb2RlID09IFwicmVwbGFjZU5vZGVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Tm9kZU9yTm9kZUFycmF5ID0gcmVuZGVyZWROb2Rlc0FycmF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RUYXJnZXROb2RlID0gZ2V0Rmlyc3ROb2RlRnJvbVBvc3NpYmxlQXJyYXkodGFyZ2V0Tm9kZU9yTm9kZUFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB7IGRpc3Bvc2VXaGVuOiB3aGVuVG9EaXNwb3NlLCBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGFjdGl2ZWx5RGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBXZSBkb24ndCB5ZXQgaGF2ZSBhIERPTSBub2RlIHRvIGV2YWx1YXRlLCBzbyB1c2UgYSBtZW1vIGFuZCByZW5kZXIgdGhlIHRlbXBsYXRlIGxhdGVyIHdoZW4gdGhlcmUgaXMgYSBET00gbm9kZVxuICAgICAgICAgICAgcmV0dXJuIGtvLm1lbW9pemF0aW9uLm1lbW9pemUoZnVuY3Rpb24gKGRvbU5vZGUpIHtcbiAgICAgICAgICAgICAgICBrby5yZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgZGF0YU9yQmluZGluZ0NvbnRleHQsIG9wdGlvbnMsIGRvbU5vZGUsIFwicmVwbGFjZU5vZGVcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBrby5yZW5kZXJUZW1wbGF0ZUZvckVhY2ggPSBmdW5jdGlvbiAodGVtcGxhdGUsIGFycmF5T3JPYnNlcnZhYmxlQXJyYXksIG9wdGlvbnMsIHRhcmdldE5vZGUsIHBhcmVudEJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIC8vIFNpbmNlIHNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcgYWx3YXlzIGNhbGxzIGV4ZWN1dGVUZW1wbGF0ZUZvckFycmF5SXRlbSBhbmQgdGhlblxuICAgICAgICAvLyBhY3RpdmF0ZUJpbmRpbmdzQ2FsbGJhY2sgZm9yIGFkZGVkIGl0ZW1zLCB3ZSBjYW4gc3RvcmUgdGhlIGJpbmRpbmcgY29udGV4dCBpbiB0aGUgZm9ybWVyIHRvIHVzZSBpbiB0aGUgbGF0dGVyLlxuICAgICAgICB2YXIgYXJyYXlJdGVtQ29udGV4dDtcblxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgY2FsbGVkIGJ5IHNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcgdG8gZ2V0IHRoZSBub2RlcyB0byBhZGQgdG8gdGFyZ2V0Tm9kZVxuICAgICAgICB2YXIgZXhlY3V0ZVRlbXBsYXRlRm9yQXJyYXlJdGVtID0gZnVuY3Rpb24gKGFycmF5VmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBTdXBwb3J0IHNlbGVjdGluZyB0ZW1wbGF0ZSBhcyBhIGZ1bmN0aW9uIG9mIHRoZSBkYXRhIGJlaW5nIHJlbmRlcmVkXG4gICAgICAgICAgICBhcnJheUl0ZW1Db250ZXh0ID0gcGFyZW50QmluZGluZ0NvbnRleHRbJ2NyZWF0ZUNoaWxkQ29udGV4dCddKGFycmF5VmFsdWUsIG9wdGlvbnNbJ2FzJ10sIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0WyckaW5kZXgnXSA9IGluZGV4O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5hbWUgPSByZXNvbHZlVGVtcGxhdGVOYW1lKHRlbXBsYXRlLCBhcnJheVZhbHVlLCBhcnJheUl0ZW1Db250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBleGVjdXRlVGVtcGxhdGUobnVsbCwgXCJpZ25vcmVUYXJnZXROb2RlXCIsIHRlbXBsYXRlTmFtZSwgYXJyYXlJdGVtQ29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIHNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcgaGFzIGFkZGVkIG5vZGVzIHRvIHRhcmdldE5vZGVcbiAgICAgICAgdmFyIGFjdGl2YXRlQmluZGluZ3NDYWxsYmFjayA9IGZ1bmN0aW9uKGFycmF5VmFsdWUsIGFkZGVkTm9kZXNBcnJheSwgaW5kZXgpIHtcbiAgICAgICAgICAgIGFjdGl2YXRlQmluZGluZ3NPbkNvbnRpbnVvdXNOb2RlQXJyYXkoYWRkZWROb2Rlc0FycmF5LCBhcnJheUl0ZW1Db250ZXh0KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zWydhZnRlclJlbmRlciddKVxuICAgICAgICAgICAgICAgIG9wdGlvbnNbJ2FmdGVyUmVuZGVyJ10oYWRkZWROb2Rlc0FycmF5LCBhcnJheVZhbHVlKTtcblxuICAgICAgICAgICAgLy8gcmVsZWFzZSB0aGUgXCJjYWNoZVwiIHZhcmlhYmxlLCBzbyB0aGF0IGl0IGNhbiBiZSBjb2xsZWN0ZWQgYnlcbiAgICAgICAgICAgIC8vIHRoZSBHQyB3aGVuIGl0cyB2YWx1ZSBpc24ndCB1c2VkIGZyb20gd2l0aGluIHRoZSBiaW5kaW5ncyBhbnltb3JlLlxuICAgICAgICAgICAgYXJyYXlJdGVtQ29udGV4dCA9IG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGtvLmRlcGVuZGVudE9ic2VydmFibGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVud3JhcHBlZEFycmF5ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShhcnJheU9yT2JzZXJ2YWJsZUFycmF5KSB8fCBbXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdW53cmFwcGVkQXJyYXkubGVuZ3RoID09IFwidW5kZWZpbmVkXCIpIC8vIENvZXJjZSBzaW5nbGUgdmFsdWUgaW50byBhcnJheVxuICAgICAgICAgICAgICAgIHVud3JhcHBlZEFycmF5ID0gW3Vud3JhcHBlZEFycmF5XTtcblxuICAgICAgICAgICAgLy8gRmlsdGVyIG91dCBhbnkgZW50cmllcyBtYXJrZWQgYXMgZGVzdHJveWVkXG4gICAgICAgICAgICB2YXIgZmlsdGVyZWRBcnJheSA9IGtvLnV0aWxzLmFycmF5RmlsdGVyKHVud3JhcHBlZEFycmF5LCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnNbJ2luY2x1ZGVEZXN0cm95ZWQnXSB8fCBpdGVtID09PSB1bmRlZmluZWQgfHwgaXRlbSA9PT0gbnVsbCB8fCAha28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShpdGVtWydfZGVzdHJveSddKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBDYWxsIHNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcsIGlnbm9yaW5nIGFueSBvYnNlcnZhYmxlcyB1bndyYXBwZWQgd2l0aGluIChtb3N0IGxpa2VseSBmcm9tIGEgY2FsbGJhY2sgZnVuY3Rpb24pLlxuICAgICAgICAgICAgLy8gSWYgdGhlIGFycmF5IGl0ZW1zIGFyZSBvYnNlcnZhYmxlcywgdGhvdWdoLCB0aGV5IHdpbGwgYmUgdW53cmFwcGVkIGluIGV4ZWN1dGVUZW1wbGF0ZUZvckFycmF5SXRlbSBhbmQgbWFuYWdlZCB3aXRoaW4gc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZy5cbiAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGtvLnV0aWxzLnNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcsIG51bGwsIFt0YXJnZXROb2RlLCBmaWx0ZXJlZEFycmF5LCBleGVjdXRlVGVtcGxhdGVGb3JBcnJheUl0ZW0sIG9wdGlvbnMsIGFjdGl2YXRlQmluZGluZ3NDYWxsYmFja10pO1xuXG4gICAgICAgIH0sIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiB0YXJnZXROb2RlIH0pO1xuICAgIH07XG5cbiAgICB2YXIgdGVtcGxhdGVDb21wdXRlZERvbURhdGFLZXkgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKTtcbiAgICBmdW5jdGlvbiBkaXNwb3NlT2xkQ29tcHV0ZWRBbmRTdG9yZU5ld09uZShlbGVtZW50LCBuZXdDb21wdXRlZCkge1xuICAgICAgICB2YXIgb2xkQ29tcHV0ZWQgPSBrby51dGlscy5kb21EYXRhLmdldChlbGVtZW50LCB0ZW1wbGF0ZUNvbXB1dGVkRG9tRGF0YUtleSk7XG4gICAgICAgIGlmIChvbGRDb21wdXRlZCAmJiAodHlwZW9mKG9sZENvbXB1dGVkLmRpc3Bvc2UpID09ICdmdW5jdGlvbicpKVxuICAgICAgICAgICAgb2xkQ29tcHV0ZWQuZGlzcG9zZSgpO1xuICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LCB0ZW1wbGF0ZUNvbXB1dGVkRG9tRGF0YUtleSwgKG5ld0NvbXB1dGVkICYmIG5ld0NvbXB1dGVkLmlzQWN0aXZlKCkpID8gbmV3Q29tcHV0ZWQgOiB1bmRlZmluZWQpO1xuICAgIH1cblxuICAgIGtvLmJpbmRpbmdIYW5kbGVyc1sndGVtcGxhdGUnXSA9IHtcbiAgICAgICAgJ2luaXQnOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgICAgICAvLyBTdXBwb3J0IGFub255bW91cyB0ZW1wbGF0ZXNcbiAgICAgICAgICAgIHZhciBiaW5kaW5nVmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJpbmRpbmdWYWx1ZSA9PSBcInN0cmluZ1wiIHx8IGJpbmRpbmdWYWx1ZVsnbmFtZSddKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBhIG5hbWVkIHRlbXBsYXRlIC0gY2xlYXIgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMuZW1wdHlOb2RlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgnbm9kZXMnIGluIGJpbmRpbmdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGJlZW4gZ2l2ZW4gYW4gYXJyYXkgb2YgRE9NIG5vZGVzLiBTYXZlIHRoZW0gYXMgdGhlIHRlbXBsYXRlIHNvdXJjZS5cbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBrbm93biB1c2UgY2FzZSBmb3IgdGhlIG5vZGUgYXJyYXkgYmVpbmcgYW4gb2JzZXJ2YWJsZSBhcnJheSAoaWYgdGhlIG91dHB1dFxuICAgICAgICAgICAgICAgIC8vIHZhcmllcywgcHV0IHRoYXQgYmVoYXZpb3IgKmludG8qIHlvdXIgdGVtcGxhdGUgLSB0aGF0J3Mgd2hhdCB0ZW1wbGF0ZXMgYXJlIGZvciksIGFuZFxuICAgICAgICAgICAgICAgIC8vIHRoZSBpbXBsZW1lbnRhdGlvbiB3b3VsZCBiZSBhIG1lc3MsIHNvIGFzc2VydCB0aGF0IGl0J3Mgbm90IG9ic2VydmFibGUuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gYmluZGluZ1ZhbHVlWydub2RlcyddIHx8IFtdO1xuICAgICAgICAgICAgICAgIGlmIChrby5pc09ic2VydmFibGUobm9kZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIFwibm9kZXNcIiBvcHRpb24gbXVzdCBiZSBhIHBsYWluLCBub24tb2JzZXJ2YWJsZSBhcnJheS4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGtvLnV0aWxzLm1vdmVDbGVhbmVkTm9kZXNUb0NvbnRhaW5lckVsZW1lbnQobm9kZXMpOyAvLyBUaGlzIGFsc28gcmVtb3ZlcyB0aGUgbm9kZXMgZnJvbSB0aGVpciBjdXJyZW50IHBhcmVudFxuICAgICAgICAgICAgICAgIG5ldyBrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGUoZWxlbWVudClbJ25vZGVzJ10oY29udGFpbmVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBhbiBhbm9ueW1vdXMgdGVtcGxhdGUgLSBzdG9yZSB0aGUgZWxlbWVudCBjb250ZW50cywgdGhlbiBjbGVhciB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5vZGVzID0ga28udmlydHVhbEVsZW1lbnRzLmNoaWxkTm9kZXMoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGtvLnV0aWxzLm1vdmVDbGVhbmVkTm9kZXNUb0NvbnRhaW5lckVsZW1lbnQodGVtcGxhdGVOb2Rlcyk7IC8vIFRoaXMgYWxzbyByZW1vdmVzIHRoZSBub2RlcyBmcm9tIHRoZWlyIGN1cnJlbnQgcGFyZW50XG4gICAgICAgICAgICAgICAgbmV3IGtvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZShlbGVtZW50KVsnbm9kZXMnXShjb250YWluZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgJ2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzogdHJ1ZSB9O1xuICAgICAgICB9LFxuICAgICAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZUFjY2Vzc29yKCksXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWUpLFxuICAgICAgICAgICAgICAgIHNob3VsZERpc3BsYXkgPSB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlQ29tcHV0ZWQgPSBudWxsLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlTmFtZTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZU5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlTmFtZSA9IG9wdGlvbnNbJ25hbWUnXTtcblxuICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgXCJpZlwiL1wiaWZub3RcIiBjb25kaXRpb25zXG4gICAgICAgICAgICAgICAgaWYgKCdpZicgaW4gb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkRGlzcGxheSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUob3B0aW9uc1snaWYnXSk7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZERpc3BsYXkgJiYgJ2lmbm90JyBpbiBvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICBzaG91bGREaXNwbGF5ID0gIWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUob3B0aW9uc1snaWZub3QnXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgnZm9yZWFjaCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIC8vIFJlbmRlciBvbmNlIGZvciBlYWNoIGRhdGEgcG9pbnQgKHRyZWF0aW5nIGRhdGEgc2V0IGFzIGVtcHR5IGlmIHNob3VsZERpc3BsYXk9PWZhbHNlKVxuICAgICAgICAgICAgICAgIHZhciBkYXRhQXJyYXkgPSAoc2hvdWxkRGlzcGxheSAmJiBvcHRpb25zWydmb3JlYWNoJ10pIHx8IFtdO1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlQ29tcHV0ZWQgPSBrby5yZW5kZXJUZW1wbGF0ZUZvckVhY2godGVtcGxhdGVOYW1lIHx8IGVsZW1lbnQsIGRhdGFBcnJheSwgb3B0aW9ucywgZWxlbWVudCwgYmluZGluZ0NvbnRleHQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc2hvdWxkRGlzcGxheSkge1xuICAgICAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGUoZWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlbmRlciBvbmNlIGZvciB0aGlzIHNpbmdsZSBkYXRhIHBvaW50IChvciB1c2UgdGhlIHZpZXdNb2RlbCBpZiBubyBkYXRhIHdhcyBwcm92aWRlZClcbiAgICAgICAgICAgICAgICB2YXIgaW5uZXJCaW5kaW5nQ29udGV4dCA9ICgnZGF0YScgaW4gb3B0aW9ucykgP1xuICAgICAgICAgICAgICAgICAgICBiaW5kaW5nQ29udGV4dC5jcmVhdGVTdGF0aWNDaGlsZENvbnRleHQob3B0aW9uc1snZGF0YSddLCBvcHRpb25zWydhcyddKSA6ICAvLyBHaXZlbiBhbiBleHBsaXRpdCAnZGF0YScgdmFsdWUsIHdlIGNyZWF0ZSBhIGNoaWxkIGJpbmRpbmcgY29udGV4dCBmb3IgaXRcbiAgICAgICAgICAgICAgICAgICAgYmluZGluZ0NvbnRleHQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHaXZlbiBubyBleHBsaWNpdCAnZGF0YScgdmFsdWUsIHdlIHJldGFpbiB0aGUgc2FtZSBiaW5kaW5nIGNvbnRleHRcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZUNvbXB1dGVkID0ga28ucmVuZGVyVGVtcGxhdGUodGVtcGxhdGVOYW1lIHx8IGVsZW1lbnQsIGlubmVyQmluZGluZ0NvbnRleHQsIG9wdGlvbnMsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJdCBvbmx5IG1ha2VzIHNlbnNlIHRvIGhhdmUgYSBzaW5nbGUgdGVtcGxhdGUgY29tcHV0ZWQgcGVyIGVsZW1lbnQgKG90aGVyd2lzZSB3aGljaCBvbmUgc2hvdWxkIGhhdmUgaXRzIG91dHB1dCBkaXNwbGF5ZWQ/KVxuICAgICAgICAgICAgZGlzcG9zZU9sZENvbXB1dGVkQW5kU3RvcmVOZXdPbmUoZWxlbWVudCwgdGVtcGxhdGVDb21wdXRlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQW5vbnltb3VzIHRlbXBsYXRlcyBjYW4ndCBiZSByZXdyaXR0ZW4uIEdpdmUgYSBuaWNlIGVycm9yIG1lc3NhZ2UgaWYgeW91IHRyeSB0byBkbyBpdC5cbiAgICBrby5leHByZXNzaW9uUmV3cml0aW5nLmJpbmRpbmdSZXdyaXRlVmFsaWRhdG9yc1sndGVtcGxhdGUnXSA9IGZ1bmN0aW9uKGJpbmRpbmdWYWx1ZSkge1xuICAgICAgICB2YXIgcGFyc2VkQmluZGluZ1ZhbHVlID0ga28uZXhwcmVzc2lvblJld3JpdGluZy5wYXJzZU9iamVjdExpdGVyYWwoYmluZGluZ1ZhbHVlKTtcblxuICAgICAgICBpZiAoKHBhcnNlZEJpbmRpbmdWYWx1ZS5sZW5ndGggPT0gMSkgJiYgcGFyc2VkQmluZGluZ1ZhbHVlWzBdWyd1bmtub3duJ10pXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gSXQgbG9va3MgbGlrZSBhIHN0cmluZyBsaXRlcmFsLCBub3QgYW4gb2JqZWN0IGxpdGVyYWwsIHNvIHRyZWF0IGl0IGFzIGEgbmFtZWQgdGVtcGxhdGUgKHdoaWNoIGlzIGFsbG93ZWQgZm9yIHJld3JpdGluZylcblxuICAgICAgICBpZiAoa28uZXhwcmVzc2lvblJld3JpdGluZy5rZXlWYWx1ZUFycmF5Q29udGFpbnNLZXkocGFyc2VkQmluZGluZ1ZhbHVlLCBcIm5hbWVcIikpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gTmFtZWQgdGVtcGxhdGVzIGNhbiBiZSByZXdyaXR0ZW4sIHNvIHJldHVybiBcIm5vIGVycm9yXCJcbiAgICAgICAgcmV0dXJuIFwiVGhpcyB0ZW1wbGF0ZSBlbmdpbmUgZG9lcyBub3Qgc3VwcG9ydCBhbm9ueW1vdXMgdGVtcGxhdGVzIG5lc3RlZCB3aXRoaW4gaXRzIHRlbXBsYXRlc1wiO1xuICAgIH07XG5cbiAgICBrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzWyd0ZW1wbGF0ZSddID0gdHJ1ZTtcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgnc2V0VGVtcGxhdGVFbmdpbmUnLCBrby5zZXRUZW1wbGF0ZUVuZ2luZSk7XG5rby5leHBvcnRTeW1ib2woJ3JlbmRlclRlbXBsYXRlJywga28ucmVuZGVyVGVtcGxhdGUpO1xuLy8gR28gdGhyb3VnaCB0aGUgaXRlbXMgdGhhdCBoYXZlIGJlZW4gYWRkZWQgYW5kIGRlbGV0ZWQgYW5kIHRyeSB0byBmaW5kIG1hdGNoZXMgYmV0d2VlbiB0aGVtLlxua28udXRpbHMuZmluZE1vdmVzSW5BcnJheUNvbXBhcmlzb24gPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIGxpbWl0RmFpbGVkQ29tcGFyZXMpIHtcbiAgICBpZiAobGVmdC5sZW5ndGggJiYgcmlnaHQubGVuZ3RoKSB7XG4gICAgICAgIHZhciBmYWlsZWRDb21wYXJlcywgbCwgciwgbGVmdEl0ZW0sIHJpZ2h0SXRlbTtcbiAgICAgICAgZm9yIChmYWlsZWRDb21wYXJlcyA9IGwgPSAwOyAoIWxpbWl0RmFpbGVkQ29tcGFyZXMgfHwgZmFpbGVkQ29tcGFyZXMgPCBsaW1pdEZhaWxlZENvbXBhcmVzKSAmJiAobGVmdEl0ZW0gPSBsZWZ0W2xdKTsgKytsKSB7XG4gICAgICAgICAgICBmb3IgKHIgPSAwOyByaWdodEl0ZW0gPSByaWdodFtyXTsgKytyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxlZnRJdGVtWyd2YWx1ZSddID09PSByaWdodEl0ZW1bJ3ZhbHVlJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdEl0ZW1bJ21vdmVkJ10gPSByaWdodEl0ZW1bJ2luZGV4J107XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0SXRlbVsnbW92ZWQnXSA9IGxlZnRJdGVtWydpbmRleCddO1xuICAgICAgICAgICAgICAgICAgICByaWdodC5zcGxpY2UociwgMSk7ICAgICAgICAgLy8gVGhpcyBpdGVtIGlzIG1hcmtlZCBhcyBtb3ZlZDsgc28gcmVtb3ZlIGl0IGZyb20gcmlnaHQgbGlzdFxuICAgICAgICAgICAgICAgICAgICBmYWlsZWRDb21wYXJlcyA9IHIgPSAwOyAgICAgLy8gUmVzZXQgZmFpbGVkIGNvbXBhcmVzIGNvdW50IGJlY2F1c2Ugd2UncmUgY2hlY2tpbmcgZm9yIGNvbnNlY3V0aXZlIGZhaWx1cmVzXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZhaWxlZENvbXBhcmVzICs9IHI7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5rby51dGlscy5jb21wYXJlQXJyYXlzID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdHVzTm90SW5PbGQgPSAnYWRkZWQnLCBzdGF0dXNOb3RJbk5ldyA9ICdkZWxldGVkJztcblxuICAgIC8vIFNpbXBsZSBjYWxjdWxhdGlvbiBiYXNlZCBvbiBMZXZlbnNodGVpbiBkaXN0YW5jZS5cbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKG9sZEFycmF5LCBuZXdBcnJheSwgb3B0aW9ucykge1xuICAgICAgICAvLyBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgaWYgdGhlIHRoaXJkIGFyZyBpcyBhY3R1YWxseSBhIGJvb2wsIGludGVycHJldFxuICAgICAgICAvLyBpdCBhcyB0aGUgb2xkIHBhcmFtZXRlciAnZG9udExpbWl0TW92ZXMnLiBOZXdlciBjb2RlIHNob3VsZCB1c2UgeyBkb250TGltaXRNb3ZlczogdHJ1ZSB9LlxuICAgICAgICBvcHRpb25zID0gKHR5cGVvZiBvcHRpb25zID09PSAnYm9vbGVhbicpID8geyAnZG9udExpbWl0TW92ZXMnOiBvcHRpb25zIH0gOiAob3B0aW9ucyB8fCB7fSk7XG4gICAgICAgIG9sZEFycmF5ID0gb2xkQXJyYXkgfHwgW107XG4gICAgICAgIG5ld0FycmF5ID0gbmV3QXJyYXkgfHwgW107XG5cbiAgICAgICAgaWYgKG9sZEFycmF5Lmxlbmd0aCA8IG5ld0FycmF5Lmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlU21hbGxBcnJheVRvQmlnQXJyYXkob2xkQXJyYXksIG5ld0FycmF5LCBzdGF0dXNOb3RJbk9sZCwgc3RhdHVzTm90SW5OZXcsIG9wdGlvbnMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZVNtYWxsQXJyYXlUb0JpZ0FycmF5KG5ld0FycmF5LCBvbGRBcnJheSwgc3RhdHVzTm90SW5OZXcsIHN0YXR1c05vdEluT2xkLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wYXJlU21hbGxBcnJheVRvQmlnQXJyYXkoc21sQXJyYXksIGJpZ0FycmF5LCBzdGF0dXNOb3RJblNtbCwgc3RhdHVzTm90SW5CaWcsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG15TWluID0gTWF0aC5taW4sXG4gICAgICAgICAgICBteU1heCA9IE1hdGgubWF4LFxuICAgICAgICAgICAgZWRpdERpc3RhbmNlTWF0cml4ID0gW10sXG4gICAgICAgICAgICBzbWxJbmRleCwgc21sSW5kZXhNYXggPSBzbWxBcnJheS5sZW5ndGgsXG4gICAgICAgICAgICBiaWdJbmRleCwgYmlnSW5kZXhNYXggPSBiaWdBcnJheS5sZW5ndGgsXG4gICAgICAgICAgICBjb21wYXJlUmFuZ2UgPSAoYmlnSW5kZXhNYXggLSBzbWxJbmRleE1heCkgfHwgMSxcbiAgICAgICAgICAgIG1heERpc3RhbmNlID0gc21sSW5kZXhNYXggKyBiaWdJbmRleE1heCArIDEsXG4gICAgICAgICAgICB0aGlzUm93LCBsYXN0Um93LFxuICAgICAgICAgICAgYmlnSW5kZXhNYXhGb3JSb3csIGJpZ0luZGV4TWluRm9yUm93O1xuXG4gICAgICAgIGZvciAoc21sSW5kZXggPSAwOyBzbWxJbmRleCA8PSBzbWxJbmRleE1heDsgc21sSW5kZXgrKykge1xuICAgICAgICAgICAgbGFzdFJvdyA9IHRoaXNSb3c7XG4gICAgICAgICAgICBlZGl0RGlzdGFuY2VNYXRyaXgucHVzaCh0aGlzUm93ID0gW10pO1xuICAgICAgICAgICAgYmlnSW5kZXhNYXhGb3JSb3cgPSBteU1pbihiaWdJbmRleE1heCwgc21sSW5kZXggKyBjb21wYXJlUmFuZ2UpO1xuICAgICAgICAgICAgYmlnSW5kZXhNaW5Gb3JSb3cgPSBteU1heCgwLCBzbWxJbmRleCAtIDEpO1xuICAgICAgICAgICAgZm9yIChiaWdJbmRleCA9IGJpZ0luZGV4TWluRm9yUm93OyBiaWdJbmRleCA8PSBiaWdJbmRleE1heEZvclJvdzsgYmlnSW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGlmICghYmlnSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgIHRoaXNSb3dbYmlnSW5kZXhdID0gc21sSW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFzbWxJbmRleCkgIC8vIFRvcCByb3cgLSB0cmFuc2Zvcm0gZW1wdHkgYXJyYXkgaW50byBuZXcgYXJyYXkgdmlhIGFkZGl0aW9uc1xuICAgICAgICAgICAgICAgICAgICB0aGlzUm93W2JpZ0luZGV4XSA9IGJpZ0luZGV4ICsgMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzbWxBcnJheVtzbWxJbmRleCAtIDFdID09PSBiaWdBcnJheVtiaWdJbmRleCAtIDFdKVxuICAgICAgICAgICAgICAgICAgICB0aGlzUm93W2JpZ0luZGV4XSA9IGxhc3RSb3dbYmlnSW5kZXggLSAxXTsgICAgICAgICAgICAgICAgICAvLyBjb3B5IHZhbHVlIChubyBlZGl0KVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9ydGhEaXN0YW5jZSA9IGxhc3RSb3dbYmlnSW5kZXhdIHx8IG1heERpc3RhbmNlOyAgICAgICAvLyBub3QgaW4gYmlnIChkZWxldGlvbilcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdlc3REaXN0YW5jZSA9IHRoaXNSb3dbYmlnSW5kZXggLSAxXSB8fCBtYXhEaXN0YW5jZTsgICAgLy8gbm90IGluIHNtYWxsIChhZGRpdGlvbilcbiAgICAgICAgICAgICAgICAgICAgdGhpc1Jvd1tiaWdJbmRleF0gPSBteU1pbihub3J0aERpc3RhbmNlLCB3ZXN0RGlzdGFuY2UpICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWRpdFNjcmlwdCA9IFtdLCBtZU1pbnVzT25lLCBub3RJblNtbCA9IFtdLCBub3RJbkJpZyA9IFtdO1xuICAgICAgICBmb3IgKHNtbEluZGV4ID0gc21sSW5kZXhNYXgsIGJpZ0luZGV4ID0gYmlnSW5kZXhNYXg7IHNtbEluZGV4IHx8IGJpZ0luZGV4Oykge1xuICAgICAgICAgICAgbWVNaW51c09uZSA9IGVkaXREaXN0YW5jZU1hdHJpeFtzbWxJbmRleF1bYmlnSW5kZXhdIC0gMTtcbiAgICAgICAgICAgIGlmIChiaWdJbmRleCAmJiBtZU1pbnVzT25lID09PSBlZGl0RGlzdGFuY2VNYXRyaXhbc21sSW5kZXhdW2JpZ0luZGV4LTFdKSB7XG4gICAgICAgICAgICAgICAgbm90SW5TbWwucHVzaChlZGl0U2NyaXB0W2VkaXRTY3JpcHQubGVuZ3RoXSA9IHsgICAgIC8vIGFkZGVkXG4gICAgICAgICAgICAgICAgICAgICdzdGF0dXMnOiBzdGF0dXNOb3RJblNtbCxcbiAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogYmlnQXJyYXlbLS1iaWdJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICdpbmRleCc6IGJpZ0luZGV4IH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzbWxJbmRleCAmJiBtZU1pbnVzT25lID09PSBlZGl0RGlzdGFuY2VNYXRyaXhbc21sSW5kZXggLSAxXVtiaWdJbmRleF0pIHtcbiAgICAgICAgICAgICAgICBub3RJbkJpZy5wdXNoKGVkaXRTY3JpcHRbZWRpdFNjcmlwdC5sZW5ndGhdID0geyAgICAgLy8gZGVsZXRlZFxuICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogc3RhdHVzTm90SW5CaWcsXG4gICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IHNtbEFycmF5Wy0tc21sSW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAnaW5kZXgnOiBzbWxJbmRleCB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLS1iaWdJbmRleDtcbiAgICAgICAgICAgICAgICAtLXNtbEluZGV4O1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9uc1snc3BhcnNlJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdFNjcmlwdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0dXMnOiBcInJldGFpbmVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBiaWdBcnJheVtiaWdJbmRleF0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IGEgbGltaXQgb24gdGhlIG51bWJlciBvZiBjb25zZWN1dGl2ZSBub24tbWF0Y2hpbmcgY29tcGFyaXNvbnM7IGhhdmluZyBpdCBhIG11bHRpcGxlIG9mXG4gICAgICAgIC8vIHNtbEluZGV4TWF4IGtlZXBzIHRoZSB0aW1lIGNvbXBsZXhpdHkgb2YgdGhpcyBhbGdvcml0aG0gbGluZWFyLlxuICAgICAgICBrby51dGlscy5maW5kTW92ZXNJbkFycmF5Q29tcGFyaXNvbihub3RJbkJpZywgbm90SW5TbWwsICFvcHRpb25zWydkb250TGltaXRNb3ZlcyddICYmIHNtbEluZGV4TWF4ICogMTApO1xuXG4gICAgICAgIHJldHVybiBlZGl0U2NyaXB0LnJldmVyc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcGFyZUFycmF5cztcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuY29tcGFyZUFycmF5cycsIGtvLnV0aWxzLmNvbXBhcmVBcnJheXMpO1xuKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBPYmplY3RpdmU6XG4gICAgLy8gKiBHaXZlbiBhbiBpbnB1dCBhcnJheSwgYSBjb250YWluZXIgRE9NIG5vZGUsIGFuZCBhIGZ1bmN0aW9uIGZyb20gYXJyYXkgZWxlbWVudHMgdG8gYXJyYXlzIG9mIERPTSBub2RlcyxcbiAgICAvLyAgIG1hcCB0aGUgYXJyYXkgZWxlbWVudHMgdG8gYXJyYXlzIG9mIERPTSBub2RlcywgY29uY2F0ZW5hdGUgdG9nZXRoZXIgYWxsIHRoZXNlIGFycmF5cywgYW5kIHVzZSB0aGVtIHRvIHBvcHVsYXRlIHRoZSBjb250YWluZXIgRE9NIG5vZGVcbiAgICAvLyAqIE5leHQgdGltZSB3ZSdyZSBnaXZlbiB0aGUgc2FtZSBjb21iaW5hdGlvbiBvZiB0aGluZ3MgKHdpdGggdGhlIGFycmF5IHBvc3NpYmx5IGhhdmluZyBtdXRhdGVkKSwgdXBkYXRlIHRoZSBjb250YWluZXIgRE9NIG5vZGVcbiAgICAvLyAgIHNvIHRoYXQgaXRzIGNoaWxkcmVuIGlzIGFnYWluIHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZSBtYXBwaW5ncyBvZiB0aGUgYXJyYXkgZWxlbWVudHMsIGJ1dCBkb24ndCByZS1tYXAgYW55IGFycmF5IGVsZW1lbnRzIHRoYXQgd2VcbiAgICAvLyAgIHByZXZpb3VzbHkgbWFwcGVkIC0gcmV0YWluIHRob3NlIG5vZGVzLCBhbmQganVzdCBpbnNlcnQvZGVsZXRlIG90aGVyIG9uZXNcblxuICAgIC8vIFwiY2FsbGJhY2tBZnRlckFkZGluZ05vZGVzXCIgd2lsbCBiZSBpbnZva2VkIGFmdGVyIGFueSBcIm1hcHBpbmdcIi1nZW5lcmF0ZWQgbm9kZXMgYXJlIGluc2VydGVkIGludG8gdGhlIGNvbnRhaW5lciBub2RlXG4gICAgLy8gWW91IGNhbiB1c2UgdGhpcywgZm9yIGV4YW1wbGUsIHRvIGFjdGl2YXRlIGJpbmRpbmdzIG9uIHRob3NlIG5vZGVzLlxuXG4gICAgZnVuY3Rpb24gbWFwTm9kZUFuZFJlZnJlc2hXaGVuQ2hhbmdlZChjb250YWluZXJOb2RlLCBtYXBwaW5nLCB2YWx1ZVRvTWFwLCBjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMsIGluZGV4KSB7XG4gICAgICAgIC8vIE1hcCB0aGlzIGFycmF5IHZhbHVlIGluc2lkZSBhIGRlcGVuZGVudE9ic2VydmFibGUgc28gd2UgcmUtbWFwIHdoZW4gYW55IGRlcGVuZGVuY3kgY2hhbmdlc1xuICAgICAgICB2YXIgbWFwcGVkTm9kZXMgPSBbXTtcbiAgICAgICAgdmFyIGRlcGVuZGVudE9ic2VydmFibGUgPSBrby5kZXBlbmRlbnRPYnNlcnZhYmxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG5ld01hcHBlZE5vZGVzID0gbWFwcGluZyh2YWx1ZVRvTWFwLCBpbmRleCwga28udXRpbHMuZml4VXBDb250aW51b3VzTm9kZUFycmF5KG1hcHBlZE5vZGVzLCBjb250YWluZXJOb2RlKSkgfHwgW107XG5cbiAgICAgICAgICAgIC8vIE9uIHN1YnNlcXVlbnQgZXZhbHVhdGlvbnMsIGp1c3QgcmVwbGFjZSB0aGUgcHJldmlvdXNseS1pbnNlcnRlZCBET00gbm9kZXNcbiAgICAgICAgICAgIGlmIChtYXBwZWROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAga28udXRpbHMucmVwbGFjZURvbU5vZGVzKG1hcHBlZE5vZGVzLCBuZXdNYXBwZWROb2Rlcyk7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrQWZ0ZXJBZGRpbmdOb2RlcylcbiAgICAgICAgICAgICAgICAgICAga28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUoY2FsbGJhY2tBZnRlckFkZGluZ05vZGVzLCBudWxsLCBbdmFsdWVUb01hcCwgbmV3TWFwcGVkTm9kZXMsIGluZGV4XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBtYXBwZWROb2RlcyBhcnJheSwgdGhlcmVieSB1cGRhdGluZyB0aGUgcmVjb3JkXG4gICAgICAgICAgICAvLyBvZiB3aGljaCBub2RlcyB3b3VsZCBiZSBkZWxldGVkIGlmIHZhbHVlVG9NYXAgd2FzIGl0c2VsZiBsYXRlciByZW1vdmVkXG4gICAgICAgICAgICBtYXBwZWROb2Rlcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAga28udXRpbHMuYXJyYXlQdXNoQWxsKG1hcHBlZE5vZGVzLCBuZXdNYXBwZWROb2Rlcyk7XG4gICAgICAgIH0sIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBjb250YWluZXJOb2RlLCBkaXNwb3NlV2hlbjogZnVuY3Rpb24oKSB7IHJldHVybiAha28udXRpbHMuYW55RG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50KG1hcHBlZE5vZGVzKTsgfSB9KTtcbiAgICAgICAgcmV0dXJuIHsgbWFwcGVkTm9kZXMgOiBtYXBwZWROb2RlcywgZGVwZW5kZW50T2JzZXJ2YWJsZSA6IChkZXBlbmRlbnRPYnNlcnZhYmxlLmlzQWN0aXZlKCkgPyBkZXBlbmRlbnRPYnNlcnZhYmxlIDogdW5kZWZpbmVkKSB9O1xuICAgIH1cblxuICAgIHZhciBsYXN0TWFwcGluZ1Jlc3VsdERvbURhdGFLZXkgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKSxcbiAgICAgICAgZGVsZXRlZEl0ZW1EdW1teVZhbHVlID0ga28udXRpbHMuZG9tRGF0YS5uZXh0S2V5KCk7XG5cbiAgICBrby51dGlscy5zZXREb21Ob2RlQ2hpbGRyZW5Gcm9tQXJyYXlNYXBwaW5nID0gZnVuY3Rpb24gKGRvbU5vZGUsIGFycmF5LCBtYXBwaW5nLCBvcHRpb25zLCBjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMpIHtcbiAgICAgICAgLy8gQ29tcGFyZSB0aGUgcHJvdmlkZWQgYXJyYXkgYWdhaW5zdCB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgIGFycmF5ID0gYXJyYXkgfHwgW107XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgaXNGaXJzdEV4ZWN1dGlvbiA9IGtvLnV0aWxzLmRvbURhdGEuZ2V0KGRvbU5vZGUsIGxhc3RNYXBwaW5nUmVzdWx0RG9tRGF0YUtleSkgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGxhc3RNYXBwaW5nUmVzdWx0ID0ga28udXRpbHMuZG9tRGF0YS5nZXQoZG9tTm9kZSwgbGFzdE1hcHBpbmdSZXN1bHREb21EYXRhS2V5KSB8fCBbXTtcbiAgICAgICAgdmFyIGxhc3RBcnJheSA9IGtvLnV0aWxzLmFycmF5TWFwKGxhc3RNYXBwaW5nUmVzdWx0LCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5hcnJheUVudHJ5OyB9KTtcbiAgICAgICAgdmFyIGVkaXRTY3JpcHQgPSBrby51dGlscy5jb21wYXJlQXJyYXlzKGxhc3RBcnJheSwgYXJyYXksIG9wdGlvbnNbJ2RvbnRMaW1pdE1vdmVzJ10pO1xuXG4gICAgICAgIC8vIEJ1aWxkIHRoZSBuZXcgbWFwcGluZyByZXN1bHRcbiAgICAgICAgdmFyIG5ld01hcHBpbmdSZXN1bHQgPSBbXTtcbiAgICAgICAgdmFyIGxhc3RNYXBwaW5nUmVzdWx0SW5kZXggPSAwO1xuICAgICAgICB2YXIgbmV3TWFwcGluZ1Jlc3VsdEluZGV4ID0gMDtcblxuICAgICAgICB2YXIgbm9kZXNUb0RlbGV0ZSA9IFtdO1xuICAgICAgICB2YXIgaXRlbXNUb1Byb2Nlc3MgPSBbXTtcbiAgICAgICAgdmFyIGl0ZW1zRm9yQmVmb3JlUmVtb3ZlQ2FsbGJhY2tzID0gW107XG4gICAgICAgIHZhciBpdGVtc0Zvck1vdmVDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdmFyIGl0ZW1zRm9yQWZ0ZXJBZGRDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdmFyIG1hcERhdGE7XG5cbiAgICAgICAgZnVuY3Rpb24gaXRlbU1vdmVkT3JSZXRhaW5lZChlZGl0U2NyaXB0SW5kZXgsIG9sZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBtYXBEYXRhID0gbGFzdE1hcHBpbmdSZXN1bHRbb2xkUG9zaXRpb25dO1xuICAgICAgICAgICAgaWYgKG5ld01hcHBpbmdSZXN1bHRJbmRleCAhPT0gb2xkUG9zaXRpb24pXG4gICAgICAgICAgICAgICAgaXRlbXNGb3JNb3ZlQ2FsbGJhY2tzW2VkaXRTY3JpcHRJbmRleF0gPSBtYXBEYXRhO1xuICAgICAgICAgICAgLy8gU2luY2UgdXBkYXRpbmcgdGhlIGluZGV4IG1pZ2h0IGNoYW5nZSB0aGUgbm9kZXMsIGRvIHNvIGJlZm9yZSBjYWxsaW5nIGZpeFVwQ29udGludW91c05vZGVBcnJheVxuICAgICAgICAgICAgbWFwRGF0YS5pbmRleE9ic2VydmFibGUobmV3TWFwcGluZ1Jlc3VsdEluZGV4KyspO1xuICAgICAgICAgICAga28udXRpbHMuZml4VXBDb250aW51b3VzTm9kZUFycmF5KG1hcERhdGEubWFwcGVkTm9kZXMsIGRvbU5vZGUpO1xuICAgICAgICAgICAgbmV3TWFwcGluZ1Jlc3VsdC5wdXNoKG1hcERhdGEpO1xuICAgICAgICAgICAgaXRlbXNUb1Byb2Nlc3MucHVzaChtYXBEYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGxDYWxsYmFjayhjYWxsYmFjaywgaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gaXRlbXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKGl0ZW1zW2ldLm1hcHBlZE5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobm9kZSwgaSwgaXRlbXNbaV0uYXJyYXlFbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBlZGl0U2NyaXB0SXRlbSwgbW92ZWRJbmRleDsgZWRpdFNjcmlwdEl0ZW0gPSBlZGl0U2NyaXB0W2ldOyBpKyspIHtcbiAgICAgICAgICAgIG1vdmVkSW5kZXggPSBlZGl0U2NyaXB0SXRlbVsnbW92ZWQnXTtcbiAgICAgICAgICAgIHN3aXRjaCAoZWRpdFNjcmlwdEl0ZW1bJ3N0YXR1cyddKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRlbGV0ZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vdmVkSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGF0YSA9IGxhc3RNYXBwaW5nUmVzdWx0W2xhc3RNYXBwaW5nUmVzdWx0SW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIHRyYWNraW5nIGNoYW5nZXMgdG8gdGhlIG1hcHBpbmcgZm9yIHRoZXNlIG5vZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS5kZXBlbmRlbnRPYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5kZXBlbmRlbnRPYnNlcnZhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmRlcGVuZGVudE9ic2VydmFibGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFF1ZXVlIHRoZXNlIG5vZGVzIGZvciBsYXRlciByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa28udXRpbHMuZml4VXBDb250aW51b3VzTm9kZUFycmF5KG1hcERhdGEubWFwcGVkTm9kZXMsIGRvbU5vZGUpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zWydiZWZvcmVSZW1vdmUnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdNYXBwaW5nUmVzdWx0LnB1c2gobWFwRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zVG9Qcm9jZXNzLnB1c2gobWFwRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXBEYXRhLmFycmF5RW50cnkgPT09IGRlbGV0ZWRJdGVtRHVtbXlWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGF0YSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc0ZvckJlZm9yZVJlbW92ZUNhbGxiYWNrc1tpXSA9IG1hcERhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb0RlbGV0ZS5wdXNoLmFwcGx5KG5vZGVzVG9EZWxldGUsIG1hcERhdGEubWFwcGVkTm9kZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXN0TWFwcGluZ1Jlc3VsdEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcInJldGFpbmVkXCI6XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1Nb3ZlZE9yUmV0YWluZWQoaSwgbGFzdE1hcHBpbmdSZXN1bHRJbmRleCsrKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwiYWRkZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vdmVkSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbU1vdmVkT3JSZXRhaW5lZChpLCBtb3ZlZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcERhdGEgPSB7IGFycmF5RW50cnk6IGVkaXRTY3JpcHRJdGVtWyd2YWx1ZSddLCBpbmRleE9ic2VydmFibGU6IGtvLm9ic2VydmFibGUobmV3TWFwcGluZ1Jlc3VsdEluZGV4KyspIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdNYXBwaW5nUmVzdWx0LnB1c2gobWFwRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1RvUHJvY2Vzcy5wdXNoKG1hcERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0ZpcnN0RXhlY3V0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zRm9yQWZ0ZXJBZGRDYWxsYmFja3NbaV0gPSBtYXBEYXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgYSBjb3B5IG9mIHRoZSBhcnJheSBpdGVtcyB3ZSBqdXN0IGNvbnNpZGVyZWQgc28gd2UgY2FuIGRpZmZlcmVuY2UgaXQgbmV4dCB0aW1lXG4gICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KGRvbU5vZGUsIGxhc3RNYXBwaW5nUmVzdWx0RG9tRGF0YUtleSwgbmV3TWFwcGluZ1Jlc3VsdCk7XG5cbiAgICAgICAgLy8gQ2FsbCBiZWZvcmVNb3ZlIGZpcnN0IGJlZm9yZSBhbnkgY2hhbmdlcyBoYXZlIGJlZW4gbWFkZSB0byB0aGUgRE9NXG4gICAgICAgIGNhbGxDYWxsYmFjayhvcHRpb25zWydiZWZvcmVNb3ZlJ10sIGl0ZW1zRm9yTW92ZUNhbGxiYWNrcyk7XG5cbiAgICAgICAgLy8gTmV4dCByZW1vdmUgbm9kZXMgZm9yIGRlbGV0ZWQgaXRlbXMgKG9yIGp1c3QgY2xlYW4gaWYgdGhlcmUncyBhIGJlZm9yZVJlbW92ZSBjYWxsYmFjaylcbiAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKG5vZGVzVG9EZWxldGUsIG9wdGlvbnNbJ2JlZm9yZVJlbW92ZSddID8ga28uY2xlYW5Ob2RlIDoga28ucmVtb3ZlTm9kZSk7XG5cbiAgICAgICAgLy8gTmV4dCBhZGQvcmVvcmRlciB0aGUgcmVtYWluaW5nIGl0ZW1zICh3aWxsIGluY2x1ZGUgZGVsZXRlZCBpdGVtcyBpZiB0aGVyZSdzIGEgYmVmb3JlUmVtb3ZlIGNhbGxiYWNrKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbmV4dE5vZGUgPSBrby52aXJ0dWFsRWxlbWVudHMuZmlyc3RDaGlsZChkb21Ob2RlKSwgbGFzdE5vZGUsIG5vZGU7IG1hcERhdGEgPSBpdGVtc1RvUHJvY2Vzc1tpXTsgaSsrKSB7XG4gICAgICAgICAgICAvLyBHZXQgbm9kZXMgZm9yIG5ld2x5IGFkZGVkIGl0ZW1zXG4gICAgICAgICAgICBpZiAoIW1hcERhdGEubWFwcGVkTm9kZXMpXG4gICAgICAgICAgICAgICAga28udXRpbHMuZXh0ZW5kKG1hcERhdGEsIG1hcE5vZGVBbmRSZWZyZXNoV2hlbkNoYW5nZWQoZG9tTm9kZSwgbWFwcGluZywgbWFwRGF0YS5hcnJheUVudHJ5LCBjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMsIG1hcERhdGEuaW5kZXhPYnNlcnZhYmxlKSk7XG5cbiAgICAgICAgICAgIC8vIFB1dCBub2RlcyBpbiB0aGUgcmlnaHQgcGxhY2UgaWYgdGhleSBhcmVuJ3QgdGhlcmUgYWxyZWFkeVxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IG5vZGUgPSBtYXBEYXRhLm1hcHBlZE5vZGVzW2pdOyBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmcsIGxhc3ROb2RlID0gbm9kZSwgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgIT09IG5leHROb2RlKVxuICAgICAgICAgICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMuaW5zZXJ0QWZ0ZXIoZG9tTm9kZSwgbm9kZSwgbGFzdE5vZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSdW4gdGhlIGNhbGxiYWNrcyBmb3IgbmV3bHkgYWRkZWQgbm9kZXMgKGZvciBleGFtcGxlLCB0byBhcHBseSBiaW5kaW5ncywgZXRjLilcbiAgICAgICAgICAgIGlmICghbWFwRGF0YS5pbml0aWFsaXplZCAmJiBjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMobWFwRGF0YS5hcnJheUVudHJ5LCBtYXBEYXRhLm1hcHBlZE5vZGVzLCBtYXBEYXRhLmluZGV4T2JzZXJ2YWJsZSk7XG4gICAgICAgICAgICAgICAgbWFwRGF0YS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGVyZSdzIGEgYmVmb3JlUmVtb3ZlIGNhbGxiYWNrLCBjYWxsIGl0IGFmdGVyIHJlb3JkZXJpbmcuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBhc3N1bWUgdGhhdCB0aGUgYmVmb3JlUmVtb3ZlIGNhbGxiYWNrIHdpbGwgdXN1YWxseSBiZSB1c2VkIHRvIHJlbW92ZSB0aGUgbm9kZXMgdXNpbmdcbiAgICAgICAgLy8gc29tZSBzb3J0IG9mIGFuaW1hdGlvbiwgd2hpY2ggaXMgd2h5IHdlIGZpcnN0IHJlb3JkZXIgdGhlIG5vZGVzIHRoYXQgd2lsbCBiZSByZW1vdmVkLiBJZiB0aGVcbiAgICAgICAgLy8gY2FsbGJhY2sgaW5zdGVhZCByZW1vdmVzIHRoZSBub2RlcyByaWdodCBhd2F5LCBpdCB3b3VsZCBiZSBtb3JlIGVmZmljaWVudCB0byBza2lwIHJlb3JkZXJpbmcgdGhlbS5cbiAgICAgICAgLy8gUGVyaGFwcyB3ZSdsbCBtYWtlIHRoYXQgY2hhbmdlIGluIHRoZSBmdXR1cmUgaWYgdGhpcyBzY2VuYXJpbyBiZWNvbWVzIG1vcmUgY29tbW9uLlxuICAgICAgICBjYWxsQ2FsbGJhY2sob3B0aW9uc1snYmVmb3JlUmVtb3ZlJ10sIGl0ZW1zRm9yQmVmb3JlUmVtb3ZlQ2FsbGJhY2tzKTtcblxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBzdG9yZWQgdmFsdWVzIG9mIGRlbGV0ZWQgaXRlbXMgd2l0aCBhIGR1bW15IHZhbHVlLiBUaGlzIHByb3ZpZGVzIHR3byBiZW5lZml0czogaXQgbWFya3MgdGhpcyBpdGVtXG4gICAgICAgIC8vIGFzIGFscmVhZHkgXCJyZW1vdmVkXCIgc28gd2Ugd29uJ3QgY2FsbCBiZWZvcmVSZW1vdmUgZm9yIGl0IGFnYWluLCBhbmQgaXQgZW5zdXJlcyB0aGF0IHRoZSBpdGVtIHdvbid0IG1hdGNoIHVwXG4gICAgICAgIC8vIHdpdGggYW4gYWN0dWFsIGl0ZW0gaW4gdGhlIGFycmF5IGFuZCBhcHBlYXIgYXMgXCJyZXRhaW5lZFwiIG9yIFwibW92ZWRcIi5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW1zRm9yQmVmb3JlUmVtb3ZlQ2FsbGJhY2tzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoaXRlbXNGb3JCZWZvcmVSZW1vdmVDYWxsYmFja3NbaV0pIHtcbiAgICAgICAgICAgICAgICBpdGVtc0ZvckJlZm9yZVJlbW92ZUNhbGxiYWNrc1tpXS5hcnJheUVudHJ5ID0gZGVsZXRlZEl0ZW1EdW1teVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluYWxseSBjYWxsIGFmdGVyTW92ZSBhbmQgYWZ0ZXJBZGQgY2FsbGJhY2tzXG4gICAgICAgIGNhbGxDYWxsYmFjayhvcHRpb25zWydhZnRlck1vdmUnXSwgaXRlbXNGb3JNb3ZlQ2FsbGJhY2tzKTtcbiAgICAgICAgY2FsbENhbGxiYWNrKG9wdGlvbnNbJ2FmdGVyQWRkJ10sIGl0ZW1zRm9yQWZ0ZXJBZGRDYWxsYmFja3MpO1xuICAgIH1cbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZycsIGtvLnV0aWxzLnNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcpO1xua28ubmF0aXZlVGVtcGxhdGVFbmdpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1snYWxsb3dUZW1wbGF0ZVJld3JpdGluZyddID0gZmFsc2U7XG59XG5cbmtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lLnByb3RvdHlwZSA9IG5ldyBrby50ZW1wbGF0ZUVuZ2luZSgpO1xua28ubmF0aXZlVGVtcGxhdGVFbmdpbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0ga28ubmF0aXZlVGVtcGxhdGVFbmdpbmU7XG5rby5uYXRpdmVUZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGVbJ3JlbmRlclRlbXBsYXRlU291cmNlJ10gPSBmdW5jdGlvbiAodGVtcGxhdGVTb3VyY2UsIGJpbmRpbmdDb250ZXh0LCBvcHRpb25zLCB0ZW1wbGF0ZURvY3VtZW50KSB7XG4gICAgdmFyIHVzZU5vZGVzSWZBdmFpbGFibGUgPSAhKGtvLnV0aWxzLmllVmVyc2lvbiA8IDkpLCAvLyBJRTw5IGNsb25lTm9kZSBkb2Vzbid0IHdvcmsgcHJvcGVybHlcbiAgICAgICAgdGVtcGxhdGVOb2Rlc0Z1bmMgPSB1c2VOb2Rlc0lmQXZhaWxhYmxlID8gdGVtcGxhdGVTb3VyY2VbJ25vZGVzJ10gOiBudWxsLFxuICAgICAgICB0ZW1wbGF0ZU5vZGVzID0gdGVtcGxhdGVOb2Rlc0Z1bmMgPyB0ZW1wbGF0ZVNvdXJjZVsnbm9kZXMnXSgpIDogbnVsbDtcblxuICAgIGlmICh0ZW1wbGF0ZU5vZGVzKSB7XG4gICAgICAgIHJldHVybiBrby51dGlscy5tYWtlQXJyYXkodGVtcGxhdGVOb2Rlcy5jbG9uZU5vZGUodHJ1ZSkuY2hpbGROb2Rlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlVGV4dCA9IHRlbXBsYXRlU291cmNlWyd0ZXh0J10oKTtcbiAgICAgICAgcmV0dXJuIGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50KHRlbXBsYXRlVGV4dCwgdGVtcGxhdGVEb2N1bWVudCk7XG4gICAgfVxufTtcblxua28ubmF0aXZlVGVtcGxhdGVFbmdpbmUuaW5zdGFuY2UgPSBuZXcga28ubmF0aXZlVGVtcGxhdGVFbmdpbmUoKTtcbmtvLnNldFRlbXBsYXRlRW5naW5lKGtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lLmluc3RhbmNlKTtcblxua28uZXhwb3J0U3ltYm9sKCduYXRpdmVUZW1wbGF0ZUVuZ2luZScsIGtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lKTtcbihmdW5jdGlvbigpIHtcbiAgICBrby5qcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERldGVjdCB3aGljaCB2ZXJzaW9uIG9mIGpxdWVyeS10bXBsIHlvdSdyZSB1c2luZy4gVW5mb3J0dW5hdGVseSBqcXVlcnktdG1wbFxuICAgICAgICAvLyBkb2Vzbid0IGV4cG9zZSBhIHZlcnNpb24gbnVtYmVyLCBzbyB3ZSBoYXZlIHRvIGluZmVyIGl0LlxuICAgICAgICAvLyBOb3RlIHRoYXQgYXMgb2YgS25vY2tvdXQgMS4zLCB3ZSBvbmx5IHN1cHBvcnQgalF1ZXJ5LnRtcGwgMS4wLjBwcmUgYW5kIGxhdGVyLFxuICAgICAgICAvLyB3aGljaCBLTyBpbnRlcm5hbGx5IHJlZmVycyB0byBhcyB2ZXJzaW9uIFwiMlwiLCBzbyBvbGRlciB2ZXJzaW9ucyBhcmUgbm8gbG9uZ2VyIGRldGVjdGVkLlxuICAgICAgICB2YXIgalF1ZXJ5VG1wbFZlcnNpb24gPSB0aGlzLmpRdWVyeVRtcGxWZXJzaW9uID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFqUXVlcnlJbnN0YW5jZSB8fCAhKGpRdWVyeUluc3RhbmNlWyd0bXBsJ10pKVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgLy8gU2luY2UgaXQgZXhwb3NlcyBubyBvZmZpY2lhbCB2ZXJzaW9uIG51bWJlciwgd2UgdXNlIG91ciBvd24gbnVtYmVyaW5nIHN5c3RlbS4gVG8gYmUgdXBkYXRlZCBhcyBqcXVlcnktdG1wbCBldm9sdmVzLlxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5SW5zdGFuY2VbJ3RtcGwnXVsndGFnJ11bJ3RtcGwnXVsnb3BlbiddLnRvU3RyaW5nKCkuaW5kZXhPZignX18nKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIDEuMC4wcHJlLCBjdXN0b20gdGFncyBzaG91bGQgYXBwZW5kIG1hcmt1cCB0byBhbiBhcnJheSBjYWxsZWQgXCJfX1wiXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAyOyAvLyBGaW5hbCB2ZXJzaW9uIG9mIGpxdWVyeS50bXBsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaChleCkgeyAvKiBBcHBhcmVudGx5IG5vdCB0aGUgdmVyc2lvbiB3ZSB3ZXJlIGxvb2tpbmcgZm9yICovIH1cblxuICAgICAgICAgICAgcmV0dXJuIDE7IC8vIEFueSBvbGRlciB2ZXJzaW9uIHRoYXQgd2UgZG9uJ3Qgc3VwcG9ydFxuICAgICAgICB9KSgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGVuc3VyZUhhc1JlZmVyZW5jZWRKUXVlcnlUZW1wbGF0ZXMoKSB7XG4gICAgICAgICAgICBpZiAoalF1ZXJ5VG1wbFZlcnNpb24gPCAyKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdXIgdmVyc2lvbiBvZiBqUXVlcnkudG1wbCBpcyB0b28gb2xkLiBQbGVhc2UgdXBncmFkZSB0byBqUXVlcnkudG1wbCAxLjAuMHByZSBvciBsYXRlci5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBleGVjdXRlVGVtcGxhdGUoY29tcGlsZWRUZW1wbGF0ZSwgZGF0YSwgalF1ZXJ5VGVtcGxhdGVPcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4galF1ZXJ5SW5zdGFuY2VbJ3RtcGwnXShjb21waWxlZFRlbXBsYXRlLCBkYXRhLCBqUXVlcnlUZW1wbGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1sncmVuZGVyVGVtcGxhdGVTb3VyY2UnXSA9IGZ1bmN0aW9uKHRlbXBsYXRlU291cmNlLCBiaW5kaW5nQ29udGV4dCwgb3B0aW9ucywgdGVtcGxhdGVEb2N1bWVudCkge1xuICAgICAgICAgICAgdGVtcGxhdGVEb2N1bWVudCA9IHRlbXBsYXRlRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIGVuc3VyZUhhc1JlZmVyZW5jZWRKUXVlcnlUZW1wbGF0ZXMoKTtcblxuICAgICAgICAgICAgLy8gRW5zdXJlIHdlIGhhdmUgc3RvcmVkIGEgcHJlY29tcGlsZWQgdmVyc2lvbiBvZiB0aGlzIHRlbXBsYXRlIChkb24ndCB3YW50IHRvIHJlcGFyc2Ugb24gZXZlcnkgcmVuZGVyKVxuICAgICAgICAgICAgdmFyIHByZWNvbXBpbGVkID0gdGVtcGxhdGVTb3VyY2VbJ2RhdGEnXSgncHJlY29tcGlsZWQnKTtcbiAgICAgICAgICAgIGlmICghcHJlY29tcGlsZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVUZXh0ID0gdGVtcGxhdGVTb3VyY2VbJ3RleHQnXSgpIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgLy8gV3JhcCBpbiBcIndpdGgoJHdoYXRldmVyLmtvQmluZGluZ0NvbnRleHQpIHsgLi4uIH1cIlxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVGV4dCA9IFwie3trb193aXRoICRpdGVtLmtvQmluZGluZ0NvbnRleHR9fVwiICsgdGVtcGxhdGVUZXh0ICsgXCJ7ey9rb193aXRofX1cIjtcblxuICAgICAgICAgICAgICAgIHByZWNvbXBpbGVkID0galF1ZXJ5SW5zdGFuY2VbJ3RlbXBsYXRlJ10obnVsbCwgdGVtcGxhdGVUZXh0KTtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVNvdXJjZVsnZGF0YSddKCdwcmVjb21waWxlZCcsIHByZWNvbXBpbGVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRhdGEgPSBbYmluZGluZ0NvbnRleHRbJyRkYXRhJ11dOyAvLyBQcmV3cmFwIHRoZSBkYXRhIGluIGFuIGFycmF5IHRvIHN0b3AganF1ZXJ5LnRtcGwgZnJvbSB0cnlpbmcgdG8gdW53cmFwIGFueSBhcnJheXNcbiAgICAgICAgICAgIHZhciBqUXVlcnlUZW1wbGF0ZU9wdGlvbnMgPSBqUXVlcnlJbnN0YW5jZVsnZXh0ZW5kJ10oeyAna29CaW5kaW5nQ29udGV4dCc6IGJpbmRpbmdDb250ZXh0IH0sIG9wdGlvbnNbJ3RlbXBsYXRlT3B0aW9ucyddKTtcblxuICAgICAgICAgICAgdmFyIHJlc3VsdE5vZGVzID0gZXhlY3V0ZVRlbXBsYXRlKHByZWNvbXBpbGVkLCBkYXRhLCBqUXVlcnlUZW1wbGF0ZU9wdGlvbnMpO1xuICAgICAgICAgICAgcmVzdWx0Tm9kZXNbJ2FwcGVuZFRvJ10odGVtcGxhdGVEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTsgLy8gVXNpbmcgXCJhcHBlbmRUb1wiIGZvcmNlcyBqUXVlcnkvalF1ZXJ5LnRtcGwgdG8gcGVyZm9ybSBuZWNlc3NhcnkgY2xlYW51cCB3b3JrXG5cbiAgICAgICAgICAgIGpRdWVyeUluc3RhbmNlWydmcmFnbWVudHMnXSA9IHt9OyAvLyBDbGVhciBqUXVlcnkncyBmcmFnbWVudCBjYWNoZSB0byBhdm9pZCBhIG1lbW9yeSBsZWFrIGFmdGVyIGEgbGFyZ2UgbnVtYmVyIG9mIHRlbXBsYXRlIHJlbmRlcnNcbiAgICAgICAgICAgIHJldHVybiByZXN1bHROb2RlcztcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzWydjcmVhdGVKYXZhU2NyaXB0RXZhbHVhdG9yQmxvY2snXSA9IGZ1bmN0aW9uKHNjcmlwdCkge1xuICAgICAgICAgICAgcmV0dXJuIFwie3trb19jb2RlICgoZnVuY3Rpb24oKSB7IHJldHVybiBcIiArIHNjcmlwdCArIFwiIH0pKCkpIH19XCI7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpc1snYWRkVGVtcGxhdGUnXSA9IGZ1bmN0aW9uKHRlbXBsYXRlTmFtZSwgdGVtcGxhdGVNYXJrdXApIHtcbiAgICAgICAgICAgIGRvY3VtZW50LndyaXRlKFwiPHNjcmlwdCB0eXBlPSd0ZXh0L2h0bWwnIGlkPSdcIiArIHRlbXBsYXRlTmFtZSArIFwiJz5cIiArIHRlbXBsYXRlTWFya3VwICsgXCI8XCIgKyBcIi9zY3JpcHQ+XCIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChqUXVlcnlUbXBsVmVyc2lvbiA+IDApIHtcbiAgICAgICAgICAgIGpRdWVyeUluc3RhbmNlWyd0bXBsJ11bJ3RhZyddWydrb19jb2RlJ10gPSB7XG4gICAgICAgICAgICAgICAgb3BlbjogXCJfXy5wdXNoKCQxIHx8ICcnKTtcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGpRdWVyeUluc3RhbmNlWyd0bXBsJ11bJ3RhZyddWydrb193aXRoJ10gPSB7XG4gICAgICAgICAgICAgICAgb3BlbjogXCJ3aXRoKCQxKSB7XCIsXG4gICAgICAgICAgICAgICAgY2xvc2U6IFwifSBcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBrby5qcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmUucHJvdG90eXBlID0gbmV3IGtvLnRlbXBsYXRlRW5naW5lKCk7XG4gICAga28uanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGtvLmpxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZTtcblxuICAgIC8vIFVzZSB0aGlzIG9uZSBieSBkZWZhdWx0ICpvbmx5IGlmIGpxdWVyeS50bXBsIGlzIHJlZmVyZW5jZWQqXG4gICAgdmFyIGpxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZUluc3RhbmNlID0gbmV3IGtvLmpxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZSgpO1xuICAgIGlmIChqcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmVJbnN0YW5jZS5qUXVlcnlUbXBsVmVyc2lvbiA+IDApXG4gICAgICAgIGtvLnNldFRlbXBsYXRlRW5naW5lKGpxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZUluc3RhbmNlKTtcblxuICAgIGtvLmV4cG9ydFN5bWJvbCgnanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lJywga28uanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lKTtcbn0pKCk7XG59KSk7XG59KCkpO1xufSkoKTtcbiIsIi8qKlxyXG4gKiBKU09OIHBhcnNlLlxyXG4gKlxyXG4gKiBAc2VlIEJhc2VkIG9uIGpRdWVyeSNwYXJzZUpTT04gKE1JVCkgYW5kIEpTT04yXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbnZhciBydmFsaWRjaGFycyA9IC9eW1xcXSw6e31cXHNdKiQvO1xyXG52YXIgcnZhbGlkZXNjYXBlID0gL1xcXFwoPzpbXCJcXFxcXFwvYmZucnRdfHVbMC05YS1mQS1GXXs0fSkvZztcclxudmFyIHJ2YWxpZHRva2VucyA9IC9cIlteXCJcXFxcXFxuXFxyXSpcInx0cnVlfGZhbHNlfG51bGx8LT9cXGQrKD86XFwuXFxkKik/KD86W2VFXVsrXFwtXT9cXGQrKT8vZztcclxudmFyIHJ2YWxpZGJyYWNlcyA9IC8oPzpefDp8LCkoPzpcXHMqXFxbKSsvZztcclxudmFyIHJ0cmltTGVmdCA9IC9eXFxzKy87XHJcbnZhciBydHJpbVJpZ2h0ID0gL1xccyskLztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2Vqc29uKGRhdGEpIHtcclxuICBpZiAoJ3N0cmluZycgIT0gdHlwZW9mIGRhdGEgfHwgIWRhdGEpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZGF0YSA9IGRhdGEucmVwbGFjZShydHJpbUxlZnQsICcnKS5yZXBsYWNlKHJ0cmltUmlnaHQsICcnKTtcclxuXHJcbiAgLy8gQXR0ZW1wdCB0byBwYXJzZSB1c2luZyB0aGUgbmF0aXZlIEpTT04gcGFyc2VyIGZpcnN0XHJcbiAgaWYgKGdsb2JhbC5KU09OICYmIEpTT04ucGFyc2UpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHJ2YWxpZGNoYXJzLnRlc3QoZGF0YS5yZXBsYWNlKHJ2YWxpZGVzY2FwZSwgJ0AnKVxyXG4gICAgICAucmVwbGFjZShydmFsaWR0b2tlbnMsICddJylcclxuICAgICAgLnJlcGxhY2UocnZhbGlkYnJhY2VzLCAnJykpKSB7XHJcbiAgICByZXR1cm4gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBkYXRhKSkoKTtcclxuICB9XHJcbn07IiwiLyoqXHJcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcclxuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgdmFyIHN0ciA9ICcnO1xyXG5cclxuICBmb3IgKHZhciBpIGluIG9iaikge1xyXG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJztcclxuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHFzXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpe1xyXG4gIHZhciBxcnkgPSB7fTtcclxuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xyXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XHJcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcclxuICB9XHJcbiAgcmV0dXJuIHFyeTtcclxufTtcclxuIiwiLyoqXHJcbiAqIFBhcnNlcyBhbiBVUklcclxuICpcclxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcclxuXHJcbnZhciBwYXJ0cyA9IFtcclxuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcclxuICAgIHZhciBzcmMgPSBzdHIsXHJcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXHJcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXHJcbiAgICAgICAgdXJpID0ge30sXHJcbiAgICAgICAgaSA9IDE0O1xyXG5cclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcclxuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVyaTtcclxufTtcclxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCcuL3VybCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gbG9va3VwO1xuXG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5cbnZhciBjYWNoZSA9IGV4cG9ydHMubWFuYWdlcnMgPSB7fTtcblxuLyoqXG4gKiBMb29rcyB1cCBhbiBleGlzdGluZyBgTWFuYWdlcmAgZm9yIG11bHRpcGxleGluZy5cbiAqIElmIHRoZSB1c2VyIHN1bW1vbnM6XG4gKlxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYScpO2BcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2InKTtgXG4gKlxuICogV2UgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlIGJhc2VkIG9uIHNhbWUgc2NoZW1lL3BvcnQvaG9zdCxcbiAqIGFuZCB3ZSBpbml0aWFsaXplIHNvY2tldHMgZm9yIGVhY2ggbmFtZXNwYWNlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9va3VwICh1cmksIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7XG4gIHZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlO1xuICB2YXIgaWQgPSBwYXJzZWQuaWQ7XG4gIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7XG4gIHZhciBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fCBvcHRzWydmb3JjZSBuZXcgY29ubmVjdGlvbiddIHx8XG4gICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7XG5cbiAgdmFyIGlvO1xuXG4gIGlmIChuZXdDb25uZWN0aW9uKSB7XG4gICAgZGVidWcoJ2lnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgICBjYWNoZVtpZF0gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGlvID0gY2FjaGVbaWRdO1xuICB9XG4gIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5O1xuICB9XG4gIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1xuXG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5NYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gb247XG5cbi8qKlxuICogSGVscGVyIGZvciBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEV2ZW50RW1pdHRlcn0gb2JqIHdpdGggYEVtaXR0ZXJgIG1peGluIG9yIGBFdmVudEVtaXR0ZXJgXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gb24gKG9iaiwgZXYsIGZuKSB7XG4gIG9iai5vbihldiwgZm4pO1xuICByZXR1cm4ge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iai5yZW1vdmVMaXN0ZW5lcihldiwgZm4pO1xuICAgIH1cbiAgfTtcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgdG9BcnJheSA9IHJlcXVpcmUoJ3RvLWFycmF5Jyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIEludGVybmFsIGV2ZW50cyAoYmxhY2tsaXN0ZWQpLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIGV2ZW50cyA9IHtcbiAgY29ubmVjdDogMSxcbiAgY29ubmVjdF9lcnJvcjogMSxcbiAgY29ubmVjdF90aW1lb3V0OiAxLFxuICBjb25uZWN0aW5nOiAxLFxuICBkaXNjb25uZWN0OiAxLFxuICBlcnJvcjogMSxcbiAgcmVjb25uZWN0OiAxLFxuICByZWNvbm5lY3RfYXR0ZW1wdDogMSxcbiAgcmVjb25uZWN0X2ZhaWxlZDogMSxcbiAgcmVjb25uZWN0X2Vycm9yOiAxLFxuICByZWNvbm5lY3Rpbmc6IDEsXG4gIHBpbmc6IDEsXG4gIHBvbmc6IDFcbn07XG5cbi8qKlxuICogU2hvcnRjdXQgdG8gYEVtaXR0ZXIjZW1pdGAuXG4gKi9cblxudmFyIGVtaXQgPSBFbWl0dGVyLnByb3RvdHlwZS5lbWl0O1xuXG4vKipcbiAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0IChpbywgbnNwLCBvcHRzKSB7XG4gIHRoaXMuaW8gPSBpbztcbiAgdGhpcy5uc3AgPSBuc3A7XG4gIHRoaXMuanNvbiA9IHRoaXM7IC8vIGNvbXBhdFxuICB0aGlzLmlkcyA9IDA7XG4gIHRoaXMuYWNrcyA9IHt9O1xuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgaWYgKG9wdHMgJiYgb3B0cy5xdWVyeSkge1xuICAgIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB9XG4gIGlmICh0aGlzLmlvLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIG9wZW4sIGNsb3NlIGFuZCBwYWNrZXQgZXZlbnRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zdWJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHJldHVybjtcblxuICB2YXIgaW8gPSB0aGlzLmlvO1xuICB0aGlzLnN1YnMgPSBbXG4gICAgb24oaW8sICdvcGVuJywgYmluZCh0aGlzLCAnb25vcGVuJykpLFxuICAgIG9uKGlvLCAncGFja2V0JywgYmluZCh0aGlzLCAnb25wYWNrZXQnKSksXG4gICAgb24oaW8sICdjbG9zZScsIGJpbmQodGhpcywgJ29uY2xvc2UnKSlcbiAgXTtcbn07XG5cbi8qKlxuICogXCJPcGVuc1wiIHRoZSBzb2NrZXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9wZW4gPVxuU29ja2V0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHJldHVybiB0aGlzO1xuXG4gIHRoaXMuc3ViRXZlbnRzKCk7XG4gIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICBpZiAoJ29wZW4nID09PSB0aGlzLmlvLnJlYWR5U3RhdGUpIHRoaXMub25vcGVuKCk7XG4gIHRoaXMuZW1pdCgnY29ubmVjdGluZycpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIGFyZ3MudW5zaGlmdCgnbWVzc2FnZScpO1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZSBgZW1pdGAuXG4gKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldikge1xuICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICB2YXIgcGFja2V0ID0geyB0eXBlOiBwYXJzZXIuRVZFTlQsIGRhdGE6IGFyZ3MgfTtcblxuICBwYWNrZXQub3B0aW9ucyA9IHt9O1xuICBwYWNrZXQub3B0aW9ucy5jb21wcmVzcyA9ICF0aGlzLmZsYWdzIHx8IGZhbHNlICE9PSB0aGlzLmZsYWdzLmNvbXByZXNzO1xuXG4gIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSkge1xuICAgIGRlYnVnKCdlbWl0dGluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWQnLCB0aGlzLmlkcyk7XG4gICAgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgcGFja2V0LmlkID0gdGhpcy5pZHMrKztcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZW5kQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxuXG4gIGRlbGV0ZSB0aGlzLmZsYWdzO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICB0aGlzLmlvLnBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYG9wZW5gLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygndHJhbnNwb3J0IGlzIG9wZW4gLSBjb25uZWN0aW5nJyk7XG5cbiAgLy8gd3JpdGUgY29ubmVjdCBwYWNrZXQgaWYgbmVjZXNzYXJ5XG4gIGlmICgnLycgIT09IHRoaXMubnNwKSB7XG4gICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeSA9IHR5cGVvZiB0aGlzLnF1ZXJ5ID09PSAnb2JqZWN0JyA/IHBhcnNlcXMuZW5jb2RlKHRoaXMucXVlcnkpIDogdGhpcy5xdWVyeTtcbiAgICAgIGRlYnVnKCdzZW5kaW5nIGNvbm5lY3QgcGFja2V0IHdpdGggcXVlcnkgJXMnLCBxdWVyeSk7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1QsIHF1ZXJ5OiBxdWVyeX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1R9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBjbG9zZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvblxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1ZygnY2xvc2UgKCVzKScsIHJlYXNvbik7XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgZGVsZXRlIHRoaXMuaWQ7XG4gIHRoaXMuZW1pdCgnZGlzY29ubmVjdCcsIHJlYXNvbik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIHNvY2tldCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKHBhY2tldC5uc3AgIT09IHRoaXMubnNwKSByZXR1cm47XG5cbiAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgIGNhc2UgcGFyc2VyLkNPTk5FQ1Q6XG4gICAgICB0aGlzLm9uY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5ESVNDT05ORUNUOlxuICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVJST1I6XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgcGFja2V0LmRhdGEpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmV2ZW50ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICBkZWJ1ZygnZW1pdHRpbmcgZXZlbnQgJWonLCBhcmdzKTtcblxuICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICBkZWJ1ZygnYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudCcpO1xuICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goYXJncyk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmFjayA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzZW50ID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgaWYgKHNlbnQpIHJldHVybjtcbiAgICBzZW50ID0gdHJ1ZTtcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICBkZWJ1Zygnc2VuZGluZyBhY2sgJWonLCBhcmdzKTtcblxuICAgIHNlbGYucGFja2V0KHtcbiAgICAgIHR5cGU6IHBhcnNlci5BQ0ssXG4gICAgICBpZDogaWQsXG4gICAgICBkYXRhOiBhcmdzXG4gICAgfSk7XG4gIH07XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25hY2sgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhY2spIHtcbiAgICBkZWJ1ZygnY2FsbGluZyBhY2sgJXMgd2l0aCAlaicsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgIGFjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7XG4gICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdiYWQgYWNrICVzJywgcGFja2V0LmlkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcbiAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbn07XG5cbi8qKlxuICogRW1pdCBidWZmZXJlZCBldmVudHMgKHJlY2VpdmVkIGFuZCBlbWl0dGVkKS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXRCdWZmZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnJlY2VpdmVCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIHRoaXMucmVjZWl2ZUJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucGFja2V0KHRoaXMuc2VuZEJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnc2VydmVyIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgdGhpcy5kZXN0cm95KCk7XG4gIHRoaXMub25jbG9zZSgnaW8gc2VydmVyIGRpc2Nvbm5lY3QnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gKiB0aGF0IHJlY29ubmVjdGlvbnMgZG9uJ3QgZ2V0IHRyaWdnZXJlZCBmb3IgdGhpcy5cbiAqXG4gKiBAYXBpIHByaXZhdGUuXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSB7XG4gICAgLy8gY2xlYW4gc3Vic2NyaXB0aW9ucyB0byBhdm9pZCByZWNvbm5lY3Rpb25zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc3Vic1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuc3VicyA9IG51bGw7XG4gIH1cblxuICB0aGlzLmlvLmRlc3Ryb3kodGhpcyk7XG59O1xuXG4vKipcbiAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgbWFudWFsbHkuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2UgPVxuU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBkZWJ1ZygncGVyZm9ybWluZyBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBwYXJzZXIuRElTQ09OTkVDVCB9KTtcbiAgfVxuXG4gIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gIHRoaXMuZGVzdHJveSgpO1xuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgdGhpcy5vbmNsb3NlKCdpbyBjbGllbnQgZGlzY29ubmVjdCcpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb21wcmVzcyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaWYgYHRydWVgLCBjb21wcmVzc2VzIHRoZSBzZW5kaW5nIGRhdGFcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24gKGNvbXByZXNzKSB7XG4gIHRoaXMuZmxhZ3MgPSB0aGlzLmZsYWdzIHx8IHt9O1xuICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gIHJldHVybiB0aGlzO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnVybCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdXJsO1xuXG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtPYmplY3R9IEFuIG9iamVjdCBtZWFudCB0byBtaW1pYyB3aW5kb3cubG9jYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gd2luZG93LmxvY2F0aW9uLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB1cmwgKHVyaSwgbG9jKSB7XG4gIHZhciBvYmogPSB1cmk7XG5cbiAgLy8gZGVmYXVsdCB0byB3aW5kb3cubG9jYXRpb25cbiAgbG9jID0gbG9jIHx8IGdsb2JhbC5sb2NhdGlvbjtcbiAgaWYgKG51bGwgPT0gdXJpKSB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgbG9jLmhvc3Q7XG5cbiAgLy8gcmVsYXRpdmUgcGF0aCBzdXBwb3J0XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMCkpIHtcbiAgICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMSkpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgIGRlYnVnKCdwcm90b2NvbC1sZXNzIHVybCAlcycsIHVyaSk7XG4gICAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBsb2MpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIHVyaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVyaSA9ICdodHRwczovLycgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGFyc2VcbiAgICBkZWJ1ZygncGFyc2UgJXMnLCB1cmkpO1xuICAgIG9iaiA9IHBhcnNldXJpKHVyaSk7XG4gIH1cblxuICAvLyBtYWtlIHN1cmUgd2UgdHJlYXQgYGxvY2FsaG9zdDo4MGAgYW5kIGBsb2NhbGhvc3RgIGVxdWFsbHlcbiAgaWYgKCFvYmoucG9ydCkge1xuICAgIGlmICgvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgb2JqLnBvcnQgPSAnODAnO1xuICAgIH0gZWxzZSBpZiAoL14oaHR0cHx3cylzJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc0NDMnO1xuICAgIH1cbiAgfVxuXG4gIG9iai5wYXRoID0gb2JqLnBhdGggfHwgJy8nO1xuXG4gIHZhciBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZignOicpICE9PSAtMTtcbiAgdmFyIGhvc3QgPSBpcHY2ID8gJ1snICsgb2JqLmhvc3QgKyAnXScgOiBvYmouaG9zdDtcblxuICAvLyBkZWZpbmUgdW5pcXVlIGlkXG4gIG9iai5pZCA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArICc6JyArIG9iai5wb3J0O1xuICAvLyBkZWZpbmUgaHJlZlxuICBvYmouaHJlZiA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArIChsb2MgJiYgbG9jLnBvcnQgPT09IG9iai5wb3J0ID8gJycgOiAoJzonICsgb2JqLnBvcnQpKTtcblxuICByZXR1cm4gb2JqO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiLypnbG9iYWwgQmxvYixGaWxlKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBnbG9iYWwuQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0cmluZy5jYWxsKGdsb2JhbC5CbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgZ2xvYmFsLkZpbGUgPT09ICdmdW5jdGlvbicgfHwgdG9TdHJpbmcuY2FsbChnbG9iYWwuRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKiBBbnl0aGluZyB3aXRoIGJsb2JzIG9yIGZpbGVzIHNob3VsZCBiZSBmZWQgdGhyb3VnaCByZW1vdmVCbG9icyBiZWZvcmUgY29taW5nXG4gKiBoZXJlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBwYWNrID0gcGFja2V0O1xuICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGlzQnVmKGRhdGEpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBidWZmZXJzKSB7XG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXG4gKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZ1xuICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqO1xuXG4gICAgLy8gY29udmVydCBhbnkgYmxvYlxuICAgIGlmICgod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICBwZW5kaW5nQmxvYnMrKztcblxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxuICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZVxuICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGVuZGluZ0Jsb2JzID0gMDtcbiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7XG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xuICBpZiAoIXBlbmRpbmdCbG9icykge1xuICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gIH1cbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgaGFzQmluID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcbnZhciBiaW5hcnkgPSByZXF1aXJlKCcuL2JpbmFyeScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50eXBlcyA9IFtcbiAgJ0NPTk5FQ1QnLFxuICAnRElTQ09OTkVDVCcsXG4gICdFVkVOVCcsXG4gICdBQ0snLFxuICAnRVJST1InLFxuICAnQklOQVJZX0VWRU5UJyxcbiAgJ0JJTkFSWV9BQ0snXG5dO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQ09OTkVDVCA9IDA7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGRpc2Nvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5ESVNDT05ORUNUID0gMTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXZlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FVkVOVCA9IDI7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGFja2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkFDSyA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGVycm9yYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVJST1IgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlICdiaW5hcnkgZXZlbnQnXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9FVkVOVCA9IDU7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGJpbmFyeSBhY2tgLiBGb3IgYWNrcyB3aXRoIGJpbmFyeSBhcmd1bWVudHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9BQ0sgPSA2O1xuXG4vKipcbiAqIEVuY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuXG4vKipcbiAqIERlY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuXG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVuY29kZXIoKSB7fVxuXG4vKipcbiAqIEVuY29kZSBhIHBhY2tldCBhcyBhIHNpbmdsZSBzdHJpbmcgaWYgbm9uLWJpbmFyeSwgb3IgYXMgYVxuICogYnVmZmVyIHNlcXVlbmNlLCBkZXBlbmRpbmcgb24gcGFja2V0IHR5cGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHBhY2tldCBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gaGFuZGxlIGVuY29kaW5ncyAobGlrZWx5IGVuZ2luZS53cml0ZSlcbiAqIEByZXR1cm4gQ2FsbHMgY2FsbGJhY2sgd2l0aCBBcnJheSBvZiBlbmNvZGluZ3NcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24ob2JqLCBjYWxsYmFjayl7XG4gIGlmICgob2JqLnR5cGUgPT09IGV4cG9ydHMuRVZFTlQgfHwgb2JqLnR5cGUgPT09IGV4cG9ydHMuQUNLKSAmJiBoYXNCaW4ob2JqLmRhdGEpKSB7XG4gICAgb2JqLnR5cGUgPSBvYmoudHlwZSA9PT0gZXhwb3J0cy5FVkVOVCA/IGV4cG9ydHMuQklOQVJZX0VWRU5UIDogZXhwb3J0cy5CSU5BUllfQUNLO1xuICB9XG5cbiAgZGVidWcoJ2VuY29kaW5nIHBhY2tldCAlaicsIG9iaik7XG5cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjayk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIGVuY29kaW5nID0gZW5jb2RlQXNTdHJpbmcob2JqKTtcbiAgICBjYWxsYmFjayhbZW5jb2RpbmddKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzU3RyaW5nKG9iaikge1xuXG4gIC8vIGZpcnN0IGlzIHR5cGVcbiAgdmFyIHN0ciA9ICcnICsgb2JqLnR5cGU7XG5cbiAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIHN0ciArPSBvYmouYXR0YWNobWVudHMgKyAnLSc7XG4gIH1cblxuICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gXG4gIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYFxuICBpZiAob2JqLm5zcCAmJiAnLycgIT09IG9iai5uc3ApIHtcbiAgICBzdHIgKz0gb2JqLm5zcCArICcsJztcbiAgfVxuXG4gIC8vIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZSBpZFxuICBpZiAobnVsbCAhPSBvYmouaWQpIHtcbiAgICBzdHIgKz0gb2JqLmlkO1xuICB9XG5cbiAgLy8ganNvbiBkYXRhXG4gIGlmIChudWxsICE9IG9iai5kYXRhKSB7XG4gICAgc3RyICs9IEpTT04uc3RyaW5naWZ5KG9iai5kYXRhKTtcbiAgfVxuXG4gIGRlYnVnKCdlbmNvZGVkICVqIGFzICVzJywgb2JqLCBzdHIpO1xuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QnVmZmVyfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKSB7XG5cbiAgZnVuY3Rpb24gd3JpdGVFbmNvZGluZyhibG9ibGVzc0RhdGEpIHtcbiAgICB2YXIgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnkuZGVjb25zdHJ1Y3RQYWNrZXQoYmxvYmxlc3NEYXRhKTtcbiAgICB2YXIgcGFjayA9IGVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgdmFyIGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuXG4gICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgIGNhbGxiYWNrKGJ1ZmZlcnMpOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgfVxuXG4gIGJpbmFyeS5yZW1vdmVCbG9icyhvYmosIHdyaXRlRW5jb2RpbmcpO1xufVxuXG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRGVjb2RlcigpIHtcbiAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgIHdpdGggRGVjb2Rlci5cbiAqL1xuXG5FbWl0dGVyKERlY29kZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZWNvZGVzIGFuIGVjb2RlZCBwYWNrZXQgc3RyaW5nIGludG8gcGFja2V0IEpTT04uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG9iaiAtIGVuY29kZWQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHBhY2tldDtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcGFja2V0ID0gZGVjb2RlU3RyaW5nKG9iaik7XG4gICAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwYWNrZXQudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHBhY2tldC50eXBlKSB7IC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBuZXcgQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpO1xuXG4gICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvci5yZWNvblBhY2suYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgeyAvLyBub24tYmluYXJ5IGZ1bGwgcGFja2V0XG4gICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChpc0J1ZihvYmopIHx8IG9iai5iYXNlNjQpIHsgLy8gcmF3IGJpbmFyeSBkYXRhXG4gICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhY2tldCA9IHRoaXMucmVjb25zdHJ1Y3Rvci50YWtlQmluYXJ5RGF0YShvYmopO1xuICAgICAgaWYgKHBhY2tldCkgeyAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGU6ICcgKyBvYmopO1xuICB9XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHN0cikge1xuICB2YXIgaSA9IDA7XG4gIC8vIGxvb2sgdXAgdHlwZVxuICB2YXIgcCA9IHtcbiAgICB0eXBlOiBOdW1iZXIoc3RyLmNoYXJBdCgwKSlcbiAgfTtcblxuICBpZiAobnVsbCA9PSBleHBvcnRzLnR5cGVzW3AudHlwZV0pIHJldHVybiBlcnJvcigpO1xuXG4gIC8vIGxvb2sgdXAgYXR0YWNobWVudHMgaWYgdHlwZSBiaW5hcnlcbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwLnR5cGUpIHtcbiAgICB2YXIgYnVmID0gJyc7XG4gICAgd2hpbGUgKHN0ci5jaGFyQXQoKytpKSAhPT0gJy0nKSB7XG4gICAgICBidWYgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT09ICctJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGF0dGFjaG1lbnRzJyk7XG4gICAgfVxuICAgIHAuYXR0YWNobWVudHMgPSBOdW1iZXIoYnVmKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gIGlmICgnLycgPT09IHN0ci5jaGFyQXQoaSArIDEpKSB7XG4gICAgcC5uc3AgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoJywnID09PSBjKSBicmVhaztcbiAgICAgIHAubnNwICs9IGM7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHAubnNwID0gJy8nO1xuICB9XG5cbiAgLy8gbG9vayB1cCBpZFxuICB2YXIgbmV4dCA9IHN0ci5jaGFyQXQoaSArIDEpO1xuICBpZiAoJycgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICBwLmlkID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAtLWk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcC5pZCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBwLmlkID0gTnVtYmVyKHAuaWQpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgIHAgPSB0cnlQYXJzZShwLCBzdHIuc3Vic3RyKGkpKTtcbiAgfVxuXG4gIGRlYnVnKCdkZWNvZGVkICVzIGFzICVqJywgc3RyLCBwKTtcbiAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHRyeVBhcnNlKHAsIHN0cikge1xuICB0cnkge1xuICAgIHAuZGF0YSA9IEpTT04ucGFyc2Uoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZXJyb3IoKTtcbiAgfVxuICByZXR1cm4gcDsgXG59XG5cbi8qKlxuICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQSBtYW5hZ2VyIG9mIGEgYmluYXJ5IGV2ZW50J3MgJ2J1ZmZlciBzZXF1ZW5jZScuIFNob3VsZFxuICogYmUgY29uc3RydWN0ZWQgd2hlbmV2ZXIgYSBwYWNrZXQgb2YgdHlwZSBCSU5BUllfRVZFTlQgaXNcbiAqIGRlY29kZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QmluYXJ5UmVjb25zdHJ1Y3Rvcn0gaW5pdGlhbGl6ZWQgcmVjb25zdHJ1Y3RvclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufVxuXG4vKipcbiAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAqIGFmdGVyIGEgQklOQVJZX0VWRU5UIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICogQHJldHVybiB7bnVsbCB8IE9iamVjdH0gcmV0dXJucyBudWxsIGlmIG1vcmUgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQgb3JcbiAqICAgYSByZWNvbnN0cnVjdGVkIHBhY2tldCBvYmplY3QgaWYgYWxsIGJ1ZmZlcnMgaGF2ZSBiZWVuIHJlY2VpdmVkLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUudGFrZUJpbmFyeURhdGEgPSBmdW5jdGlvbihiaW5EYXRhKSB7XG4gIHRoaXMuYnVmZmVycy5wdXNoKGJpbkRhdGEpO1xuICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpIHsgLy8gZG9uZSB3aXRoIGJ1ZmZlciBsaXN0XG4gICAgdmFyIHBhY2tldCA9IGJpbmFyeS5yZWNvbnN0cnVjdFBhY2tldCh0aGlzLnJlY29uUGFjaywgdGhpcy5idWZmZXJzKTtcbiAgICB0aGlzLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICByZXR1cm4gcGFja2V0O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUuZmluaXNoZWRSZWNvbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlY29uUGFjayA9IG51bGw7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufTtcblxuZnVuY3Rpb24gZXJyb3IoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogZXhwb3J0cy5FUlJPUixcbiAgICBkYXRhOiAncGFyc2VyIGVycm9yJ1xuICB9O1xufVxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBidWZmZXIgb3IgYW4gYXJyYXlidWZmZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNCdWYob2JqKSB7XG4gIHJldHVybiAoZ2xvYmFsLkJ1ZmZlciAmJiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8XG4gICAgICAgICAoZ2xvYmFsLkFycmF5QnVmZmVyICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbn1cbiIsIi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJ2xpZ2h0c2VhZ3JlZW4nLFxuICAnZm9yZXN0Z3JlZW4nLFxuICAnZ29sZGVucm9kJyxcbiAgJ2RvZGdlcmJsdWUnLFxuICAnZGFya29yY2hpZCcsXG4gICdjcmltc29uJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gdG9BcnJheVxuXG5mdW5jdGlvbiB0b0FycmF5KGxpc3QsIGluZGV4KSB7XG4gICAgdmFyIGFycmF5ID0gW11cblxuICAgIGluZGV4ID0gaW5kZXggfHwgMFxuXG4gICAgZm9yICh2YXIgaSA9IGluZGV4IHx8IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2kgLSBpbmRleF0gPSBsaXN0W2ldXG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5XG59XG4iLCIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgcmV0dXJuIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBieXRlc1RvVXVpZDtcbiIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuICBJbiB0aGVcbi8vIGJyb3dzZXIgdGhpcyBpcyBhIGxpdHRsZSBjb21wbGljYXRlZCBkdWUgdG8gdW5rbm93biBxdWFsaXR5IG9mIE1hdGgucmFuZG9tKClcbi8vIGFuZCBpbmNvbnNpc3RlbnQgc3VwcG9ydCBmb3IgdGhlIGBjcnlwdG9gIEFQSS4gIFdlIGRvIHRoZSBiZXN0IHdlIGNhbiB2aWFcbi8vIGZlYXR1cmUtZGV0ZWN0aW9uXG52YXIgcm5nO1xuXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG87IC8vIGZvciBJRSAxMVxuaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIC8vIFdIQVRXRyBjcnlwdG8gUk5HIC0gaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0NyeXB0b1xuICB2YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgcm5nID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkge1xuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn1cblxuaWYgKCFybmcpIHtcbiAgLy8gTWF0aC5yYW5kb20oKS1iYXNlZCAoUk5HKVxuICAvL1xuICAvLyBJZiBhbGwgZWxzZSBmYWlscywgdXNlIE1hdGgucmFuZG9tKCkuICBJdCdzIGZhc3QsIGJ1dCBpcyBvZiB1bnNwZWNpZmllZFxuICAvLyBxdWFsaXR5LlxuICB2YXIgcm5kcyA9IG5ldyBBcnJheSgxNik7XG4gIHJuZyA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykge1xuICAgICAgaWYgKChpICYgMHgwMykgPT09IDApIHIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDA7XG4gICAgICBybmRzW2ldID0gciA+Pj4gKChpICYgMHgwMykgPDwgMykgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiBybmRzO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJuZztcbiIsInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09ICdiaW5hcnknID8gbmV3IEFycmF5KDE2KSA6IG51bGw7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7ICsraWkpIHtcbiAgICAgIGJ1ZltpICsgaWldID0gcm5kc1tpaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBieXRlc1RvVXVpZChybmRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2NDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKVxuICAsIGxlbmd0aCA9IDY0XG4gICwgbWFwID0ge31cbiAgLCBzZWVkID0gMFxuICAsIGkgPSAwXG4gICwgcHJldjtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICB2YXIgZW5jb2RlZCA9ICcnO1xuXG4gIGRvIHtcbiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICB9IHdoaWxlIChudW0gPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICB2YXIgZGVjb2RlZCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8qKlxuICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllYXN0KCkge1xuICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcblxuICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7XG59XG5cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLlxuLy9cbnllYXN0LmVuY29kZSA9IGVuY29kZTtcbnllYXN0LmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XG4iLCJ2YXIga28gICAgID0gcmVxdWlyZSgna25vY2tvdXQnKSxcbiAgICBpbyAgICAgPSByZXF1aXJlKCdzb2NrZXQuaW8tY2xpZW50JyksXG4gICAgY29uZmlnID0gcmVxdWlyZSgnLi4vLi4vY29uZmlnL2FwcCcpO1xuXG52YXIgc29ja2V0ID0gaW8uY29ubmVjdChsb2NhdGlvbi5vcmlnaW4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbnZlcnNhdGlvbihtZXNzYWdlcykge1xuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIHRoYXQubWVzc2FnZXMgPSBrby5vYnNlcnZhYmxlQXJyYXkobWVzc2FnZXMpO1xuXG4gICAgdGhhdC5teVVVSUQgPSBjb25maWcudXVpZDtcblxuICAgIHNvY2tldC5vbignY2hhdC1tZXNzYWdlJywgZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICB0aGF0Lm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhhdDtcbn07IiwidmFyIGtvICAgICA9IHJlcXVpcmUoJ2tub2Nrb3V0JyksXG4gICAgaW8gICAgID0gcmVxdWlyZSgnc29ja2V0LmlvLWNsaWVudCcpLFxuICAgIGNvbmZpZyA9IHJlcXVpcmUoJy4uLy4uL2NvbmZpZy9hcHAnKTtcblxudmFyIHNvY2tldCA9IGlvLmNvbm5lY3QobG9jYXRpb24ub3JpZ2luKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm5ld01lc3NhZ2UgPSBrby5vYnNlcnZhYmxlKCcnKTtcblxuICAgIHRoaXMuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYodGhpcy5uZXdNZXNzYWdlKCkgIT09ICcnKSB7XG4gICAgICAgICAgICAvLyBTb2NrZXQgSU8gbWVzc2FnZSBoZXJlXG4gICAgICAgICAgICBzb2NrZXQuZW1pdCgnY2hhdC1tZXNzYWdlJywge1xuICAgICAgICAgICAgICAgIHV1aWQ6IGNvbmZpZy51dWlkLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMubmV3TWVzc2FnZSgpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gY2xlYXIgZmllbGRcbiAgICAgICAgICAgIHRoaXMubmV3TWVzc2FnZSgnJyk7XG4gICAgICAgIH1cbiAgICB9LmJpbmQodGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07IiwidmFyIHV1aWRHZW5lcmF0b3IgPSByZXF1aXJlKCd1dWlkL3Y0JyksXG4gICAgdXVpZCAgICAgICAgICA9IHV1aWRHZW5lcmF0b3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdXVpZDogdXVpZFxufTsiLCJ2YXIgJCAgICAgICAgICAgID0gcmVxdWlyZSgnanF1ZXJ5JyksXG4gICAga28gICAgICAgICAgID0gcmVxdWlyZSgna25vY2tvdXQnKSxcbiAgICBDb252ZXJzYXRpb24gPSByZXF1aXJlKCcuL2FwcC92aWV3L0NvbnZlcnNhdGlvbicpLFxuICAgIE1lc3NhZ2VJbnB1dCA9IHJlcXVpcmUoJy4vYXBwL3ZpZXcvTWVzc2FnZUlucHV0JyksXG4gICAgbWVzc2FnZXMgICAgID0gcmVxdWlyZSgnLi9tb2NrL2RhdGEnKS5tZXNzYWdlcztcblxudmFyIGNvbnZlcnNhdGlvbiA9IG5ldyBDb252ZXJzYXRpb24oW10pO1xuXG52YXIgbWVzc2FnZUlucHV0ID0gbmV3IE1lc3NhZ2VJbnB1dCgpO1xuXG4kKGZ1bmN0aW9uKCkge1xuICAgIGtvLmFwcGx5QmluZGluZ3MoY29udmVyc2F0aW9uLCAkKCcuY2hhdC1tZXNzYWdlcycpWzBdKTtcblxuICAgIGtvLmFwcGx5QmluZGluZ3MobWVzc2FnZUlucHV0LCAkKCcuY2hhdC1tZXNzYWdlLWlucHV0JylbMF0pO1xufSk7IiwiLy8gZXhwb3J0cy5tZXNzYWdlcyA9IFt7XG4vLyAgICAgdXVpZDogXCJtYXJrXCIsXG4vLyAgICAgdGV4dDogXCJJIHdpbGwga25vdyBhbGwgbGF0ZXIgdG9uaWdodCB3aGVuIHBlb3BsZSBoYXZlIHRpbWUgdG8gZmlndXJlIHRoZWlyIHNoaXQgb3V0LiBCdXQgeW91J3JlIHJpZ2h0LCBpZiB3ZSBtaXNzIHRoZSBndXlzIEZyaWRheSBuaWdodCwgc3VyZSB3ZSBjYW4gY2F0Y2ggdGhlbSBmb3IgY29mZmVlIHRoZSBuZXh0IGRheSBtYXliZS4gSSB3b3VsZCByZWFsbHkgbGlrZSB0byBzZWUgdGhlbSFcIlxuLy8gfSx7XG4vLyAgICAgdXVpZDogXCJtZVwiLFxuLy8gICAgIHRleHQ6IFwiRXJhIHN1cmUgbGV0cyBzZWUgd2hhdCBoYXBwZW5zIGFueXdheS4gTGV0IG1lIGtub3cgd2hlbiB5b3Uga25vdyB3aGF0cyBnb2luZyBvblwiXG4vLyB9LHtcbi8vICAgICB1dWlkOiBcIm1hcmtcIixcbi8vICAgICB0ZXh0OiBcIkNvb2whXCJcbi8vIH1dO1xuXG5leHBvcnRzLm1lc3NhZ2VzID0gW107Il19
