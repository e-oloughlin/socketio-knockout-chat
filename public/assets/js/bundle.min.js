!function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return i(n||e)},c,c.exports,e,t,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,t,n){!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){var n=(t=t||te).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function r(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function o(e,t,n){return fe.isFunction(t)?fe.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?fe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?fe.grep(e,function(e){return se.call(t,e)>-1!==n}):Te.test(t)?fe.filter(t,e,n):(t=fe.filter(t,e),fe.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return fe.each(e.match(ke)||[],function(e,n){t[n]=!0}),t}function u(e){return e}function l(e){throw e}function c(e,t,n,r){var i;try{e&&fe.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&fe.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function d(){te.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),fe.ready()}function p(){this.expando=fe.expando+p.uid++}function f(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Ie.test(e)?JSON.parse(e):e)}function h(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(He,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=f(n)}catch(e){}Re.set(e,t,n)}else n=void 0;return n}function m(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return fe.css(e,t,"")},u=a(),l=n&&n[3]||(fe.cssNumber[t]?"":"px"),c=(fe.cssNumber[t]||"px"!==l&&+u)&&Le.exec(fe.css(e,t));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do{c/=o=o||".5",fe.style(e,t,c+l)}while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}function g(e){var t,n=e.ownerDocument,r=e.nodeName,i=Ve[r];return i||(t=n.body.appendChild(n.createElement(r)),i=fe.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),Ve[r]=i,i)}function v(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=je.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Me(r)&&(i[o]=g(r))):"none"!==n&&(i[o]="none",je.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&i(e,t)?fe.merge([e],n):n}function b(e,t){for(var n=0,r=e.length;n<r;n++)je.set(e[n],"globalEval",!t||je.get(t[n],"globalEval"))}function x(e,t,n,r,i){for(var o,s,a,u,l,c,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((o=e[f])||0===o)if("object"===fe.type(o))fe.merge(p,o.nodeType?[o]:o);else if(Je.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=($e.exec(o)||["",""])[1].toLowerCase(),u=Ue[a]||Ue._default,s.innerHTML=u[1]+fe.htmlPrefilter(o)+u[2],c=u[0];c--;)s=s.lastChild;fe.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(o));for(d.textContent="",f=0;o=p[f++];)if(r&&fe.inArray(o,r)>-1)i&&i.push(o);else if(l=fe.contains(o.ownerDocument,o),s=y(d.appendChild(o),"script"),l&&b(s),n)for(c=0;o=s[c++];)ze.test(o.type||"")&&n.push(o);return d}function w(){return!0}function E(){return!1}function T(){try{return te.activeElement}catch(e){}}function C(e,t,n,r,i,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(a in t)C(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=E;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return fe().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,i,r,n)})}function S(e,t){return i(e,"table")&&i(11!==t.nodeType?t:t.firstChild,"tr")?fe(">tbody",e)[0]||e:e}function D(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function N(e){var t=tt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function k(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(je.hasData(e)&&(o=je.access(e),s=je.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)fe.event.add(t,i,l[i][n])}Re.hasData(e)&&(a=Re.access(e),u=fe.extend({},a),Re.set(t,u))}}function O(e,t){var n=t.nodeName.toLowerCase();"input"===n&&We.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,r,i){t=ie.apply([],t);var o,s,a,u,l,c,d=0,p=e.length,f=p-1,h=t[0],m=fe.isFunction(h);if(m||p>1&&"string"==typeof h&&!pe.checkClone&&et.test(h))return e.each(function(n){var o=e.eq(n);m&&(t[0]=h.call(this,n,o.html())),A(o,t,r,i)});if(p&&(o=x(t,e[0].ownerDocument,!1,e,i),s=o.firstChild,1===o.childNodes.length&&(o=s),s||i)){for(u=(a=fe.map(y(o,"script"),D)).length;d<p;d++)l=o,d!==f&&(l=fe.clone(l,!0,!0),u&&fe.merge(a,y(l,"script"))),r.call(e[d],l,d);if(u)for(c=a[a.length-1].ownerDocument,fe.map(a,N),d=0;d<u;d++)l=a[d],ze.test(l.type||"")&&!je.access(l,"globalEval")&&fe.contains(c,l)&&(l.src?fe._evalUrl&&fe._evalUrl(l.src):n(l.textContent.replace(nt,""),c))}return e}function _(e,t,n){for(var r,i=t?fe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||fe.cleanData(y(r)),r.parentNode&&(n&&fe.contains(r.ownerDocument,r)&&b(y(r,"script")),r.parentNode.removeChild(r));return e}function F(e,t,n){var r,i,o,s,a=e.style;return(n=n||ot(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||fe.contains(e.ownerDocument,e)||(s=fe.style(e,t)),!pe.pixelMarginRight()&&it.test(s)&&rt.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function j(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function R(e){if(e in dt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=ct.length;n--;)if((e=ct[n]+t)in dt)return e}function I(e){var t=fe.cssProps[e];return t||(t=fe.cssProps[e]=R(e)||e),t}function H(e,t,n){var r=Le.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function P(e,t,n,r,i){var o,s=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(s+=fe.css(e,n+Be[o],!0,i)),r?("content"===n&&(s-=fe.css(e,"padding"+Be[o],!0,i)),"margin"!==n&&(s-=fe.css(e,"border"+Be[o]+"Width",!0,i))):(s+=fe.css(e,"padding"+Be[o],!0,i),"padding"!==n&&(s+=fe.css(e,"border"+Be[o]+"Width",!0,i)));return s}function L(e,t,n){var r,i=ot(e),o=F(e,t,i),s="border-box"===fe.css(e,"boxSizing",!1,i);return it.test(o)?o:(r=s&&(pe.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+P(e,t,n||(s?"border":"content"),r,i)+"px")}function B(e,t,n,r,i){return new B.prototype.init(e,t,n,r,i)}function M(){ft&&(!1===te.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(M):e.setTimeout(M,fe.fx.interval),fe.fx.tick())}function q(){return e.setTimeout(function(){pt=void 0}),pt=fe.now()}function V(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=Be[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function W(e,t,n){for(var r,i=(z.tweeners[t]||[]).concat(z.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function $(e,t){var n,r,i,o,s;for(n in e)if(r=fe.camelCase(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=fe.cssHooks[r])&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function z(e,t,n){var r,i,o=0,s=z.prefilters.length,a=fe.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=pt||q(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),o=0,s=l.tweens.length;o<s;o++)l.tweens[o].run(r);return a.notifyWith(e,[l,r,n]),r<1&&s?n:(s||a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||q(),duration:n.duration,tweens:[],createTween:function(t,n){var r=fe.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for($(c,l.opts.specialEasing);o<s;o++)if(r=z.prefilters[o].call(l,e,c,l.opts))return fe.isFunction(r.stop)&&(fe._queueHooks(l.elem,l.opts.queue).stop=fe.proxy(r.stop,r)),r;return fe.map(c,W,l),fe.isFunction(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),fe.fx.timer(fe.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}function U(e){return(e.match(ke)||[]).join(" ")}function J(e){return e.getAttribute&&e.getAttribute("class")||""}function K(e,t,n,r){var i;if(Array.isArray(t))fe.each(t,function(t,i){n||St.test(e)?r(e,i):K(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==fe.type(t))r(e,t);else for(i in t)K(e+"["+i+"]",t[i],n,r)}function X(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(ke)||[];if(fe.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Q(e,t,n,r){function i(a){var u;return o[a]=!0,fe.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},s=e===Pt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function G(e,t){var n,r,i=fe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&fe.extend(!0,e,r),e}function Y(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}function Z(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=l[u+" "+o]||l["* "+o]))for(i in l)if((a=i.split(" "))[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[i]:!0!==l[i]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}var ee=[],te=e.document,ne=Object.getPrototypeOf,re=ee.slice,ie=ee.concat,oe=ee.push,se=ee.indexOf,ae={},ue=ae.toString,le=ae.hasOwnProperty,ce=le.toString,de=ce.call(Object),pe={},fe=function(e,t){return new fe.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ge=/-([a-z])/g,ve=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:"3.2.1",constructor:fe,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ee.sort,splice:ee.splice},fe.extend=fe.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||fe.isFunction(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(r=e[t])&&(l&&r&&(fe.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&fe.isPlainObject(n)?n:{},s[t]=fe.extend(l,o,r)):void 0!==r&&(s[t]=r));return s},fe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=fe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ue.call(e))&&(!(t=ne(e))||"function"==typeof(n=le.call(t,"constructor")&&t.constructor)&&ce.call(n)===de)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ae[ue.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ge,ve)},each:function(e,t){var n,i=0;if(r(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(r(Object(e))?fe.merge(n,"string"==typeof e?[e]:e):oe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,n){var i,o,s=0,a=[];if(r(e))for(i=e.length;s<i;s++)null!=(o=t(e[s],s,n))&&a.push(o);else for(s in e)null!=(o=t(e[s],s,n))&&a.push(o);return ie.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),fe.isFunction(e))return r=re.call(arguments,2),i=function(){return e.apply(t||this,r.concat(re.call(arguments)))},i.guid=e.guid=e.guid||fe.guid++,i},now:Date.now,support:pe}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=ee[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ae["[object "+t+"]"]=t.toLowerCase()});var ye=function(e){function t(e,t,n,r){var i,o,s,a,u,c,p,f=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:B)!==_&&A(t),t=t||_,j)){if(11!==h&&(u=me.exec(e)))if(i=u[1]){if(9===h){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(f&&(s=f.getElementById(i))&&P(t,s)&&s.id===i)return n.push(s),n}else{if(u[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&x.getElementsByClassName&&t.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!$[e+" "]&&(!R||!R.test(e))){if(1!==h)f=t,p=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(be,xe):t.setAttribute("id",a=L),o=(c=C(e)).length;o--;)c[o]="#"+a+" "+d(c[o]);p=c.join(","),f=ge.test(e)&&l(t.parentNode)||t}if(p)try{return Q.apply(n,f.querySelectorAll(p)),n}catch(e){}finally{a===L&&t.removeAttribute("id")}}}return D(e.replace(oe,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[L]=!0,e}function i(e){var t=_.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ee(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function l(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function d(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function p(e,t,n){var r=t.dir,i=t.next,o=i||r,s=n&&"parentNode"===o,a=q++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,u){var l,c,d,p=[M,a];if(u){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(d=t[L]||(t[L]={}),c=d[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===M&&l[1]===a)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function f(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function h(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),l&&t.push(a)));return s}function g(e,t,n,i,o,s){return i&&!i[L]&&(i=g(i)),o&&!o[L]&&(o=g(o,s)),r(function(r,s,a,u){var l,c,d,p=[],f=[],g=s.length,v=r||h(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:m(v,p,e,a,u),b=n?o||(r?e:g||i)?[]:s:y;if(n&&n(y,b,a,u),i)for(l=m(b,f),i(l,[],a,u),c=l.length;c--;)(d=l[c])&&(b[f[c]]=!(y[f[c]]=d));if(r){if(o||e){if(o){for(l=[],c=b.length;c--;)(d=b[c])&&l.push(y[c]=d);o(null,b=[],l,u)}for(c=b.length;c--;)(d=b[c])&&(l=o?Y(r,d):p[c])>-1&&(r[l]=!(s[l]=d))}}else b=m(b===s?b.splice(g,b.length):b),o?o(null,s,b,u):Q.apply(s,b)})}function v(e){for(var t,n,r,i=e.length,o=w.relative[e[0].type],s=o||w.relative[" "],a=o?1:0,u=p(function(e){return e===t},s,!0),l=p(function(e){return Y(t,e)>-1},s,!0),c=[function(e,n,r){var i=!o&&(r||n!==N)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];a<i;a++)if(n=w.relative[e[a].type])c=[p(f(c),n)];else{if((n=w.filter[e[a].type].apply(null,e[a].matches))[L]){for(r=++a;r<i&&!w.relative[e[r].type];r++);return g(a>1&&f(c),a>1&&d(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(oe,"$1"),n,a<r&&v(e.slice(a,r)),r<i&&v(e=e.slice(r)),r<i&&d(e))}c.push(n)}return f(c)}function y(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,l){var c,d,p,f=0,h="0",g=r&&[],v=[],y=N,b=r||o&&w.find.TAG("*",l),x=M+=null==y?1:Math.random()||.1,E=b.length;for(l&&(N=s===_||s||l);h!==E&&null!=(c=b[h]);h++){if(o&&c){for(d=0,s||c.ownerDocument===_||(A(c),a=!j);p=e[d++];)if(p(c,s||_,a)){u.push(c);break}l&&(M=x)}i&&((c=!p&&c)&&f--,r&&g.push(c))}if(f+=h,i&&h!==f){for(d=0;p=n[d++];)p(g,v,s,a);if(r){if(f>0)for(;h--;)g[h]||v[h]||(v[h]=K.call(u));v=m(v)}Q.apply(u,v),l&&!r&&v.length>0&&f+n.length>1&&t.uniqueSort(u)}return l&&(M=x,N=y),g};return i?r(s):s}var b,x,w,E,T,C,S,D,N,k,O,A,_,F,j,R,I,H,P,L="sizzle"+1*new Date,B=e.document,M=0,q=0,V=n(),W=n(),$=n(),z=function(e,t){return e===t&&(O=!0),0},U={}.hasOwnProperty,J=[],K=J.pop,X=J.push,Q=J.push,G=J.slice,Y=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",re=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ie=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),ae=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),ue=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),le=new RegExp(re),ce=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},pe=/^(?:input|select|textarea|button)$/i,fe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){A()},Ee=p(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Q.apply(J=G.call(B.childNodes),B.childNodes),J[B.childNodes.length].nodeType}catch(e){Q={apply:J.length?function(e,t){X.apply(e,G.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},A=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:B;return r!==_&&9===r.nodeType&&r.documentElement?(_=r,F=_.documentElement,j=!T(_),B!==_&&(n=_.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(_.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(_.getElementsByClassName),x.getById=i(function(e){return F.appendChild(e).id=L,!_.getElementsByName||!_.getElementsByName(L).length}),x.getById?(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&j){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&j){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&j)return t.getElementsByClassName(e)},I=[],R=[],(x.qsa=he.test(_.querySelectorAll))&&(i(function(e){F.appendChild(e).innerHTML="<a id='"+L+"'></a><select id='"+L+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&R.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||R.push("\\["+ee+"*(?:value|"+Z+")"),e.querySelectorAll("[id~="+L+"-]").length||R.push("~="),e.querySelectorAll(":checked").length||R.push(":checked"),e.querySelectorAll("a#"+L+"+*").length||R.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=_.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&R.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&R.push(":enabled",":disabled"),F.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&R.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),R.push(",.*:")})),(x.matchesSelector=he.test(H=F.matches||F.webkitMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector||F.msMatchesSelector))&&i(function(e){x.disconnectedMatch=H.call(e,"*"),H.call(e,"[s!='']:x"),I.push("!=",re)}),R=R.length&&new RegExp(R.join("|")),I=I.length&&new RegExp(I.join("|")),t=he.test(F.compareDocumentPosition),P=t||he.test(F.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return O=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===_||e.ownerDocument===B&&P(B,e)?-1:t===_||t.ownerDocument===B&&P(B,t)?1:k?Y(k,e)-Y(k,t):0:4&n?-1:1)}:function(e,t){if(e===t)return O=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],u=[t];if(!i||!o)return e===_?-1:t===_?1:i?-1:o?1:k?Y(k,e)-Y(k,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;a[r]===u[r];)r++;return r?s(a[r],u[r]):a[r]===B?-1:u[r]===B?1:0},_):_},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==_&&A(e),n=n.replace(ue,"='$1']"),x.matchesSelector&&j&&!$[n+" "]&&(!I||!I.test(n))&&(!R||!R.test(n)))try{var r=H.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,_,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==_&&A(e),P(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==_&&A(e);var n=w.attrHandle[t.toLowerCase()],r=n&&U.call(w.attrHandle,t.toLowerCase())?n(e,t,!j):void 0;return void 0!==r?r:x.attributes||!j?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(O=!x.detectDuplicates,k=!x.sortStable&&e.slice(0),e.sort(z),O){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return k=null,e},E=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=E(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=E(t);return n},(w=t.selectors={cacheLength:50,createPseudo:r,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&le.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=V[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&V(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ie," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,d,p,f,h,m=o!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!u&&!a,b=!1;if(g){if(o){for(;m;){for(p=t;p=p[m];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&y){for(b=(f=(l=(c=(d=(p=g)[L]||(p[L]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===M&&l[1])&&l[2],p=f&&g.childNodes[f];p=++f&&p&&p[m]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[M,f,b];break}}else if(y&&(b=f=(l=(c=(d=(p=t)[L]||(p[L]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===M&&l[1]),!1===b)for(;(p=++f&&p&&p[m]||(b=f=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((c=(d=p[L]||(p[L]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[M,b]),p!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,n){var i,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[L]?o(n):o.length>1?(i=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)e[r=Y(e,i[s])]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=S(e.replace(oe,"$1"));return i[L]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||E(t)).indexOf(e)>-1}}),lang:r(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=j?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===F},focus:function(e){return e===_.activeElement&&(!_.hasFocus||_.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return fe.test(e.nodeName)},input:function(e){return pe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[n<0?n+t:n]}),even:u(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return c.prototype=w.filters=w.pseudos,w.setFilters=new c,C=t.tokenize=function(e,n){var r,i,o,s,a,u,l,c=W[e+" "];if(c)return n?0:c.slice(0);for(a=e,u=[],l=w.preFilter;a;){r&&!(i=se.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=ae.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(oe," ")}),a=a.slice(r.length));for(s in w.filter)!(i=de[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):W(e,u).slice(0)},S=t.compile=function(e,t){var n,r=[],i=[],o=$[e+" "];if(!o){for(t||(t=C(e)),n=t.length;n--;)(o=v(t[n]))[L]?r.push(o):i.push(o);(o=$(e,y(i,r))).selector=e}return o},D=t.select=function(e,t,n,r){var i,o,s,a,u,c="function"==typeof e&&e,p=!r&&C(e=c.selector||e);if(n=n||[],1===p.length){if((o=p[0]=p[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&9===t.nodeType&&j&&w.relative[o[1].type]){if(!(t=(w.find.ID(s.matches[0].replace(ve,ye),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(s=o[i],!w.relative[a=s.type]);)if((u=w.find[a])&&(r=u(s.matches[0].replace(ve,ye),ge.test(o[0].type)&&l(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&d(o)))return Q.apply(n,r),n;break}}return(c||S(e,p))(r,t,!j,n,!t||ge.test(e)&&l(t.parentNode)||t),n},x.sortStable=L.split("").sort(z).join("")===L,x.detectDuplicates=!!O,A(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(_.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(Z,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);fe.find=ye,fe.expr=ye.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=ye.uniqueSort,fe.text=ye.getText,fe.isXMLDoc=ye.isXML,fe.contains=ye.contains,fe.escapeSelector=ye.escape;var be=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&fe(e).is(n))break;r.push(e)}return r},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},we=fe.expr.match.needsContext,Ee=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Te=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?fe.find.matchesSelector(r,e)?[r]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<r;t++)if(fe.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)fe.find(e,i[t],n);return r>1?fe.uniqueSort(n):n},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&we.test(e)?fe(e):e||[],!1).length}});var Ce,Se=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(fe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Ce,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Se.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),Ee.test(r[1])&&fe.isPlainObject(t))for(r in t)fe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=te.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe.isFunction(e)?void 0!==n.ready?n.ready(e):e(fe):fe.makeArray(e,this)}).prototype=fe.fn,Ce=fe(te);var De=/^(?:parents|prev(?:Until|All))/,Ne={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t=fe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(fe.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&fe(e);if(!we.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?fe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(fe(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,n){return be(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,n){return be(e,"nextSibling",n)},prevUntil:function(e,t,n){return be(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return i(e,"iframe")?e.contentDocument:(i(e,"template")&&(e=e.content||e),fe.merge([],e.childNodes))}},function(e,t){fe.fn[e]=function(n,r){var i=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=fe.filter(r,i)),this.length>1&&(Ne[e]||fe.uniqueSort(i),De.test(e)&&i.reverse()),this.pushStack(i)}});var ke=/[^\x20\t\r\n\f]+/g;fe.Callbacks=function(e){e="string"==typeof e?a(e):fe.extend({},e);var t,n,r,i,o=[],s=[],u=-1,l=function(){for(i=i||e.once,r=t=!0;s.length;u=-1)for(n=s.shift();++u<o.length;)!1===o[u].apply(n[0],n[1])&&e.stopOnFalse&&(u=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(u=o.length-1,s.push(n)),function t(n){fe.each(n,function(n,r){fe.isFunction(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==fe.type(r)&&t(r)})}(arguments),n&&!t&&l()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(e){return e?fe.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},fe.extend({Deferred:function(t){var n=[["notify","progress",fe.Callbacks("memory"),fe.Callbacks("memory"),2],["resolve","done",fe.Callbacks("once memory"),fe.Callbacks("once memory"),0,"resolved"],["reject","fail",fe.Callbacks("once memory"),fe.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return fe.Deferred(function(t){fe.each(n,function(n,r){var i=fe.isFunction(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){function o(t,n,r,i){return function(){var a=this,c=arguments,d=function(){var e,d;if(!(t<s)){if((e=r.apply(a,c))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,fe.isFunction(d)?i?d.call(e,o(s,n,u,i),o(s,n,l,i)):(s++,d.call(e,o(s,n,u,i),o(s,n,l,i),o(s,n,u,n.notifyWith))):(r!==u&&(a=void 0,c=[e]),(i||n.resolveWith)(a,c))}},p=i?d:function(){try{d()}catch(e){fe.Deferred.exceptionHook&&fe.Deferred.exceptionHook(e,p.stackTrace),t+1>=s&&(r!==l&&(a=void 0,c=[e]),n.rejectWith(a,c))}};t?p():(fe.Deferred.getStackHook&&(p.stackTrace=fe.Deferred.getStackHook()),e.setTimeout(p))}}var s=0;return fe.Deferred(function(e){n[0][3].add(o(0,e,fe.isFunction(i)?i:u,e.notifyWith)),n[1][3].add(o(0,e,fe.isFunction(t)?t:u)),n[2][3].add(o(0,e,fe.isFunction(r)?r:l))}).promise()},promise:function(e){return null!=e?fe.extend(e,i):i}},o={};return fe.each(n,function(e,t){var s=t[2],a=t[5];i[t[1]]=s.add,a&&s.add(function(){r=a},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=s.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=re.call(arguments),o=fe.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?re.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(c(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||fe.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)c(i[n],s(n),o.reject);return o.promise()}});var Oe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;fe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Oe.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},fe.readyException=function(t){e.setTimeout(function(){throw t})};var Ae=fe.Deferred();fe.fn.ready=function(e){return Ae.then(e).catch(function(e){fe.readyException(e)}),this},fe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--fe.readyWait:fe.isReady)||(fe.isReady=!0,!0!==e&&--fe.readyWait>0||Ae.resolveWith(te,[fe]))}}),fe.ready.then=Ae.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(fe.ready):(te.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var _e=function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===fe.type(n)){i=!0;for(a in n)_e(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,fe.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(fe(e),n)})),t))for(;a<u;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},Fe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};p.uid=1,p.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Fe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[fe.camelCase(t)]=n;else for(r in t)i[fe.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][fe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(fe.camelCase):(t=fe.camelCase(t))in r?[t]:t.match(ke)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||fe.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!fe.isEmptyObject(t)}};var je=new p,Re=new p,Ie=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,He=/[A-Z]/g;fe.extend({hasData:function(e){return Re.hasData(e)||je.hasData(e)},data:function(e,t,n){return Re.access(e,t,n)},removeData:function(e,t){Re.remove(e,t)},_data:function(e,t,n){return je.access(e,t,n)},_removeData:function(e,t){je.remove(e,t)}}),fe.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=Re.get(o),1===o.nodeType&&!je.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=fe.camelCase(r.slice(5)),h(o,r,i[r]));je.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Re.set(this,e)}):_e(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=Re.get(o,e)))return n;if(void 0!==(n=h(o,e)))return n}else this.each(function(){Re.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Re.remove(this,e)})}}),fe.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=je.get(e,t),n&&(!r||Array.isArray(n)?r=je.access(e,t,fe.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),r=n.length,i=n.shift(),o=fe._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){fe.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return je.get(e,n)||je.access(e,n,{empty:fe.Callbacks("once memory").add(function(){je.remove(e,[t+"queue",n])})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=fe.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=je.get(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var Pe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Le=new RegExp("^(?:([+-])=|)("+Pe+")([a-z%]*)$","i"),Be=["Top","Right","Bottom","Left"],Me=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&fe.contains(e.ownerDocument,e)&&"none"===fe.css(e,"display")},qe=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},Ve={};fe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Me(this)?fe(this).show():fe(this).hide()})}});var We=/^(?:checkbox|radio)$/i,$e=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ze=/^$|\/(?:java|ecma)script/i,Ue={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ue.optgroup=Ue.option,Ue.tbody=Ue.tfoot=Ue.colgroup=Ue.caption=Ue.thead,Ue.th=Ue.td;var Je=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment().appendChild(te.createElement("div")),t=te.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),pe.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ke=te.documentElement,Xe=/^key/,Qe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ge=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,l,c,d,p,f,h,m,g=je.get(e);if(g)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&fe.find.matchesSelector(Ke,i),n.guid||(n.guid=fe.guid++),(u=g.events)||(u=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==fe&&fe.event.triggered!==t.type?fe.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(ke)||[""]).length;l--;)f=m=(a=Ge.exec(t[l])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=fe.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,d=fe.event.special[f]||{},c=fe.extend({type:f,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&fe.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[f])||((p=u[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),fe.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,l,c,d,p,f,h,m,g=je.hasData(e)&&je.get(e);if(g&&(u=g.events)){for(l=(t=(t||"").match(ke)||[""]).length;l--;)if(a=Ge.exec(t[l])||[],f=m=a[1],h=(a[2]||"").split(".").sort(),f){for(d=fe.event.special[f]||{},p=u[f=(r?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||fe.removeEvent(e,f,g.handle),delete u[f])}else for(f in u)fe.event.remove(e,f+t[l],n,r,!0);fe.isEmptyObject(u)&&je.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=fe.event.fix(e),u=new Array(arguments.length),l=(je.get(this,"events")||{})[a.type]||[],c=fe.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=fe.event.handlers.call(this,a,l),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((fe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?fe(i,this).index(l)>-1:fe.find(i,this,null,[l]).length),s[i]&&o.push(r);o.length&&a.push({elem:l,handlers:o})}return l=this,u<t.length&&a.push({elem:l,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(fe.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[fe.expando]?e:new fe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==T()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===T()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&i(this,"input"))return this.click(),!1},_default:function(e){return i(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},fe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},fe.Event=function(e,t){if(!(this instanceof fe.Event))return new fe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?w:E,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),this[fe.expando]=!0},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:E,isPropagationStopped:E,isImmediatePropagationStopped:E,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Qe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},fe.event.addProp),fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||fe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),fe.fn.extend({on:function(e,t,n,r){return C(this,e,t,n,r)},one:function(e,t,n,r){return C(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,fe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=E),this.each(function(){fe.event.remove(this,e,n,t)})}});var Ye=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ze=/<script|<style|<link/i,et=/checked\s*(?:[^=]|=\s*.checked.)/i,tt=/^true\/(.*)/,nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;fe.extend({htmlPrefilter:function(e){return e.replace(Ye,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=fe.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(s=y(a),r=0,i=(o=y(e)).length;r<i;r++)O(o[r],s[r]);if(t)if(n)for(o=o||y(e),s=s||y(a),r=0,i=o.length;r<i;r++)k(o[r],s[r]);else k(e,a);return(s=y(a,"script")).length>0&&b(s,!u&&y(e,"script")),a},cleanData:function(e){for(var t,n,r,i=fe.event.special,o=0;void 0!==(n=e[o]);o++)if(Fe(n)){if(t=n[je.expando]){if(t.events)for(r in t.events)i[r]?fe.event.remove(n,r):fe.removeEvent(n,r,t.handle);n[je.expando]=void 0}n[Re.expando]&&(n[Re.expando]=void 0)}}}),fe.fn.extend({detach:function(e){return _(this,e,!0)},remove:function(e){return _(this,e)},text:function(e){return _e(this,function(e){return void 0===e?fe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||S(this,e).appendChild(e)})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=S(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(fe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return _e(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ze.test(e)&&!Ue[($e.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(fe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,r=[],i=fe(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),fe(i[s])[t](n),oe.apply(r,n.get());return this.pushStack(r)}});var rt=/^margin/,it=new RegExp("^("+Pe+")(?!px)[a-z%]+$","i"),ot=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ke.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,a.style.marginRight="50%",i="4px"===t.marginRight,Ke.removeChild(s),a=null}}var n,r,i,o,s=te.createElement("div"),a=te.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),fe.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var st=/^(none|table(?!-c[ea]).+)/,at=/^--/,ut={position:"absolute",visibility:"hidden",display:"block"},lt={letterSpacing:"0",fontWeight:"400"},ct=["Webkit","Moz","ms"],dt=te.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=F(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=fe.camelCase(t),u=at.test(t),l=e.style;if(u||(t=I(a)),s=fe.cssHooks[t]||fe.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:l[t];"string"==(o=typeof n)&&(i=Le.exec(n))&&i[1]&&(n=m(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(fe.cssNumber[a]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,s,a=fe.camelCase(t);return at.test(t)||(t=I(a)),(s=fe.cssHooks[t]||fe.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=F(e,t,r)),"normal"===i&&t in lt&&(i=lt[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,r){if(n)return!st.test(fe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?L(e,t,r):qe(e,ut,function(){return L(e,t,r)})},set:function(e,n,r){var i,o=r&&ot(e),s=r&&P(e,t,r,"border-box"===fe.css(e,"boxSizing",!1,o),o);return s&&(i=Le.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=fe.css(e,t)),H(0,n,s)}}}),fe.cssHooks.marginLeft=j(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(F(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Be[r]+t]=o[r]||o[r-2]||o[0];return i}},rt.test(e)||(fe.cssHooks[e+t].set=H)}),fe.fn.extend({css:function(e,t){return _e(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=ot(e),i=t.length;s<i;s++)o[t[s]]=fe.css(e,t[s],!1,r);return o}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)}}),fe.Tween=B,B.prototype={constructor:B,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(fe.cssNumber[n]?"":"px")},cur:function(){var e=B.propHooks[this.prop];return e&&e.get?e.get(this):B.propHooks._default.get(this)},run:function(e){var t,n=B.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):B.propHooks._default.set(this),this}},B.prototype.init.prototype=B.prototype,B.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},B.propHooks.scrollTop=B.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=B.prototype.init,fe.fx.step={};var pt,ft,ht=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;fe.Animation=fe.extend(z,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return m(n.elem,e,Le.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(ke);for(var n,r=0,i=e.length;r<i;r++)n=e[r],z.tweeners[n]=z.tweeners[n]||[],z.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,u,l,c,d="width"in t||"height"in t,p=this,f={},h=e.style,m=e.nodeType&&Me(e),g=je.get(e,"fxshow");n.queue||(null==(s=fe._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})}));for(r in t)if(i=t[r],ht.test(i)){if(delete t[r],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;m=!0}f[r]=g&&g[r]||fe.style(e,r)}if((u=!fe.isEmptyObject(t))||!fe.isEmptyObject(f)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=g&&g.display)&&(l=je.get(e,"display")),"none"===(c=fe.css(e,"display"))&&(l?c=l:(v([e],!0),l=e.style.display||l,c=fe.css(e,"display"),v([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===fe.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in f)u||(g?"hidden"in g&&(m=g.hidden):g=je.access(e,"fxshow",{display:l}),o&&(g.hidden=!m),m&&v([e],!0),p.done(function(){m||v([e]),je.remove(e,"fxshow");for(r in f)fe.style(e,r,f[r])})),u=W(m?g[r]:0,r,p),r in g||(g[r]=u.start,m&&(u.end=u.start,u.start=0))}}],prefilter:function(e,t){t?z.prefilters.unshift(e):z.prefilters.push(e)}}),fe.speed=function(e,t,n){var r=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return fe.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in fe.fx.speeds?r.duration=fe.fx.speeds[r.duration]:r.duration=fe.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){fe.isFunction(r.old)&&r.old.call(this),r.queue&&fe.dequeue(this,r.queue)},r},fe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Me).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=fe.isEmptyObject(e),o=fe.speed(t,n,r),s=function(){var t=z(this,fe.extend({},e),o);(i||je.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=fe.timers,s=je.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&mt.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=je.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=fe.timers,s=r?r.length:0;for(n.finish=!0,fe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(V(t,!0),e,r,i)}}),fe.each({slideDown:V("show"),slideUp:V("hide"),slideToggle:V("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),fe.timers=[],fe.fx.tick=function(){var e,t=0,n=fe.timers;for(pt=fe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||fe.fx.stop(),pt=void 0},fe.fx.timer=function(e){fe.timers.push(e),fe.fx.start()},fe.fx.interval=13,fe.fx.start=function(){ft||(ft=!0,M())},fe.fx.stop=function(){ft=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=te.createElement("input"),t=te.createElement("select").appendChild(te.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=t.selected,(e=te.createElement("input")).value="t",e.type="radio",pe.radioValue="t"===e.value}();var gt,vt=fe.expr.attrHandle;fe.fn.extend({attr:function(e,t){return _e(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?fe.prop(e,t,n):(1===o&&fe.isXMLDoc(e)||(i=fe.attrHooks[t.toLowerCase()]||(fe.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void fe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=fe.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&i(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(ke);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?fe.removeAttr(e,n):e.setAttribute(n,n),n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=vt[t]||fe.find.attr;vt[t]=function(e,t,r){var i,o,s=t.toLowerCase();return r||(o=vt[s],vt[s]=i,i=null!=n(e,t,r)?s:null,vt[s]=o),i}});var yt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return _e(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[fe.propFix[e]||e]})}}),fe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,i=fe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),fe.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,u=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,J(this)))});if("string"==typeof e&&e)for(t=e.match(ke)||[];n=this[u++];)if(i=J(n),r=1===n.nodeType&&" "+U(i)+" "){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=U(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,u=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,J(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(ke)||[];n=this[u++];)if(i=J(n),r=1===n.nodeType&&" "+U(i)+" "){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(a=U(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,J(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=fe(this),o=e.match(ke)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=J(this))&&je.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":je.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+U(J(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;fe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=fe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,fe(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=fe.map(i,function(e){return null==e?"":e+""})),(t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=fe.valHooks[i.type]||fe.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(xt,""):null==n?"":n}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:U(fe.text(e))}},select:{get:function(e){var t,n,r,o=e.options,s=e.selectedIndex,a="select-one"===e.type,u=a?null:[],l=a?s+1:o.length;for(r=s<0?l:a?s:0;r<l;r++)if(((n=o[r]).selected||r===s)&&!n.disabled&&(!n.parentNode.disabled||!i(n.parentNode,"optgroup"))){if(t=fe(n).val(),a)return t;u.push(t)}return u},set:function(e,t){for(var n,r,i=e.options,o=fe.makeArray(t),s=i.length;s--;)((r=i[s]).selected=fe.inArray(fe.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},pe.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var wt=/^(?:focusinfocus|focusoutblur)$/;fe.extend(fe.event,{trigger:function(t,n,r,i){var o,s,a,u,l,c,d,p=[r||te],f=le.call(t,"type")?t.type:t,h=le.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||te,3!==r.nodeType&&8!==r.nodeType&&!wt.test(f+fe.event.triggered)&&(f.indexOf(".")>-1&&(f=(h=f.split(".")).shift(),h.sort()),l=f.indexOf(":")<0&&"on"+f,t=t[fe.expando]?t:new fe.Event(f,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:fe.makeArray(n,[t]),d=fe.event.special[f]||{},i||!d.trigger||!1!==d.trigger.apply(r,n))){if(!i&&!d.noBubble&&!fe.isWindow(r)){for(u=d.delegateType||f,wt.test(u+f)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||te)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)t.type=o>1?u:d.bindType||f,(c=(je.get(s,"events")||{})[t.type]&&je.get(s,"handle"))&&c.apply(s,n),(c=l&&s[l])&&c.apply&&Fe(s)&&(t.result=c.apply(s,n),!1===t.result&&t.preventDefault());return t.type=f,i||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),n)||!Fe(r)||l&&fe.isFunction(r[f])&&!fe.isWindow(r)&&((a=r[l])&&(r[l]=null),fe.event.triggered=f,r[f](),fe.event.triggered=void 0,a&&(r[l]=a)),t.result}},simulate:function(e,t,n){var r=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(r,null,t)}}),fe.fn.extend({trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}}),fe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=je.access(r,t);i||r.addEventListener(e,n,!0),je.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=je.access(r,t)-1;i?je.access(r,t,i):(r.removeEventListener(e,n,!0),je.remove(r,t))}}});var Et=e.location,Tt=fe.now(),Ct=/\?/;fe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var St=/\[\]$/,Dt=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,kt=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,r=[],i=function(e,t){var n=fe.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){i(this.name,this.value)});else for(n in e)K(n,e[n],t,i);return r.join("&")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&kt.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!We.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:Array.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var Ot=/%20/g,At=/#.*$/,_t=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,jt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Rt=/^(?:GET|HEAD)$/,It=/^\/\//,Ht={},Pt={},Lt="*/".concat("*"),Bt=te.createElement("a");Bt.href=Et.href,fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:jt.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Lt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?G(G(e,fe.ajaxSettings),t):G(fe.ajaxSettings,e)},ajaxPrefilter:X(Ht),ajaxTransport:X(Pt),ajax:function(t,n){function r(t,n,r,a){var l,p,f,x,w,E=n;c||(c=!0,u&&e.clearTimeout(u),i=void 0,s=a||"",T.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(x=Y(h,T,r)),x=Z(h,x,T,l),l?(h.ifModified&&((w=T.getResponseHeader("Last-Modified"))&&(fe.lastModified[o]=w),(w=T.getResponseHeader("etag"))&&(fe.etag[o]=w)),204===t||"HEAD"===h.type?E="nocontent":304===t?E="notmodified":(E=x.state,p=x.data,l=!(f=x.error))):(f=E,!t&&E||(E="error",t<0&&(t=0))),T.status=t,T.statusText=(n||E)+"",l?v.resolveWith(m,[p,E,T]):v.rejectWith(m,[T,E,f]),T.statusCode(b),b=void 0,d&&g.trigger(l?"ajaxSuccess":"ajaxError",[T,h,l?p:f]),y.fireWith(m,[T,E]),d&&(g.trigger("ajaxComplete",[T,h]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,s,a,u,l,c,d,p,f,h=fe.ajaxSetup({},n),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?fe(m):fe.event,v=fe.Deferred(),y=fe.Callbacks("once memory"),b=h.statusCode||{},x={},w={},E="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Ft.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||E;return i&&i.abort(t),r(0,t),this}};if(v.promise(T),h.url=((t||h.url||Et.href)+"").replace(It,Et.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(ke)||[""],null==h.crossDomain){l=te.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Bt.protocol+"//"+Bt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=fe.param(h.data,h.traditional)),Q(Ht,h,n,T),c)return T;(d=fe.event&&h.global)&&0==fe.active++&&fe.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Rt.test(h.type),o=h.url.replace(At,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Ot,"+")):(f=h.url.slice(o.length),h.data&&(o+=(Ct.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(_t,"$1"),f=(Ct.test(o)?"&":"?")+"_="+Tt+++f),h.url=o+f),h.ifModified&&(fe.lastModified[o]&&T.setRequestHeader("If-Modified-Since",fe.lastModified[o]),fe.etag[o]&&T.setRequestHeader("If-None-Match",fe.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&T.setRequestHeader("Content-Type",h.contentType),T.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Lt+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)T.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(m,T,h)||c))return T.abort();if(E="abort",y.add(h.complete),T.done(h.success),T.fail(h.error),i=Q(Pt,h,n,T)){if(T.readyState=1,d&&g.trigger("ajaxSend",[T,h]),c)return T;h.async&&h.timeout>0&&(u=e.setTimeout(function(){T.abort("timeout")},h.timeout));try{c=!1,i.send(x,r)}catch(e){if(c)throw e;r(-1,e)}}else r(-1,"No Transport");return T},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,r,i){return fe.isFunction(n)&&(i=i||r,r=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:i,data:n,success:r},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe.isFunction(e)&&(e=e.call(this[0])),t=fe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){fe(this).replaceWith(this.childNodes)}),this}}),fe.expr.pseudos.hidden=function(e){return!fe.expr.pseudos.visible(e)},fe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},fe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Mt={0:200,1223:204},qt=fe.ajaxSettings.xhr();pe.cors=!!qt&&"withCredentials"in qt,pe.ajax=qt=!!qt,fe.ajaxTransport(function(t){var n,r;if(pe.cors||qt&&!t.crossDomain)return{send:function(i,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)a.setRequestHeader(s,i[s]);n=function(e){return function(){n&&(n=r=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Mt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),r=a.onerror=n("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),fe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=fe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Vt=[],Wt=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||fe.expando+"_"+Tt++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=!1!==t.jsonp&&(Wt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Wt,"$1"+i):!1!==t.jsonp&&(t.url+=(Ct.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||fe.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){void 0===o?fe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Vt.push(i)),s&&fe.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),pe.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),fe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,o;return t||(pe.createHTMLDocument?((r=(t=te.implementation.createHTMLDocument("")).createElement("base")).href=te.location.href,t.head.appendChild(r)):t=te),i=Ee.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=x([e],t,o),o&&o.length&&fe(o).remove(),fe.merge([],i.childNodes))},fe.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=U(e.slice(a)),e=e.slice(0,a)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&fe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?fe("<div>").append(fe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.pseudos.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l=fe.css(e,"position"),c=fe(e),d={};"static"===l&&(e.style.position="relative"),a=c.offset(),o=fe.css(e,"top"),u=fe.css(e,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(s=(r=c.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+i),"using"in t?t.using.call(e,d):c.css(d)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,i=t.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===fe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),i(e[0],"html")||(r=e.offset()),r={top:r.top+fe.css(e[0],"borderTopWidth",!0),left:r.left+fe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-fe.css(n,"marginTop",!0),left:t.left-r.left-fe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||Ke})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;fe.fn[e]=function(r){return _e(this,function(e,r,i){var o;if(fe.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=j(pe.pixelPosition,function(e,n){if(n)return n=F(e,t),it.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){fe.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return _e(this,function(t,n,i){var o;return fe.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?fe.css(t,n,a):fe.style(t,n,i,a)},t,s?i:void 0,s)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.holdReady=function(e){e?fe.readyWait++:fe.ready(!0)},fe.isArray=Array.isArray,fe.parseJSON=JSON.parse,fe.nodeName=i,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var $t=e.jQuery,zt=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=zt),t&&e.jQuery===fe&&(e.jQuery=$t),fe},t||(e.jQuery=e.$=fe),fe})},{}],2:[function(e,t,n){!function(e){var r=this||(0,eval)("this"),i=r.document,o=r.navigator,s=r.jQuery,a=r.JSON;!function(e){"function"==typeof define&&define.amd?define(["exports","require"],e):e("object"==typeof n&&"object"==typeof t?t.exports||n:r.ko={})}(function(t,n){function u(e,t){return!!(null===e||typeof e in g)&&e===t}function l(t,n){var r;return function(){r||(r=m.utils.setTimeout(function(){r=e,t()},n))}}function c(e,t){var n;return function(){clearTimeout(n),n=m.utils.setTimeout(e,t)}}function d(e,t){t&&t!==v?"beforeChange"===t?this._limitBeforeChange(e):this._origNotifySubscribers(e,t):this._limitChange(e)}function p(e,t){null!==t&&t.dispose&&t.dispose()}function f(e,t){var n=this.computedObservable,r=n[T];r.isDisposed||(this.disposalCount&&this.disposalCandidates[t]?(n.addDependencyTracking(t,e,this.disposalCandidates[t]),this.disposalCandidates[t]=null,--this.disposalCount):r.dependencyTracking[t]||n.addDependencyTracking(t,e,r.isSleeping?{_target:e}:n.subscribeToDependency(e)),e._notificationIsPending&&e._notifyNextChangeIfValueIsDifferent())}function h(e,t,n,r){m.bindingHandlers[e]={init:function(e,i,o,s,a){var u,l;return m.computed(function(){var o=i(),s=m.utils.unwrapObservable(o),c=!n!=!s,d=!l;(d||t||c!==u)&&(d&&m.computedContext.getDependenciesCount()&&(l=m.utils.cloneNodes(m.virtualElements.childNodes(e),!0)),c?(d||m.virtualElements.setDomNodeChildren(e,m.utils.cloneNodes(l)),m.applyBindingsToDescendants(r?r(a,o):a,e)):m.virtualElements.emptyNode(e),u=c)},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}},m.expressionRewriting.bindingRewriteValidators[e]=!1,m.virtualElements.allowedBindings[e]=!0}var m=void 0!==t?t:{};m.exportSymbol=function(e,t){for(var n=e.split("."),r=m,i=0;i<n.length-1;i++)r=r[n[i]];r[n[n.length-1]]=t},m.exportProperty=function(e,t,n){e[t]=n},m.version="3.4.2",m.exportSymbol("version",m.version),m.options={deferUpdates:!1,useOnlyNativeEvents:!1},m.utils=function(){function t(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])}function n(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function u(e,t){return e.__proto__=t,e}function l(e,t){if("input"!==m.utils.tagNameLower(e)||!e.type)return!1;if("click"!=t.toLowerCase())return!1;var n=e.type;return"checkbox"==n||"radio"==n}function c(e,t,n,r){var i=e[t].match(b)||[];m.utils.arrayForEach(n.match(b),function(e){m.utils.addOrRemoveItem(i,e,r)}),e[t]=i.join(" ")}var d={__proto__:[]}instanceof Array,p={},f={};p[o&&/Firefox\/2/i.test(o.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],p.MouseEvents=["click","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave"],t(p,function(e,t){if(t.length)for(var n=0,r=t.length;n<r;n++)f[t[n]]=e});var h={propertychange:!0},g=i&&function(){for(var t=3,n=i.createElement("div"),r=n.getElementsByTagName("i");n.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e",r[0];);return t>4?t:e}(),v=6===g,y=7===g,b=/\S+/g;return{fieldsIncludedWithJsonPost:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],arrayForEach:function(e,t){for(var n=0,r=e.length;n<r;n++)t(e[n],n)},arrayIndexOf:function(e,t){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(e,t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},arrayFirst:function(e,t,n){for(var r=0,i=e.length;r<i;r++)if(t.call(n,e[r],r))return e[r];return null},arrayRemoveItem:function(e,t){var n=m.utils.arrayIndexOf(e,t);n>0?e.splice(n,1):0===n&&e.shift()},arrayGetDistinctValues:function(e){for(var t=[],n=0,r=(e=e||[]).length;n<r;n++)m.utils.arrayIndexOf(t,e[n])<0&&t.push(e[n]);return t},arrayMap:function(e,t){for(var n=[],r=0,i=(e=e||[]).length;r<i;r++)n.push(t(e[r],r));return n},arrayFilter:function(e,t){for(var n=[],r=0,i=(e=e||[]).length;r<i;r++)t(e[r],r)&&n.push(e[r]);return n},arrayPushAll:function(e,t){if(t instanceof Array)e.push.apply(e,t);else for(var n=0,r=t.length;n<r;n++)e.push(t[n]);return e},addOrRemoveItem:function(e,t,n){var r=m.utils.arrayIndexOf(m.utils.peekObservable(e),t);r<0?n&&e.push(t):n||e.splice(r,1)},canSetPrototype:d,extend:n,setPrototypeOf:u,setPrototypeOfOrExtend:d?u:n,objectForEach:t,objectMap:function(e,t){if(!e)return e;var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=t(e[r],r,e));return n},emptyDomNode:function(e){for(;e.firstChild;)m.removeNode(e.firstChild)},moveCleanedNodesToContainerElement:function(e){for(var t=m.utils.makeArray(e),n=(t[0]&&t[0].ownerDocument||i).createElement("div"),r=0,o=t.length;r<o;r++)n.appendChild(m.cleanNode(t[r]));return n},cloneNodes:function(e,t){for(var n=0,r=e.length,i=[];n<r;n++){var o=e[n].cloneNode(!0);i.push(t?m.cleanNode(o):o)}return i},setDomNodeChildren:function(e,t){if(m.utils.emptyDomNode(e),t)for(var n=0,r=t.length;n<r;n++)e.appendChild(t[n])},replaceDomNodes:function(e,t){var n=e.nodeType?[e]:e;if(n.length>0){for(var r=n[0],i=r.parentNode,o=0,s=t.length;o<s;o++)i.insertBefore(t[o],r);for(var o=0,s=n.length;o<s;o++)m.removeNode(n[o])}},fixUpContinuousNodeArray:function(e,t){if(e.length){for(t=8===t.nodeType&&t.parentNode||t;e.length&&e[0].parentNode!==t;)e.splice(0,1);for(;e.length>1&&e[e.length-1].parentNode!==t;)e.length--;if(e.length>1){var n=e[0],r=e[e.length-1];for(e.length=0;n!==r;)e.push(n),n=n.nextSibling;e.push(r)}}return e},setOptionNodeSelectionState:function(e,t){g<7?e.setAttribute("selected",t):e.selected=t},stringTrim:function(t){return null===t||t===e?"":t.trim?t.trim():t.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},stringStartsWith:function(e,t){return e=e||"",!(t.length>e.length)&&e.substring(0,t.length)===t},domNodeIsContainedBy:function(e,t){if(e===t)return!0;if(11===e.nodeType)return!1;if(t.contains)return t.contains(3===e.nodeType?e.parentNode:e);if(t.compareDocumentPosition)return 16==(16&t.compareDocumentPosition(e));for(;e&&e!=t;)e=e.parentNode;return!!e},domNodeIsAttachedToDocument:function(e){return m.utils.domNodeIsContainedBy(e,e.ownerDocument.documentElement)},anyDomNodeIsAttachedToDocument:function(e){return!!m.utils.arrayFirst(e,m.utils.domNodeIsAttachedToDocument)},tagNameLower:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},catchFunctionErrors:function(e){return m.onError?function(){try{return e.apply(this,arguments)}catch(e){throw m.onError&&m.onError(e),e}}:e},setTimeout:function(e,t){return setTimeout(m.utils.catchFunctionErrors(e),t)},deferError:function(e){setTimeout(function(){throw m.onError&&m.onError(e),e},0)},registerEventHandler:function(e,t,n){var r=m.utils.catchFunctionErrors(n),i=g&&h[t];if(m.options.useOnlyNativeEvents||i||!s)if(i||"function"!=typeof e.addEventListener){if(void 0===e.attachEvent)throw new Error("Browser doesn't support addEventListener or attachEvent");var o=function(t){r.call(e,t)},a="on"+t;e.attachEvent(a,o),m.utils.domNodeDisposal.addDisposeCallback(e,function(){e.detachEvent(a,o)})}else e.addEventListener(t,r,!1);else s(e).bind(t,r)},triggerEvent:function(e,t){if(!e||!e.nodeType)throw new Error("element must be a DOM node when calling triggerEvent");var n=l(e,t);if(m.options.useOnlyNativeEvents||!s||n)if("function"==typeof i.createEvent){if("function"!=typeof e.dispatchEvent)throw new Error("The supplied element doesn't support dispatchEvent");var o=f[t]||"HTMLEvents",a=i.createEvent(o);a.initEvent(t,!0,!0,r,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(a)}else if(n&&e.click)e.click();else{if(void 0===e.fireEvent)throw new Error("Browser doesn't support triggering events");e.fireEvent("on"+t)}else s(e).trigger(t)},unwrapObservable:function(e){return m.isObservable(e)?e():e},peekObservable:function(e){return m.isObservable(e)?e.peek():e},toggleDomNodeCssClass:function(e,t,n){var r;t&&("object"==typeof e.classList?(r=e.classList[n?"add":"remove"],m.utils.arrayForEach(t.match(b),function(t){r.call(e.classList,t)})):"string"==typeof e.className.baseVal?c(e.className,"baseVal",t,n):c(e,"className",t,n))},setTextContent:function(t,n){var r=m.utils.unwrapObservable(n);null!==r&&r!==e||(r="");var i=m.virtualElements.firstChild(t);!i||3!=i.nodeType||m.virtualElements.nextSibling(i)?m.virtualElements.setDomNodeChildren(t,[t.ownerDocument.createTextNode(r)]):i.data=r,m.utils.forceRefresh(t)},setElementName:function(e,t){if(e.name=t,g<=7)try{e.mergeAttributes(i.createElement("<input name='"+e.name+"'/>"),!1)}catch(e){}},forceRefresh:function(e){if(g>=9){var t=1==e.nodeType?e:e.parentNode;t.style&&(t.style.zoom=t.style.zoom)}},ensureSelectElementIsRenderedCorrectly:function(e){if(g){var t=e.style.width;e.style.width=0,e.style.width=t}},range:function(e,t){e=m.utils.unwrapObservable(e),t=m.utils.unwrapObservable(t);for(var n=[],r=e;r<=t;r++)n.push(r);return n},makeArray:function(e){for(var t=[],n=0,r=e.length;n<r;n++)t.push(e[n]);return t},createSymbolOrString:function(e){return e},isIe6:v,isIe7:y,ieVersion:g,getFormFields:function(e,t){for(var n=m.utils.makeArray(e.getElementsByTagName("input")).concat(m.utils.makeArray(e.getElementsByTagName("textarea"))),r="string"==typeof t?function(e){return e.name===t}:function(e){return t.test(e.name)},i=[],o=n.length-1;o>=0;o--)r(n[o])&&i.push(n[o]);return i},parseJson:function(e){return"string"==typeof e&&(e=m.utils.stringTrim(e))?a&&a.parse?a.parse(e):new Function("return "+e)():null},stringifyJson:function(e,t,n){if(!a||!a.stringify)throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return a.stringify(m.utils.unwrapObservable(e),t,n)},postJson:function(e,n,r){var o=(r=r||{}).params||{},s=r.includeFields||this.fieldsIncludedWithJsonPost,a=e;if("object"==typeof e&&"form"===m.utils.tagNameLower(e)){var u=e;a=u.action;for(var l=s.length-1;l>=0;l--)for(var c=m.utils.getFormFields(u,s[l]),d=c.length-1;d>=0;d--)o[c[d].name]=c[d].value}n=m.utils.unwrapObservable(n);var p=i.createElement("form");p.style.display="none",p.action=a,p.method="post";for(var f in n){var h=i.createElement("input");h.type="hidden",h.name=f,h.value=m.utils.stringifyJson(m.utils.unwrapObservable(n[f])),p.appendChild(h)}t(o,function(e,t){var n=i.createElement("input");n.type="hidden",n.name=e,n.value=t,p.appendChild(n)}),i.body.appendChild(p),r.submitter?r.submitter(p):p.submit(),setTimeout(function(){p.parentNode.removeChild(p)},0)}}}(),m.exportSymbol("utils",m.utils),m.exportSymbol("utils.arrayForEach",m.utils.arrayForEach),m.exportSymbol("utils.arrayFirst",m.utils.arrayFirst),m.exportSymbol("utils.arrayFilter",m.utils.arrayFilter),m.exportSymbol("utils.arrayGetDistinctValues",m.utils.arrayGetDistinctValues),m.exportSymbol("utils.arrayIndexOf",m.utils.arrayIndexOf),m.exportSymbol("utils.arrayMap",m.utils.arrayMap),m.exportSymbol("utils.arrayPushAll",m.utils.arrayPushAll),m.exportSymbol("utils.arrayRemoveItem",m.utils.arrayRemoveItem),m.exportSymbol("utils.extend",m.utils.extend),m.exportSymbol("utils.fieldsIncludedWithJsonPost",m.utils.fieldsIncludedWithJsonPost),m.exportSymbol("utils.getFormFields",m.utils.getFormFields),m.exportSymbol("utils.peekObservable",m.utils.peekObservable),m.exportSymbol("utils.postJson",m.utils.postJson),m.exportSymbol("utils.parseJson",m.utils.parseJson),m.exportSymbol("utils.registerEventHandler",m.utils.registerEventHandler),m.exportSymbol("utils.stringifyJson",m.utils.stringifyJson),m.exportSymbol("utils.range",m.utils.range),m.exportSymbol("utils.toggleDomNodeCssClass",m.utils.toggleDomNodeCssClass),m.exportSymbol("utils.triggerEvent",m.utils.triggerEvent),m.exportSymbol("utils.unwrapObservable",m.utils.unwrapObservable),m.exportSymbol("utils.objectForEach",m.utils.objectForEach),m.exportSymbol("utils.addOrRemoveItem",m.utils.addOrRemoveItem),m.exportSymbol("utils.setTextContent",m.utils.setTextContent),m.exportSymbol("unwrap",m.utils.unwrapObservable),Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if(1===arguments.length)return function(){return t.apply(e,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var r=n.slice(0);return r.push.apply(r,arguments),t.apply(e,r)}}),m.utils.domData=new function(){function t(t,o){var s=t[r];if(!(s&&"null"!==s&&i[s])){if(!o)return e;s=t[r]="ko"+n++,i[s]={}}return i[s]}var n=0,r="__ko__"+(new Date).getTime(),i={};return{get:function(n,r){var i=t(n,!1);return i===e?e:i[r]},set:function(n,r,i){i===e&&t(n,!1)===e||(t(n,!0)[r]=i)},clear:function(e){var t=e[r];return!!t&&(delete i[t],e[r]=null,!0)},nextKey:function(){return n+++r}}},m.exportSymbol("utils.domData",m.utils.domData),m.exportSymbol("utils.domData.clear",m.utils.domData.clear),m.utils.domNodeDisposal=new function(){function t(t,n){var r=m.utils.domData.get(t,o);return r===e&&n&&(r=[],m.utils.domData.set(t,o,r)),r}function n(t){m.utils.domData.set(t,o,e)}function r(e){var n=t(e,!1);if(n){n=n.slice(0);for(var r=0;r<n.length;r++)n[r](e)}m.utils.domData.clear(e),m.utils.domNodeDisposal.cleanExternalData(e),u[e.nodeType]&&i(e)}function i(e){for(var t,n=e.firstChild;t=n;)n=t.nextSibling,8===t.nodeType&&r(t)}var o=m.utils.domData.nextKey(),a={1:!0,8:!0,9:!0},u={1:!0,9:!0};return{addDisposeCallback:function(e,n){if("function"!=typeof n)throw new Error("Callback must be a function");t(e,!0).push(n)},removeDisposeCallback:function(e,r){var i=t(e,!1);i&&(m.utils.arrayRemoveItem(i,r),0==i.length&&n(e))},cleanNode:function(e){if(a[e.nodeType]&&(r(e),u[e.nodeType])){var t=[];m.utils.arrayPushAll(t,e.getElementsByTagName("*"));for(var n=0,i=t.length;n<i;n++)r(t[n])}return e},removeNode:function(e){m.cleanNode(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){s&&"function"==typeof s.cleanData&&s.cleanData([e])}}},m.cleanNode=m.utils.domNodeDisposal.cleanNode,m.removeNode=m.utils.domNodeDisposal.removeNode,m.exportSymbol("cleanNode",m.cleanNode),m.exportSymbol("removeNode",m.removeNode),m.exportSymbol("utils.domNodeDisposal",m.utils.domNodeDisposal),m.exportSymbol("utils.domNodeDisposal.addDisposeCallback",m.utils.domNodeDisposal.addDisposeCallback),m.exportSymbol("utils.domNodeDisposal.removeDisposeCallback",m.utils.domNodeDisposal.removeDisposeCallback),function(){function t(e){var t=e.match(/^<([a-z]+)[ >]/);return t&&d[t[1]]||a}function n(e,n){n||(n=i);var o=n.parentWindow||n.defaultView||r,s=m.utils.stringTrim(e).toLowerCase(),a=n.createElement("div"),u=t(s),l=u[0],c="ignored<div>"+u[1]+e+u[2]+"</div>";for("function"==typeof o.innerShiv?a.appendChild(o.innerShiv(c)):(p&&n.appendChild(a),a.innerHTML=c,p&&a.parentNode.removeChild(a));l--;)a=a.lastChild;return m.utils.makeArray(a.lastChild.childNodes)}function o(e,t){if(s.parseHTML)return s.parseHTML(e,t)||[];var n=s.clean([e],t);if(n&&n[0]){for(var r=n[0];r.parentNode&&11!==r.parentNode.nodeType;)r=r.parentNode;r.parentNode&&r.parentNode.removeChild(r)}return n}var a=[0,"",""],u=[1,"<table>","</table>"],l=[3,"<table><tbody><tr>","</tr></tbody></table>"],c=[1,"<select multiple='multiple'>","</select>"],d={thead:u,tbody:u,tfoot:u,tr:[2,"<table><tbody>","</tbody></table>"],td:l,th:l,option:c,optgroup:c},p=m.utils.ieVersion<=8;m.utils.parseHtmlFragment=function(e,t){return s?o(e,t):n(e,t)},m.utils.setHtml=function(t,n){if(m.utils.emptyDomNode(t),null!==(n=m.utils.unwrapObservable(n))&&n!==e)if("string"!=typeof n&&(n=n.toString()),s)s(t).html(n);else for(var r=m.utils.parseHtmlFragment(n,t.ownerDocument),i=0;i<r.length;i++)t.appendChild(r[i])}}(),m.exportSymbol("utils.parseHtmlFragment",m.utils.parseHtmlFragment),m.exportSymbol("utils.setHtml",m.utils.setHtml),m.memoization=function(){function t(){return(4294967296*(1+Math.random())|0).toString(16).substring(1)}function n(){return t()+t()}function r(e,t){if(e)if(8==e.nodeType){var n=m.memoization.parseMemoText(e.nodeValue);null!=n&&t.push({domNode:e,memoId:n})}else if(1==e.nodeType)for(var i=0,o=e.childNodes,s=o.length;i<s;i++)r(o[i],t)}var i={};return{memoize:function(e){if("function"!=typeof e)throw new Error("You can only pass a function to ko.memoization.memoize()");var t=n();return i[t]=e,"\x3c!--[ko_memo:"+t+"]--\x3e"},unmemoize:function(t,n){var r=i[t];if(r===e)throw new Error("Couldn't find any memo with ID "+t+". Perhaps it's already been unmemoized.");try{return r.apply(null,n||[]),!0}finally{delete i[t]}},unmemoizeDomNodeAndDescendants:function(e,t){var n=[];r(e,n);for(var i=0,o=n.length;i<o;i++){var s=n[i].domNode,a=[s];t&&m.utils.arrayPushAll(a,t),m.memoization.unmemoize(n[i].memoId,a),s.nodeValue="",s.parentNode&&s.parentNode.removeChild(s)}},parseMemoText:function(e){var t=e.match(/^\[ko_memo\:(.*?)\]$/);return t?t[1]:null}}}(),m.exportSymbol("memoization",m.memoization),m.exportSymbol("memoization.memoize",m.memoization.memoize),m.exportSymbol("memoization.unmemoize",m.memoization.unmemoize),m.exportSymbol("memoization.parseMemoText",m.memoization.parseMemoText),m.exportSymbol("memoization.unmemoizeDomNodeAndDescendants",m.memoization.unmemoizeDomNodeAndDescendants),m.tasks=function(){function e(){if(s)for(var e,t=s,n=0;u<s;)if(e=o[u++]){if(u>t){if(++n>=5e3){u=s,m.utils.deferError(Error("'Too much recursion' after processing "+n+" task groups."));break}t=s}try{e()}catch(e){m.utils.deferError(e)}}}function t(){e(),u=s=o.length=0}function n(){m.tasks.scheduler(t)}var o=[],s=0,a=1,u=0;return{scheduler:r.MutationObserver?function(e){var t=i.createElement("div");return new MutationObserver(e).observe(t,{attributes:!0}),function(){t.classList.toggle("foo")}}(t):i&&"onreadystatechange"in i.createElement("script")?function(e){var t=i.createElement("script");t.onreadystatechange=function(){t.onreadystatechange=null,i.documentElement.removeChild(t),t=null,e()},i.documentElement.appendChild(t)}:function(e){setTimeout(e,0)},schedule:function(e){return s||n(),o[s++]=e,a++},cancel:function(e){var t=e-(a-s);t>=u&&t<s&&(o[t]=null)},resetForTesting:function(){var e=s-u;return u=s=o.length=0,e},runEarly:e}}(),m.exportSymbol("tasks",m.tasks),m.exportSymbol("tasks.schedule",m.tasks.schedule),m.exportSymbol("tasks.runEarly",m.tasks.runEarly),m.extenders={throttle:function(e,t){e.throttleEvaluation=t;var n=null;return m.dependentObservable({read:e,write:function(r){clearTimeout(n),n=m.utils.setTimeout(function(){e(r)},t)}})},rateLimit:function(e,t){var n,r,i;"number"==typeof t?n=t:(n=t.timeout,r=t.method),e._deferUpdates=!1,i="notifyWhenChangesStop"==r?c:l,e.limit(function(e){return i(e,n)})},deferred:function(t,n){if(!0!==n)throw new Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");t._deferUpdates||(t._deferUpdates=!0,t.limit(function(n){var r,i=!1;return function(){if(!i){m.tasks.cancel(r),r=m.tasks.schedule(n);try{i=!0,t.notifySubscribers(e,"dirty")}finally{i=!1}}}}))},notify:function(e,t){e.equalityComparer="always"==t?null:u}};var g={undefined:1,boolean:1,number:1,string:1};m.exportSymbol("extenders",m.extenders),m.subscription=function(e,t,n){this._target=e,this.callback=t,this.disposeCallback=n,this.isDisposed=!1,m.exportProperty(this,"dispose",this.dispose)},m.subscription.prototype.dispose=function(){this.isDisposed=!0,this.disposeCallback()},m.subscribable=function(){m.utils.setPrototypeOfOrExtend(this,y),y.init(this)};var v="change",y={init:function(e){e._subscriptions={change:[]},e._versionNumber=1},subscribe:function(e,t,n){var r=this;n=n||v;var i=t?e.bind(t):e,o=new m.subscription(r,i,function(){m.utils.arrayRemoveItem(r._subscriptions[n],o),r.afterSubscriptionRemove&&r.afterSubscriptionRemove(n)});return r.beforeSubscriptionAdd&&r.beforeSubscriptionAdd(n),r._subscriptions[n]||(r._subscriptions[n]=[]),r._subscriptions[n].push(o),o},notifySubscribers:function(e,t){if((t=t||v)===v&&this.updateVersion(),this.hasSubscriptionsForEvent(t)){var n=t===v&&this._changeSubscriptions||this._subscriptions[t].slice(0);try{m.dependencyDetection.begin();for(var r,i=0;r=n[i];++i)r.isDisposed||r.callback(e)}finally{m.dependencyDetection.end()}}},getVersion:function(){return this._versionNumber},hasChanged:function(e){return this.getVersion()!==e},updateVersion:function(){++this._versionNumber},limit:function(e){var t,n,r,i,o=this,s=m.isObservable(o);o._origNotifySubscribers||(o._origNotifySubscribers=o.notifySubscribers,o.notifySubscribers=d);var a=e(function(){o._notificationIsPending=!1,s&&i===o&&(i=o._evalIfChanged?o._evalIfChanged():o());var e=n||o.isDifferent(r,i);n=t=!1,e&&o._origNotifySubscribers(r=i)});o._limitChange=function(e){o._changeSubscriptions=o._subscriptions[v].slice(0),o._notificationIsPending=t=!0,i=e,a()},o._limitBeforeChange=function(e){t||(r=e,o._origNotifySubscribers(e,"beforeChange"))},o._notifyNextChangeIfValueIsDifferent=function(){o.isDifferent(r,o.peek(!0))&&(n=!0)}},hasSubscriptionsForEvent:function(e){return this._subscriptions[e]&&this._subscriptions[e].length},getSubscriptionsCount:function(e){if(e)return this._subscriptions[e]&&this._subscriptions[e].length||0;var t=0;return m.utils.objectForEach(this._subscriptions,function(e,n){"dirty"!==e&&(t+=n.length)}),t},isDifferent:function(e,t){return!this.equalityComparer||!this.equalityComparer(e,t)},extend:function(e){var t=this;return e&&m.utils.objectForEach(e,function(e,n){var r=m.extenders[e];"function"==typeof r&&(t=r(t,n)||t)}),t}};m.exportProperty(y,"subscribe",y.subscribe),m.exportProperty(y,"extend",y.extend),m.exportProperty(y,"getSubscriptionsCount",y.getSubscriptionsCount),m.utils.canSetPrototype&&m.utils.setPrototypeOf(y,Function.prototype),m.subscribable.fn=y,m.isSubscribable=function(e){return null!=e&&"function"==typeof e.subscribe&&"function"==typeof e.notifySubscribers},m.exportSymbol("subscribable",m.subscribable),m.exportSymbol("isSubscribable",m.isSubscribable),m.computedContext=m.dependencyDetection=function(){function e(){return++o}function t(e){i.push(r),r=e}function n(){r=i.pop()}var r,i=[],o=0;return{begin:t,end:n,registerDependency:function(t){if(r){if(!m.isSubscribable(t))throw new Error("Only subscribable things can act as dependencies");r.callback.call(r.callbackTarget,t,t._id||(t._id=e()))}},ignore:function(e,r,i){try{return t(),e.apply(r,i||[])}finally{n()}},getDependenciesCount:function(){if(r)return r.computed.getDependenciesCount()},isInitial:function(){if(r)return r.isInitial}}}(),m.exportSymbol("computedContext",m.computedContext),m.exportSymbol("computedContext.getDependenciesCount",m.computedContext.getDependenciesCount),m.exportSymbol("computedContext.isInitial",m.computedContext.isInitial),m.exportSymbol("ignoreDependencies",m.ignoreDependencies=m.dependencyDetection.ignore);var b=m.utils.createSymbolOrString("_latestValue");m.observable=function(e){function t(){return arguments.length>0?(t.isDifferent(t[b],arguments[0])&&(t.valueWillMutate(),t[b]=arguments[0],t.valueHasMutated()),this):(m.dependencyDetection.registerDependency(t),t[b])}return t[b]=e,m.utils.canSetPrototype||m.utils.extend(t,m.subscribable.fn),m.subscribable.fn.init(t),m.utils.setPrototypeOfOrExtend(t,x),m.options.deferUpdates&&m.extenders.deferred(t,!0),t};var x={equalityComparer:u,peek:function(){return this[b]},valueHasMutated:function(){this.notifySubscribers(this[b])},valueWillMutate:function(){this.notifySubscribers(this[b],"beforeChange")}};m.utils.canSetPrototype&&m.utils.setPrototypeOf(x,m.subscribable.fn);var w=m.observable.protoProperty="__ko_proto__";x[w]=m.observable,m.hasPrototype=function(t,n){return null!==t&&t!==e&&t[w]!==e&&(t[w]===n||m.hasPrototype(t[w],n))},m.isObservable=function(e){return m.hasPrototype(e,m.observable)},m.isWriteableObservable=function(e){return"function"==typeof e&&e[w]===m.observable||!("function"!=typeof e||e[w]!==m.dependentObservable||!e.hasWriteFunction)},m.exportSymbol("observable",m.observable),m.exportSymbol("isObservable",m.isObservable),m.exportSymbol("isWriteableObservable",m.isWriteableObservable),m.exportSymbol("isWritableObservable",m.isWriteableObservable),m.exportSymbol("observable.fn",x),m.exportProperty(x,"peek",x.peek),m.exportProperty(x,"valueHasMutated",x.valueHasMutated),m.exportProperty(x,"valueWillMutate",x.valueWillMutate),m.observableArray=function(e){if("object"!=typeof(e=e||[])||!("length"in e))throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");var t=m.observable(e);return m.utils.setPrototypeOfOrExtend(t,m.observableArray.fn),t.extend({trackArrayChanges:!0})},m.observableArray.fn={remove:function(e){for(var t=this.peek(),n=[],r="function"!=typeof e||m.isObservable(e)?function(t){return t===e}:e,i=0;i<t.length;i++){var o=t[i];r(o)&&(0===n.length&&this.valueWillMutate(),n.push(o),t.splice(i,1),i--)}return n.length&&this.valueHasMutated(),n},removeAll:function(t){if(t===e){var n=this.peek(),r=n.slice(0);return this.valueWillMutate(),n.splice(0,n.length),this.valueHasMutated(),r}return t?this.remove(function(e){return m.utils.arrayIndexOf(t,e)>=0}):[]},destroy:function(e){var t=this.peek(),n="function"!=typeof e||m.isObservable(e)?function(t){return t===e}:e;this.valueWillMutate();for(var r=t.length-1;r>=0;r--)n(t[r])&&(t[r]._destroy=!0);this.valueHasMutated()},destroyAll:function(t){return t===e?this.destroy(function(){return!0}):t?this.destroy(function(e){return m.utils.arrayIndexOf(t,e)>=0}):[]},indexOf:function(e){var t=this();return m.utils.arrayIndexOf(t,e)},replace:function(e,t){var n=this.indexOf(e);n>=0&&(this.valueWillMutate(),this.peek()[n]=t,this.valueHasMutated())}},m.utils.canSetPrototype&&m.utils.setPrototypeOf(m.observableArray.fn,m.observable.fn),m.utils.arrayForEach(["pop","push","reverse","shift","sort","splice","unshift"],function(e){m.observableArray.fn[e]=function(){var t=this.peek();this.valueWillMutate(),this.cacheDiffForKnownOperation(t,e,arguments);var n=t[e].apply(t,arguments);return this.valueHasMutated(),n===t?this:n}}),m.utils.arrayForEach(["slice"],function(e){m.observableArray.fn[e]=function(){var t=this();return t[e].apply(t,arguments)}}),m.exportSymbol("observableArray",m.observableArray);var E="arrayChange";m.extenders.trackArrayChanges=function(t,n){function r(){if(!a){a=!0,s=t.notifySubscribers,t.notifySubscribers=function(e,t){return t&&t!==v||++l,s.apply(this,arguments)};var e=[].concat(t.peek()||[]);u=null,o=t.subscribe(function(n){if(n=[].concat(n||[]),t.hasSubscriptionsForEvent(E))var r=i(e,n);e=n,u=null,l=0,r&&r.length&&t.notifySubscribers(r,E)})}}function i(e,n){return(!u||l>1)&&(u=m.utils.compareArrays(e,n,t.compareArrayOptions)),u}if(t.compareArrayOptions={},n&&"object"==typeof n&&m.utils.extend(t.compareArrayOptions,n),t.compareArrayOptions.sparse=!0,!t.cacheDiffForKnownOperation){var o,s,a=!1,u=null,l=0,c=t.beforeSubscriptionAdd,d=t.afterSubscriptionRemove;t.beforeSubscriptionAdd=function(e){c&&c.call(t,e),e===E&&r()},t.afterSubscriptionRemove=function(n){d&&d.call(t,n),n!==E||t.hasSubscriptionsForEvent(E)||(s&&(t.notifySubscribers=s,s=e),o.dispose(),a=!1)},t.cacheDiffForKnownOperation=function(e,t,n){function r(e,t,n){return i[i.length]={status:e,value:t,index:n}}if(a&&!l){var i=[],o=e.length,s=n.length,c=0;switch(t){case"push":c=o;case"unshift":for(y=0;y<s;y++)r("added",n[y],c+y);break;case"pop":c=o-1;case"shift":o&&r("deleted",e[c],c);break;case"splice":for(var d=Math.min(Math.max(0,n[0]<0?o+n[0]:n[0]),o),p=1===s?o:Math.min(d+(n[1]||0),o),f=d+s-2,h=Math.max(p,f),g=[],v=[],y=d,b=2;y<h;++y,++b)y<p&&v.push(r("deleted",e[y],y)),y<f&&g.push(r("added",n[b],y));m.utils.findMovesInArrayComparison(v,g);break;default:return}u=i}}}};var T=m.utils.createSymbolOrString("_state");m.computed=m.dependentObservable=function(t,n,r){function i(){if(arguments.length>0){if("function"!=typeof o)throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return o.apply(s.evaluatorFunctionTarget,arguments),this}return m.dependencyDetection.registerDependency(i),(s.isDirty||s.isSleeping&&i.haveDependenciesChanged())&&i.evaluateImmediate(),s.latestValue}if("object"==typeof t?r=t:(r=r||{},t&&(r.read=t)),"function"!=typeof r.read)throw Error("Pass a function that returns the value of the ko.computed");var o=r.write,s={latestValue:e,isStale:!0,isDirty:!0,isBeingEvaluated:!1,suppressDisposalUntilDisposeWhenReturnsFalse:!1,isDisposed:!1,pure:!1,isSleeping:!1,readFunction:r.read,evaluatorFunctionTarget:n||r.owner,disposeWhenNodeIsRemoved:r.disposeWhenNodeIsRemoved||r.disposeWhenNodeIsRemoved||null,disposeWhen:r.disposeWhen||r.disposeWhen,domNodeDisposalCallback:null,dependencyTracking:{},dependenciesCount:0,evaluationTimeoutInstance:null};return i[T]=s,i.hasWriteFunction="function"==typeof o,m.utils.canSetPrototype||m.utils.extend(i,m.subscribable.fn),m.subscribable.fn.init(i),m.utils.setPrototypeOfOrExtend(i,C),r.pure?(s.pure=!0,s.isSleeping=!0,m.utils.extend(i,S)):r.deferEvaluation&&m.utils.extend(i,D),m.options.deferUpdates&&m.extenders.deferred(i,!0),i._options=r,s.disposeWhenNodeIsRemoved&&(s.suppressDisposalUntilDisposeWhenReturnsFalse=!0,s.disposeWhenNodeIsRemoved.nodeType||(s.disposeWhenNodeIsRemoved=null)),s.isSleeping||r.deferEvaluation||i.evaluateImmediate(),s.disposeWhenNodeIsRemoved&&i.isActive()&&m.utils.domNodeDisposal.addDisposeCallback(s.disposeWhenNodeIsRemoved,s.domNodeDisposalCallback=function(){i.dispose()}),i};var C={equalityComparer:u,getDependenciesCount:function(){return this[T].dependenciesCount},addDependencyTracking:function(e,t,n){if(this[T].pure&&t===this)throw Error("A 'pure' computed must not be called recursively");this[T].dependencyTracking[e]=n,n._order=this[T].dependenciesCount++,n._version=t.getVersion()},haveDependenciesChanged:function(){var e,t,n=this[T].dependencyTracking;for(e in n)if(n.hasOwnProperty(e)&&(t=n[e],this._evalDelayed&&t._target._notificationIsPending||t._target.hasChanged(t._version)))return!0},markDirty:function(){this._evalDelayed&&!this[T].isBeingEvaluated&&this._evalDelayed(!1)},isActive:function(){var e=this[T];return e.isDirty||e.dependenciesCount>0},respondToChange:function(){this._notificationIsPending?this[T].isDirty&&(this[T].isStale=!0):this.evaluatePossiblyAsync()},subscribeToDependency:function(e){if(e._deferUpdates&&!this[T].disposeWhenNodeIsRemoved){var t=e.subscribe(this.markDirty,this,"dirty"),n=e.subscribe(this.respondToChange,this);return{_target:e,dispose:function(){t.dispose(),n.dispose()}}}return e.subscribe(this.evaluatePossiblyAsync,this)},evaluatePossiblyAsync:function(){var e=this,t=e.throttleEvaluation;t&&t>=0?(clearTimeout(this[T].evaluationTimeoutInstance),this[T].evaluationTimeoutInstance=m.utils.setTimeout(function(){e.evaluateImmediate(!0)},t)):e._evalDelayed?e._evalDelayed(!0):e.evaluateImmediate(!0)},evaluateImmediate:function(e){var t=this,n=t[T],r=n.disposeWhen,i=!1;if(!n.isBeingEvaluated&&!n.isDisposed){if(n.disposeWhenNodeIsRemoved&&!m.utils.domNodeIsAttachedToDocument(n.disposeWhenNodeIsRemoved)||r&&r()){if(!n.suppressDisposalUntilDisposeWhenReturnsFalse)return void t.dispose()}else n.suppressDisposalUntilDisposeWhenReturnsFalse=!1;n.isBeingEvaluated=!0;try{i=this.evaluateImmediate_CallReadWithDependencyDetection(e)}finally{n.isBeingEvaluated=!1}return n.dependenciesCount||t.dispose(),i}},evaluateImmediate_CallReadWithDependencyDetection:function(t){var n=this,r=n[T],i=!1,o=r.pure?e:!r.dependenciesCount,s={computedObservable:n,disposalCandidates:r.dependencyTracking,disposalCount:r.dependenciesCount};m.dependencyDetection.begin({callbackTarget:s,callback:f,computed:n,isInitial:o}),r.dependencyTracking={},r.dependenciesCount=0;var a=this.evaluateImmediate_CallReadThenEndDependencyDetection(r,s);return n.isDifferent(r.latestValue,a)&&(r.isSleeping||n.notifySubscribers(r.latestValue,"beforeChange"),r.latestValue=a,n._latestValue=a,r.isSleeping?n.updateVersion():t&&n.notifySubscribers(r.latestValue),i=!0),o&&n.notifySubscribers(r.latestValue,"awake"),i},evaluateImmediate_CallReadThenEndDependencyDetection:function(e,t){try{var n=e.readFunction;return e.evaluatorFunctionTarget?n.call(e.evaluatorFunctionTarget):n()}finally{m.dependencyDetection.end(),t.disposalCount&&!e.isSleeping&&m.utils.objectForEach(t.disposalCandidates,p),e.isStale=e.isDirty=!1}},peek:function(e){var t=this[T];return(t.isDirty&&(e||!t.dependenciesCount)||t.isSleeping&&this.haveDependenciesChanged())&&this.evaluateImmediate(),t.latestValue},limit:function(e){m.subscribable.fn.limit.call(this,e),this._evalIfChanged=function(){return this[T].isStale?this.evaluateImmediate():this[T].isDirty=!1,this[T].latestValue},this._evalDelayed=function(e){this._limitBeforeChange(this[T].latestValue),this[T].isDirty=!0,e&&(this[T].isStale=!0),this._limitChange(this)}},dispose:function(){var e=this[T];!e.isSleeping&&e.dependencyTracking&&m.utils.objectForEach(e.dependencyTracking,function(e,t){t.dispose&&t.dispose()}),e.disposeWhenNodeIsRemoved&&e.domNodeDisposalCallback&&m.utils.domNodeDisposal.removeDisposeCallback(e.disposeWhenNodeIsRemoved,e.domNodeDisposalCallback),e.dependencyTracking=null,e.dependenciesCount=0,e.isDisposed=!0,e.isStale=!1,e.isDirty=!1,e.isSleeping=!1,e.disposeWhenNodeIsRemoved=null}},S={beforeSubscriptionAdd:function(e){var t=this,n=t[T];if(!n.isDisposed&&n.isSleeping&&"change"==e){if(n.isSleeping=!1,n.isStale||t.haveDependenciesChanged())n.dependencyTracking=null,n.dependenciesCount=0,t.evaluateImmediate()&&t.updateVersion();else{var r=[];m.utils.objectForEach(n.dependencyTracking,function(e,t){r[t._order]=e}),m.utils.arrayForEach(r,function(e,r){var i=n.dependencyTracking[e],o=t.subscribeToDependency(i._target);o._order=r,o._version=i._version,n.dependencyTracking[e]=o})}n.isDisposed||t.notifySubscribers(n.latestValue,"awake")}},afterSubscriptionRemove:function(t){var n=this[T];n.isDisposed||"change"!=t||this.hasSubscriptionsForEvent("change")||(m.utils.objectForEach(n.dependencyTracking,function(e,t){t.dispose&&(n.dependencyTracking[e]={_target:t._target,_order:t._order,_version:t._version},t.dispose())}),n.isSleeping=!0,this.notifySubscribers(e,"asleep"))},getVersion:function(){var e=this[T];return e.isSleeping&&(e.isStale||this.haveDependenciesChanged())&&this.evaluateImmediate(),m.subscribable.fn.getVersion.call(this)}},D={beforeSubscriptionAdd:function(e){"change"!=e&&"beforeChange"!=e||this.peek()}};m.utils.canSetPrototype&&m.utils.setPrototypeOf(C,m.subscribable.fn);var N=m.observable.protoProperty;m.computed[N]=m.observable,C[N]=m.computed,m.isComputed=function(e){return m.hasPrototype(e,m.computed)},m.isPureComputed=function(e){return m.hasPrototype(e,m.computed)&&e[T]&&e[T].pure},m.exportSymbol("computed",m.computed),m.exportSymbol("dependentObservable",m.computed),m.exportSymbol("isComputed",m.isComputed),m.exportSymbol("isPureComputed",m.isPureComputed),m.exportSymbol("computed.fn",C),m.exportProperty(C,"peek",C.peek),m.exportProperty(C,"dispose",C.dispose),m.exportProperty(C,"isActive",C.isActive),m.exportProperty(C,"getDependenciesCount",C.getDependenciesCount),m.pureComputed=function(e,t){return"function"==typeof e?m.computed(e,t,{pure:!0}):(e=m.utils.extend({},e),e.pure=!0,m.computed(e,t))},m.exportSymbol("pureComputed",m.pureComputed),function(){function t(i,o,s){if(s=s||new r,!!("object"!=typeof(i=o(i))||null===i||i===e||i instanceof RegExp||i instanceof Date||i instanceof String||i instanceof Number||i instanceof Boolean))return i;var a=i instanceof Array?[]:{};return s.save(i,a),n(i,function(n){var r=o(i[n]);switch(typeof r){case"boolean":case"number":case"string":case"function":a[n]=r;break;case"object":case"undefined":var u=s.get(r);a[n]=u!==e?u:t(r,o,s)}}),a}function n(e,t){if(e instanceof Array){for(var n=0;n<e.length;n++)t(n);"function"==typeof e.toJSON&&t("toJSON")}else for(var r in e)t(r)}function r(){this.keys=[],this.values=[]}m.toJS=function(e){if(0==arguments.length)throw new Error("When calling ko.toJS, pass the object you want to convert.");return t(e,function(e){for(var t=0;m.isObservable(e)&&t<10;t++)e=e();return e})},m.toJSON=function(e,t,n){var r=m.toJS(e);return m.utils.stringifyJson(r,t,n)},r.prototype={constructor:r,save:function(e,t){var n=m.utils.arrayIndexOf(this.keys,e);n>=0?this.values[n]=t:(this.keys.push(e),this.values.push(t))},get:function(t){var n=m.utils.arrayIndexOf(this.keys,t);return n>=0?this.values[n]:e}}}(),m.exportSymbol("toJS",m.toJS),m.exportSymbol("toJSON",m.toJSON),m.selectExtensions={readValue:function(t){switch(m.utils.tagNameLower(t)){case"option":return!0===t.__ko__hasDomDataOptionValue__?m.utils.domData.get(t,m.bindingHandlers.options.optionValueDomDataKey):m.utils.ieVersion<=7?t.getAttributeNode("value")&&t.getAttributeNode("value").specified?t.value:t.text:t.value;case"select":return t.selectedIndex>=0?m.selectExtensions.readValue(t.options[t.selectedIndex]):e;default:return t.value}},writeValue:function(t,n,r){switch(m.utils.tagNameLower(t)){case"option":switch(typeof n){case"string":m.utils.domData.set(t,m.bindingHandlers.options.optionValueDomDataKey,e),"__ko__hasDomDataOptionValue__"in t&&delete t.__ko__hasDomDataOptionValue__,t.value=n;break;default:m.utils.domData.set(t,m.bindingHandlers.options.optionValueDomDataKey,n),t.__ko__hasDomDataOptionValue__=!0,t.value="number"==typeof n?n:""}break;case"select":""!==n&&null!==n||(n=e);for(var i,o=-1,s=0,a=t.options.length;s<a;++s)if((i=m.selectExtensions.readValue(t.options[s]))==n||""==i&&n===e){o=s;break}(r||o>=0||n===e&&t.size>1)&&(t.selectedIndex=o);break;default:null!==n&&n!==e||(n=""),t.value=n}}},m.exportSymbol("selectExtensions",m.selectExtensions),m.exportSymbol("selectExtensions.readValue",m.selectExtensions.readValue),m.exportSymbol("selectExtensions.writeValue",m.selectExtensions.writeValue),m.expressionRewriting=function(){function e(e){if(m.utils.arrayIndexOf(n,e)>=0)return!1;var t=e.match(r);return null!==t&&(t[1]?"Object("+t[1]+")"+t[2]:e)}function t(e){var t=m.utils.stringTrim(e);123===t.charCodeAt(0)&&(t=t.slice(1,-1));var n,r=[],a=t.match(i),u=[],l=0;if(a){a.push(",");for(var c,d=0;c=a[d];++d){var p=c.charCodeAt(0);if(44===p){if(l<=0){r.push(n&&u.length?{key:n,value:u.join("")}:{unknown:n||u.join("")}),n=l=0,u=[];continue}}else if(58===p){if(!l&&!n&&1===u.length){n=u.pop();continue}}else if(47===p&&d&&c.length>1){var f=a[d-1].match(o);f&&!s[f[0]]&&((a=(t=t.substr(t.indexOf(c)+1)).match(i)).push(","),d=-1,c="/")}else 40===p||123===p||91===p?++l:41===p||125===p||93===p?--l:n||u.length||34!==p&&39!==p||(c=c.slice(1,-1));u.push(c)}}return r}var n=["true","false","null","undefined"],r=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,i=RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]","g"),o=/[\])"'A-Za-z0-9_$]+$/,s={in:1,return:1,typeof:1},a={};return{bindingRewriteValidators:[],twoWayBindings:a,parseObjectLiteral:t,preProcessBindings:function(n,r){function i(t,n){var r;if(!l){if(!function(e){return!e||!e.preprocess||(n=e.preprocess(n,t,i))}(m.getBindingHandler(t)))return;a[t]&&(r=e(n))&&s.push("'"+t+"':function(_z){"+r+"=_z}")}u&&(n="function(){return "+n+" }"),o.push("'"+t+"':"+n)}var o=[],s=[],u=(r=r||{}).valueAccessors,l=r.bindingParams,c="string"==typeof n?t(n):n;return m.utils.arrayForEach(c,function(e){i(e.key||e.unknown,e.value)}),s.length&&i("_ko_property_writers","{"+s.join(",")+" }"),o.join(",")},keyValueArrayContainsKey:function(e,t){for(var n=0;n<e.length;n++)if(e[n].key==t)return!0;return!1},writeValueToProperty:function(e,t,n,r,i){if(e&&m.isObservable(e))!m.isWriteableObservable(e)||i&&e.peek()===r||e(r);else{var o=t.get("_ko_property_writers");o&&o[n]&&o[n](r)}}}}(),m.exportSymbol("expressionRewriting",m.expressionRewriting),m.exportSymbol("expressionRewriting.bindingRewriteValidators",m.expressionRewriting.bindingRewriteValidators),m.exportSymbol("expressionRewriting.parseObjectLiteral",m.expressionRewriting.parseObjectLiteral),m.exportSymbol("expressionRewriting.preProcessBindings",m.expressionRewriting.preProcessBindings),m.exportSymbol("expressionRewriting._twoWayBindings",m.expressionRewriting.twoWayBindings),m.exportSymbol("jsonExpressionRewriting",m.expressionRewriting),m.exportSymbol("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",m.expressionRewriting.preProcessBindings),function(){function e(e){return 8==e.nodeType&&a.test(s?e.text:e.nodeValue)}function t(e){return 8==e.nodeType&&u.test(s?e.text:e.nodeValue)}function n(n,r){for(var i=n,o=1,s=[];i=i.nextSibling;){if(t(i)&&0==--o)return s;s.push(i),e(i)&&o++}if(!r)throw new Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function r(e,t){var r=n(e,t);return r?r.length>0?r[r.length-1].nextSibling:e.nextSibling:null}function o(n){var i=n.firstChild,o=null;if(i)do{if(o)o.push(i);else if(e(i)){var s=r(i,!0);s?i=s:o=[i]}else t(i)&&(o=[i])}while(i=i.nextSibling);return o}var s=i&&"\x3c!--test--\x3e"===i.createComment("test").text,a=s?/^<!--\s*ko(?:\s+([\s\S]+))?\s*-->$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,u=s?/^<!--\s*\/ko\s*-->$/:/^\s*\/ko\s*$/,l={ul:!0,ol:!0};m.virtualElements={allowedBindings:{},childNodes:function(t){return e(t)?n(t):t.childNodes},emptyNode:function(t){if(e(t))for(var n=m.virtualElements.childNodes(t),r=0,i=n.length;r<i;r++)m.removeNode(n[r]);else m.utils.emptyDomNode(t)},setDomNodeChildren:function(t,n){if(e(t)){m.virtualElements.emptyNode(t);for(var r=t.nextSibling,i=0,o=n.length;i<o;i++)r.parentNode.insertBefore(n[i],r)}else m.utils.setDomNodeChildren(t,n)},prepend:function(t,n){e(t)?t.parentNode.insertBefore(n,t.nextSibling):t.firstChild?t.insertBefore(n,t.firstChild):t.appendChild(n)},insertAfter:function(t,n,r){r?e(t)?t.parentNode.insertBefore(n,r.nextSibling):r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):m.virtualElements.prepend(t,n)},firstChild:function(n){return e(n)?!n.nextSibling||t(n.nextSibling)?null:n.nextSibling:n.firstChild},nextSibling:function(n){return e(n)&&(n=r(n)),n.nextSibling&&t(n.nextSibling)?null:n.nextSibling},hasBindingValue:e,virtualNodeBindingValue:function(e){var t=(s?e.text:e.nodeValue).match(a);return t?t[1]:null},normaliseVirtualElementDomStructure:function(e){if(l[m.utils.tagNameLower(e)]){var t=e.firstChild;if(t)do{if(1===t.nodeType){var n=o(t);if(n)for(var r=t.nextSibling,i=0;i<n.length;i++)r?e.insertBefore(n[i],r):e.appendChild(n[i])}}while(t=t.nextSibling)}}}}(),m.exportSymbol("virtualElements",m.virtualElements),m.exportSymbol("virtualElements.allowedBindings",m.virtualElements.allowedBindings),m.exportSymbol("virtualElements.emptyNode",m.virtualElements.emptyNode),m.exportSymbol("virtualElements.insertAfter",m.virtualElements.insertAfter),m.exportSymbol("virtualElements.prepend",m.virtualElements.prepend),m.exportSymbol("virtualElements.setDomNodeChildren",m.virtualElements.setDomNodeChildren),function(){function e(e,n,r){var i=e+(r&&r.valueAccessors||"");return n[i]||(n[i]=t(e,r))}function t(e,t){var n="with($context){with($data||{}){return{"+m.expressionRewriting.preProcessBindings(e,t)+"}}}";return new Function("$context","$element",n)}m.bindingProvider=function(){this.bindingCache={}},m.utils.extend(m.bindingProvider.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute("data-bind")||m.components.getComponentNameForNode(e);case 8:return m.virtualElements.hasBindingValue(e);default:return!1}},getBindings:function(e,t){var n=this.getBindingsString(e,t),r=n?this.parseBindingsString(n,t,e):null;return m.components.addBindingsForCustomElement(r,e,t,!1)},getBindingAccessors:function(e,t){var n=this.getBindingsString(e,t),r=n?this.parseBindingsString(n,t,e,{valueAccessors:!0}):null;return m.components.addBindingsForCustomElement(r,e,t,!0)},getBindingsString:function(e,t){switch(e.nodeType){case 1:return e.getAttribute("data-bind");case 8:return m.virtualElements.virtualNodeBindingValue(e);default:return null}},parseBindingsString:function(t,n,r,i){try{return e(t,this.bindingCache,i)(n,r)}catch(e){throw e.message="Unable to parse bindings.\nBindings value: "+t+"\nMessage: "+e.message,e}}}),m.bindingProvider.instance=new m.bindingProvider}(),m.exportSymbol("bindingProvider",m.bindingProvider),function(){function t(e){return function(){return e}}function n(e){return e()}function i(e){return m.utils.objectMap(m.dependencyDetection.ignore(e),function(t,n){return function(){return e()[n]}})}function o(e,n,r){return"function"==typeof e?i(e.bind(null,n,r)):m.utils.objectMap(e,t)}function a(e,t){return i(this.getBindings.bind(this,e,t))}function u(e){if(!m.virtualElements.allowedBindings[e])throw new Error("The binding '"+e+"' cannot be used with virtual elements")}function l(e,t,n){var r,i=m.virtualElements.firstChild(t),o=m.bindingProvider.instance,s=o.preprocessNode;if(s){for(;r=i;)i=m.virtualElements.nextSibling(r),s.call(o,r);i=m.virtualElements.firstChild(t)}for(;r=i;)i=m.virtualElements.nextSibling(r),c(e,r,n)}function c(e,t,n){var r=!0,i=1===t.nodeType;i&&m.virtualElements.normaliseVirtualElementDomStructure(t),(i&&n||m.bindingProvider.instance.nodeHasBindings(t))&&(r=p(t,null,e,n).shouldBindDescendants),r&&!h[m.utils.tagNameLower(t)]&&l(e,t,!i)}function d(e){var t=[],n={},r=[];return m.utils.objectForEach(e,function i(o){if(!n[o]){var s=m.getBindingHandler(o);s&&(s.after&&(r.push(o),m.utils.arrayForEach(s.after,function(t){if(e[t]){if(-1!==m.utils.arrayIndexOf(r,t))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+r.join(", "));i(t)}}),r.length--),t.push({key:o,handler:s})),n[o]=!0}}),t}function p(t,r,i,o){function s(){return m.utils.objectMap(h?h():c,n)}var l=m.utils.domData.get(t,g);if(!r){if(l)throw Error("You cannot apply bindings multiple times to the same element.");m.utils.domData.set(t,g,!0)}!l&&o&&m.storedBindingContextForNode(t,i);var c;if(r&&"function"!=typeof r)c=r;else{var p=m.bindingProvider.instance,f=p.getBindingAccessors||a,h=m.dependentObservable(function(){return(c=r?r(i,t):f.call(p,t,i))&&i._subscribable&&i._subscribable(),c},null,{disposeWhenNodeIsRemoved:t});c&&h.isActive()||(h=null)}var v;if(c){var y=h?function(e){return function(){return n(h()[e])}}:function(e){return c[e]};s.get=function(e){return c[e]&&n(y(e))},s.has=function(e){return e in c};var b=d(c);m.utils.arrayForEach(b,function(n){var r=n.handler.init,o=n.handler.update,a=n.key;8===t.nodeType&&u(a);try{"function"==typeof r&&m.dependencyDetection.ignore(function(){var n=r(t,y(a),s,i.$data,i);if(n&&n.controlsDescendantBindings){if(v!==e)throw new Error("Multiple bindings ("+v+" and "+a+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");v=a}}),"function"==typeof o&&m.dependentObservable(function(){o(t,y(a),s,i.$data,i)},null,{disposeWhenNodeIsRemoved:t})}catch(e){throw e.message='Unable to process binding "'+a+": "+c[a]+'"\nMessage: '+e.message,e}})}return{shouldBindDescendants:v===e}}function f(e){return e&&e instanceof m.bindingContext?e:new m.bindingContext(e)}m.bindingHandlers={};var h={script:!0,textarea:!0,template:!0};m.getBindingHandler=function(e){return m.bindingHandlers[e]},m.bindingContext=function(t,n,r,i,o){function s(){var e=c?t():t,o=m.utils.unwrapObservable(e);return n?(n._subscribable&&n._subscribable(),m.utils.extend(l,n),l._subscribable=u):(l.$parents=[],l.$root=o,l.ko=m),l.$rawData=e,l.$data=o,r&&(l[r]=o),i&&i(l,n,o),l.$data}var a,u,l=this,c="function"==typeof t&&!m.isObservable(t);o&&o.exportDependencies?s():(u=m.dependentObservable(s,null,{disposeWhen:function(){return a&&!m.utils.anyDomNodeIsAttachedToDocument(a)},disposeWhenNodeIsRemoved:!0})).isActive()&&(l._subscribable=u,u.equalityComparer=null,a=[],u._addNode=function(t){a.push(t),m.utils.domNodeDisposal.addDisposeCallback(t,function(t){m.utils.arrayRemoveItem(a,t),a.length||(u.dispose(),l._subscribable=u=e)})})},m.bindingContext.prototype.createChildContext=function(e,t,n,r){return new m.bindingContext(e,this,t,function(e,t){e.$parentContext=t,e.$parent=t.$data,e.$parents=(t.$parents||[]).slice(0),e.$parents.unshift(e.$parent),n&&n(e)},r)},m.bindingContext.prototype.extend=function(e){return new m.bindingContext(this._subscribable||this.$data,this,null,function(t,n){t.$rawData=n.$rawData,m.utils.extend(t,"function"==typeof e?e():e)})},m.bindingContext.prototype.createStaticChildContext=function(e,t){return this.createChildContext(e,t,null,{exportDependencies:!0})};var g=m.utils.domData.nextKey(),v=m.utils.domData.nextKey();m.storedBindingContextForNode=function(e,t){if(2!=arguments.length)return m.utils.domData.get(e,v);m.utils.domData.set(e,v,t),t._subscribable&&t._subscribable._addNode(e)},m.applyBindingAccessorsToNode=function(e,t,n){return 1===e.nodeType&&m.virtualElements.normaliseVirtualElementDomStructure(e),p(e,t,f(n),!0)},m.applyBindingsToNode=function(e,t,n){var r=f(n);return m.applyBindingAccessorsToNode(e,o(t,r,e),r)},m.applyBindingsToDescendants=function(e,t){1!==t.nodeType&&8!==t.nodeType||l(f(e),t,!0)},m.applyBindings=function(e,t){if(!s&&r.jQuery&&(s=r.jQuery),t&&1!==t.nodeType&&8!==t.nodeType)throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");t=t||r.document.body,c(f(e),t,!0)},m.contextFor=function(t){switch(t.nodeType){case 1:case 8:var n=m.storedBindingContextForNode(t);if(n)return n;if(t.parentNode)return m.contextFor(t.parentNode)}return e},m.dataFor=function(t){var n=m.contextFor(t);return n?n.$data:e},m.exportSymbol("bindingHandlers",m.bindingHandlers),m.exportSymbol("applyBindings",m.applyBindings),m.exportSymbol("applyBindingsToDescendants",m.applyBindingsToDescendants),m.exportSymbol("applyBindingAccessorsToNode",m.applyBindingAccessorsToNode),m.exportSymbol("applyBindingsToNode",m.applyBindingsToNode),m.exportSymbol("contextFor",m.contextFor),m.exportSymbol("dataFor",m.dataFor)}(),function(e){function t(t,n){return t.hasOwnProperty(n)?t[n]:e}function n(e,n){var i,a=t(o,e);a?a.subscribe(n):((a=o[e]=new m.subscribable).subscribe(n),r(e,function(t,n){var r=!(!n||!n.synchronous);s[e]={definition:t,isSynchronousComponent:r},delete o[e],i||r?a.notifySubscribers(t):m.tasks.schedule(function(){a.notifySubscribers(t)})}),i=!0)}function r(e,t){i("getConfig",[e],function(n){n?i("loadComponent",[e,n],function(e){t(e,n)}):t(null,null)})}function i(t,n,r,o){o||(o=m.components.loaders.slice(0));var s=o.shift();if(s){var a=s[t];if(a){var u=!1;if(a.apply(s,n.concat(function(e){u?r(null):null!==e?r(e):i(t,n,r,o)}))!==e&&(u=!0,!s.suppressLoaderExceptions))throw new Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else i(t,n,r,o)}else r(null)}var o={},s={};m.components={get:function(e,r){var i=t(s,e);i?i.isSynchronousComponent?m.dependencyDetection.ignore(function(){r(i.definition)}):m.tasks.schedule(function(){r(i.definition)}):n(e,r)},clearCachedDefinition:function(e){delete s[e]},_getFirstResultFromLoaders:i},m.components.loaders=[],m.exportSymbol("components",m.components),m.exportSymbol("components.get",m.components.get),m.exportSymbol("components.clearCachedDefinition",m.components.clearCachedDefinition)}(),function(e){function t(e,t,n,r){var i={},o=2,s=function(){0==--o&&r(i)},a=n.template,u=n.viewModel;a?c(t,a,function(t){m.components._getFirstResultFromLoaders("loadTemplate",[e,t],function(e){i.template=e,s()})}):s(),u?c(t,u,function(t){m.components._getFirstResultFromLoaders("loadViewModel",[e,t],function(e){i[f]=e,s()})}):s()}function o(e,t,n){if("string"==typeof t)n(m.utils.parseHtmlFragment(t));else if(t instanceof Array)n(t);else if(l(t))n(m.utils.makeArray(t.childNodes));else if(t.element){var r=t.element;if(u(r))n(a(r));else if("string"==typeof r){var o=i.getElementById(r);o?n(a(o)):e("Cannot find element with ID "+r)}else e("Unknown element type: "+r)}else e("Unknown template value: "+t)}function s(e,t,n){if("function"==typeof t)n(function(e){return new t(e)});else if("function"==typeof t[f])n(t[f]);else if("instance"in t){var r=t.instance;n(function(e,t){return r})}else"viewModel"in t?s(e,t.viewModel,n):e("Unknown viewModel value: "+t)}function a(e){switch(m.utils.tagNameLower(e)){case"script":return m.utils.parseHtmlFragment(e.text);case"textarea":return m.utils.parseHtmlFragment(e.value);case"template":if(l(e.content))return m.utils.cloneNodes(e.content.childNodes)}return m.utils.cloneNodes(e.childNodes)}function u(e){return r.HTMLElement?e instanceof HTMLElement:e&&e.tagName&&1===e.nodeType}function l(e){return r.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function c(e,t,i){"string"==typeof t.require?n||r.require?(n||r.require)([t.require],i):e("Uses require, but no AMD loader is present"):i(t)}function d(e){return function(t){throw new Error("Component '"+e+"': "+t)}}var p={};m.components.register=function(e,t){if(!t)throw new Error("Invalid configuration for "+e);if(m.components.isRegistered(e))throw new Error("Component "+e+" is already registered");p[e]=t},m.components.isRegistered=function(e){return p.hasOwnProperty(e)},m.components.unregister=function(e){delete p[e],m.components.clearCachedDefinition(e)},m.components.defaultLoader={getConfig:function(e,t){t(p.hasOwnProperty(e)?p[e]:null)},loadComponent:function(e,n,r){var i=d(e);c(i,n,function(n){t(e,i,n,r)})},loadTemplate:function(e,t,n){o(d(e),t,n)},loadViewModel:function(e,t,n){s(d(e),t,n)}};var f="createViewModel";m.exportSymbol("components.register",m.components.register),m.exportSymbol("components.isRegistered",m.components.isRegistered),m.exportSymbol("components.unregister",m.components.unregister),m.exportSymbol("components.defaultLoader",m.components.defaultLoader),m.components.loaders.push(m.components.defaultLoader),m.components._allRegisteredComponents=p}(),function(e){function t(e,t){var r=e.getAttribute("params");if(r){var i=n.parseBindingsString(r,t,e,{valueAccessors:!0,bindingParams:!0}),o=m.utils.objectMap(i,function(t,n){return m.computed(t,null,{disposeWhenNodeIsRemoved:e})}),s=m.utils.objectMap(o,function(t,n){var r=t.peek();return t.isActive()?m.computed({read:function(){return m.utils.unwrapObservable(t())},write:m.isWriteableObservable(r)&&function(e){t()(e)},disposeWhenNodeIsRemoved:e}):r});return s.hasOwnProperty("$raw")||(s.$raw=o),s}return{$raw:{}}}m.components.getComponentNameForNode=function(e){var t=m.utils.tagNameLower(e);if(m.components.isRegistered(t)&&(-1!=t.indexOf("-")||""+e=="[object HTMLUnknownElement]"||m.utils.ieVersion<=8&&e.tagName===t))return t},m.components.addBindingsForCustomElement=function(e,n,r,i){if(1===n.nodeType){var o=m.components.getComponentNameForNode(n);if(o){if((e=e||{}).component)throw new Error('Cannot use the "component" binding on a custom element matching a component');var s={name:o,params:t(n,r)};e.component=i?function(){return s}:s}}return e};var n=new m.bindingProvider;m.utils.ieVersion<9&&(m.components.register=function(e){return function(t){return i.createElement(t),e.apply(this,arguments)}}(m.components.register),i.createDocumentFragment=function(e){return function(){var t=e(),n=m.components._allRegisteredComponents;for(var r in n)n.hasOwnProperty(r)&&t.createElement(r);return t}}(i.createDocumentFragment))}(),function(e){function t(e,t,n){var r=t.template;if(!r)throw new Error("Component '"+e+"' has no template");var i=m.utils.cloneNodes(r);m.virtualElements.setDomNodeChildren(n,i)}function n(e,t,n,r){var i=e.createViewModel;return i?i.call(e,r,{element:t,templateNodes:n}):r}var r=0;m.bindingHandlers.component={init:function(e,i,o,s,a){var u,l,c=function(){var e=u&&u.dispose;"function"==typeof e&&e.call(u),u=null,l=null},d=m.utils.makeArray(m.virtualElements.childNodes(e));return m.utils.domNodeDisposal.addDisposeCallback(e,c),m.computed(function(){var o,s,p=m.utils.unwrapObservable(i());if("string"==typeof p?o=p:(o=m.utils.unwrapObservable(p.name),s=m.utils.unwrapObservable(p.params)),!o)throw new Error("No component name specified");var f=l=++r;m.components.get(o,function(r){if(l===f){if(c(),!r)throw new Error("Unknown component '"+o+"'");t(o,r,e);var i=n(r,e,d,s),p=a.createChildContext(i,void 0,function(e){e.$component=i,e.$componentTemplateNodes=d});u=i,m.applyBindingsToDescendants(p,e)}})},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}},m.virtualElements.allowedBindings.component=!0}();var k={class:"className",for:"htmlFor"};m.bindingHandlers.attr={update:function(t,n,r){var i=m.utils.unwrapObservable(n())||{};m.utils.objectForEach(i,function(n,r){var i=!1===(r=m.utils.unwrapObservable(r))||null===r||r===e;i&&t.removeAttribute(n),m.utils.ieVersion<=8&&n in k?(n=k[n],i?t.removeAttribute(n):t[n]=r):i||t.setAttribute(n,r.toString()),"name"===n&&m.utils.setElementName(t,i?"":r.toString())})}},m.bindingHandlers.checked={after:["value","attr"],init:function(t,n,r){function i(){var e=t.checked,i=p?o():e;if(!m.computedContext.isInitial()&&(!a||e)){var s=m.dependencyDetection.ignore(n);if(l){var u=c?s.peek():s;d!==i?(e&&(m.utils.addOrRemoveItem(u,i,!0),m.utils.addOrRemoveItem(u,d,!1)),d=i):m.utils.addOrRemoveItem(u,i,e),c&&m.isWriteableObservable(s)&&s(u)}else m.expressionRewriting.writeValueToProperty(s,r,"checked",i,!0)}}var o=m.pureComputed(function(){return r.has("checkedValue")?m.utils.unwrapObservable(r.get("checkedValue")):r.has("value")?m.utils.unwrapObservable(r.get("value")):t.value}),s="checkbox"==t.type,a="radio"==t.type;if(s||a){var u=n(),l=s&&m.utils.unwrapObservable(u)instanceof Array,c=!(l&&u.push&&u.splice),d=l?o():e,p=a||l;a&&!t.name&&m.bindingHandlers.uniqueName.init(t,function(){return!0}),m.computed(i,null,{disposeWhenNodeIsRemoved:t}),m.utils.registerEventHandler(t,"click",i),m.computed(function(){var e=m.utils.unwrapObservable(n());t.checked=l?m.utils.arrayIndexOf(e,o())>=0:s?e:o()===e},null,{disposeWhenNodeIsRemoved:t}),u=e}}},m.expressionRewriting.twoWayBindings.checked=!0,m.bindingHandlers.checkedValue={update:function(e,t){e.value=m.utils.unwrapObservable(t())}};m.bindingHandlers.css={update:function(e,t){var n=m.utils.unwrapObservable(t());null!==n&&"object"==typeof n?m.utils.objectForEach(n,function(t,n){n=m.utils.unwrapObservable(n),m.utils.toggleDomNodeCssClass(e,t,n)}):(n=m.utils.stringTrim(String(n||"")),m.utils.toggleDomNodeCssClass(e,e.__ko__cssValue,!1),e.__ko__cssValue=n,m.utils.toggleDomNodeCssClass(e,n,!0))}},m.bindingHandlers.enable={update:function(e,t){var n=m.utils.unwrapObservable(t());n&&e.disabled?e.removeAttribute("disabled"):n||e.disabled||(e.disabled=!0)}},m.bindingHandlers.disable={update:function(e,t){m.bindingHandlers.enable.update(e,function(){return!m.utils.unwrapObservable(t())})}},m.bindingHandlers.event={init:function(e,t,n,r,i){var o=t()||{};m.utils.objectForEach(o,function(o){"string"==typeof o&&m.utils.registerEventHandler(e,o,function(e){var s,a=t()[o];if(a){try{var u=m.utils.makeArray(arguments);r=i.$data,u.unshift(r),s=a.apply(r,u)}finally{!0!==s&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}!1!==n.get(o+"Bubble")||(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}})})}},m.bindingHandlers.foreach={makeTemplateValueAccessor:function(e){return function(){var t=e(),n=m.utils.peekObservable(t);return n&&"number"!=typeof n.length?(m.utils.unwrapObservable(t),{foreach:n.data,as:n.as,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:m.nativeTemplateEngine.instance}):{foreach:t,templateEngine:m.nativeTemplateEngine.instance}}},init:function(e,t,n,r,i){return m.bindingHandlers.template.init(e,m.bindingHandlers.foreach.makeTemplateValueAccessor(t))},update:function(e,t,n,r,i){return m.bindingHandlers.template.update(e,m.bindingHandlers.foreach.makeTemplateValueAccessor(t),n,r,i)}},m.expressionRewriting.bindingRewriteValidators.foreach=!1,m.virtualElements.allowedBindings.foreach=!0;m.bindingHandlers.hasfocus={init:function(e,t,n){var r=function(r){e.__ko_hasfocusUpdating=!0;var i=e.ownerDocument;if("activeElement"in i){var o;try{o=i.activeElement}catch(e){o=i.body}r=o===e}var s=t();m.expressionRewriting.writeValueToProperty(s,n,"hasfocus",r,!0),e.__ko_hasfocusLastValue=r,e.__ko_hasfocusUpdating=!1},i=r.bind(null,!0),o=r.bind(null,!1);m.utils.registerEventHandler(e,"focus",i),m.utils.registerEventHandler(e,"focusin",i),m.utils.registerEventHandler(e,"blur",o),m.utils.registerEventHandler(e,"focusout",o)},update:function(e,t){var n=!!m.utils.unwrapObservable(t());e.__ko_hasfocusUpdating||e.__ko_hasfocusLastValue===n||(n?e.focus():e.blur(),!n&&e.__ko_hasfocusLastValue&&e.ownerDocument.body.focus(),m.dependencyDetection.ignore(m.utils.triggerEvent,null,[e,n?"focusin":"focusout"]))}},m.expressionRewriting.twoWayBindings.hasfocus=!0,m.bindingHandlers.hasFocus=m.bindingHandlers.hasfocus,m.expressionRewriting.twoWayBindings.hasFocus=!0,m.bindingHandlers.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){m.utils.setHtml(e,t())}},h("if"),h("ifnot",!1,!0),h("with",!0,!1,function(e,t){return e.createStaticChildContext(t)});var O={};m.bindingHandlers.options={init:function(e){if("select"!==m.utils.tagNameLower(e))throw new Error("options binding applies only to SELECT elements");for(;e.length>0;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(t,n,r){function i(){return m.utils.arrayFilter(t.options,function(e){return e.selected})}function o(e,t,n){var r=typeof t;return"function"==r?t(e):"string"==r?e[t]:n}function s(e,n){if(y&&f)m.selectExtensions.writeValue(t,m.utils.unwrapObservable(r.get("value")),!0);else if(v.length){var i=m.utils.arrayIndexOf(v,m.selectExtensions.readValue(n[0]))>=0;m.utils.setOptionNodeSelectionState(n[0],i),y&&!i&&m.dependencyDetection.ignore(m.utils.triggerEvent,null,[t,"change"])}}var a,u,l=0==t.length,c=t.multiple,d=!l&&c?t.scrollTop:null,p=m.utils.unwrapObservable(n()),f=r.get("valueAllowUnset")&&r.has("value"),h=r.get("optionsIncludeDestroyed"),g={},v=[];f||(c?v=m.utils.arrayMap(i(),m.selectExtensions.readValue):t.selectedIndex>=0&&v.push(m.selectExtensions.readValue(t.options[t.selectedIndex]))),p&&(void 0===p.length&&(p=[p]),u=m.utils.arrayFilter(p,function(t){return h||t===e||null===t||!m.utils.unwrapObservable(t._destroy)}),r.has("optionsCaption")&&null!==(a=m.utils.unwrapObservable(r.get("optionsCaption")))&&a!==e&&u.unshift(O));var y=!1;g.beforeRemove=function(e){t.removeChild(e)};var b=s;r.has("optionsAfterRender")&&"function"==typeof r.get("optionsAfterRender")&&(b=function(t,n){s(0,n),m.dependencyDetection.ignore(r.get("optionsAfterRender"),null,[n[0],t!==O?t:e])}),m.utils.setDomNodeChildrenFromArrayMapping(t,u,function(n,i,s){s.length&&(v=!f&&s[0].selected?[m.selectExtensions.readValue(s[0])]:[],y=!0);var a=t.ownerDocument.createElement("option");if(n===O)m.utils.setTextContent(a,r.get("optionsCaption")),m.selectExtensions.writeValue(a,e);else{var u=o(n,r.get("optionsValue"),n);m.selectExtensions.writeValue(a,m.utils.unwrapObservable(u));var l=o(n,r.get("optionsText"),u);m.utils.setTextContent(a,l)}return[a]},g,b),m.dependencyDetection.ignore(function(){if(f)m.selectExtensions.writeValue(t,m.utils.unwrapObservable(r.get("value")),!0);else{(c?v.length&&i().length<v.length:v.length&&t.selectedIndex>=0?m.selectExtensions.readValue(t.options[t.selectedIndex])!==v[0]:v.length||t.selectedIndex>=0)&&m.utils.triggerEvent(t,"change")}}),m.utils.ensureSelectElementIsRenderedCorrectly(t),d&&Math.abs(d-t.scrollTop)>20&&(t.scrollTop=d)}},m.bindingHandlers.options.optionValueDomDataKey=m.utils.domData.nextKey(),m.bindingHandlers.selectedOptions={after:["options","foreach"],init:function(e,t,n){m.utils.registerEventHandler(e,"change",function(){var r=t(),i=[];m.utils.arrayForEach(e.getElementsByTagName("option"),function(e){e.selected&&i.push(m.selectExtensions.readValue(e))}),m.expressionRewriting.writeValueToProperty(r,n,"selectedOptions",i)})},update:function(e,t){if("select"!=m.utils.tagNameLower(e))throw new Error("values binding applies only to SELECT elements");var n=m.utils.unwrapObservable(t()),r=e.scrollTop;n&&"number"==typeof n.length&&m.utils.arrayForEach(e.getElementsByTagName("option"),function(e){var t=m.utils.arrayIndexOf(n,m.selectExtensions.readValue(e))>=0;e.selected!=t&&m.utils.setOptionNodeSelectionState(e,t)}),e.scrollTop=r}},m.expressionRewriting.twoWayBindings.selectedOptions=!0,m.bindingHandlers.style={update:function(t,n){var r=m.utils.unwrapObservable(n()||{});m.utils.objectForEach(r,function(n,r){null!==(r=m.utils.unwrapObservable(r))&&r!==e&&!1!==r||(r=""),t.style[n]=r})}},m.bindingHandlers.submit={init:function(e,t,n,r,i){if("function"!=typeof t())throw new Error("The value for a submit binding must be a function");m.utils.registerEventHandler(e,"submit",function(n){var r,o=t();try{r=o.call(i.$data,e)}finally{!0!==r&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}})}},m.bindingHandlers.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){m.utils.setTextContent(e,t())}},m.virtualElements.allowedBindings.text=!0,function(){if(r&&r.navigator)var t=function(e){if(e)return parseFloat(e[1])},n=r.opera&&r.opera.version&&parseInt(r.opera.version()),i=r.navigator.userAgent,o=t(i.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),s=t(i.match(/Firefox\/([^ ]*)/));if(m.utils.ieVersion<10)var a=m.utils.domData.nextKey(),u=m.utils.domData.nextKey(),l=function(e){var t=this.activeElement,n=t&&m.utils.domData.get(t,u);n&&n(e)},c=function(e,t){var n=e.ownerDocument;m.utils.domData.get(n,a)||(m.utils.domData.set(n,a,!0),m.utils.registerEventHandler(n,"selectionchange",l)),m.utils.domData.set(e,u,t)};m.bindingHandlers.textInput={init:function(t,r,i){var a,u,l=t.value,d=function(n){clearTimeout(a),u=a=e;var o=t.value;l!==o&&(n&&(t._ko_textInputProcessedEvent=n.type),l=o,m.expressionRewriting.writeValueToProperty(r(),i,"textInput",o))},p=function(e){if(!a){u=t.value;var n=d.bind(t,{type:e.type});a=m.utils.setTimeout(n,4)}},f=9==m.utils.ieVersion?p:d,h=function(){var n=m.utils.unwrapObservable(r());null!==n&&n!==e||(n=""),u===e||n!==u?t.value!==n&&(l=n,t.value=n):m.utils.setTimeout(h,4)},g=function(e,n){m.utils.registerEventHandler(t,e,n)};m.bindingHandlers.textInput._forceUpdateOn?m.utils.arrayForEach(m.bindingHandlers.textInput._forceUpdateOn,function(e){"after"==e.slice(0,5)?g(e.slice(5),p):g(e,d)}):m.utils.ieVersion<10?(g("propertychange",function(e){"value"===e.propertyName&&f(e)}),8==m.utils.ieVersion&&(g("keyup",d),g("keydown",d)),m.utils.ieVersion>=8&&(c(t,f),g("dragend",p))):(g("input",d),o<5&&"textarea"===m.utils.tagNameLower(t)?(g("keydown",p),g("paste",p),g("cut",p)):n<11?g("keydown",p):s<4&&(g("DOMAutoComplete",d),g("dragdrop",d),g("drop",d))),g("change",d),m.computed(h,null,{disposeWhenNodeIsRemoved:t})}},m.expressionRewriting.twoWayBindings.textInput=!0,m.bindingHandlers.textinput={preprocess:function(e,t,n){n("textInput",e)}}}(),m.bindingHandlers.uniqueName={init:function(e,t){if(t()){var n="ko_unique_"+ ++m.bindingHandlers.uniqueName.currentIndex;m.utils.setElementName(e,n)}}},m.bindingHandlers.uniqueName.currentIndex=0,m.bindingHandlers.value={after:["options","foreach"],init:function(e,t,n){if("input"!=e.tagName.toLowerCase()||"checkbox"!=e.type&&"radio"!=e.type){var r=["change"],i=n.get("valueUpdate"),o=!1,s=null;i&&("string"==typeof i&&(i=[i]),m.utils.arrayPushAll(r,i),r=m.utils.arrayGetDistinctValues(r));var a=function(){s=null,o=!1;var r=t(),i=m.selectExtensions.readValue(e);m.expressionRewriting.writeValueToProperty(r,n,"value",i)};m.utils.ieVersion&&"input"==e.tagName.toLowerCase()&&"text"==e.type&&"off"!=e.autocomplete&&(!e.form||"off"!=e.form.autocomplete)&&-1==m.utils.arrayIndexOf(r,"propertychange")&&(m.utils.registerEventHandler(e,"propertychange",function(){o=!0}),m.utils.registerEventHandler(e,"focus",function(){o=!1}),m.utils.registerEventHandler(e,"blur",function(){o&&a()})),m.utils.arrayForEach(r,function(t){var n=a;m.utils.stringStartsWith(t,"after")&&(n=function(){s=m.selectExtensions.readValue(e),m.utils.setTimeout(a,0)},t=t.substring("after".length)),m.utils.registerEventHandler(e,t,n)});var u=function(){var r=m.utils.unwrapObservable(t()),i=m.selectExtensions.readValue(e);if(null===s||r!==s){if(r!==i)if("select"===m.utils.tagNameLower(e)){var o=n.get("valueAllowUnset"),a=function(){m.selectExtensions.writeValue(e,r,o)};a(),o||r===m.selectExtensions.readValue(e)?m.utils.setTimeout(a,0):m.dependencyDetection.ignore(m.utils.triggerEvent,null,[e,"change"])}else m.selectExtensions.writeValue(e,r)}else m.utils.setTimeout(u,0)};m.computed(u,null,{disposeWhenNodeIsRemoved:e})}else m.applyBindingAccessorsToNode(e,{checkedValue:t})},update:function(){}},m.expressionRewriting.twoWayBindings.value=!0,m.bindingHandlers.visible={update:function(e,t){var n=m.utils.unwrapObservable(t()),r=!("none"==e.style.display);n&&!r?e.style.display="":!n&&r&&(e.style.display="none")}},function(e){m.bindingHandlers[e]={init:function(t,n,r,i,o){return m.bindingHandlers.event.init.call(this,t,function(){var t={};return t[e]=n(),t},r,i,o)}}}("click"),m.templateEngine=function(){},m.templateEngine.prototype.renderTemplateSource=function(e,t,n,r){throw new Error("Override renderTemplateSource")},m.templateEngine.prototype.createJavaScriptEvaluatorBlock=function(e){throw new Error("Override createJavaScriptEvaluatorBlock")},m.templateEngine.prototype.makeTemplateSource=function(e,t){if("string"==typeof e){var n=(t=t||i).getElementById(e);if(!n)throw new Error("Cannot find template with ID "+e);return new m.templateSources.domElement(n)}if(1==e.nodeType||8==e.nodeType)return new m.templateSources.anonymousTemplate(e);throw new Error("Unknown template type: "+e)},m.templateEngine.prototype.renderTemplate=function(e,t,n,r){var i=this.makeTemplateSource(e,r);return this.renderTemplateSource(i,t,n,r)},m.templateEngine.prototype.isTemplateRewritten=function(e,t){return!1===this.allowTemplateRewriting||this.makeTemplateSource(e,t).data("isRewritten")},m.templateEngine.prototype.rewriteTemplate=function(e,t,n){var r=this.makeTemplateSource(e,n),i=t(r.text());r.text(i),r.data("isRewritten",!0)},m.exportSymbol("templateEngine",m.templateEngine),m.templateRewriting=function(){function e(e){for(var t=m.expressionRewriting.bindingRewriteValidators,n=0;n<e.length;n++){var r=e[n].key;if(t.hasOwnProperty(r)){var i=t[r];if("function"==typeof i){var o=i(e[n].value);if(o)throw new Error(o)}else if(!i)throw new Error("This template engine does not support the '"+r+"' binding within its templates")}}}function t(t,n,r,i){var o=m.expressionRewriting.parseObjectLiteral(t);e(o);var s="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+m.expressionRewriting.preProcessBindings(o,{valueAccessors:!0})+" } })()},'"+r.toLowerCase()+"')";return i.createJavaScriptEvaluatorBlock(s)+n}var n=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,r=/<!--\s*ko\b\s*([\s\S]*?)\s*-->/g;return{ensureTemplateIsRewritten:function(e,t,n){t.isTemplateRewritten(e,n)||t.rewriteTemplate(e,function(e){return m.templateRewriting.memoizeBindingAttributeSyntax(e,t)},n)},memoizeBindingAttributeSyntax:function(e,i){return e.replace(n,function(){return t(arguments[4],arguments[1],arguments[2],i)}).replace(r,function(){return t(arguments[1],"\x3c!-- ko --\x3e","#comment",i)})},applyMemoizedBindingsToNextSibling:function(e,t){return m.memoization.memoize(function(n,r){var i=n.nextSibling;i&&i.nodeName.toLowerCase()===t&&m.applyBindingAccessorsToNode(i,e,r)})}}}(),m.exportSymbol("__tr_ambtns",m.templateRewriting.applyMemoizedBindingsToNextSibling),function(){function t(e){return m.utils.domData.get(e,i)||{}}function n(e,t){m.utils.domData.set(e,i,t)}m.templateSources={};m.templateSources.domElement=function(e){if(this.domElement=e,e){var t=m.utils.tagNameLower(e);this.templateType="script"===t?1:"textarea"===t?2:"template"==t&&e.content&&11===e.content.nodeType?3:4}},m.templateSources.domElement.prototype.text=function(){var e=1===this.templateType?"text":2===this.templateType?"value":"innerHTML";if(0==arguments.length)return this.domElement[e];var t=arguments[0];"innerHTML"===e?m.utils.setHtml(this.domElement,t):this.domElement[e]=t};var r=m.utils.domData.nextKey()+"_";m.templateSources.domElement.prototype.data=function(e){if(1===arguments.length)return m.utils.domData.get(this.domElement,r+e);m.utils.domData.set(this.domElement,r+e,arguments[1])};var i=m.utils.domData.nextKey();m.templateSources.domElement.prototype.nodes=function(){var r=this.domElement;if(0==arguments.length)return t(r).containerData||(3===this.templateType?r.content:4===this.templateType?r:e);n(r,{containerData:arguments[0]})},m.templateSources.anonymousTemplate=function(e){this.domElement=e},m.templateSources.anonymousTemplate.prototype=new m.templateSources.domElement,m.templateSources.anonymousTemplate.prototype.constructor=m.templateSources.anonymousTemplate,m.templateSources.anonymousTemplate.prototype.text=function(){if(0==arguments.length){var r=t(this.domElement);return r.textData===e&&r.containerData&&(r.textData=r.containerData.innerHTML),r.textData}var i=arguments[0];n(this.domElement,{textData:i})},m.exportSymbol("templateSources",m.templateSources),m.exportSymbol("templateSources.domElement",m.templateSources.domElement),m.exportSymbol("templateSources.anonymousTemplate",m.templateSources.anonymousTemplate)}(),function(){function t(e,t,n){for(var r,i=e,o=m.virtualElements.nextSibling(t);i&&(r=i)!==o;)n(r,i=m.virtualElements.nextSibling(r))}function n(e,n){if(e.length){var r=e[0],i=e[e.length-1],o=r.parentNode,s=m.bindingProvider.instance,a=s.preprocessNode;if(a){if(t(r,i,function(e,t){var n=e.previousSibling,o=a.call(s,e);o&&(e===r&&(r=o[0]||t),e===i&&(i=o[o.length-1]||n))}),e.length=0,!r)return;r===i?e.push(r):(e.push(r,i),m.utils.fixUpContinuousNodeArray(e,o))}t(r,i,function(e){1!==e.nodeType&&8!==e.nodeType||m.applyBindings(n,e)}),t(r,i,function(e){1!==e.nodeType&&8!==e.nodeType||m.memoization.unmemoizeDomNodeAndDescendants(e,[n])}),m.utils.fixUpContinuousNodeArray(e,o)}}function r(e){return e.nodeType?e:e.length>0?e[0]:null}function i(e,t,i,o,s){s=s||{};var u=(e&&r(e)||i||{}).ownerDocument,l=s.templateEngine||a;m.templateRewriting.ensureTemplateIsRewritten(i,l,u);var c=l.renderTemplate(i,o,s,u);if("number"!=typeof c.length||c.length>0&&"number"!=typeof c[0].nodeType)throw new Error("Template engine must return an array of DOM nodes");var d=!1;switch(t){case"replaceChildren":m.virtualElements.setDomNodeChildren(e,c),d=!0;break;case"replaceNode":m.utils.replaceDomNodes(e,c),d=!0;break;case"ignoreTargetNode":break;default:throw new Error("Unknown renderMode: "+t)}return d&&(n(c,o),s.afterRender&&m.dependencyDetection.ignore(s.afterRender,null,[c,o.$data])),c}function o(e,t,n){return m.isObservable(e)?e():"function"==typeof e?e(t,n):e}function s(t,n){var r=m.utils.domData.get(t,u);r&&"function"==typeof r.dispose&&r.dispose(),m.utils.domData.set(t,u,n&&n.isActive()?n:e)}var a;m.setTemplateEngine=function(t){if(t!=e&&!(t instanceof m.templateEngine))throw new Error("templateEngine must inherit from ko.templateEngine");a=t},m.renderTemplate=function(t,n,s,u,l){if(((s=s||{}).templateEngine||a)==e)throw new Error("Set a template engine before calling renderTemplate");if(l=l||"replaceChildren",u){var c=r(u),d=c&&"replaceNode"==l?c.parentNode:c;return m.dependentObservable(function(){var e=n&&n instanceof m.bindingContext?n:new m.bindingContext(n,null,null,null,{exportDependencies:!0}),a=o(t,e.$data,e),d=i(u,l,a,e,s);"replaceNode"==l&&(c=r(u=d))},null,{disposeWhen:function(){return!c||!m.utils.domNodeIsAttachedToDocument(c)},disposeWhenNodeIsRemoved:d})}return m.memoization.memoize(function(e){m.renderTemplate(t,n,s,e,"replaceNode")})},m.renderTemplateForEach=function(t,r,s,a,u){var l,c=function(e,n){return l=u.createChildContext(e,s.as,function(e){e.$index=n}),i(null,"ignoreTargetNode",o(t,e,l),l,s)},d=function(e,t,r){n(t,l),s.afterRender&&s.afterRender(t,e),l=null};return m.dependentObservable(function(){var t=m.utils.unwrapObservable(r)||[];void 0===t.length&&(t=[t]);var n=m.utils.arrayFilter(t,function(t){return s.includeDestroyed||t===e||null===t||!m.utils.unwrapObservable(t._destroy)});m.dependencyDetection.ignore(m.utils.setDomNodeChildrenFromArrayMapping,null,[a,n,c,s,d])},null,{disposeWhenNodeIsRemoved:a})};var u=m.utils.domData.nextKey();m.bindingHandlers.template={init:function(e,t){var n=m.utils.unwrapObservable(t());if("string"==typeof n||n.name)m.virtualElements.emptyNode(e);else if("nodes"in n){var r=n.nodes||[];if(m.isObservable(r))throw new Error('The "nodes" option must be a plain, non-observable array.');o=m.utils.moveCleanedNodesToContainerElement(r);new m.templateSources.anonymousTemplate(e).nodes(o)}else{var i=m.virtualElements.childNodes(e),o=m.utils.moveCleanedNodesToContainerElement(i);new m.templateSources.anonymousTemplate(e).nodes(o)}return{controlsDescendantBindings:!0}},update:function(e,t,n,r,i){var o,a=t(),u=m.utils.unwrapObservable(a),l=!0,c=null;if("string"==typeof u?(o=a,u={}):(o=u.name,"if"in u&&(l=m.utils.unwrapObservable(u.if)),l&&"ifnot"in u&&(l=!m.utils.unwrapObservable(u.ifnot))),"foreach"in u){var d=l&&u.foreach||[];c=m.renderTemplateForEach(o||e,d,u,e,i)}else if(l){var p="data"in u?i.createStaticChildContext(u.data,u.as):i;c=m.renderTemplate(o||e,p,u,e)}else m.virtualElements.emptyNode(e);s(e,c)}},m.expressionRewriting.bindingRewriteValidators.template=function(e){var t=m.expressionRewriting.parseObjectLiteral(e);return 1==t.length&&t[0].unknown?null:m.expressionRewriting.keyValueArrayContainsKey(t,"name")?null:"This template engine does not support anonymous templates nested within its templates"},m.virtualElements.allowedBindings.template=!0}(),m.exportSymbol("setTemplateEngine",m.setTemplateEngine),m.exportSymbol("renderTemplate",m.renderTemplate),m.utils.findMovesInArrayComparison=function(e,t,n){if(e.length&&t.length){var r,i,o,s,a;for(r=i=0;(!n||r<n)&&(s=e[i]);++i){for(o=0;a=t[o];++o)if(s.value===a.value){s.moved=a.index,a.moved=s.index,t.splice(o,1),r=o=0;break}r+=o}}},m.utils.compareArrays=function(){function e(e,t,n,r,i){var o,s,a,u,l,c=Math.min,d=Math.max,p=[],f=e.length,h=t.length,g=h-f||1,v=f+h+1;for(o=0;o<=f;o++)for(u=a,p.push(a=[]),l=c(h,o+g),s=d(0,o-1);s<=l;s++)if(s)if(o)if(e[o-1]===t[s-1])a[s]=u[s-1];else{var y=u[s]||v,b=a[s-1]||v;a[s]=c(y,b)+1}else a[s]=s+1;else a[s]=o+1;var x,w=[],E=[],T=[];for(o=f,s=h;o||s;)x=p[o][s]-1,s&&x===p[o][s-1]?E.push(w[w.length]={status:n,value:t[--s],index:s}):o&&x===p[o-1][s]?T.push(w[w.length]={status:r,value:e[--o],index:o}):(--s,--o,i.sparse||w.push({status:"retained",value:t[s]}));return m.utils.findMovesInArrayComparison(T,E,!i.dontLimitMoves&&10*f),w.reverse()}var t="added",n="deleted";return function(r,i,o){return o="boolean"==typeof o?{dontLimitMoves:o}:o||{},r=r||[],i=i||[],r.length<i.length?e(r,i,t,n,o):e(i,r,n,t,o)}}(),m.exportSymbol("utils.compareArrays",m.utils.compareArrays),function(){function t(t,n,r,i,o){var s=[],a=m.dependentObservable(function(){var e=n(r,o,m.utils.fixUpContinuousNodeArray(s,t))||[];s.length>0&&(m.utils.replaceDomNodes(s,e),i&&m.dependencyDetection.ignore(i,null,[r,e,o])),s.length=0,m.utils.arrayPushAll(s,e)},null,{disposeWhenNodeIsRemoved:t,disposeWhen:function(){return!m.utils.anyDomNodeIsAttachedToDocument(s)}});return{mappedNodes:s,dependentObservable:a.isActive()?a:e}}var n=m.utils.domData.nextKey(),r=m.utils.domData.nextKey();m.utils.setDomNodeChildrenFromArrayMapping=function(i,o,s,a,u){function l(e,t){d=g[t],w!==t&&(S[e]=d),d.indexObservable(w++),m.utils.fixUpContinuousNodeArray(d.mappedNodes,i),b.push(d),T.push(d)}function c(e,t){if(e)for(var n=0,r=t.length;n<r;n++)t[n]&&m.utils.arrayForEach(t[n].mappedNodes,function(r){e(r,n,t[n].arrayEntry)})}o=o||[],a=a||{};for(var d,p,f,h=m.utils.domData.get(i,n)===e,g=m.utils.domData.get(i,n)||[],v=m.utils.arrayMap(g,function(e){return e.arrayEntry}),y=m.utils.compareArrays(v,o,a.dontLimitMoves),b=[],x=0,w=0,E=[],T=[],C=[],S=[],D=[],N=0;p=y[N];N++)switch(f=p.moved,p.status){case"deleted":f===e&&((d=g[x]).dependentObservable&&(d.dependentObservable.dispose(),d.dependentObservable=e),m.utils.fixUpContinuousNodeArray(d.mappedNodes,i).length&&(a.beforeRemove&&(b.push(d),T.push(d),d.arrayEntry===r?d=null:C[N]=d),d&&E.push.apply(E,d.mappedNodes))),x++;break;case"retained":l(N,x++);break;case"added":f!==e?l(N,f):(d={arrayEntry:p.value,indexObservable:m.observable(w++)},b.push(d),T.push(d),h||(D[N]=d))}m.utils.domData.set(i,n,b),c(a.beforeMove,S),m.utils.arrayForEach(E,a.beforeRemove?m.cleanNode:m.removeNode);for(var k,O,N=0,A=m.virtualElements.firstChild(i);d=T[N];N++){d.mappedNodes||m.utils.extend(d,t(i,s,d.arrayEntry,u,d.indexObservable));for(var _=0;O=d.mappedNodes[_];A=O.nextSibling,k=O,_++)O!==A&&m.virtualElements.insertAfter(i,O,k);!d.initialized&&u&&(u(d.arrayEntry,d.mappedNodes,d.indexObservable),d.initialized=!0)}for(c(a.beforeRemove,C),N=0;N<C.length;++N)C[N]&&(C[N].arrayEntry=r);c(a.afterMove,S),c(a.afterAdd,D)}}(),m.exportSymbol("utils.setDomNodeChildrenFromArrayMapping",m.utils.setDomNodeChildrenFromArrayMapping),m.nativeTemplateEngine=function(){this.allowTemplateRewriting=!1},m.nativeTemplateEngine.prototype=new m.templateEngine,m.nativeTemplateEngine.prototype.constructor=m.nativeTemplateEngine,m.nativeTemplateEngine.prototype.renderTemplateSource=function(e,t,n,r){var i=(!(m.utils.ieVersion<9)?e.nodes:null)?e.nodes():null;if(i)return m.utils.makeArray(i.cloneNode(!0).childNodes);var o=e.text();return m.utils.parseHtmlFragment(o,r)},m.nativeTemplateEngine.instance=new m.nativeTemplateEngine,m.setTemplateEngine(m.nativeTemplateEngine.instance),m.exportSymbol("nativeTemplateEngine",m.nativeTemplateEngine),function(){m.jqueryTmplTemplateEngine=function(){function e(){if(n<2)throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.")}function t(e,t,n){return s.tmpl(e,t,n)}var n=this.jQueryTmplVersion=function(){if(!s||!s.tmpl)return 0;try{if(s.tmpl.tag.tmpl.open.toString().indexOf("__")>=0)return 2}catch(e){}return 1}();this.renderTemplateSource=function(n,r,o,a){a=a||i,o=o||{},e();var u=n.data("precompiled");if(!u){var l=n.text()||"";l="{{ko_with $item.koBindingContext}}"+l+"{{/ko_with}}",u=s.template(null,l),n.data("precompiled",u)}var c=t(u,[r.$data],s.extend({koBindingContext:r},o.templateOptions));return c.appendTo(a.createElement("div")),s.fragments={},c},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,t){i.write("<script type='text/html' id='"+e+"'>"+t+"<\/script>")},n>0&&(s.tmpl.tag.ko_code={open:"__.push($1 || '');"},s.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},m.jqueryTmplTemplateEngine.prototype=new m.templateEngine,m.jqueryTmplTemplateEngine.prototype.constructor=m.jqueryTmplTemplateEngine;var e=new m.jqueryTmplTemplateEngine;e.jQueryTmplVersion>0&&m.setTemplateEngine(e),m.exportSymbol("jqueryTmplTemplateEngine",m.jqueryTmplTemplateEngine)}()})}()},{}],3:[function(e,t,n){e("knockout");t.exports=function(){console.log("Conversation...")}},{knockout:2}],4:[function(e,t,n){var r=e("jquery"),i=e("./app/view/conversation");r(function(){new i})},{"./app/view/conversation":3,jquery:1}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
